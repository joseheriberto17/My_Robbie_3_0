
My_Robbie_3_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800c948  0800c948  0001c948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce30  0800ce30  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce30  0800ce30  0001ce30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce38  0800ce38  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce38  0800ce38  0001ce38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce3c  0800ce3c  0001ce3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ce40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000658  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000844  20000844  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015ca5  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ebd  00000000  00000000  00035f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014f8  00000000  00000000  00038dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000107d  00000000  00000000  0003a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023ee3  00000000  00000000  0003b33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a746  00000000  00000000  0005f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9ef8  00000000  00000000  00079966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000070d0  00000000  00000000  00153860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0015a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c930 	.word	0x0800c930

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800c930 	.word	0x0800c930

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f001 fd36 	bl	8002a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f862 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f000 fd44 	bl	8001a88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001000:	f000 fd1a 	bl	8001a38 <MX_DMA_Init>
  MX_RTC_Init();
 8001004:	f000 f9e4 	bl	80013d0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001008:	f000 fcc2 	bl	8001990 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800100c:	f000 f8b8 	bl	8001180 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001010:	f000 fa3a 	bl	8001488 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001014:	f000 fa90 	bl	8001538 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001018:	f000 fc90 	bl	800193c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800101c:	f000 fce2 	bl	80019e4 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001020:	f000 f9fc 	bl	800141c <MX_SPI2_Init>
  MX_TIM3_Init();
 8001024:	f000 fadc 	bl	80015e0 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001028:	f006 fbb0 	bl	800778c <MX_FATFS_Init>
  MX_I2C2_Init();
 800102c:	f000 f9a2 	bl	8001374 <MX_I2C2_Init>
  MX_TIM8_Init();
 8001030:	f000 fc00 	bl	8001834 <MX_TIM8_Init>
  MX_TIM4_Init();
 8001034:	f000 fb56 	bl	80016e4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001038:	f000 fbae 	bl	8001798 <MX_TIM5_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(STATUS_LED_RED_GPIO_Port, STATUS_LED_RED_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001042:	4816      	ldr	r0, [pc, #88]	; (800109c <main+0xac>)
 8001044:	f002 fe92 	bl	8003d6c <HAL_GPIO_WritePin>

  // motor de izquierda
  HAL_GPIO_WritePin(AMOT2_GPIO_Port, AMOT2_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2104      	movs	r1, #4
 800104c:	4814      	ldr	r0, [pc, #80]	; (80010a0 <main+0xb0>)
 800104e:	f002 fe8d 	bl	8003d6c <HAL_GPIO_WritePin>
  // motor de derecha
  HAL_GPIO_WritePin(BMOT2_GPIO_Port, BMOT2_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <main+0xb4>)
 800105a:	f002 fe87 	bl	8003d6c <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800105e:	2100      	movs	r1, #0
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <main+0xb8>)
 8001062:	f004 f805 	bl	8005070 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001066:	2104      	movs	r1, #4
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <main+0xb8>)
 800106a:	f004 f801 	bl	8005070 <HAL_TIM_PWM_Start>

  // un solo encoder
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800106e:	213c      	movs	r1, #60	; 0x3c
 8001070:	480e      	ldr	r0, [pc, #56]	; (80010ac <main+0xbc>)
 8001072:	f004 f96b 	bl	800534c <HAL_TIM_Encoder_Start>
  cnt1_1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <main+0xbc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	461a      	mov	r2, r3
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <main+0xc0>)
 8001080:	601a      	str	r2, [r3, #0]

  // tiempo base de 10 Hz
  HAL_TIM_Base_Start_IT(&htim5);
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <main+0xc4>)
 8001084:	f003 ff34 	bl	8004ef0 <HAL_TIM_Base_Start_IT>

  printWelcomeMessage(&huart3);
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <main+0xc8>)
 800108a:	f000 fe5f 	bl	8001d4c <printWelcomeMessage>
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)&MSG_Rx,5);
 800108e:	2205      	movs	r2, #5
 8001090:	490a      	ldr	r1, [pc, #40]	; (80010bc <main+0xcc>)
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <main+0xc8>)
 8001094:	f005 f9f2 	bl	800647c <HAL_UART_Receive_DMA>
  while (1)
 8001098:	e7fe      	b.n	8001098 <main+0xa8>
 800109a:	bf00      	nop
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40020400 	.word	0x40020400
 80010a8:	200003ac 	.word	0x200003ac
 80010ac:	2000031c 	.word	0x2000031c
 80010b0:	200006c8 	.word	0x200006c8
 80010b4:	2000043c 	.word	0x2000043c
 80010b8:	20000554 	.word	0x20000554
 80010bc:	20000658 	.word	0x20000658

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 fbeb 	bl	80088aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <SystemClock_Config+0xb8>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a22      	ldr	r2, [pc, #136]	; (8001178 <SystemClock_Config+0xb8>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <SystemClock_Config+0xb8>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <SystemClock_Config+0xbc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a1c      	ldr	r2, [pc, #112]	; (800117c <SystemClock_Config+0xbc>)
 800110a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <SystemClock_Config+0xbc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800111c:	230a      	movs	r3, #10
 800111e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	2301      	movs	r3, #1
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001124:	2310      	movs	r3, #16
 8001126:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800112c:	2300      	movs	r3, #0
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4618      	mov	r0, r3
 8001136:	f002 ff91 	bl	800405c <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001140:	f000 fef8 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f003 f9f4 	bl	800454c <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800116a:	f000 fee3 	bl	8001f34 <Error_Handler>
  }
}
 800116e:	bf00      	nop
 8001170:	3750      	adds	r7, #80	; 0x50
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001192:	4b75      	ldr	r3, [pc, #468]	; (8001368 <MX_ADC1_Init+0x1e8>)
 8001194:	4a75      	ldr	r2, [pc, #468]	; (800136c <MX_ADC1_Init+0x1ec>)
 8001196:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001198:	4b73      	ldr	r3, [pc, #460]	; (8001368 <MX_ADC1_Init+0x1e8>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800119e:	4b72      	ldr	r3, [pc, #456]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011a4:	4b70      	ldr	r3, [pc, #448]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011aa:	4b6f      	ldr	r3, [pc, #444]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b0:	4b6d      	ldr	r3, [pc, #436]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b8:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011be:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011c0:	4a6b      	ldr	r2, [pc, #428]	; (8001370 <MX_ADC1_Init+0x1f0>)
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b68      	ldr	r3, [pc, #416]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011cc:	220d      	movs	r2, #13
 80011ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d0:	4b65      	ldr	r3, [pc, #404]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d8:	4b63      	ldr	r3, [pc, #396]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011da:	2201      	movs	r2, #1
 80011dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011de:	4862      	ldr	r0, [pc, #392]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80011e0:	f001 fcb2 	bl	8002b48 <HAL_ADC_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fea3 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011f6:	2301      	movs	r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	485a      	ldr	r0, [pc, #360]	; (8001368 <MX_ADC1_Init+0x1e8>)
 8001200:	f001 fce6 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800120a:	f000 fe93 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800120e:	2301      	movs	r3, #1
 8001210:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001212:	2302      	movs	r3, #2
 8001214:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	4619      	mov	r1, r3
 800121a:	4853      	ldr	r0, [pc, #332]	; (8001368 <MX_ADC1_Init+0x1e8>)
 800121c:	f001 fcd8 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001226:	f000 fe85 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800122a:	2305      	movs	r3, #5
 800122c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800122e:	2303      	movs	r3, #3
 8001230:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	484c      	ldr	r0, [pc, #304]	; (8001368 <MX_ADC1_Init+0x1e8>)
 8001238:	f001 fcca 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001242:	f000 fe77 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001246:	2306      	movs	r3, #6
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800124a:	2304      	movs	r3, #4
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4845      	ldr	r0, [pc, #276]	; (8001368 <MX_ADC1_Init+0x1e8>)
 8001254:	f001 fcbc 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800125e:	f000 fe69 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001262:	2307      	movs	r3, #7
 8001264:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001266:	2305      	movs	r3, #5
 8001268:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	4619      	mov	r1, r3
 800126e:	483e      	ldr	r0, [pc, #248]	; (8001368 <MX_ADC1_Init+0x1e8>)
 8001270:	f001 fcae 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800127a:	f000 fe5b 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800127e:	2308      	movs	r3, #8
 8001280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001282:	2306      	movs	r3, #6
 8001284:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4837      	ldr	r0, [pc, #220]	; (8001368 <MX_ADC1_Init+0x1e8>)
 800128c:	f001 fca0 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001296:	f000 fe4d 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800129a:	2309      	movs	r3, #9
 800129c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800129e:	2307      	movs	r3, #7
 80012a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4830      	ldr	r0, [pc, #192]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80012a8:	f001 fc92 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80012b2:	f000 fe3f 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012b6:	230a      	movs	r3, #10
 80012b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80012ba:	2308      	movs	r3, #8
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4829      	ldr	r0, [pc, #164]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80012c4:	f001 fc84 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012ce:	f000 fe31 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012d2:	230b      	movs	r3, #11
 80012d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80012d6:	2309      	movs	r3, #9
 80012d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4822      	ldr	r0, [pc, #136]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80012e0:	f001 fc76 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80012ea:	f000 fe23 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012ee:	230c      	movs	r3, #12
 80012f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80012f2:	230a      	movs	r3, #10
 80012f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4619      	mov	r1, r3
 80012fa:	481b      	ldr	r0, [pc, #108]	; (8001368 <MX_ADC1_Init+0x1e8>)
 80012fc:	f001 fc68 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8001306:	f000 fe15 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800130a:	230d      	movs	r3, #13
 800130c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800130e:	230b      	movs	r3, #11
 8001310:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4814      	ldr	r0, [pc, #80]	; (8001368 <MX_ADC1_Init+0x1e8>)
 8001318:	f001 fc5a 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 8001322:	f000 fe07 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001326:	230e      	movs	r3, #14
 8001328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800132a:	230c      	movs	r3, #12
 800132c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	4619      	mov	r1, r3
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_ADC1_Init+0x1e8>)
 8001334:	f001 fc4c 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 800133e:	f000 fdf9 	bl	8001f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001342:	230f      	movs	r3, #15
 8001344:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001346:	230d      	movs	r3, #13
 8001348:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_ADC1_Init+0x1e8>)
 8001350:	f001 fc3e 	bl	8002bd0 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 800135a:	f000 fdeb 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000208 	.word	0x20000208
 800136c:	40012000 	.word	0x40012000
 8001370:	0f000001 	.word	0x0f000001

08001374 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C2_Init+0x50>)
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <MX_I2C2_Init+0x54>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_I2C2_Init+0x50>)
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_I2C2_Init+0x58>)
 8001382:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_I2C2_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_I2C2_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_I2C2_Init+0x50>)
 8001392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001396:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013b2:	f002 fd0f 	bl	8003dd4 <HAL_I2C_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013bc:	f000 fdba 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000250 	.word	0x20000250
 80013c8:	40005800 	.word	0x40005800
 80013cc:	000186a0 	.word	0x000186a0

080013d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_RTC_Init+0x44>)
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <MX_RTC_Init+0x48>)
 80013d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_RTC_Init+0x44>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_RTC_Init+0x44>)
 80013e2:	227f      	movs	r2, #127	; 0x7f
 80013e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_RTC_Init+0x44>)
 80013e8:	22ff      	movs	r2, #255	; 0xff
 80013ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_RTC_Init+0x44>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_RTC_Init+0x44>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_RTC_Init+0x44>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_RTC_Init+0x44>)
 8001400:	f003 fba4 	bl	8004b4c <HAL_RTC_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800140a:	f000 fd93 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002a4 	.word	0x200002a4
 8001418:	40002800 	.word	0x40002800

0800141c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_SPI2_Init+0x64>)
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <MX_SPI2_Init+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_SPI2_Init+0x64>)
 8001428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800142c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_SPI2_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_SPI2_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_SPI2_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_SPI2_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_SPI2_Init+0x64>)
 8001448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_SPI2_Init+0x64>)
 8001450:	2210      	movs	r2, #16
 8001452:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_SPI2_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_SPI2_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <MX_SPI2_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_SPI2_Init+0x64>)
 8001468:	220a      	movs	r2, #10
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_SPI2_Init+0x64>)
 800146e:	f003 fc67 	bl	8004d40 <HAL_SPI_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001478:	f000 fd5c 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200002c4 	.word	0x200002c4
 8001484:	40003800 	.word	0x40003800

08001488 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2224      	movs	r2, #36	; 0x24
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f007 fa07 	bl	80088aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_TIM1_Init+0xa8>)
 80014a6:	4a23      	ldr	r2, [pc, #140]	; (8001534 <MX_TIM1_Init+0xac>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MX_TIM1_Init+0xa8>)
 80014ac:	2203      	movs	r2, #3
 80014ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_TIM1_Init+0xa8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_TIM1_Init+0xa8>)
 80014b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_TIM1_Init+0xa8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_TIM1_Init+0xa8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_TIM1_Init+0xa8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014d0:	2303      	movs	r3, #3
 80014d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d8:	2301      	movs	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e8:	2301      	movs	r3, #1
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4619      	mov	r1, r3
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <MX_TIM1_Init+0xa8>)
 80014fc:	f003 fe80 	bl	8005200 <HAL_TIM_Encoder_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001506:	f000 fd15 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_TIM1_Init+0xa8>)
 8001518:	f004 fd70 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001522:	f000 fd07 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	3730      	adds	r7, #48	; 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000031c 	.word	0x2000031c
 8001534:	40010000 	.word	0x40010000

08001538 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f007 f9af 	bl	80088aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <MX_TIM2_Init+0xa4>)
 8001556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_TIM2_Init+0xa4>)
 800155e:	2201      	movs	r2, #1
 8001560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_TIM2_Init+0xa4>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_TIM2_Init+0xa4>)
 800156a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_TIM2_Init+0xa4>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM2_Init+0xa4>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800157c:	2303      	movs	r3, #3
 800157e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001584:	2301      	movs	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001594:	2301      	movs	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <MX_TIM2_Init+0xa4>)
 80015a8:	f003 fe2a 	bl	8005200 <HAL_TIM_Encoder_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015b2:	f000 fcbf 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_TIM2_Init+0xa4>)
 80015c4:	f004 fd1a 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015ce:	f000 fcb1 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000364 	.word	0x20000364

080015e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08e      	sub	sp, #56	; 0x38
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]
 800160e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001610:	4b32      	ldr	r3, [pc, #200]	; (80016dc <MX_TIM3_Init+0xfc>)
 8001612:	4a33      	ldr	r2, [pc, #204]	; (80016e0 <MX_TIM3_Init+0x100>)
 8001614:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <MX_TIM3_Init+0xfc>)
 8001618:	220f      	movs	r2, #15
 800161a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <MX_TIM3_Init+0xfc>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <MX_TIM3_Init+0xfc>)
 8001624:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001628:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <MX_TIM3_Init+0xfc>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <MX_TIM3_Init+0xfc>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001636:	4829      	ldr	r0, [pc, #164]	; (80016dc <MX_TIM3_Init+0xfc>)
 8001638:	f003 fc0b 	bl	8004e52 <HAL_TIM_Base_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001642:	f000 fc77 	bl	8001f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800164c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001650:	4619      	mov	r1, r3
 8001652:	4822      	ldr	r0, [pc, #136]	; (80016dc <MX_TIM3_Init+0xfc>)
 8001654:	f004 f8d2 	bl	80057fc <HAL_TIM_ConfigClockSource>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800165e:	f000 fc69 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001662:	481e      	ldr	r0, [pc, #120]	; (80016dc <MX_TIM3_Init+0xfc>)
 8001664:	f003 fcb4 	bl	8004fd0 <HAL_TIM_PWM_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800166e:	f000 fc61 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	4619      	mov	r1, r3
 8001680:	4816      	ldr	r0, [pc, #88]	; (80016dc <MX_TIM3_Init+0xfc>)
 8001682:	f004 fcbb 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800168c:	f000 fc52 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001690:	2360      	movs	r3, #96	; 0x60
 8001692:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <MX_TIM3_Init+0xfc>)
 80016a8:	f003 ffe6 	bl	8005678 <HAL_TIM_PWM_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016b2:	f000 fc3f 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2204      	movs	r2, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <MX_TIM3_Init+0xfc>)
 80016be:	f003 ffdb 	bl	8005678 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80016c8:	f000 fc34 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <MX_TIM3_Init+0xfc>)
 80016ce:	f000 feaf 	bl	8002430 <HAL_TIM_MspPostInit>

}
 80016d2:	bf00      	nop
 80016d4:	3738      	adds	r7, #56	; 0x38
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200003ac 	.word	0x200003ac
 80016e0:	40000400 	.word	0x40000400

080016e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <MX_TIM4_Init+0xac>)
 8001708:	4a22      	ldr	r2, [pc, #136]	; (8001794 <MX_TIM4_Init+0xb0>)
 800170a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <MX_TIM4_Init+0xac>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <MX_TIM4_Init+0xac>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MX_TIM4_Init+0xac>)
 800171a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <MX_TIM4_Init+0xac>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_TIM4_Init+0xac>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <MX_TIM4_Init+0xac>)
 800172e:	f003 fc4f 	bl	8004fd0 <HAL_TIM_PWM_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001738:	f000 fbfc 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4619      	mov	r1, r3
 800174a:	4811      	ldr	r0, [pc, #68]	; (8001790 <MX_TIM4_Init+0xac>)
 800174c:	f004 fc56 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001756:	f000 fbed 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175a:	2360      	movs	r3, #96	; 0x60
 800175c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	220c      	movs	r2, #12
 800176e:	4619      	mov	r1, r3
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <MX_TIM4_Init+0xac>)
 8001772:	f003 ff81 	bl	8005678 <HAL_TIM_PWM_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800177c:	f000 fbda 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <MX_TIM4_Init+0xac>)
 8001782:	f000 fe55 	bl	8002430 <HAL_TIM_MspPostInit>

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200003f4 	.word	0x200003f4
 8001794:	40000800 	.word	0x40000800

08001798 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	463b      	mov	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <MX_TIM5_Init+0x94>)
 80017b6:	4a1e      	ldr	r2, [pc, #120]	; (8001830 <MX_TIM5_Init+0x98>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1599;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_TIM5_Init+0x94>)
 80017bc:	f240 623f 	movw	r2, #1599	; 0x63f
 80017c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_TIM5_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <MX_TIM5_Init+0x94>)
 80017ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_TIM5_Init+0x94>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_TIM5_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017dc:	4813      	ldr	r0, [pc, #76]	; (800182c <MX_TIM5_Init+0x94>)
 80017de:	f003 fb38 	bl	8004e52 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80017e8:	f000 fba4 	bl	8001f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_TIM5_Init+0x94>)
 80017fa:	f003 ffff 	bl	80057fc <HAL_TIM_ConfigClockSource>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001804:	f000 fb96 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_TIM5_Init+0x94>)
 8001816:	f004 fbf1 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001820:	f000 fb88 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000043c 	.word	0x2000043c
 8001830:	40000c00 	.word	0x40000c00

08001834 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b092      	sub	sp, #72	; 0x48
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2220      	movs	r2, #32
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f007 f823 	bl	80088aa <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <MX_TIM8_Init+0x100>)
 8001866:	4a34      	ldr	r2, [pc, #208]	; (8001938 <MX_TIM8_Init+0x104>)
 8001868:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <MX_TIM8_Init+0x100>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <MX_TIM8_Init+0x100>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5333;
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <MX_TIM8_Init+0x100>)
 8001878:	f241 42d5 	movw	r2, #5333	; 0x14d5
 800187c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <MX_TIM8_Init+0x100>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <MX_TIM8_Init+0x100>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <MX_TIM8_Init+0x100>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001890:	4828      	ldr	r0, [pc, #160]	; (8001934 <MX_TIM8_Init+0x100>)
 8001892:	f003 fb9d 	bl	8004fd0 <HAL_TIM_PWM_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800189c:	f000 fb4a 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ac:	4619      	mov	r1, r3
 80018ae:	4821      	ldr	r0, [pc, #132]	; (8001934 <MX_TIM8_Init+0x100>)
 80018b0:	f004 fba4 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80018ba:	f000 fb3b 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018be:	2360      	movs	r3, #96	; 0x60
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	2204      	movs	r2, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4814      	ldr	r0, [pc, #80]	; (8001934 <MX_TIM8_Init+0x100>)
 80018e4:	f003 fec8 	bl	8005678 <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80018ee:	f000 fb21 	bl	8001f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	4807      	ldr	r0, [pc, #28]	; (8001934 <MX_TIM8_Init+0x100>)
 8001916:	f004 fbed 	bl	80060f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8001920:	f000 fb08 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <MX_TIM8_Init+0x100>)
 8001926:	f000 fd83 	bl	8002430 <HAL_TIM_MspPostInit>

}
 800192a:	bf00      	nop
 800192c:	3748      	adds	r7, #72	; 0x48
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000484 	.word	0x20000484
 8001938:	40010400 	.word	0x40010400

0800193c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_USART1_UART_Init+0x50>)
 8001944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001974:	f004 fc24 	bl	80061c0 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800197e:	f000 fad9 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200004cc 	.word	0x200004cc
 800198c:	40011000 	.word	0x40011000

08001990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <MX_USART2_UART_Init+0x50>)
 8001998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_USART2_UART_Init+0x4c>)
 80019c8:	f004 fbfa 	bl	80061c0 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019d2:	f000 faaf 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000510 	.word	0x20000510
 80019e0:	40004400 	.word	0x40004400

080019e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_USART3_UART_Init+0x4c>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <MX_USART3_UART_Init+0x50>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <MX_USART3_UART_Init+0x4c>)
 80019f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_USART3_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_USART3_UART_Init+0x4c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_USART3_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_USART3_UART_Init+0x4c>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_USART3_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_USART3_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_USART3_UART_Init+0x4c>)
 8001a1c:	f004 fbd0 	bl	80061c0 <HAL_UART_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a26:	f000 fa85 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000554 	.word	0x20000554
 8001a34:	40004800 	.word	0x40004800

08001a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_DMA_Init+0x4c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <MX_DMA_Init+0x4c>)
 8001a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <MX_DMA_Init+0x4c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	200c      	movs	r0, #12
 8001a60:	f001 fbaf 	bl	80031c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a64:	200c      	movs	r0, #12
 8001a66:	f001 fbc8 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	200e      	movs	r0, #14
 8001a70:	f001 fba7 	bl	80031c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a74:	200e      	movs	r0, #14
 8001a76:	f001 fbc0 	bl	80031fa <HAL_NVIC_EnableIRQ>

}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a60      	ldr	r2, [pc, #384]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b5a      	ldr	r3, [pc, #360]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a59      	ldr	r2, [pc, #356]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b50      	ldr	r3, [pc, #320]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a4b      	ldr	r2, [pc, #300]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <MX_GPIO_Init+0x1a0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|SD_CS_Pin|STATUS_LED_RED_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 5105 	mov.w	r1, #8512	; 0x2140
 8001b30:	483e      	ldr	r0, [pc, #248]	; (8001c2c <MX_GPIO_Init+0x1a4>)
 8001b32:	f002 f91b 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIGHTS_Pin|CE_RF_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f641 0110 	movw	r1, #6160	; 0x1810
 8001b3c:	483c      	ldr	r0, [pc, #240]	; (8001c30 <MX_GPIO_Init+0x1a8>)
 8001b3e:	f002 f915 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_SENS_Pin|BMOT2_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8001b48:	483a      	ldr	r0, [pc, #232]	; (8001c34 <MX_GPIO_Init+0x1ac>)
 8001b4a:	f002 f90f 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMOT2_GPIO_Port, AMOT2_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2104      	movs	r1, #4
 8001b52:	4839      	ldr	r0, [pc, #228]	; (8001c38 <MX_GPIO_Init+0x1b0>)
 8001b54:	f002 f90a 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 SD_CS_Pin STATUS_LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|SD_CS_Pin|STATUS_LED_RED_Pin;
 8001b58:	f44f 5305 	mov.w	r3, #8512	; 0x2140
 8001b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	482e      	ldr	r0, [pc, #184]	; (8001c2c <MX_GPIO_Init+0x1a4>)
 8001b72:	f001 ff5f 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin CE_RF_Pin */
  GPIO_InitStruct.Pin = LIGHTS_Pin|CE_RF_Pin;
 8001b76:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4828      	ldr	r0, [pc, #160]	; (8001c30 <MX_GPIO_Init+0x1a8>)
 8001b90:	f001 ff50 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001b94:	2304      	movs	r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4823      	ldr	r0, [pc, #140]	; (8001c34 <MX_GPIO_Init+0x1ac>)
 8001ba8:	f001 ff44 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_SENS_Pin BMOT2_Pin */
  GPIO_InitStruct.Pin = EN_SENS_Pin|BMOT2_Pin;
 8001bac:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	481b      	ldr	r0, [pc, #108]	; (8001c34 <MX_GPIO_Init+0x1ac>)
 8001bc6:	f001 ff35 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin;
 8001bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT1_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4813      	ldr	r0, [pc, #76]	; (8001c2c <MX_GPIO_Init+0x1a4>)
 8001be0:	f001 ff28 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_RF_Pin */
  GPIO_InitStruct.Pin = CS_RF_Pin;
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bea:	2311      	movs	r3, #17
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_GPIO_Init+0x1a8>)
 8001bfe:	f001 ff19 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMOT2_Pin */
  GPIO_InitStruct.Pin = AMOT2_Pin;
 8001c02:	2304      	movs	r3, #4
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AMOT2_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4807      	ldr	r0, [pc, #28]	; (8001c38 <MX_GPIO_Init+0x1b0>)
 8001c1a:	f001 ff0b 	bl	8003a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40020c00 	.word	0x40020c00

08001c3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	// devuelvo los 5 caractereres recibidos de DMA incluso el "\0" que se al por la tecla intro
//	sprintf(MSG_Tx,"\r\n%s",MSG_Rx);
//	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&MSG_Tx,strlen(MSG_Tx));
	if (sscanf(MSG_Rx, "%c%d", &letra, &numero) == 2) {
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_UART_RxCpltCallback+0xe0>)
 8001c46:	4a36      	ldr	r2, [pc, #216]	; (8001d20 <HAL_UART_RxCpltCallback+0xe4>)
 8001c48:	4936      	ldr	r1, [pc, #216]	; (8001d24 <HAL_UART_RxCpltCallback+0xe8>)
 8001c4a:	4837      	ldr	r0, [pc, #220]	; (8001d28 <HAL_UART_RxCpltCallback+0xec>)
 8001c4c:	f006 fdbc 	bl	80087c8 <siscanf>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d15d      	bne.n	8001d12 <HAL_UART_RxCpltCallback+0xd6>
		// determinar si es una letra w o s
		if (isalpha(letra) && (letra == 'w' || letra == 's')) {
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_UART_RxCpltCallback+0xe4>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <HAL_UART_RxCpltCallback+0xf0>)
 8001c5e:	4413      	add	r3, r2
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d053      	beq.n	8001d12 <HAL_UART_RxCpltCallback+0xd6>
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_UART_RxCpltCallback+0xe4>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b77      	cmp	r3, #119	; 0x77
 8001c70:	d003      	beq.n	8001c7a <HAL_UART_RxCpltCallback+0x3e>
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_UART_RxCpltCallback+0xe4>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b73      	cmp	r3, #115	; 0x73
 8001c78:	d14b      	bne.n	8001d12 <HAL_UART_RxCpltCallback+0xd6>
			// min: 0 and Max value period of timer 3
			if (Duty >= 0 && Duty <=__HAL_TIM_GET_AUTORELOAD(&htim3) ) {
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_UART_RxCpltCallback+0xf4>)
 8001c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db46      	blt.n	8001d12 <HAL_UART_RxCpltCallback+0xd6>
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_UART_RxCpltCallback+0xf4>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_UART_RxCpltCallback+0xf8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d83d      	bhi.n	8001d12 <HAL_UART_RxCpltCallback+0xd6>
				// confirma que si entro al modificar la vel y dir del motor
				HAL_GPIO_TogglePin(STATUS_LED_RED_GPIO_Port, STATUS_LED_RED_Pin);
 8001c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9a:	4827      	ldr	r0, [pc, #156]	; (8001d38 <HAL_UART_RxCpltCallback+0xfc>)
 8001c9c:	f002 f87f 	bl	8003d9e <HAL_GPIO_TogglePin>

				P_letra = letra;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_UART_RxCpltCallback+0xe4>)
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_UART_RxCpltCallback+0x100>)
 8001ca6:	701a      	strb	r2, [r3, #0]
				P_numero = numero;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_UART_RxCpltCallback+0xe0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <HAL_UART_RxCpltCallback+0x104>)
 8001cae:	6013      	str	r3, [r2, #0]
				Duty = (int16_t) P_numero;
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_UART_RxCpltCallback+0x104>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b21a      	sxth	r2, r3
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_UART_RxCpltCallback+0xf4>)
 8001cb8:	801a      	strh	r2, [r3, #0]

				if(letra =='w'){
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_UART_RxCpltCallback+0xe4>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b77      	cmp	r3, #119	; 0x77
 8001cc0:	d111      	bne.n	8001ce6 <HAL_UART_RxCpltCallback+0xaa>
					//dir motor de izquierda
					HAL_GPIO_WritePin(AMOT2_GPIO_Port, AMOT2_Pin, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	481f      	ldr	r0, [pc, #124]	; (8001d44 <HAL_UART_RxCpltCallback+0x108>)
 8001cc8:	f002 f850 	bl	8003d6c <HAL_GPIO_WritePin>
					//dir motor de derecha
					HAL_GPIO_WritePin(BMOT2_GPIO_Port, BMOT2_Pin, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd2:	481d      	ldr	r0, [pc, #116]	; (8001d48 <HAL_UART_RxCpltCallback+0x10c>)
 8001cd4:	f002 f84a 	bl	8003d6c <HAL_GPIO_WritePin>
					//dir motor izquierdo
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,Duty);
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_UART_RxCpltCallback+0xf4>)
 8001cda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_UART_RxCpltCallback+0xf8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
	//				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,__HAL_TIM_GET_AUTORELOAD(&htim3)+1-Duty);
				}
			}
		}
	}
}
 8001ce4:	e015      	b.n	8001d12 <HAL_UART_RxCpltCallback+0xd6>
					HAL_GPIO_WritePin(AMOT2_GPIO_Port, AMOT2_Pin, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2104      	movs	r1, #4
 8001cea:	4816      	ldr	r0, [pc, #88]	; (8001d44 <HAL_UART_RxCpltCallback+0x108>)
 8001cec:	f002 f83e 	bl	8003d6c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(BMOT2_GPIO_Port, BMOT2_Pin, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf6:	4814      	ldr	r0, [pc, #80]	; (8001d48 <HAL_UART_RxCpltCallback+0x10c>)
 8001cf8:	f002 f838 	bl	8003d6c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,__HAL_TIM_GET_AUTORELOAD(&htim3)+1-Duty);
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_UART_RxCpltCallback+0xf8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <HAL_UART_RxCpltCallback+0xf4>)
 8001d04:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d08:	1a9a      	subs	r2, r3, r2
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_UART_RxCpltCallback+0xf8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3201      	adds	r2, #1
 8001d10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200006d4 	.word	0x200006d4
 8001d20:	200006d2 	.word	0x200006d2
 8001d24:	0800c948 	.word	0x0800c948
 8001d28:	20000658 	.word	0x20000658
 8001d2c:	0800c9f0 	.word	0x0800c9f0
 8001d30:	200006d0 	.word	0x200006d0
 8001d34:	200003ac 	.word	0x200003ac
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	200006d8 	.word	0x200006d8
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40020400 	.word	0x40020400

08001d4c <printWelcomeMessage>:
void printWelcomeMessage(UART_HandleTypeDef *huart) {
 8001d4c:	b5b0      	push	{r4, r5, r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	char *strings[] = {"\033[0;0H",
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <printWelcomeMessage+0x64>)
 8001d56:	f107 0408 	add.w	r4, r7, #8
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	6023      	str	r3, [r4, #0]
			"\033[2J",
			"Bienvenidos al stm32:\r\n",
			"1) Valor del PWM:",
			PROMT};

	for (uint8_t i = 0; i < 5; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	77fb      	strb	r3, [r7, #31]
 8001d68:	e019      	b.n	8001d9e <printWelcomeMessage+0x52>
		HAL_UART_Transmit(huart, (uint8_t*)strings[i], strlen(strings[i]),1000);
 8001d6a:	7ffb      	ldrb	r3, [r7, #31]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	3320      	adds	r3, #32
 8001d70:	443b      	add	r3, r7
 8001d72:	f853 4c18 	ldr.w	r4, [r3, #-24]
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	3320      	adds	r3, #32
 8001d7c:	443b      	add	r3, r7
 8001d7e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fa74 	bl	8000270 <strlen>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d90:	4621      	mov	r1, r4
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f004 fa61 	bl	800625a <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 5; i++) {
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d9e2      	bls.n	8001d6a <printWelcomeMessage+0x1e>
	}
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	0800c990 	.word	0x0800c990

08001db4 <Convert_Pulse_To_Rpm>:
float Convert_Pulse_To_Rpm(int32_t counter, int32_t sample_time){
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
	int PPR = 7; // pulso por vuelta de rotor
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	617b      	str	r3, [r7, #20]
	int RR = 100; // relacion rotor y eje del motor
 8001dc2:	2364      	movs	r3, #100	; 0x64
 8001dc4:	613b      	str	r3, [r7, #16]

	float value = (((((float)counter/sample_time)*1000)/PPR)*60)/RR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	ee07 3a90 	vmov	s15, r3
 8001dcc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dde:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001e24 <Convert_Pulse_To_Rpm+0x70>
 8001de2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001e28 <Convert_Pulse_To_Rpm+0x74>
 8001df8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0a:	edc7 7a03 	vstr	s15, [r7, #12]
	return value;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ee07 3a90 	vmov	s15, r3
}
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	447a0000 	.word	0x447a0000
 8001e28:	42700000 	.word	0x42700000

08001e2c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e2c:	b5b0      	push	{r4, r5, r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5){
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a34      	ldr	r2, [pc, #208]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d161      	bne.n	8001f02 <HAL_TIM_PeriodElapsedCallback+0xd6>
		int32_t diff = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
		float speed_1 = 0.000;
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
		int valor = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

		cnt1_2 = __HAL_TIM_GET_COUNTER(&htim1);
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e56:	601a      	str	r2, [r3, #0]
		//estimacion de la velocidad de los pulso/segundos
		if (abs(cnt1_2 -cnt1_1) > 200) {
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bfb8      	it	lt
 8001e66:	425b      	neglt	r3, r3
 8001e68:	2bc8      	cmp	r3, #200	; 0xc8
 8001e6a:	dd0c      	ble.n	8001e86 <HAL_TIM_PeriodElapsedCallback+0x5a>
			if (cnt1_1 > cnt1_2) {
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dd02      	ble.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x52>
				valor =1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_PeriodElapsedCallback+0x5e>
			} else {
				valor =-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e001      	b.n	8001e8a <HAL_TIM_PeriodElapsedCallback+0x5e>
			}
		} else {
			valor =0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
		}

		diff =valor*(__HAL_TIM_GET_AUTORELOAD(&htim1)+1) + cnt1_2 - cnt1_1;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	3301      	adds	r3, #1
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]

		// convertir a RPM
		speed_1 = Convert_Pulse_To_Rpm(diff, 100);
 8001ea6:	2164      	movs	r1, #100	; 0x64
 8001ea8:	6938      	ldr	r0, [r7, #16]
 8001eaa:	f7ff ff83 	bl	8001db4 <Convert_Pulse_To_Rpm>
 8001eae:	ed87 0a03 	vstr	s0, [r7, #12]

		// mensaje de respuesta a 100
//		sprintf(MSG_Tx,"\r\nspeed:%.3f,Duty:%d,cnt1:%d,diff:%d,letra:%c", speed_1,(int)Duty/10,(int)cnt1_1,(int)diff,P_letra);
		sprintf(MSG_Tx,"\r\nspeed:%.3f,letra:%c,Duty:%d%%", speed_1,P_letra,(int)Duty/10);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7fe fb48 	bl	8000548 <__aeabi_f2d>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4917      	ldr	r1, [pc, #92]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001ebe:	7809      	ldrb	r1, [r1, #0]
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	4917      	ldr	r1, [pc, #92]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001ec4:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001ec8:	4816      	ldr	r0, [pc, #88]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001eca:	fb80 5001 	smull	r5, r0, r0, r1
 8001ece:	1080      	asrs	r0, r0, #2
 8001ed0:	17c9      	asrs	r1, r1, #31
 8001ed2:	1a41      	subs	r1, r0, r1
 8001ed4:	b209      	sxth	r1, r1
 8001ed6:	9101      	str	r1, [sp, #4]
 8001ed8:	9400      	str	r4, [sp, #0]
 8001eda:	4913      	ldr	r1, [pc, #76]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001edc:	4813      	ldr	r0, [pc, #76]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001ede:	f006 fc53 	bl	8008788 <siprintf>

		HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&MSG_Tx,strlen(MSG_Tx));
 8001ee2:	4812      	ldr	r0, [pc, #72]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001ee4:	f7fe f9c4 	bl	8000270 <strlen>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	490f      	ldr	r1, [pc, #60]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001ef2:	f004 fa45 	bl	8006380 <HAL_UART_Transmit_DMA>

		cnt1_1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001f00:	601a      	str	r2, [r3, #0]
	}
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40000c00 	.word	0x40000c00
 8001f10:	2000031c 	.word	0x2000031c
 8001f14:	200006cc 	.word	0x200006cc
 8001f18:	200006c8 	.word	0x200006c8
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	200006d0 	.word	0x200006d0
 8001f24:	66666667 	.word	0x66666667
 8001f28:	0800c9a4 	.word	0x0800c9a4
 8001f2c:	20000678 	.word	0x20000678
 8001f30:	20000554 	.word	0x20000554

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <Error_Handler+0x8>
	...

08001f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a31      	ldr	r2, [pc, #196]	; (8002074 <HAL_ADC_MspInit+0xe4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d15b      	bne.n	800206a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a2f      	ldr	r2, [pc, #188]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a28      	ldr	r2, [pc, #160]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a21      	ldr	r2, [pc, #132]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_ADC_MspInit+0xe8>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S11_Pin
 8002022:	233f      	movs	r3, #63	; 0x3f
 8002024:	61fb      	str	r3, [r7, #28]
                          |S4_Pin|S9_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002026:	2303      	movs	r3, #3
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	4811      	ldr	r0, [pc, #68]	; (800207c <HAL_ADC_MspInit+0xec>)
 8002036:	f001 fcfd 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|S10_Pin|S7_Pin
 800203a:	23e3      	movs	r3, #227	; 0xe3
 800203c:	61fb      	str	r3, [r7, #28]
                          |S8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <HAL_ADC_MspInit+0xf0>)
 800204e:	f001 fcf1 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S5_Pin|S6_Pin;
 8002052:	2303      	movs	r3, #3
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <HAL_ADC_MspInit+0xf4>)
 8002066:	f001 fce5 	bl	8003a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3730      	adds	r7, #48	; 0x30
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40012000 	.word	0x40012000
 8002078:	40023800 	.word	0x40023800
 800207c:	40020800 	.word	0x40020800
 8002080:	40020000 	.word	0x40020000
 8002084:	40020400 	.word	0x40020400

08002088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <HAL_I2C_MspInit+0x84>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12c      	bne.n	8002104 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <HAL_I2C_MspInit+0x88>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_I2C_MspInit+0x88>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_I2C_MspInit+0x88>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020cc:	2312      	movs	r3, #18
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020d8:	2304      	movs	r3, #4
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	480c      	ldr	r0, [pc, #48]	; (8002114 <HAL_I2C_MspInit+0x8c>)
 80020e4:	f001 fca6 	bl	8003a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_I2C_MspInit+0x88>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_I2C_MspInit+0x88>)
 80020f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_I2C_MspInit+0x88>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	; 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40005800 	.word	0x40005800
 8002110:	40023800 	.word	0x40023800
 8002114:	40020400 	.word	0x40020400

08002118 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_RTC_MspInit+0x4c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d111      	bne.n	800215c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002138:	2302      	movs	r3, #2
 800213a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800213c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002140:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	4618      	mov	r0, r3
 8002148:	f002 fc1e 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002152:	f7ff feef 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <HAL_RTC_MspInit+0x50>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800215c:	bf00      	nop
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40002800 	.word	0x40002800
 8002168:	42470e3c 	.word	0x42470e3c

0800216c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_SPI_MspInit+0x84>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d12c      	bne.n	80021e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_SPI_MspInit+0x88>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_SPI_MspInit+0x88>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_SPI_MspInit+0x88>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_SPI_MspInit+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_SPI_MspInit+0x88>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_SPI_MspInit+0x88>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021d8:	2305      	movs	r3, #5
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_SPI_MspInit+0x8c>)
 80021e4:	f001 fc26 	bl	8003a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40003800 	.word	0x40003800
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020400 	.word	0x40020400

080021fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a46      	ldr	r2, [pc, #280]	; (8002334 <HAL_TIM_Encoder_MspInit+0x138>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d135      	bne.n	800228a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a44      	ldr	r2, [pc, #272]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b42      	ldr	r3, [pc, #264]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a3d      	ldr	r2, [pc, #244]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = C1_1_Pin|C2_1_Pin;
 8002256:	f44f 7340 	mov.w	r3, #768	; 0x300
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002268:	2301      	movs	r3, #1
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	4832      	ldr	r0, [pc, #200]	; (800233c <HAL_TIM_Encoder_MspInit+0x140>)
 8002274:	f001 fbde 	bl	8003a34 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	201b      	movs	r0, #27
 800227e:	f000 ffa0 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002282:	201b      	movs	r0, #27
 8002284:	f000 ffb9 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002288:	e04f      	b.n	800232a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002292:	d14a      	bne.n	800232a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	4a26      	ldr	r2, [pc, #152]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6413      	str	r3, [r2, #64]	; 0x40
 80022a4:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6313      	str	r3, [r2, #48]	; 0x30
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	6313      	str	r3, [r2, #48]	; 0x30
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_TIM_Encoder_MspInit+0x13c>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022fa:	2301      	movs	r3, #1
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <HAL_TIM_Encoder_MspInit+0x140>)
 8002306:	f001 fb95 	bl	8003a34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800230a:	2308      	movs	r3, #8
 800230c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800231a:	2301      	movs	r3, #1
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	4619      	mov	r1, r3
 8002324:	4806      	ldr	r0, [pc, #24]	; (8002340 <HAL_TIM_Encoder_MspInit+0x144>)
 8002326:	f001 fb85 	bl	8003a34 <HAL_GPIO_Init>
}
 800232a:	bf00      	nop
 800232c:	3730      	adds	r7, #48	; 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40010000 	.word	0x40010000
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000
 8002340:	40020400 	.word	0x40020400

08002344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_TIM_Base_MspInit+0x70>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10e      	bne.n	8002374 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_TIM_Base_MspInit+0x74>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <HAL_TIM_Base_MspInit+0x74>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_TIM_Base_MspInit+0x74>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002372:	e01a      	b.n	80023aa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a10      	ldr	r2, [pc, #64]	; (80023bc <HAL_TIM_Base_MspInit+0x78>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d115      	bne.n	80023aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_TIM_Base_MspInit+0x74>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <HAL_TIM_Base_MspInit+0x74>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_TIM_Base_MspInit+0x74>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2032      	movs	r0, #50	; 0x32
 80023a0:	f000 ff0f 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023a4:	2032      	movs	r0, #50	; 0x32
 80023a6:	f000 ff28 	bl	80031fa <HAL_NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40000c00 	.word	0x40000c00

080023c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_TIM_PWM_MspInit+0x64>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_TIM_PWM_MspInit+0x68>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <HAL_TIM_PWM_MspInit+0x68>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_TIM_PWM_MspInit+0x68>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023ee:	e012      	b.n	8002416 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_TIM_PWM_MspInit+0x6c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10d      	bne.n	8002416 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_TIM_PWM_MspInit+0x68>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_TIM_PWM_MspInit+0x68>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_TIM_PWM_MspInit+0x68>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40000800 	.word	0x40000800
 8002428:	40023800 	.word	0x40023800
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a36      	ldr	r2, [pc, #216]	; (8002528 <HAL_TIM_MspPostInit+0xf8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d11e      	bne.n	8002490 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_TIM_MspPostInit+0xfc>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_TIM_MspPostInit+0xfc>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_TIM_MspPostInit+0xfc>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = AMOT1_Pin|BMOT1_Pin;
 800246e:	2330      	movs	r3, #48	; 0x30
 8002470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800247e:	2302      	movs	r3, #2
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	4619      	mov	r1, r3
 8002488:	4829      	ldr	r0, [pc, #164]	; (8002530 <HAL_TIM_MspPostInit+0x100>)
 800248a:	f001 fad3 	bl	8003a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800248e:	e047      	b.n	8002520 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_TIM_MspPostInit+0x104>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d11f      	bne.n	80024da <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_TIM_MspPostInit+0xfc>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a22      	ldr	r2, [pc, #136]	; (800252c <HAL_TIM_MspPostInit+0xfc>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_TIM_MspPostInit+0xfc>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80024b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024c8:	2302      	movs	r3, #2
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	4817      	ldr	r0, [pc, #92]	; (8002530 <HAL_TIM_MspPostInit+0x100>)
 80024d4:	f001 faae 	bl	8003a34 <HAL_GPIO_Init>
}
 80024d8:	e022      	b.n	8002520 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM8)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a16      	ldr	r2, [pc, #88]	; (8002538 <HAL_TIM_MspPostInit+0x108>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d11d      	bne.n	8002520 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_TIM_MspPostInit+0xfc>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_TIM_MspPostInit+0xfc>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6313      	str	r3, [r2, #48]	; 0x30
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_TIM_MspPostInit+0xfc>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002510:	2303      	movs	r3, #3
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	4808      	ldr	r0, [pc, #32]	; (800253c <HAL_TIM_MspPostInit+0x10c>)
 800251c:	f001 fa8a 	bl	8003a34 <HAL_GPIO_Init>
}
 8002520:	bf00      	nop
 8002522:	3728      	adds	r7, #40	; 0x28
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40000400 	.word	0x40000400
 800252c:	40023800 	.word	0x40023800
 8002530:	40020400 	.word	0x40020400
 8002534:	40000800 	.word	0x40000800
 8002538:	40010400 	.word	0x40010400
 800253c:	40020800 	.word	0x40020800

08002540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08e      	sub	sp, #56	; 0x38
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a82      	ldr	r2, [pc, #520]	; (8002768 <HAL_UART_MspInit+0x228>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d134      	bne.n	80025cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
 8002566:	4b81      	ldr	r3, [pc, #516]	; (800276c <HAL_UART_MspInit+0x22c>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	4a80      	ldr	r2, [pc, #512]	; (800276c <HAL_UART_MspInit+0x22c>)
 800256c:	f043 0310 	orr.w	r3, r3, #16
 8002570:	6453      	str	r3, [r2, #68]	; 0x44
 8002572:	4b7e      	ldr	r3, [pc, #504]	; (800276c <HAL_UART_MspInit+0x22c>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	4b7a      	ldr	r3, [pc, #488]	; (800276c <HAL_UART_MspInit+0x22c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a79      	ldr	r2, [pc, #484]	; (800276c <HAL_UART_MspInit+0x22c>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b77      	ldr	r3, [pc, #476]	; (800276c <HAL_UART_MspInit+0x22c>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800259a:	23c0      	movs	r3, #192	; 0xc0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025aa:	2307      	movs	r3, #7
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b2:	4619      	mov	r1, r3
 80025b4:	486e      	ldr	r0, [pc, #440]	; (8002770 <HAL_UART_MspInit+0x230>)
 80025b6:	f001 fa3d 	bl	8003a34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2025      	movs	r0, #37	; 0x25
 80025c0:	f000 fdff 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025c4:	2025      	movs	r0, #37	; 0x25
 80025c6:	f000 fe18 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025ca:	e0c9      	b.n	8002760 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a68      	ldr	r2, [pc, #416]	; (8002774 <HAL_UART_MspInit+0x234>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d12c      	bne.n	8002630 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	4b64      	ldr	r3, [pc, #400]	; (800276c <HAL_UART_MspInit+0x22c>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a63      	ldr	r2, [pc, #396]	; (800276c <HAL_UART_MspInit+0x22c>)
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_UART_MspInit+0x22c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	4b5d      	ldr	r3, [pc, #372]	; (800276c <HAL_UART_MspInit+0x22c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a5c      	ldr	r2, [pc, #368]	; (800276c <HAL_UART_MspInit+0x22c>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b5a      	ldr	r3, [pc, #360]	; (800276c <HAL_UART_MspInit+0x22c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800260e:	230c      	movs	r3, #12
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261a:	2303      	movs	r3, #3
 800261c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800261e:	2307      	movs	r3, #7
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002626:	4619      	mov	r1, r3
 8002628:	4853      	ldr	r0, [pc, #332]	; (8002778 <HAL_UART_MspInit+0x238>)
 800262a:	f001 fa03 	bl	8003a34 <HAL_GPIO_Init>
}
 800262e:	e097      	b.n	8002760 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a51      	ldr	r2, [pc, #324]	; (800277c <HAL_UART_MspInit+0x23c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	f040 8092 	bne.w	8002760 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART3_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	4b4a      	ldr	r3, [pc, #296]	; (800276c <HAL_UART_MspInit+0x22c>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	4a49      	ldr	r2, [pc, #292]	; (800276c <HAL_UART_MspInit+0x22c>)
 8002646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264a:	6413      	str	r3, [r2, #64]	; 0x40
 800264c:	4b47      	ldr	r3, [pc, #284]	; (800276c <HAL_UART_MspInit+0x22c>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	4b43      	ldr	r3, [pc, #268]	; (800276c <HAL_UART_MspInit+0x22c>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	4a42      	ldr	r2, [pc, #264]	; (800276c <HAL_UART_MspInit+0x22c>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6313      	str	r3, [r2, #48]	; 0x30
 8002668:	4b40      	ldr	r3, [pc, #256]	; (800276c <HAL_UART_MspInit+0x22c>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002674:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002686:	2307      	movs	r3, #7
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268e:	4619      	mov	r1, r3
 8002690:	483b      	ldr	r0, [pc, #236]	; (8002780 <HAL_UART_MspInit+0x240>)
 8002692:	f001 f9cf 	bl	8003a34 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002696:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_UART_MspInit+0x244>)
 8002698:	4a3b      	ldr	r2, [pc, #236]	; (8002788 <HAL_UART_MspInit+0x248>)
 800269a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_UART_MspInit+0x244>)
 800269e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a4:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80026c4:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d2:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026d8:	482a      	ldr	r0, [pc, #168]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026da:	f000 fda9 	bl	8003230 <HAL_DMA_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80026e4:	f7ff fc26 	bl	8001f34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a26      	ldr	r2, [pc, #152]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38
 80026ee:	4a25      	ldr	r2, [pc, #148]	; (8002784 <HAL_UART_MspInit+0x244>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_UART_MspInit+0x24c>)
 80026f6:	4a26      	ldr	r2, [pc, #152]	; (8002790 <HAL_UART_MspInit+0x250>)
 80026f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_UART_MspInit+0x24c>)
 80026fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002700:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_UART_MspInit+0x24c>)
 8002704:	2240      	movs	r2, #64	; 0x40
 8002706:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_UART_MspInit+0x24c>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800270e:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_UART_MspInit+0x24c>)
 8002710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002714:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_UART_MspInit+0x24c>)
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_UART_MspInit+0x24c>)
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_UART_MspInit+0x24c>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_UART_MspInit+0x24c>)
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_UART_MspInit+0x24c>)
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002734:	4815      	ldr	r0, [pc, #84]	; (800278c <HAL_UART_MspInit+0x24c>)
 8002736:	f000 fd7b 	bl	8003230 <HAL_DMA_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_UART_MspInit+0x204>
      Error_Handler();
 8002740:	f7ff fbf8 	bl	8001f34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_UART_MspInit+0x24c>)
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_UART_MspInit+0x24c>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2027      	movs	r0, #39	; 0x27
 8002756:	f000 fd34 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800275a:	2027      	movs	r0, #39	; 0x27
 800275c:	f000 fd4d 	bl	80031fa <HAL_NVIC_EnableIRQ>
}
 8002760:	bf00      	nop
 8002762:	3738      	adds	r7, #56	; 0x38
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40011000 	.word	0x40011000
 800276c:	40023800 	.word	0x40023800
 8002770:	40020400 	.word	0x40020400
 8002774:	40004400 	.word	0x40004400
 8002778:	40020000 	.word	0x40020000
 800277c:	40004800 	.word	0x40004800
 8002780:	40020800 	.word	0x40020800
 8002784:	20000598 	.word	0x20000598
 8002788:	40026028 	.word	0x40026028
 800278c:	200005f8 	.word	0x200005f8
 8002790:	40026058 	.word	0x40026058

08002794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <NMI_Handler+0x4>

0800279a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <HardFault_Handler+0x4>

080027a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <MemManage_Handler+0x4>

080027a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <BusFault_Handler+0x4>

080027ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <UsageFault_Handler+0x4>

080027b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e0:	f000 f992 	bl	8002b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <DMA1_Stream1_IRQHandler+0x10>)
 80027ee:	f000 feb7 	bl	8003560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000598 	.word	0x20000598

080027fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <DMA1_Stream3_IRQHandler+0x10>)
 8002802:	f000 fead 	bl	8003560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200005f8 	.word	0x200005f8

08002810 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <TIM1_CC_IRQHandler+0x10>)
 8002816:	f002 fe27 	bl	8005468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000031c 	.word	0x2000031c

08002824 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <USART1_IRQHandler+0x10>)
 800282a:	f003 fe57 	bl	80064dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200004cc 	.word	0x200004cc

08002838 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <USART3_IRQHandler+0x10>)
 800283e:	f003 fe4d 	bl	80064dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000554 	.word	0x20000554

0800284c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <TIM5_IRQHandler+0x10>)
 8002852:	f002 fe09 	bl	8005468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000043c 	.word	0x2000043c

08002860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return 1;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_kill>:

int _kill(int pid, int sig)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800287a:	f006 f869 	bl	8008950 <__errno>
 800287e:	4603      	mov	r3, r0
 8002880:	2216      	movs	r2, #22
 8002882:	601a      	str	r2, [r3, #0]
  return -1;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_exit>:

void _exit (int status)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ffe7 	bl	8002870 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028a2:	e7fe      	b.n	80028a2 <_exit+0x12>

080028a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	e00a      	b.n	80028cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028b6:	f3af 8000 	nop.w
 80028ba:	4601      	mov	r1, r0
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	60ba      	str	r2, [r7, #8]
 80028c2:	b2ca      	uxtb	r2, r1
 80028c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3301      	adds	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	dbf0      	blt.n	80028b6 <_read+0x12>
  }

  return len;
 80028d4:	687b      	ldr	r3, [r7, #4]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e009      	b.n	8002904 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	60ba      	str	r2, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	3301      	adds	r3, #1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	dbf1      	blt.n	80028f0 <_write+0x12>
  }
  return len;
 800290c:	687b      	ldr	r3, [r7, #4]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_close>:

int _close(int file)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800293e:	605a      	str	r2, [r3, #4]
  return 0;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <_isatty>:

int _isatty(int file)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002988:	4a14      	ldr	r2, [pc, #80]	; (80029dc <_sbrk+0x5c>)
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <_sbrk+0x60>)
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002994:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <_sbrk+0x64>)
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <_sbrk+0x68>)
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <_sbrk+0x64>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d207      	bcs.n	80029c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b0:	f005 ffce 	bl	8008950 <__errno>
 80029b4:	4603      	mov	r3, r0
 80029b6:	220c      	movs	r2, #12
 80029b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	e009      	b.n	80029d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <_sbrk+0x64>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <_sbrk+0x64>)
 80029d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20020000 	.word	0x20020000
 80029e0:	00000400 	.word	0x00000400
 80029e4:	200006dc 	.word	0x200006dc
 80029e8:	20000848 	.word	0x20000848

080029ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <SystemInit+0x20>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <SystemInit+0x20>)
 80029f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a14:	480d      	ldr	r0, [pc, #52]	; (8002a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a16:	490e      	ldr	r1, [pc, #56]	; (8002a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a1c:	e002      	b.n	8002a24 <LoopCopyDataInit>

08002a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a22:	3304      	adds	r3, #4

08002a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a28:	d3f9      	bcc.n	8002a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2a:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a2c:	4c0b      	ldr	r4, [pc, #44]	; (8002a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a30:	e001      	b.n	8002a36 <LoopFillZerobss>

08002a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a34:	3204      	adds	r2, #4

08002a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a38:	d3fb      	bcc.n	8002a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a3a:	f7ff ffd7 	bl	80029ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a3e:	f005 ff8d 	bl	800895c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a42:	f7fe fad5 	bl	8000ff0 <main>
  bx  lr    
 8002a46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a50:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002a54:	0800ce40 	.word	0x0800ce40
  ldr r2, =_sbss
 8002a58:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002a5c:	20000844 	.word	0x20000844

08002a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC_IRQHandler>
	...

08002a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HAL_Init+0x40>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <HAL_Init+0x40>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_Init+0x40>)
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_Init+0x40>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 fb8d 	bl	80031ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 f808 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a98:	f7ff fa52 	bl	8001f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_InitTick+0x54>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x58>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fba5 	bl	8003216 <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d80a      	bhi.n	8002af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002adc:	2200      	movs	r2, #0
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f000 fb6d 	bl	80031c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae8:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <HAL_InitTick+0x5c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000004 	.word	0x20000004
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	20000008 	.word	0x20000008

08002b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_IncTick+0x20>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_IncTick+0x24>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_IncTick+0x24>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	2000000c 	.word	0x2000000c
 8002b2c:	200006e0 	.word	0x200006e0

08002b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_GetTick+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	200006e0 	.word	0x200006e0

08002b48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e033      	b.n	8002bc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fa12 	bl	8001f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d118      	bne.n	8002bb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b8e:	f023 0302 	bic.w	r3, r3, #2
 8002b92:	f043 0202 	orr.w	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f93a 	bl	8002e14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb6:	e001      	b.n	8002bbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1c>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e105      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x228>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b09      	cmp	r3, #9
 8002bfa:	d925      	bls.n	8002c48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68d9      	ldr	r1, [r3, #12]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b1e      	subs	r3, #30
 8002c12:	2207      	movs	r2, #7
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	400a      	ands	r2, r1
 8002c20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68d9      	ldr	r1, [r3, #12]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	4603      	mov	r3, r0
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4403      	add	r3, r0
 8002c3a:	3b1e      	subs	r3, #30
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	e022      	b.n	8002c8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6919      	ldr	r1, [r3, #16]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	400a      	ands	r2, r1
 8002c6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6919      	ldr	r1, [r3, #16]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4403      	add	r3, r0
 8002c84:	409a      	lsls	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d824      	bhi.n	8002ce0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3b05      	subs	r3, #5
 8002ca8:	221f      	movs	r2, #31
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b05      	subs	r3, #5
 8002cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cde:	e04c      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d824      	bhi.n	8002d32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b23      	subs	r3, #35	; 0x23
 8002cfa:	221f      	movs	r2, #31
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43da      	mvns	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	400a      	ands	r2, r1
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	3b23      	subs	r3, #35	; 0x23
 8002d24:	fa00 f203 	lsl.w	r2, r0, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d30:	e023      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	3b41      	subs	r3, #65	; 0x41
 8002d44:	221f      	movs	r2, #31
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	400a      	ands	r2, r1
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4618      	mov	r0, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b41      	subs	r3, #65	; 0x41
 8002d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_ADC_ConfigChannel+0x234>)
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a21      	ldr	r2, [pc, #132]	; (8002e08 <HAL_ADC_ConfigChannel+0x238>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d109      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1cc>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b12      	cmp	r3, #18
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_ADC_ConfigChannel+0x238>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d123      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x21e>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d003      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x1e6>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b11      	cmp	r3, #17
 8002db4:	d11b      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d111      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_ADC_ConfigChannel+0x23c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_ADC_ConfigChannel+0x240>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	0c9a      	lsrs	r2, r3, #18
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002de0:	e002      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40012300 	.word	0x40012300
 8002e08:	40012000 	.word	0x40012000
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	431bde83 	.word	0x431bde83

08002e14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e1c:	4b79      	ldr	r3, [pc, #484]	; (8003004 <ADC_Init+0x1f0>)
 8002e1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	021a      	lsls	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6899      	ldr	r1, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	4a58      	ldr	r2, [pc, #352]	; (8003008 <ADC_Init+0x1f4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	e00f      	b.n	8002f12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0202 	bic.w	r2, r2, #2
 8002f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7e1b      	ldrb	r3, [r3, #24]
 8002f2c:	005a      	lsls	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01b      	beq.n	8002f78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6859      	ldr	r1, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	035a      	lsls	r2, r3, #13
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	e007      	b.n	8002f88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	051a      	lsls	r2, r3, #20
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6899      	ldr	r1, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fca:	025a      	lsls	r2, r3, #9
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6899      	ldr	r1, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	029a      	lsls	r2, r3, #10
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	40012300 	.word	0x40012300
 8003008:	0f000001 	.word	0x0f000001

0800300c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <__NVIC_GetPriorityGrouping+0x18>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 0307 	and.w	r3, r3, #7
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db0b      	blt.n	800309a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4907      	ldr	r1, [pc, #28]	; (80030a8 <__NVIC_EnableIRQ+0x38>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2001      	movs	r0, #1
 8003092:	fa00 f202 	lsl.w	r2, r0, r2
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100

080030ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db0a      	blt.n	80030d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <__NVIC_SetPriority+0x4c>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	440b      	add	r3, r1
 80030d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d4:	e00a      	b.n	80030ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <__NVIC_SetPriority+0x50>)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3b04      	subs	r3, #4
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	761a      	strb	r2, [r3, #24]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e100 	.word	0xe000e100
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf28      	it	cs
 800311e:	2304      	movcs	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3304      	adds	r3, #4
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <NVIC_EncodePriority+0x30>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3b03      	subs	r3, #3
 800312e:	e000      	b.n	8003132 <NVIC_EncodePriority+0x32>
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43d9      	mvns	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	4313      	orrs	r3, r2
         );
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003178:	d301      	bcc.n	800317e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317a:	2301      	movs	r3, #1
 800317c:	e00f      	b.n	800319e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <SysTick_Config+0x40>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003186:	210f      	movs	r1, #15
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	f7ff ff8e 	bl	80030ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <SysTick_Config+0x40>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <SysTick_Config+0x40>)
 8003198:	2207      	movs	r2, #7
 800319a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	e000e010 	.word	0xe000e010

080031ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ff29 	bl	800300c <__NVIC_SetPriorityGrouping>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d4:	f7ff ff3e 	bl	8003054 <__NVIC_GetPriorityGrouping>
 80031d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f7ff ff8e 	bl	8003100 <NVIC_EncodePriority>
 80031e4:	4602      	mov	r2, r0
 80031e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff5d 	bl	80030ac <__NVIC_SetPriority>
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff31 	bl	8003070 <__NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ffa2 	bl	8003168 <SysTick_Config>
 8003224:	4603      	mov	r3, r0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800323c:	f7ff fc78 	bl	8002b30 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e099      	b.n	8003380 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326c:	e00f      	b.n	800328e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800326e:	f7ff fc5f 	bl	8002b30 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b05      	cmp	r3, #5
 800327a:	d908      	bls.n	800328e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2203      	movs	r2, #3
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e078      	b.n	8003380 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e8      	bne.n	800326e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_DMA_Init+0x158>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d107      	bne.n	80032f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	4313      	orrs	r3, r2
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0307 	bic.w	r3, r3, #7
 800330e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b04      	cmp	r3, #4
 8003320:	d117      	bne.n	8003352 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00e      	beq.n	8003352 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fb01 	bl	800393c <DMA_CheckFifoParam>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2240      	movs	r2, #64	; 0x40
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800334e:	2301      	movs	r3, #1
 8003350:	e016      	b.n	8003380 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fab8 	bl	80038d0 <DMA_CalcBaseAndBitshift>
 8003360:	4603      	mov	r3, r0
 8003362:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	223f      	movs	r2, #63	; 0x3f
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	f010803f 	.word	0xf010803f

0800338c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_DMA_Start_IT+0x26>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e040      	b.n	8003434 <HAL_DMA_Start_IT+0xa8>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d12f      	bne.n	8003426 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fa4a 	bl	8003874 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	223f      	movs	r2, #63	; 0x3f
 80033e6:	409a      	lsls	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0216 	orr.w	r2, r2, #22
 80033fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0208 	orr.w	r2, r2, #8
 8003412:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e005      	b.n	8003432 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003432:	7dfb      	ldrb	r3, [r7, #23]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800344a:	f7ff fb71 	bl	8002b30 <HAL_GetTick>
 800344e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d008      	beq.n	800346e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e052      	b.n	8003514 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0216 	bic.w	r2, r2, #22
 800347c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_DMA_Abort+0x62>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0208 	bic.w	r2, r2, #8
 80034ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034be:	e013      	b.n	80034e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c0:	f7ff fb36 	bl	8002b30 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d90c      	bls.n	80034e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2203      	movs	r2, #3
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e015      	b.n	8003514 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e4      	bne.n	80034c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	223f      	movs	r2, #63	; 0x3f
 80034fc:	409a      	lsls	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d004      	beq.n	800353a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e00c      	b.n	8003554 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2205      	movs	r2, #5
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800356c:	4b8e      	ldr	r3, [pc, #568]	; (80037a8 <HAL_DMA_IRQHandler+0x248>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a8e      	ldr	r2, [pc, #568]	; (80037ac <HAL_DMA_IRQHandler+0x24c>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0a9b      	lsrs	r3, r3, #10
 8003578:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	2208      	movs	r2, #8
 800358c:	409a      	lsls	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01a      	beq.n	80035cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0204 	bic.w	r2, r2, #4
 80035b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	2208      	movs	r2, #8
 80035ba:	409a      	lsls	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	2201      	movs	r2, #1
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d012      	beq.n	8003602 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	2201      	movs	r2, #1
 80035f0:	409a      	lsls	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	f043 0202 	orr.w	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	2204      	movs	r2, #4
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00b      	beq.n	8003638 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	2204      	movs	r2, #4
 8003626:	409a      	lsls	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f043 0204 	orr.w	r2, r3, #4
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	2210      	movs	r2, #16
 800363e:	409a      	lsls	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d043      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d03c      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	2210      	movs	r2, #16
 800365c:	409a      	lsls	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d024      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
 800368e:	e01f      	b.n	80036d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
 80036a0:	e016      	b.n	80036d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0208 	bic.w	r2, r2, #8
 80036be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2220      	movs	r2, #32
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 808f 	beq.w	8003800 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8087 	beq.w	8003800 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	2220      	movs	r2, #32
 80036f8:	409a      	lsls	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b05      	cmp	r3, #5
 8003708:	d136      	bne.n	8003778 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0216 	bic.w	r2, r2, #22
 8003718:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003728:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <HAL_DMA_IRQHandler+0x1da>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0208 	bic.w	r2, r2, #8
 8003748:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374e:	223f      	movs	r2, #63	; 0x3f
 8003750:	409a      	lsls	r2, r3
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	2b00      	cmp	r3, #0
 800376c:	d07e      	beq.n	800386c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
        }
        return;
 8003776:	e079      	b.n	800386c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01d      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10d      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	2b00      	cmp	r3, #0
 800379a:	d031      	beq.n	8003800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e02c      	b.n	8003800 <HAL_DMA_IRQHandler+0x2a0>
 80037a6:	bf00      	nop
 80037a8:	20000004 	.word	0x20000004
 80037ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d023      	beq.n	8003800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
 80037c0:	e01e      	b.n	8003800 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10f      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0210 	bic.w	r2, r2, #16
 80037de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	2b00      	cmp	r3, #0
 8003806:	d032      	beq.n	800386e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d022      	beq.n	800385a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2205      	movs	r2, #5
 8003818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	3301      	adds	r3, #1
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	d307      	bcc.n	8003848 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f2      	bne.n	800382c <HAL_DMA_IRQHandler+0x2cc>
 8003846:	e000      	b.n	800384a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003848:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
 800386a:	e000      	b.n	800386e <HAL_DMA_IRQHandler+0x30e>
        return;
 800386c:	bf00      	nop
    }
  }
}
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003890:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d108      	bne.n	80038b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038b2:	e007      	b.n	80038c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	60da      	str	r2, [r3, #12]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	3b10      	subs	r3, #16
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <DMA_CalcBaseAndBitshift+0x64>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <DMA_CalcBaseAndBitshift+0x68>)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d909      	bls.n	8003912 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	1d1a      	adds	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	659a      	str	r2, [r3, #88]	; 0x58
 8003910:	e007      	b.n	8003922 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	aaaaaaab 	.word	0xaaaaaaab
 8003938:	0800c9e8 	.word	0x0800c9e8

0800393c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d11f      	bne.n	8003996 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d856      	bhi.n	8003a0a <DMA_CheckFifoParam+0xce>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <DMA_CheckFifoParam+0x28>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003975 	.word	0x08003975
 8003968:	08003987 	.word	0x08003987
 800396c:	08003975 	.word	0x08003975
 8003970:	08003a0b 	.word	0x08003a0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d046      	beq.n	8003a0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003984:	e043      	b.n	8003a0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800398e:	d140      	bne.n	8003a12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003994:	e03d      	b.n	8003a12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399e:	d121      	bne.n	80039e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d837      	bhi.n	8003a16 <DMA_CheckFifoParam+0xda>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <DMA_CheckFifoParam+0x70>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039c3 	.word	0x080039c3
 80039b4:	080039bd 	.word	0x080039bd
 80039b8:	080039d5 	.word	0x080039d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      break;
 80039c0:	e030      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d025      	beq.n	8003a1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d2:	e022      	b.n	8003a1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039dc:	d11f      	bne.n	8003a1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039e2:	e01c      	b.n	8003a1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d903      	bls.n	80039f2 <DMA_CheckFifoParam+0xb6>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d003      	beq.n	80039f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039f0:	e018      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      break;
 80039f6:	e015      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00e      	beq.n	8003a22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      break;
 8003a08:	e00b      	b.n	8003a22 <DMA_CheckFifoParam+0xe6>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e00a      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e008      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a12:	bf00      	nop
 8003a14:	e006      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a16:	bf00      	nop
 8003a18:	e004      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e002      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a1e:	bf00      	nop
 8003a20:	e000      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a22:	bf00      	nop
    }
  } 
  
  return status; 
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	; 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	e16b      	b.n	8003d28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a50:	2201      	movs	r2, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	f040 815a 	bne.w	8003d22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d005      	beq.n	8003a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d130      	bne.n	8003ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	2203      	movs	r2, #3
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003abc:	2201      	movs	r2, #1
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f003 0201 	and.w	r2, r3, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d017      	beq.n	8003b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d123      	bne.n	8003b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	08da      	lsrs	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3208      	adds	r2, #8
 8003b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	220f      	movs	r2, #15
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	08da      	lsrs	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3208      	adds	r2, #8
 8003b72:	69b9      	ldr	r1, [r7, #24]
 8003b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2203      	movs	r2, #3
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0203 	and.w	r2, r3, #3
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80b4 	beq.w	8003d22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	4b60      	ldr	r3, [pc, #384]	; (8003d40 <HAL_GPIO_Init+0x30c>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	4a5f      	ldr	r2, [pc, #380]	; (8003d40 <HAL_GPIO_Init+0x30c>)
 8003bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bca:	4b5d      	ldr	r3, [pc, #372]	; (8003d40 <HAL_GPIO_Init+0x30c>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bd6:	4a5b      	ldr	r2, [pc, #364]	; (8003d44 <HAL_GPIO_Init+0x310>)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	089b      	lsrs	r3, r3, #2
 8003bdc:	3302      	adds	r3, #2
 8003bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	220f      	movs	r2, #15
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a52      	ldr	r2, [pc, #328]	; (8003d48 <HAL_GPIO_Init+0x314>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02b      	beq.n	8003c5a <HAL_GPIO_Init+0x226>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <HAL_GPIO_Init+0x318>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d025      	beq.n	8003c56 <HAL_GPIO_Init+0x222>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a50      	ldr	r2, [pc, #320]	; (8003d50 <HAL_GPIO_Init+0x31c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01f      	beq.n	8003c52 <HAL_GPIO_Init+0x21e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4f      	ldr	r2, [pc, #316]	; (8003d54 <HAL_GPIO_Init+0x320>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d019      	beq.n	8003c4e <HAL_GPIO_Init+0x21a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4e      	ldr	r2, [pc, #312]	; (8003d58 <HAL_GPIO_Init+0x324>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_GPIO_Init+0x216>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4d      	ldr	r2, [pc, #308]	; (8003d5c <HAL_GPIO_Init+0x328>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00d      	beq.n	8003c46 <HAL_GPIO_Init+0x212>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4c      	ldr	r2, [pc, #304]	; (8003d60 <HAL_GPIO_Init+0x32c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <HAL_GPIO_Init+0x20e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4b      	ldr	r2, [pc, #300]	; (8003d64 <HAL_GPIO_Init+0x330>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_GPIO_Init+0x20a>
 8003c3a:	2307      	movs	r3, #7
 8003c3c:	e00e      	b.n	8003c5c <HAL_GPIO_Init+0x228>
 8003c3e:	2308      	movs	r3, #8
 8003c40:	e00c      	b.n	8003c5c <HAL_GPIO_Init+0x228>
 8003c42:	2306      	movs	r3, #6
 8003c44:	e00a      	b.n	8003c5c <HAL_GPIO_Init+0x228>
 8003c46:	2305      	movs	r3, #5
 8003c48:	e008      	b.n	8003c5c <HAL_GPIO_Init+0x228>
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	e006      	b.n	8003c5c <HAL_GPIO_Init+0x228>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e004      	b.n	8003c5c <HAL_GPIO_Init+0x228>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e002      	b.n	8003c5c <HAL_GPIO_Init+0x228>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_GPIO_Init+0x228>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f002 0203 	and.w	r2, r2, #3
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	4093      	lsls	r3, r2
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c6c:	4935      	ldr	r1, [pc, #212]	; (8003d44 <HAL_GPIO_Init+0x310>)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	089b      	lsrs	r3, r3, #2
 8003c72:	3302      	adds	r3, #2
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9e:	4a32      	ldr	r2, [pc, #200]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca4:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc8:	4a27      	ldr	r2, [pc, #156]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cce:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cf2:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d1c:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	f67f ae90 	bls.w	8003a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40013800 	.word	0x40013800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40020400 	.word	0x40020400
 8003d50:	40020800 	.word	0x40020800
 8003d54:	40020c00 	.word	0x40020c00
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40021400 	.word	0x40021400
 8003d60:	40021800 	.word	0x40021800
 8003d64:	40021c00 	.word	0x40021c00
 8003d68:	40013c00 	.word	0x40013c00

08003d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d7c:	787b      	ldrb	r3, [r7, #1]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d88:	e003      	b.n	8003d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	041a      	lsls	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	619a      	str	r2, [r3, #24]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003db0:	887a      	ldrh	r2, [r7, #2]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4013      	ands	r3, r2
 8003db6:	041a      	lsls	r2, r3, #16
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43d9      	mvns	r1, r3
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e12b      	b.n	800403e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe f944 	bl	8002088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e38:	f000 fd7e 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8003e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4a81      	ldr	r2, [pc, #516]	; (8004048 <HAL_I2C_Init+0x274>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d807      	bhi.n	8003e58 <HAL_I2C_Init+0x84>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a80      	ldr	r2, [pc, #512]	; (800404c <HAL_I2C_Init+0x278>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	bf94      	ite	ls
 8003e50:	2301      	movls	r3, #1
 8003e52:	2300      	movhi	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e006      	b.n	8003e66 <HAL_I2C_Init+0x92>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a7d      	ldr	r2, [pc, #500]	; (8004050 <HAL_I2C_Init+0x27c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	bf94      	ite	ls
 8003e60:	2301      	movls	r3, #1
 8003e62:	2300      	movhi	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e0e7      	b.n	800403e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a78      	ldr	r2, [pc, #480]	; (8004054 <HAL_I2C_Init+0x280>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	0c9b      	lsrs	r3, r3, #18
 8003e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a6a      	ldr	r2, [pc, #424]	; (8004048 <HAL_I2C_Init+0x274>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d802      	bhi.n	8003ea8 <HAL_I2C_Init+0xd4>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	e009      	b.n	8003ebc <HAL_I2C_Init+0xe8>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	4a69      	ldr	r2, [pc, #420]	; (8004058 <HAL_I2C_Init+0x284>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	099b      	lsrs	r3, r3, #6
 8003eba:	3301      	adds	r3, #1
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ece:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	495c      	ldr	r1, [pc, #368]	; (8004048 <HAL_I2C_Init+0x274>)
 8003ed8:	428b      	cmp	r3, r1
 8003eda:	d819      	bhi.n	8003f10 <HAL_I2C_Init+0x13c>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1e59      	subs	r1, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eea:	1c59      	adds	r1, r3, #1
 8003eec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ef0:	400b      	ands	r3, r1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_I2C_Init+0x138>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1e59      	subs	r1, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f04:	3301      	adds	r3, #1
 8003f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0a:	e051      	b.n	8003fb0 <HAL_I2C_Init+0x1dc>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	e04f      	b.n	8003fb0 <HAL_I2C_Init+0x1dc>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d111      	bne.n	8003f3c <HAL_I2C_Init+0x168>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1e58      	subs	r0, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	440b      	add	r3, r1
 8003f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e012      	b.n	8003f62 <HAL_I2C_Init+0x18e>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e58      	subs	r0, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	0099      	lsls	r1, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Init+0x196>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e022      	b.n	8003fb0 <HAL_I2C_Init+0x1dc>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10e      	bne.n	8003f90 <HAL_I2C_Init+0x1bc>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1e58      	subs	r0, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	440b      	add	r3, r1
 8003f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f84:	3301      	adds	r3, #1
 8003f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8e:	e00f      	b.n	8003fb0 <HAL_I2C_Init+0x1dc>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e58      	subs	r0, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	0099      	lsls	r1, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	6809      	ldr	r1, [r1, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6911      	ldr	r1, [r2, #16]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68d2      	ldr	r2, [r2, #12]
 8003fea:	4311      	orrs	r1, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	000186a0 	.word	0x000186a0
 800404c:	001e847f 	.word	0x001e847f
 8004050:	003d08ff 	.word	0x003d08ff
 8004054:	431bde83 	.word	0x431bde83
 8004058:	10624dd3 	.word	0x10624dd3

0800405c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e267      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d075      	beq.n	8004166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800407a:	4b88      	ldr	r3, [pc, #544]	; (800429c <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b04      	cmp	r3, #4
 8004084:	d00c      	beq.n	80040a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004086:	4b85      	ldr	r3, [pc, #532]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800408e:	2b08      	cmp	r3, #8
 8004090:	d112      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004092:	4b82      	ldr	r3, [pc, #520]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409e:	d10b      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	4b7e      	ldr	r3, [pc, #504]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05b      	beq.n	8004164 <HAL_RCC_OscConfig+0x108>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d157      	bne.n	8004164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e242      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d106      	bne.n	80040d0 <HAL_RCC_OscConfig+0x74>
 80040c2:	4b76      	ldr	r3, [pc, #472]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a75      	ldr	r2, [pc, #468]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e01d      	b.n	800410c <HAL_RCC_OscConfig+0xb0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x98>
 80040da:	4b70      	ldr	r3, [pc, #448]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6f      	ldr	r2, [pc, #444]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b6d      	ldr	r3, [pc, #436]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6c      	ldr	r2, [pc, #432]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0xb0>
 80040f4:	4b69      	ldr	r3, [pc, #420]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a68      	ldr	r2, [pc, #416]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b66      	ldr	r3, [pc, #408]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a65      	ldr	r2, [pc, #404]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fe fd0c 	bl	8002b30 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800411c:	f7fe fd08 	bl	8002b30 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e207      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b5b      	ldr	r3, [pc, #364]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0xc0>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fe fcf8 	bl	8002b30 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004144:	f7fe fcf4 	bl	8002b30 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1f3      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	4b51      	ldr	r3, [pc, #324]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0xe8>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d063      	beq.n	800423a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004172:	4b4a      	ldr	r3, [pc, #296]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417e:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004186:	2b08      	cmp	r3, #8
 8004188:	d11c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418a:	4b44      	ldr	r3, [pc, #272]	; (800429c <HAL_RCC_OscConfig+0x240>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d116      	bne.n	80041c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	4b41      	ldr	r3, [pc, #260]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_RCC_OscConfig+0x152>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e1c7      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	4b3b      	ldr	r3, [pc, #236]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4937      	ldr	r1, [pc, #220]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	e03a      	b.n	800423a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041cc:	4b34      	ldr	r3, [pc, #208]	; (80042a0 <HAL_RCC_OscConfig+0x244>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fe fcad 	bl	8002b30 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041da:	f7fe fca9 	bl	8002b30 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e1a8      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	4b2b      	ldr	r3, [pc, #172]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b28      	ldr	r3, [pc, #160]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4925      	ldr	r1, [pc, #148]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	e015      	b.n	800423a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420e:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <HAL_RCC_OscConfig+0x244>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe fc8c 	bl	8002b30 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421c:	f7fe fc88 	bl	8002b30 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e187      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d036      	beq.n	80042b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d016      	beq.n	800427c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_RCC_OscConfig+0x248>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fe fc6c 	bl	8002b30 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425c:	f7fe fc68 	bl	8002b30 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e167      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x200>
 800427a:	e01b      	b.n	80042b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_OscConfig+0x248>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004282:	f7fe fc55 	bl	8002b30 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	e00e      	b.n	80042a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428a:	f7fe fc51 	bl	8002b30 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d907      	bls.n	80042a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e150      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
 800429c:	40023800 	.word	0x40023800
 80042a0:	42470000 	.word	0x42470000
 80042a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	4b88      	ldr	r3, [pc, #544]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ea      	bne.n	800428a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8097 	beq.w	80043f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c2:	2300      	movs	r3, #0
 80042c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c6:	4b81      	ldr	r3, [pc, #516]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	4b7d      	ldr	r3, [pc, #500]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4a7c      	ldr	r2, [pc, #496]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6413      	str	r3, [r2, #64]	; 0x40
 80042e2:	4b7a      	ldr	r3, [pc, #488]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f2:	4b77      	ldr	r3, [pc, #476]	; (80044d0 <HAL_RCC_OscConfig+0x474>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d118      	bne.n	8004330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042fe:	4b74      	ldr	r3, [pc, #464]	; (80044d0 <HAL_RCC_OscConfig+0x474>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a73      	ldr	r2, [pc, #460]	; (80044d0 <HAL_RCC_OscConfig+0x474>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430a:	f7fe fc11 	bl	8002b30 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004312:	f7fe fc0d 	bl	8002b30 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e10c      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	4b6a      	ldr	r3, [pc, #424]	; (80044d0 <HAL_RCC_OscConfig+0x474>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <HAL_RCC_OscConfig+0x2ea>
 8004338:	4b64      	ldr	r3, [pc, #400]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4a63      	ldr	r2, [pc, #396]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
 8004344:	e01c      	b.n	8004380 <HAL_RCC_OscConfig+0x324>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b05      	cmp	r3, #5
 800434c:	d10c      	bne.n	8004368 <HAL_RCC_OscConfig+0x30c>
 800434e:	4b5f      	ldr	r3, [pc, #380]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4a5e      	ldr	r2, [pc, #376]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004354:	f043 0304 	orr.w	r3, r3, #4
 8004358:	6713      	str	r3, [r2, #112]	; 0x70
 800435a:	4b5c      	ldr	r3, [pc, #368]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a5b      	ldr	r2, [pc, #364]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	e00b      	b.n	8004380 <HAL_RCC_OscConfig+0x324>
 8004368:	4b58      	ldr	r3, [pc, #352]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	4a57      	ldr	r2, [pc, #348]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	6713      	str	r3, [r2, #112]	; 0x70
 8004374:	4b55      	ldr	r3, [pc, #340]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a54      	ldr	r2, [pc, #336]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800437a:	f023 0304 	bic.w	r3, r3, #4
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d015      	beq.n	80043b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004388:	f7fe fbd2 	bl	8002b30 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004390:	f7fe fbce 	bl	8002b30 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e0cb      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a6:	4b49      	ldr	r3, [pc, #292]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ee      	beq.n	8004390 <HAL_RCC_OscConfig+0x334>
 80043b2:	e014      	b.n	80043de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b4:	f7fe fbbc 	bl	8002b30 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043bc:	f7fe fbb8 	bl	8002b30 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e0b5      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d2:	4b3e      	ldr	r3, [pc, #248]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1ee      	bne.n	80043bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e4:	4b39      	ldr	r3, [pc, #228]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	4a38      	ldr	r2, [pc, #224]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80a1 	beq.w	800453c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043fa:	4b34      	ldr	r3, [pc, #208]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b08      	cmp	r3, #8
 8004404:	d05c      	beq.n	80044c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d141      	bne.n	8004492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <HAL_RCC_OscConfig+0x478>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fe fb8c 	bl	8002b30 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7fe fb88 	bl	8002b30 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e087      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	4b27      	ldr	r3, [pc, #156]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	019b      	lsls	r3, r3, #6
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	3b01      	subs	r3, #1
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	061b      	lsls	r3, r3, #24
 800445e:	491b      	ldr	r1, [pc, #108]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_RCC_OscConfig+0x478>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446a:	f7fe fb61 	bl	8002b30 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004472:	f7fe fb5d 	bl	8002b30 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e05c      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x416>
 8004490:	e054      	b.n	800453c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <HAL_RCC_OscConfig+0x478>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe fb4a 	bl	8002b30 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fe fb46 	bl	8002b30 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e045      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x444>
 80044be:	e03d      	b.n	800453c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e038      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000
 80044d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x4ec>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d028      	beq.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d121      	bne.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d11a      	bne.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800450e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	3b01      	subs	r3, #1
 8004522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d107      	bne.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023800 	.word	0x40023800

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0cc      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004560:	4b68      	ldr	r3, [pc, #416]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d90c      	bls.n	8004588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b65      	ldr	r3, [pc, #404]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b63      	ldr	r3, [pc, #396]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0b8      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d020      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045a0:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4a58      	ldr	r2, [pc, #352]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b8:	4b53      	ldr	r3, [pc, #332]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a52      	ldr	r2, [pc, #328]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c4:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	494d      	ldr	r1, [pc, #308]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d044      	beq.n	800466c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d119      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e07f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d003      	beq.n	800460a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004606:	2b03      	cmp	r3, #3
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460a:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e06f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e067      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4934      	ldr	r1, [pc, #208]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800463c:	f7fe fa78 	bl	8002b30 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	e00a      	b.n	800465a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004644:	f7fe fa74 	bl	8002b30 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e04f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 020c 	and.w	r2, r3, #12
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	429a      	cmp	r2, r3
 800466a:	d1eb      	bne.n	8004644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d20c      	bcs.n	8004694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e032      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a0:	4b19      	ldr	r3, [pc, #100]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4916      	ldr	r1, [pc, #88]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	490e      	ldr	r1, [pc, #56]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046d2:	f000 f821 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80046d6:	4602      	mov	r2, r0
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	490a      	ldr	r1, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x1c0>)
 80046e4:	5ccb      	ldrb	r3, [r1, r3]
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe f9d8 	bl	8002aa8 <HAL_InitTick>

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023c00 	.word	0x40023c00
 8004708:	40023800 	.word	0x40023800
 800470c:	0800c9d0 	.word	0x0800c9d0
 8004710:	20000004 	.word	0x20000004
 8004714:	20000008 	.word	0x20000008

08004718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800471c:	b094      	sub	sp, #80	; 0x50
 800471e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	647b      	str	r3, [r7, #68]	; 0x44
 8004724:	2300      	movs	r3, #0
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	2300      	movs	r3, #0
 800472a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004730:	4b79      	ldr	r3, [pc, #484]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b08      	cmp	r3, #8
 800473a:	d00d      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x40>
 800473c:	2b08      	cmp	r3, #8
 800473e:	f200 80e1 	bhi.w	8004904 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x34>
 8004746:	2b04      	cmp	r3, #4
 8004748:	d003      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x3a>
 800474a:	e0db      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800474c:	4b73      	ldr	r3, [pc, #460]	; (800491c <HAL_RCC_GetSysClockFreq+0x204>)
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004750:	e0db      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004752:	4b72      	ldr	r3, [pc, #456]	; (800491c <HAL_RCC_GetSysClockFreq+0x204>)
 8004754:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004756:	e0d8      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004758:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004762:	4b6d      	ldr	r3, [pc, #436]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d063      	beq.n	8004836 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800476e:	4b6a      	ldr	r3, [pc, #424]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	2200      	movs	r2, #0
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
 8004778:	63fa      	str	r2, [r7, #60]	; 0x3c
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004780:	633b      	str	r3, [r7, #48]	; 0x30
 8004782:	2300      	movs	r3, #0
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
 8004786:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800478a:	4622      	mov	r2, r4
 800478c:	462b      	mov	r3, r5
 800478e:	f04f 0000 	mov.w	r0, #0
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	0159      	lsls	r1, r3, #5
 8004798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800479c:	0150      	lsls	r0, r2, #5
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4621      	mov	r1, r4
 80047a4:	1a51      	subs	r1, r2, r1
 80047a6:	6139      	str	r1, [r7, #16]
 80047a8:	4629      	mov	r1, r5
 80047aa:	eb63 0301 	sbc.w	r3, r3, r1
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047bc:	4659      	mov	r1, fp
 80047be:	018b      	lsls	r3, r1, #6
 80047c0:	4651      	mov	r1, sl
 80047c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047c6:	4651      	mov	r1, sl
 80047c8:	018a      	lsls	r2, r1, #6
 80047ca:	4651      	mov	r1, sl
 80047cc:	ebb2 0801 	subs.w	r8, r2, r1
 80047d0:	4659      	mov	r1, fp
 80047d2:	eb63 0901 	sbc.w	r9, r3, r1
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ea:	4690      	mov	r8, r2
 80047ec:	4699      	mov	r9, r3
 80047ee:	4623      	mov	r3, r4
 80047f0:	eb18 0303 	adds.w	r3, r8, r3
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	462b      	mov	r3, r5
 80047f8:	eb49 0303 	adc.w	r3, r9, r3
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800480a:	4629      	mov	r1, r5
 800480c:	028b      	lsls	r3, r1, #10
 800480e:	4621      	mov	r1, r4
 8004810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004814:	4621      	mov	r1, r4
 8004816:	028a      	lsls	r2, r1, #10
 8004818:	4610      	mov	r0, r2
 800481a:	4619      	mov	r1, r3
 800481c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800481e:	2200      	movs	r2, #0
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
 8004822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004828:	f7fc fa2e 	bl	8000c88 <__aeabi_uldivmod>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4613      	mov	r3, r2
 8004832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004834:	e058      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004836:	4b38      	ldr	r3, [pc, #224]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	099b      	lsrs	r3, r3, #6
 800483c:	2200      	movs	r2, #0
 800483e:	4618      	mov	r0, r3
 8004840:	4611      	mov	r1, r2
 8004842:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004846:	623b      	str	r3, [r7, #32]
 8004848:	2300      	movs	r3, #0
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
 800484c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004850:	4642      	mov	r2, r8
 8004852:	464b      	mov	r3, r9
 8004854:	f04f 0000 	mov.w	r0, #0
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	0159      	lsls	r1, r3, #5
 800485e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004862:	0150      	lsls	r0, r2, #5
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4641      	mov	r1, r8
 800486a:	ebb2 0a01 	subs.w	sl, r2, r1
 800486e:	4649      	mov	r1, r9
 8004870:	eb63 0b01 	sbc.w	fp, r3, r1
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004888:	ebb2 040a 	subs.w	r4, r2, sl
 800488c:	eb63 050b 	sbc.w	r5, r3, fp
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	00eb      	lsls	r3, r5, #3
 800489a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800489e:	00e2      	lsls	r2, r4, #3
 80048a0:	4614      	mov	r4, r2
 80048a2:	461d      	mov	r5, r3
 80048a4:	4643      	mov	r3, r8
 80048a6:	18e3      	adds	r3, r4, r3
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	464b      	mov	r3, r9
 80048ac:	eb45 0303 	adc.w	r3, r5, r3
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048be:	4629      	mov	r1, r5
 80048c0:	028b      	lsls	r3, r1, #10
 80048c2:	4621      	mov	r1, r4
 80048c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048c8:	4621      	mov	r1, r4
 80048ca:	028a      	lsls	r2, r1, #10
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d2:	2200      	movs	r2, #0
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	61fa      	str	r2, [r7, #28]
 80048d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048dc:	f7fc f9d4 	bl	8000c88 <__aeabi_uldivmod>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4613      	mov	r3, r2
 80048e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	0c1b      	lsrs	r3, r3, #16
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	3301      	adds	r3, #1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004902:	e002      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_RCC_GetSysClockFreq+0x204>)
 8004906:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800490a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800490c:	4618      	mov	r0, r3
 800490e:	3750      	adds	r7, #80	; 0x50
 8004910:	46bd      	mov	sp, r7
 8004912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800
 800491c:	00f42400 	.word	0x00f42400

08004920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_RCC_GetHCLKFreq+0x14>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000004 	.word	0x20000004

08004938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800493c:	f7ff fff0 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	0a9b      	lsrs	r3, r3, #10
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4903      	ldr	r1, [pc, #12]	; (800495c <HAL_RCC_GetPCLK1Freq+0x24>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40023800 	.word	0x40023800
 800495c:	0800c9e0 	.word	0x0800c9e0

08004960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004964:	f7ff ffdc 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0b5b      	lsrs	r3, r3, #13
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	0800c9e0 	.word	0x0800c9e0

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d035      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049b0:	4b62      	ldr	r3, [pc, #392]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049b6:	f7fe f8bb 	bl	8002b30 <HAL_GetTick>
 80049ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049be:	f7fe f8b7 	bl	8002b30 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0b0      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d0:	4b5b      	ldr	r3, [pc, #364]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	019a      	lsls	r2, r3, #6
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	071b      	lsls	r3, r3, #28
 80049e8:	4955      	ldr	r1, [pc, #340]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049f0:	4b52      	ldr	r3, [pc, #328]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049f6:	f7fe f89b 	bl	8002b30 <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049fe:	f7fe f897 	bl	8002b30 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e090      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a10:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8083 	beq.w	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	4b44      	ldr	r3, [pc, #272]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	4a43      	ldr	r2, [pc, #268]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3a:	4b41      	ldr	r3, [pc, #260]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3e      	ldr	r2, [pc, #248]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a52:	f7fe f86d 	bl	8002b30 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a58:	e008      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a5a:	f7fe f869 	bl	8002b30 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e062      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a6c:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a78:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02f      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d028      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a96:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa0:	4b29      	ldr	r3, [pc, #164]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aa6:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004aac:	4a24      	ldr	r2, [pc, #144]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d114      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004abe:	f7fe f837 	bl	8002b30 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fe f833 	bl	8002b30 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e02a      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ee      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af4:	d10d      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004af6:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0a:	490d      	ldr	r1, [pc, #52]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	608b      	str	r3, [r1, #8]
 8004b10:	e005      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b1c:	6093      	str	r3, [r2, #8]
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2a:	4905      	ldr	r1, [pc, #20]	; (8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	42470068 	.word	0x42470068
 8004b40:	40023800 	.word	0x40023800
 8004b44:	40007000 	.word	0x40007000
 8004b48:	42470e40 	.word	0x42470e40

08004b4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e066      	b.n	8004c30 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	7f5b      	ldrb	r3, [r3, #29]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fd fad0 	bl	8002118 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	22ca      	movs	r2, #202	; 0xca
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2253      	movs	r2, #83	; 0x53
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f87a 	bl	8004c88 <RTC_EnterInitMode>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d12c      	bne.n	8004bf8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6899      	ldr	r1, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68d2      	ldr	r2, [r2, #12]
 8004bd8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6919      	ldr	r1, [r3, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	041a      	lsls	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f881 	bl	8004cf6 <RTC_ExitInitMode>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d113      	bne.n	8004c26 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	22ff      	movs	r2, #255	; 0xff
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c52:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c54:	f7fd ff6c 	bl	8002b30 <HAL_GetTick>
 8004c58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c5a:	e009      	b.n	8004c70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c5c:	f7fd ff68 	bl	8002b30 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c6a:	d901      	bls.n	8004c70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e007      	b.n	8004c80 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ee      	beq.n	8004c5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d122      	bne.n	8004cec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb6:	f7fd ff3b 	bl	8002b30 <HAL_GetTick>
 8004cba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004cbc:	e00c      	b.n	8004cd8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cbe:	f7fd ff37 	bl	8002b30 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ccc:	d904      	bls.n	8004cd8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <RTC_EnterInitMode+0x64>
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d1e8      	bne.n	8004cbe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d10:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff ff89 	bl	8004c38 <HAL_RTC_WaitForSynchro>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e07b      	b.n	8004e4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d108      	bne.n	8004d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d62:	d009      	beq.n	8004d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]
 8004d6a:	e005      	b.n	8004d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fd f9ea 	bl	800216c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfc:	ea42 0103 	orr.w	r1, r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	f003 0104 	and.w	r1, r3, #4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	f003 0210 	and.w	r2, r3, #16
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e041      	b.n	8004ee8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fd fa63 	bl	8002344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 fda3 	bl	80059dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d001      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e04e      	b.n	8004fa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a23      	ldr	r2, [pc, #140]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d022      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x80>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f32:	d01d      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x80>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d018      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x80>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <HAL_TIM_Base_Start_IT+0xcc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d013      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x80>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1c      	ldr	r2, [pc, #112]	; (8004fc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00e      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x80>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d009      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x80>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x80>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <HAL_TIM_Base_Start_IT+0xdc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d111      	bne.n	8004f94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d010      	beq.n	8004fa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	e007      	b.n	8004fa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40010400 	.word	0x40010400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40001800 	.word	0x40001800

08004fd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e041      	b.n	8005066 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fd f9e2 	bl	80023c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 fce4 	bl	80059dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d109      	bne.n	8005094 <HAL_TIM_PWM_Start+0x24>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	bf14      	ite	ne
 800508c:	2301      	movne	r3, #1
 800508e:	2300      	moveq	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e022      	b.n	80050da <HAL_TIM_PWM_Start+0x6a>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b04      	cmp	r3, #4
 8005098:	d109      	bne.n	80050ae <HAL_TIM_PWM_Start+0x3e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	bf14      	ite	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	2300      	moveq	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	e015      	b.n	80050da <HAL_TIM_PWM_Start+0x6a>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d109      	bne.n	80050c8 <HAL_TIM_PWM_Start+0x58>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	bf14      	ite	ne
 80050c0:	2301      	movne	r3, #1
 80050c2:	2300      	moveq	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	e008      	b.n	80050da <HAL_TIM_PWM_Start+0x6a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e07c      	b.n	80051dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_PWM_Start+0x82>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f0:	e013      	b.n	800511a <HAL_TIM_PWM_Start+0xaa>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_PWM_Start+0x92>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005100:	e00b      	b.n	800511a <HAL_TIM_PWM_Start+0xaa>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d104      	bne.n	8005112 <HAL_TIM_PWM_Start+0xa2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005110:	e003      	b.n	800511a <HAL_TIM_PWM_Start+0xaa>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2201      	movs	r2, #1
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 ff44 	bl	8005fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2d      	ldr	r2, [pc, #180]	; (80051e4 <HAL_TIM_PWM_Start+0x174>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_TIM_PWM_Start+0xcc>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2c      	ldr	r2, [pc, #176]	; (80051e8 <HAL_TIM_PWM_Start+0x178>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_TIM_PWM_Start+0xd0>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_TIM_PWM_Start+0xd2>
 8005140:	2300      	movs	r3, #0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d007      	beq.n	8005156 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <HAL_TIM_PWM_Start+0x174>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d022      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x136>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d01d      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x136>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1f      	ldr	r2, [pc, #124]	; (80051ec <HAL_TIM_PWM_Start+0x17c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d018      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x136>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1d      	ldr	r2, [pc, #116]	; (80051f0 <HAL_TIM_PWM_Start+0x180>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x136>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1c      	ldr	r2, [pc, #112]	; (80051f4 <HAL_TIM_PWM_Start+0x184>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x136>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <HAL_TIM_PWM_Start+0x178>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x136>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <HAL_TIM_PWM_Start+0x188>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x136>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a16      	ldr	r2, [pc, #88]	; (80051fc <HAL_TIM_PWM_Start+0x18c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d111      	bne.n	80051ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b06      	cmp	r3, #6
 80051b6:	d010      	beq.n	80051da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	e007      	b.n	80051da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40010400 	.word	0x40010400
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40001800 	.word	0x40001800

08005200 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e097      	b.n	8005344 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7fc ffe7 	bl	80021fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005244:	f023 0307 	bic.w	r3, r3, #7
 8005248:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3304      	adds	r3, #4
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f000 fbc1 	bl	80059dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	4313      	orrs	r3, r2
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052a0:	f023 030c 	bic.w	r3, r3, #12
 80052a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	4313      	orrs	r3, r2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	011a      	lsls	r2, r3, #4
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	031b      	lsls	r3, r3, #12
 80052d0:	4313      	orrs	r3, r2
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	4313      	orrs	r3, r2
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005364:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800536c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005374:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d110      	bne.n	800539e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d102      	bne.n	8005388 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005382:	7b7b      	ldrb	r3, [r7, #13]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d001      	beq.n	800538c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e069      	b.n	8005460 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800539c:	e031      	b.n	8005402 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d110      	bne.n	80053c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d102      	bne.n	80053b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053aa:	7b3b      	ldrb	r3, [r7, #12]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d001      	beq.n	80053b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e055      	b.n	8005460 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c4:	e01d      	b.n	8005402 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d108      	bne.n	80053de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053cc:	7bbb      	ldrb	r3, [r7, #14]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d105      	bne.n	80053de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053d2:	7b7b      	ldrb	r3, [r7, #13]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d102      	bne.n	80053de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053d8:	7b3b      	ldrb	r3, [r7, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e03e      	b.n	8005460 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_TIM_Encoder_Start+0xc4>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d008      	beq.n	8005420 <HAL_TIM_Encoder_Start+0xd4>
 800540e:	e00f      	b.n	8005430 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2201      	movs	r2, #1
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fdc9 	bl	8005fb0 <TIM_CCxChannelCmd>
      break;
 800541e:	e016      	b.n	800544e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	2104      	movs	r1, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fdc1 	bl	8005fb0 <TIM_CCxChannelCmd>
      break;
 800542e:	e00e      	b.n	800544e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2201      	movs	r2, #1
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fdb9 	bl	8005fb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2201      	movs	r2, #1
 8005444:	2104      	movs	r1, #4
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fdb2 	bl	8005fb0 <TIM_CCxChannelCmd>
      break;
 800544c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d122      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d11b      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0202 	mvn.w	r2, #2
 8005494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa77 	bl	800599e <HAL_TIM_IC_CaptureCallback>
 80054b0:	e005      	b.n	80054be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa69 	bl	800598a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fa7a 	bl	80059b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d122      	bne.n	8005518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d11b      	bne.n	8005518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0204 	mvn.w	r2, #4
 80054e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa4d 	bl	800599e <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa3f 	bl	800598a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fa50 	bl	80059b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b08      	cmp	r3, #8
 8005524:	d122      	bne.n	800556c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b08      	cmp	r3, #8
 8005532:	d11b      	bne.n	800556c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0208 	mvn.w	r2, #8
 800553c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2204      	movs	r2, #4
 8005542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fa23 	bl	800599e <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa15 	bl	800598a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fa26 	bl	80059b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	2b10      	cmp	r3, #16
 8005578:	d122      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b10      	cmp	r3, #16
 8005586:	d11b      	bne.n	80055c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0210 	mvn.w	r2, #16
 8005590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2208      	movs	r2, #8
 8005596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f9f9 	bl	800599e <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f9eb 	bl	800598a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f9fc 	bl	80059b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d10e      	bne.n	80055ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d107      	bne.n	80055ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0201 	mvn.w	r2, #1
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc fc20 	bl	8001e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b80      	cmp	r3, #128	; 0x80
 80055f8:	d10e      	bne.n	8005618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005604:	2b80      	cmp	r3, #128	; 0x80
 8005606:	d107      	bne.n	8005618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fdca 	bl	80061ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d10e      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d107      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9c1 	bl	80059c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b20      	cmp	r3, #32
 8005650:	d10e      	bne.n	8005670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b20      	cmp	r3, #32
 800565e:	d107      	bne.n	8005670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0220 	mvn.w	r2, #32
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fd94 	bl	8006198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005692:	2302      	movs	r3, #2
 8005694:	e0ae      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	f200 809f 	bhi.w	80057e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	080057e5 	.word	0x080057e5
 80056b4:	080057e5 	.word	0x080057e5
 80056b8:	080057e5 	.word	0x080057e5
 80056bc:	08005721 	.word	0x08005721
 80056c0:	080057e5 	.word	0x080057e5
 80056c4:	080057e5 	.word	0x080057e5
 80056c8:	080057e5 	.word	0x080057e5
 80056cc:	08005763 	.word	0x08005763
 80056d0:	080057e5 	.word	0x080057e5
 80056d4:	080057e5 	.word	0x080057e5
 80056d8:	080057e5 	.word	0x080057e5
 80056dc:	080057a3 	.word	0x080057a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fa18 	bl	8005b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0208 	orr.w	r2, r2, #8
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0204 	bic.w	r2, r2, #4
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	619a      	str	r2, [r3, #24]
      break;
 800571e:	e064      	b.n	80057ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fa68 	bl	8005bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800574a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6999      	ldr	r1, [r3, #24]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	619a      	str	r2, [r3, #24]
      break;
 8005760:	e043      	b.n	80057ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fabd 	bl	8005ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0208 	orr.w	r2, r2, #8
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0204 	bic.w	r2, r2, #4
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	61da      	str	r2, [r3, #28]
      break;
 80057a0:	e023      	b.n	80057ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fb11 	bl	8005dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69d9      	ldr	r1, [r3, #28]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	021a      	lsls	r2, r3, #8
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	61da      	str	r2, [r3, #28]
      break;
 80057e2:	e002      	b.n	80057ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	75fb      	strb	r3, [r7, #23]
      break;
 80057e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIM_ConfigClockSource+0x1c>
 8005814:	2302      	movs	r3, #2
 8005816:	e0b4      	b.n	8005982 <HAL_TIM_ConfigClockSource+0x186>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005850:	d03e      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005856:	f200 8087 	bhi.w	8005968 <HAL_TIM_ConfigClockSource+0x16c>
 800585a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585e:	f000 8086 	beq.w	800596e <HAL_TIM_ConfigClockSource+0x172>
 8005862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005866:	d87f      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x16c>
 8005868:	2b70      	cmp	r3, #112	; 0x70
 800586a:	d01a      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0xa6>
 800586c:	2b70      	cmp	r3, #112	; 0x70
 800586e:	d87b      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x16c>
 8005870:	2b60      	cmp	r3, #96	; 0x60
 8005872:	d050      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x11a>
 8005874:	2b60      	cmp	r3, #96	; 0x60
 8005876:	d877      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x16c>
 8005878:	2b50      	cmp	r3, #80	; 0x50
 800587a:	d03c      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0xfa>
 800587c:	2b50      	cmp	r3, #80	; 0x50
 800587e:	d873      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x16c>
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d058      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x13a>
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	d86f      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x16c>
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d064      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x15a>
 800588c:	2b30      	cmp	r3, #48	; 0x30
 800588e:	d86b      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d060      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x15a>
 8005894:	2b20      	cmp	r3, #32
 8005896:	d867      	bhi.n	8005968 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d05c      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x15a>
 800589c:	2b10      	cmp	r3, #16
 800589e:	d05a      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x15a>
 80058a0:	e062      	b.n	8005968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6899      	ldr	r1, [r3, #8]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f000 fb5d 	bl	8005f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	609a      	str	r2, [r3, #8]
      break;
 80058ce:	e04f      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6899      	ldr	r1, [r3, #8]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f000 fb46 	bl	8005f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f2:	609a      	str	r2, [r3, #8]
      break;
 80058f4:	e03c      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6859      	ldr	r1, [r3, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	461a      	mov	r2, r3
 8005904:	f000 faba 	bl	8005e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2150      	movs	r1, #80	; 0x50
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fb13 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 8005914:	e02c      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6859      	ldr	r1, [r3, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	461a      	mov	r2, r3
 8005924:	f000 fad9 	bl	8005eda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2160      	movs	r1, #96	; 0x60
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fb03 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 8005934:	e01c      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6859      	ldr	r1, [r3, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	461a      	mov	r2, r3
 8005944:	f000 fa9a 	bl	8005e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2140      	movs	r1, #64	; 0x40
 800594e:	4618      	mov	r0, r3
 8005950:	f000 faf3 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 8005954:	e00c      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f000 faea 	bl	8005f3a <TIM_ITRx_SetConfig>
      break;
 8005966:	e003      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
      break;
 800596c:	e000      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800596e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005980:	7bfb      	ldrb	r3, [r7, #15]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a40      	ldr	r2, [pc, #256]	; (8005af0 <TIM_Base_SetConfig+0x114>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d013      	beq.n	8005a1c <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fa:	d00f      	beq.n	8005a1c <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3d      	ldr	r2, [pc, #244]	; (8005af4 <TIM_Base_SetConfig+0x118>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00b      	beq.n	8005a1c <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3c      	ldr	r2, [pc, #240]	; (8005af8 <TIM_Base_SetConfig+0x11c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3b      	ldr	r2, [pc, #236]	; (8005afc <TIM_Base_SetConfig+0x120>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a3a      	ldr	r2, [pc, #232]	; (8005b00 <TIM_Base_SetConfig+0x124>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d108      	bne.n	8005a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a2f      	ldr	r2, [pc, #188]	; (8005af0 <TIM_Base_SetConfig+0x114>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d02b      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3c:	d027      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2c      	ldr	r2, [pc, #176]	; (8005af4 <TIM_Base_SetConfig+0x118>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d023      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2b      	ldr	r2, [pc, #172]	; (8005af8 <TIM_Base_SetConfig+0x11c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01f      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <TIM_Base_SetConfig+0x120>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01b      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a29      	ldr	r2, [pc, #164]	; (8005b00 <TIM_Base_SetConfig+0x124>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d017      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a28      	ldr	r2, [pc, #160]	; (8005b04 <TIM_Base_SetConfig+0x128>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a27      	ldr	r2, [pc, #156]	; (8005b08 <TIM_Base_SetConfig+0x12c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00f      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a26      	ldr	r2, [pc, #152]	; (8005b0c <TIM_Base_SetConfig+0x130>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00b      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <TIM_Base_SetConfig+0x134>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a24      	ldr	r2, [pc, #144]	; (8005b14 <TIM_Base_SetConfig+0x138>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <TIM_Base_SetConfig+0x13c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d108      	bne.n	8005aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a0a      	ldr	r2, [pc, #40]	; (8005af0 <TIM_Base_SetConfig+0x114>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_Base_SetConfig+0xf8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a0c      	ldr	r2, [pc, #48]	; (8005b00 <TIM_Base_SetConfig+0x124>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d103      	bne.n	8005adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	615a      	str	r2, [r3, #20]
}
 8005ae2:	bf00      	nop
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40000c00 	.word	0x40000c00
 8005b00:	40010400 	.word	0x40010400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800
 8005b10:	40001800 	.word	0x40001800
 8005b14:	40001c00 	.word	0x40001c00
 8005b18:	40002000 	.word	0x40002000

08005b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f023 0302 	bic.w	r3, r3, #2
 8005b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <TIM_OC1_SetConfig+0xd8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_OC1_SetConfig+0x64>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a1f      	ldr	r2, [pc, #124]	; (8005bf8 <TIM_OC1_SetConfig+0xdc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10c      	bne.n	8005b9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f023 0308 	bic.w	r3, r3, #8
 8005b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f023 0304 	bic.w	r3, r3, #4
 8005b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <TIM_OC1_SetConfig+0xd8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_OC1_SetConfig+0x8e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a14      	ldr	r2, [pc, #80]	; (8005bf8 <TIM_OC1_SetConfig+0xdc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d111      	bne.n	8005bce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	621a      	str	r2, [r3, #32]
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40010400 	.word	0x40010400

08005bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f023 0210 	bic.w	r2, r3, #16
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0320 	bic.w	r3, r3, #32
 8005c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a22      	ldr	r2, [pc, #136]	; (8005ce0 <TIM_OC2_SetConfig+0xe4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC2_SetConfig+0x68>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a21      	ldr	r2, [pc, #132]	; (8005ce4 <TIM_OC2_SetConfig+0xe8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d10d      	bne.n	8005c80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a17      	ldr	r2, [pc, #92]	; (8005ce0 <TIM_OC2_SetConfig+0xe4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC2_SetConfig+0x94>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <TIM_OC2_SetConfig+0xe8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d113      	bne.n	8005cb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40010000 	.word	0x40010000
 8005ce4:	40010400 	.word	0x40010400

08005ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a21      	ldr	r2, [pc, #132]	; (8005dc8 <TIM_OC3_SetConfig+0xe0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC3_SetConfig+0x66>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a20      	ldr	r2, [pc, #128]	; (8005dcc <TIM_OC3_SetConfig+0xe4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10d      	bne.n	8005d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a16      	ldr	r2, [pc, #88]	; (8005dc8 <TIM_OC3_SetConfig+0xe0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_OC3_SetConfig+0x92>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a15      	ldr	r2, [pc, #84]	; (8005dcc <TIM_OC3_SetConfig+0xe4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d113      	bne.n	8005da2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010400 	.word	0x40010400

08005dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	031b      	lsls	r3, r3, #12
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a12      	ldr	r2, [pc, #72]	; (8005e74 <TIM_OC4_SetConfig+0xa4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC4_SetConfig+0x68>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a11      	ldr	r2, [pc, #68]	; (8005e78 <TIM_OC4_SetConfig+0xa8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d109      	bne.n	8005e4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	019b      	lsls	r3, r3, #6
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40010400 	.word	0x40010400

08005e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 0201 	bic.w	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f023 030a 	bic.w	r3, r3, #10
 8005eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	621a      	str	r2, [r3, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b087      	sub	sp, #28
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f023 0210 	bic.w	r2, r3, #16
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	031b      	lsls	r3, r3, #12
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f043 0307 	orr.w	r3, r3, #7
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	609a      	str	r2, [r3, #8]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	609a      	str	r2, [r3, #8]
}
 8005fa4:	bf00      	nop
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1a      	ldr	r2, [r3, #32]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006010:	2302      	movs	r3, #2
 8006012:	e05a      	b.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d022      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006060:	d01d      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d018      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1b      	ldr	r2, [pc, #108]	; (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a17      	ldr	r2, [pc, #92]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10c      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40001800 	.word	0x40001800

080060f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800610c:	2302      	movs	r3, #2
 800610e:	e03d      	b.n	800618c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e03f      	b.n	8006252 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fc f9aa 	bl	8002540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2224      	movs	r2, #36	; 0x24
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 f84d 	bl	80072a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695a      	ldr	r2, [r3, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b08a      	sub	sp, #40	; 0x28
 800625e:	af02      	add	r7, sp, #8
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	603b      	str	r3, [r7, #0]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b20      	cmp	r3, #32
 8006278:	d17c      	bne.n	8006374 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_UART_Transmit+0x2c>
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e075      	b.n	8006376 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_UART_Transmit+0x3e>
 8006294:	2302      	movs	r3, #2
 8006296:	e06e      	b.n	8006376 <HAL_UART_Transmit+0x11c>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2221      	movs	r2, #33	; 0x21
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062ae:	f7fc fc3f 	bl	8002b30 <HAL_GetTick>
 80062b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	88fa      	ldrh	r2, [r7, #6]
 80062be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c8:	d108      	bne.n	80062dc <HAL_UART_Transmit+0x82>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e003      	b.n	80062e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062ec:	e02a      	b.n	8006344 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2180      	movs	r1, #128	; 0x80
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 fd04 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e036      	b.n	8006376 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800631c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	3302      	adds	r3, #2
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	e007      	b.n	8006336 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	781a      	ldrb	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	3301      	adds	r3, #1
 8006334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1cf      	bne.n	80062ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2200      	movs	r2, #0
 8006356:	2140      	movs	r1, #64	; 0x40
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fcd4 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e006      	b.n	8006376 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006374:	2302      	movs	r3, #2
  }
}
 8006376:	4618      	mov	r0, r3
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08c      	sub	sp, #48	; 0x30
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	4613      	mov	r3, r2
 800638c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b20      	cmp	r3, #32
 8006398:	d165      	bne.n	8006466 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_UART_Transmit_DMA+0x26>
 80063a0:	88fb      	ldrh	r3, [r7, #6]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e05e      	b.n	8006468 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Transmit_DMA+0x38>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e057      	b.n	8006468 <HAL_UART_Transmit_DMA+0xe8>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2221      	movs	r2, #33	; 0x21
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	4a22      	ldr	r2, [pc, #136]	; (8006470 <HAL_UART_Transmit_DMA+0xf0>)
 80063e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ec:	4a21      	ldr	r2, [pc, #132]	; (8006474 <HAL_UART_Transmit_DMA+0xf4>)
 80063ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	4a20      	ldr	r2, [pc, #128]	; (8006478 <HAL_UART_Transmit_DMA+0xf8>)
 80063f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fc:	2200      	movs	r2, #0
 80063fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006400:	f107 0308 	add.w	r3, r7, #8
 8006404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	6819      	ldr	r1, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3304      	adds	r3, #4
 8006414:	461a      	mov	r2, r3
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	f7fc ffb8 	bl	800338c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006424:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3314      	adds	r3, #20
 8006434:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	617b      	str	r3, [r7, #20]
   return(result);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3314      	adds	r3, #20
 800644c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800644e:	627a      	str	r2, [r7, #36]	; 0x24
 8006450:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6a39      	ldr	r1, [r7, #32]
 8006454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	61fb      	str	r3, [r7, #28]
   return(result);
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e5      	bne.n	800642e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3730      	adds	r7, #48	; 0x30
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	08006a61 	.word	0x08006a61
 8006474:	08006afb 	.word	0x08006afb
 8006478:	08006c73 	.word	0x08006c73

0800647c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b20      	cmp	r3, #32
 8006494:	d11d      	bne.n	80064d2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_UART_Receive_DMA+0x26>
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e016      	b.n	80064d4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_UART_Receive_DMA+0x38>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e00f      	b.n	80064d4 <HAL_UART_Receive_DMA+0x58>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	461a      	mov	r2, r3
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 fc8b 	bl	8006de4 <UART_Start_Receive_DMA>
 80064ce:	4603      	mov	r3, r0
 80064d0:	e000      	b.n	80064d4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
  }
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b0ba      	sub	sp, #232	; 0xe8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800651a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <HAL_UART_IRQHandler+0x66>
 800652e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fdf7 	bl	800712e <UART_Receive_IT>
      return;
 8006540:	e256      	b.n	80069f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 80de 	beq.w	8006708 <HAL_UART_IRQHandler+0x22c>
 800654c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80d1 	beq.w	8006708 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <HAL_UART_IRQHandler+0xae>
 8006572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <HAL_UART_IRQHandler+0xd2>
 8006596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	f043 0202 	orr.w	r2, r3, #2
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00b      	beq.n	80065d2 <HAL_UART_IRQHandler+0xf6>
 80065ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	f043 0204 	orr.w	r2, r3, #4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d011      	beq.n	8006602 <HAL_UART_IRQHandler+0x126>
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f043 0208 	orr.w	r2, r3, #8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 81ed 	beq.w	80069e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800660c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_UART_IRQHandler+0x14e>
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fd82 	bl	800712e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	bf0c      	ite	eq
 8006638:	2301      	moveq	r3, #1
 800663a:	2300      	movne	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <HAL_UART_IRQHandler+0x17a>
 800664e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006652:	2b00      	cmp	r3, #0
 8006654:	d04f      	beq.n	80066f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fc8a 	bl	8006f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b40      	cmp	r3, #64	; 0x40
 8006668:	d141      	bne.n	80066ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3314      	adds	r3, #20
 8006670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3314      	adds	r3, #20
 8006692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006696:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800669a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1d9      	bne.n	800666a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d013      	beq.n	80066e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	4a7d      	ldr	r2, [pc, #500]	; (80068b8 <HAL_UART_IRQHandler+0x3dc>)
 80066c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fc ff26 	bl	800351c <HAL_DMA_Abort_IT>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d016      	beq.n	8006704 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	e00e      	b.n	8006704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f9a4 	bl	8006a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	e00a      	b.n	8006704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f9a0 	bl	8006a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f4:	e006      	b.n	8006704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f99c 	bl	8006a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006702:	e170      	b.n	80069e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	bf00      	nop
    return;
 8006706:	e16e      	b.n	80069e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	2b01      	cmp	r3, #1
 800670e:	f040 814a 	bne.w	80069a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006716:	f003 0310 	and.w	r3, r3, #16
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8143 	beq.w	80069a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 813c 	beq.w	80069a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800672e:	2300      	movs	r3, #0
 8006730:	60bb      	str	r3, [r7, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	f040 80b4 	bne.w	80068bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8140 	beq.w	80069ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800676e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006772:	429a      	cmp	r2, r3
 8006774:	f080 8139 	bcs.w	80069ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800677e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678a:	f000 8088 	beq.w	800689e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	330c      	adds	r3, #12
 80067b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1d9      	bne.n	800678e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3314      	adds	r3, #20
 80067e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067ec:	f023 0301 	bic.w	r3, r3, #1
 80067f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3314      	adds	r3, #20
 80067fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006802:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006806:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e1      	bne.n	80067da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3314      	adds	r3, #20
 800681c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3314      	adds	r3, #20
 8006836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800683a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800683c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e3      	bne.n	8006816 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	330c      	adds	r3, #12
 8006862:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800686c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686e:	f023 0310 	bic.w	r3, r3, #16
 8006872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	330c      	adds	r3, #12
 800687c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006880:	65ba      	str	r2, [r7, #88]	; 0x58
 8006882:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800688e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e3      	bne.n	800685c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	4618      	mov	r0, r3
 800689a:	f7fc fdcf 	bl	800343c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f8ca 	bl	8006a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068b4:	e099      	b.n	80069ea <HAL_UART_IRQHandler+0x50e>
 80068b6:	bf00      	nop
 80068b8:	08007037 	.word	0x08007037
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 808b 	beq.w	80069ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80068d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8086 	beq.w	80069ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006906:	647a      	str	r2, [r7, #68]	; 0x44
 8006908:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800690c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e3      	bne.n	80068e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3314      	adds	r3, #20
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	623b      	str	r3, [r7, #32]
   return(result);
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3314      	adds	r3, #20
 800693a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800693e:	633a      	str	r2, [r7, #48]	; 0x30
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e3      	bne.n	800691a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0310 	bic.w	r3, r3, #16
 8006976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	330c      	adds	r3, #12
 8006980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006984:	61fa      	str	r2, [r7, #28]
 8006986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	69b9      	ldr	r1, [r7, #24]
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	617b      	str	r3, [r7, #20]
   return(result);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e3      	bne.n	8006960 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f852 	bl	8006a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069a4:	e023      	b.n	80069ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <HAL_UART_IRQHandler+0x4ea>
 80069b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fb4d 	bl	800705e <UART_Transmit_IT>
    return;
 80069c4:	e014      	b.n	80069f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00e      	beq.n	80069f0 <HAL_UART_IRQHandler+0x514>
 80069d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d008      	beq.n	80069f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb8d 	bl	80070fe <UART_EndTransmit_IT>
    return;
 80069e4:	e004      	b.n	80069f0 <HAL_UART_IRQHandler+0x514>
    return;
 80069e6:	bf00      	nop
 80069e8:	e002      	b.n	80069f0 <HAL_UART_IRQHandler+0x514>
      return;
 80069ea:	bf00      	nop
 80069ec:	e000      	b.n	80069f0 <HAL_UART_IRQHandler+0x514>
      return;
 80069ee:	bf00      	nop
  }
}
 80069f0:	37e8      	adds	r7, #232	; 0xe8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop

080069f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b090      	sub	sp, #64	; 0x40
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d137      	bne.n	8006aec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7e:	2200      	movs	r2, #0
 8006a80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3314      	adds	r3, #20
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	623b      	str	r3, [r7, #32]
   return(result);
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3314      	adds	r3, #20
 8006aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aa2:	633a      	str	r2, [r7, #48]	; 0x30
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006acc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	330c      	adds	r3, #12
 8006ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ad6:	61fa      	str	r2, [r7, #28]
 8006ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006aea:	e002      	b.n	8006af2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006aec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006aee:	f7ff ff83 	bl	80069f8 <HAL_UART_TxCpltCallback>
}
 8006af2:	bf00      	nop
 8006af4:	3740      	adds	r7, #64	; 0x40
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff ff7f 	bl	8006a0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b09c      	sub	sp, #112	; 0x70
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d172      	bne.n	8006c18 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b34:	2200      	movs	r2, #0
 8006b36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b58:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e5      	bne.n	8006b38 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3314      	adds	r3, #20
 8006b72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	667b      	str	r3, [r7, #100]	; 0x64
 8006b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3314      	adds	r3, #20
 8006b8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b8c:	647a      	str	r2, [r7, #68]	; 0x44
 8006b8e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e5      	bne.n	8006b6c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3314      	adds	r3, #20
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8006bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bc0:	633a      	str	r2, [r7, #48]	; 0x30
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e5      	bne.n	8006ba0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d119      	bne.n	8006c18 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	330c      	adds	r3, #12
 8006bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0310 	bic.w	r3, r3, #16
 8006bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c04:	61fa      	str	r2, [r7, #28]
 8006c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	69b9      	ldr	r1, [r7, #24]
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	617b      	str	r3, [r7, #20]
   return(result);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e5      	bne.n	8006be4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d106      	bne.n	8006c2e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c24:	4619      	mov	r1, r3
 8006c26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c28:	f7ff ff0e 	bl	8006a48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c2c:	e002      	b.n	8006c34 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006c2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c30:	f7fb f804 	bl	8001c3c <HAL_UART_RxCpltCallback>
}
 8006c34:	bf00      	nop
 8006c36:	3770      	adds	r7, #112	; 0x70
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d108      	bne.n	8006c64 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f7ff fef3 	bl	8006a48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c62:	e002      	b.n	8006c6a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff fedb 	bl	8006a20 <HAL_UART_RxHalfCpltCallback>
}
 8006c6a:	bf00      	nop
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8e:	2b80      	cmp	r3, #128	; 0x80
 8006c90:	bf0c      	ite	eq
 8006c92:	2301      	moveq	r3, #1
 8006c94:	2300      	movne	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b21      	cmp	r3, #33	; 0x21
 8006ca4:	d108      	bne.n	8006cb8 <UART_DMAError+0x46>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006cb2:	68b8      	ldr	r0, [r7, #8]
 8006cb4:	f000 f934 	bl	8006f20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	bf0c      	ite	eq
 8006cc6:	2301      	moveq	r3, #1
 8006cc8:	2300      	movne	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b22      	cmp	r3, #34	; 0x22
 8006cd8:	d108      	bne.n	8006cec <UART_DMAError+0x7a>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ce6:	68b8      	ldr	r0, [r7, #8]
 8006ce8:	f000 f942 	bl	8006f70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f043 0210 	orr.w	r2, r3, #16
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cf8:	68b8      	ldr	r0, [r7, #8]
 8006cfa:	f7ff fe9b 	bl	8006a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b090      	sub	sp, #64	; 0x40
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d16:	e050      	b.n	8006dba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	d04c      	beq.n	8006dba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d007      	beq.n	8006d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d26:	f7fb ff03 	bl	8002b30 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d241      	bcs.n	8006dba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	330c      	adds	r3, #12
 8006d3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d56:	637a      	str	r2, [r7, #52]	; 0x34
 8006d58:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	613b      	str	r3, [r7, #16]
   return(result);
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d8a:	623a      	str	r2, [r7, #32]
 8006d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	69f9      	ldr	r1, [r7, #28]
 8006d90:	6a3a      	ldr	r2, [r7, #32]
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e5      	bne.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e00f      	b.n	8006dda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	bf0c      	ite	eq
 8006dca:	2301      	moveq	r3, #1
 8006dcc:	2300      	movne	r3, #0
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	79fb      	ldrb	r3, [r7, #7]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d09f      	beq.n	8006d18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3740      	adds	r7, #64	; 0x40
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b098      	sub	sp, #96	; 0x60
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	88fa      	ldrh	r2, [r7, #6]
 8006dfc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2222      	movs	r2, #34	; 0x22
 8006e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	4a40      	ldr	r2, [pc, #256]	; (8006f14 <UART_Start_Receive_DMA+0x130>)
 8006e12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	4a3f      	ldr	r2, [pc, #252]	; (8006f18 <UART_Start_Receive_DMA+0x134>)
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	4a3e      	ldr	r2, [pc, #248]	; (8006f1c <UART_Start_Receive_DMA+0x138>)
 8006e22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	2200      	movs	r2, #0
 8006e2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006e2c:	f107 0308 	add.w	r3, r7, #8
 8006e30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	f7fc faa2 	bl	800338c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006e48:	2300      	movs	r3, #0
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d019      	beq.n	8006ea2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	330c      	adds	r3, #12
 8006e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e84:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006e90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e5      	bne.n	8006e6e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3314      	adds	r3, #20
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	f043 0301 	orr.w	r3, r3, #1
 8006eb8:	657b      	str	r3, [r7, #84]	; 0x54
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3314      	adds	r3, #20
 8006ec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ec2:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3314      	adds	r3, #20
 8006edc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eec:	653b      	str	r3, [r7, #80]	; 0x50
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3314      	adds	r3, #20
 8006ef4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ef6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6a39      	ldr	r1, [r7, #32]
 8006efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e5      	bne.n	8006ed6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3760      	adds	r7, #96	; 0x60
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	08006b17 	.word	0x08006b17
 8006f18:	08006c3d 	.word	0x08006c3d
 8006f1c:	08006c73 	.word	0x08006c73

08006f20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	; 0x24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	330c      	adds	r3, #12
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	61ba      	str	r2, [r7, #24]
 8006f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6979      	ldr	r1, [r7, #20]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	613b      	str	r3, [r7, #16]
   return(result);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e5      	bne.n	8006f28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006f64:	bf00      	nop
 8006f66:	3724      	adds	r7, #36	; 0x24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b095      	sub	sp, #84	; 0x54
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	330c      	adds	r3, #12
 8006f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f98:	643a      	str	r2, [r7, #64]	; 0x40
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3314      	adds	r3, #20
 8006fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f023 0301 	bic.w	r3, r3, #1
 8006fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3314      	adds	r3, #20
 8006fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e5      	bne.n	8006fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d119      	bne.n	800701c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	330c      	adds	r3, #12
 8006fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f023 0310 	bic.w	r3, r3, #16
 8006ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007008:	61ba      	str	r2, [r7, #24]
 800700a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6979      	ldr	r1, [r7, #20]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	613b      	str	r3, [r7, #16]
   return(result);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e5      	bne.n	8006fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800702a:	bf00      	nop
 800702c:	3754      	adds	r7, #84	; 0x54
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f7ff fcef 	bl	8006a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b21      	cmp	r3, #33	; 0x21
 8007070:	d13e      	bne.n	80070f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707a:	d114      	bne.n	80070a6 <UART_Transmit_IT+0x48>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d110      	bne.n	80070a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007098:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	1c9a      	adds	r2, r3, #2
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	621a      	str	r2, [r3, #32]
 80070a4:	e008      	b.n	80070b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6211      	str	r1, [r2, #32]
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4619      	mov	r1, r3
 80070c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10f      	bne.n	80070ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e000      	b.n	80070f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070f0:	2302      	movs	r3, #2
  }
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fc6a 	bl	80069f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b08c      	sub	sp, #48	; 0x30
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b22      	cmp	r3, #34	; 0x22
 8007140:	f040 80ab 	bne.w	800729a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714c:	d117      	bne.n	800717e <UART_Receive_IT+0x50>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d113      	bne.n	800717e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	b29b      	uxth	r3, r3
 8007168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716c:	b29a      	uxth	r2, r3
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	1c9a      	adds	r2, r3, #2
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	629a      	str	r2, [r3, #40]	; 0x28
 800717c:	e026      	b.n	80071cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007184:	2300      	movs	r3, #0
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007190:	d007      	beq.n	80071a2 <UART_Receive_IT+0x74>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <UART_Receive_IT+0x82>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e008      	b.n	80071c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	4619      	mov	r1, r3
 80071da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d15a      	bne.n	8007296 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0220 	bic.w	r2, r2, #32
 80071ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695a      	ldr	r2, [r3, #20]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0201 	bic.w	r2, r2, #1
 800720e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	2b01      	cmp	r3, #1
 800721e:	d135      	bne.n	800728c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	330c      	adds	r3, #12
 800722c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	613b      	str	r3, [r7, #16]
   return(result);
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f023 0310 	bic.w	r3, r3, #16
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	330c      	adds	r3, #12
 8007244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007246:	623a      	str	r2, [r7, #32]
 8007248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	69f9      	ldr	r1, [r7, #28]
 800724c:	6a3a      	ldr	r2, [r7, #32]
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	61bb      	str	r3, [r7, #24]
   return(result);
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e5      	bne.n	8007226 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0310 	and.w	r3, r3, #16
 8007264:	2b10      	cmp	r3, #16
 8007266:	d10a      	bne.n	800727e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7ff fbdf 	bl	8006a48 <HAL_UARTEx_RxEventCallback>
 800728a:	e002      	b.n	8007292 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7fa fcd5 	bl	8001c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	e002      	b.n	800729c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	e000      	b.n	800729c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800729a:	2302      	movs	r3, #2
  }
}
 800729c:	4618      	mov	r0, r3
 800729e:	3730      	adds	r7, #48	; 0x30
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072a8:	b0c0      	sub	sp, #256	; 0x100
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	68d9      	ldr	r1, [r3, #12]
 80072c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	ea40 0301 	orr.w	r3, r0, r1
 80072cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	431a      	orrs	r2, r3
 80072dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072fc:	f021 010c 	bic.w	r1, r1, #12
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800730a:	430b      	orrs	r3, r1
 800730c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800730e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800731a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731e:	6999      	ldr	r1, [r3, #24]
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	ea40 0301 	orr.w	r3, r0, r1
 800732a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	4b8f      	ldr	r3, [pc, #572]	; (8007570 <UART_SetConfig+0x2cc>)
 8007334:	429a      	cmp	r2, r3
 8007336:	d005      	beq.n	8007344 <UART_SetConfig+0xa0>
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b8d      	ldr	r3, [pc, #564]	; (8007574 <UART_SetConfig+0x2d0>)
 8007340:	429a      	cmp	r2, r3
 8007342:	d104      	bne.n	800734e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007344:	f7fd fb0c 	bl	8004960 <HAL_RCC_GetPCLK2Freq>
 8007348:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800734c:	e003      	b.n	8007356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800734e:	f7fd faf3 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8007352:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007360:	f040 810c 	bne.w	800757c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007368:	2200      	movs	r2, #0
 800736a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800736e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007376:	4622      	mov	r2, r4
 8007378:	462b      	mov	r3, r5
 800737a:	1891      	adds	r1, r2, r2
 800737c:	65b9      	str	r1, [r7, #88]	; 0x58
 800737e:	415b      	adcs	r3, r3
 8007380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007386:	4621      	mov	r1, r4
 8007388:	eb12 0801 	adds.w	r8, r2, r1
 800738c:	4629      	mov	r1, r5
 800738e:	eb43 0901 	adc.w	r9, r3, r1
 8007392:	f04f 0200 	mov.w	r2, #0
 8007396:	f04f 0300 	mov.w	r3, #0
 800739a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800739e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073a6:	4690      	mov	r8, r2
 80073a8:	4699      	mov	r9, r3
 80073aa:	4623      	mov	r3, r4
 80073ac:	eb18 0303 	adds.w	r3, r8, r3
 80073b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073b4:	462b      	mov	r3, r5
 80073b6:	eb49 0303 	adc.w	r3, r9, r3
 80073ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073d2:	460b      	mov	r3, r1
 80073d4:	18db      	adds	r3, r3, r3
 80073d6:	653b      	str	r3, [r7, #80]	; 0x50
 80073d8:	4613      	mov	r3, r2
 80073da:	eb42 0303 	adc.w	r3, r2, r3
 80073de:	657b      	str	r3, [r7, #84]	; 0x54
 80073e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073e8:	f7f9 fc4e 	bl	8000c88 <__aeabi_uldivmod>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4b61      	ldr	r3, [pc, #388]	; (8007578 <UART_SetConfig+0x2d4>)
 80073f2:	fba3 2302 	umull	r2, r3, r3, r2
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	011c      	lsls	r4, r3, #4
 80073fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007404:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800740c:	4642      	mov	r2, r8
 800740e:	464b      	mov	r3, r9
 8007410:	1891      	adds	r1, r2, r2
 8007412:	64b9      	str	r1, [r7, #72]	; 0x48
 8007414:	415b      	adcs	r3, r3
 8007416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800741c:	4641      	mov	r1, r8
 800741e:	eb12 0a01 	adds.w	sl, r2, r1
 8007422:	4649      	mov	r1, r9
 8007424:	eb43 0b01 	adc.w	fp, r3, r1
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800743c:	4692      	mov	sl, r2
 800743e:	469b      	mov	fp, r3
 8007440:	4643      	mov	r3, r8
 8007442:	eb1a 0303 	adds.w	r3, sl, r3
 8007446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800744a:	464b      	mov	r3, r9
 800744c:	eb4b 0303 	adc.w	r3, fp, r3
 8007450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007460:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007468:	460b      	mov	r3, r1
 800746a:	18db      	adds	r3, r3, r3
 800746c:	643b      	str	r3, [r7, #64]	; 0x40
 800746e:	4613      	mov	r3, r2
 8007470:	eb42 0303 	adc.w	r3, r2, r3
 8007474:	647b      	str	r3, [r7, #68]	; 0x44
 8007476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800747a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800747e:	f7f9 fc03 	bl	8000c88 <__aeabi_uldivmod>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4611      	mov	r1, r2
 8007488:	4b3b      	ldr	r3, [pc, #236]	; (8007578 <UART_SetConfig+0x2d4>)
 800748a:	fba3 2301 	umull	r2, r3, r3, r1
 800748e:	095b      	lsrs	r3, r3, #5
 8007490:	2264      	movs	r2, #100	; 0x64
 8007492:	fb02 f303 	mul.w	r3, r2, r3
 8007496:	1acb      	subs	r3, r1, r3
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800749e:	4b36      	ldr	r3, [pc, #216]	; (8007578 <UART_SetConfig+0x2d4>)
 80074a0:	fba3 2302 	umull	r2, r3, r3, r2
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074ac:	441c      	add	r4, r3
 80074ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074c0:	4642      	mov	r2, r8
 80074c2:	464b      	mov	r3, r9
 80074c4:	1891      	adds	r1, r2, r2
 80074c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80074c8:	415b      	adcs	r3, r3
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074d0:	4641      	mov	r1, r8
 80074d2:	1851      	adds	r1, r2, r1
 80074d4:	6339      	str	r1, [r7, #48]	; 0x30
 80074d6:	4649      	mov	r1, r9
 80074d8:	414b      	adcs	r3, r1
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074e8:	4659      	mov	r1, fp
 80074ea:	00cb      	lsls	r3, r1, #3
 80074ec:	4651      	mov	r1, sl
 80074ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074f2:	4651      	mov	r1, sl
 80074f4:	00ca      	lsls	r2, r1, #3
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	4642      	mov	r2, r8
 80074fe:	189b      	adds	r3, r3, r2
 8007500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007504:	464b      	mov	r3, r9
 8007506:	460a      	mov	r2, r1
 8007508:	eb42 0303 	adc.w	r3, r2, r3
 800750c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800751c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007524:	460b      	mov	r3, r1
 8007526:	18db      	adds	r3, r3, r3
 8007528:	62bb      	str	r3, [r7, #40]	; 0x28
 800752a:	4613      	mov	r3, r2
 800752c:	eb42 0303 	adc.w	r3, r2, r3
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800753a:	f7f9 fba5 	bl	8000c88 <__aeabi_uldivmod>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <UART_SetConfig+0x2d4>)
 8007544:	fba3 1302 	umull	r1, r3, r3, r2
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	2164      	movs	r1, #100	; 0x64
 800754c:	fb01 f303 	mul.w	r3, r1, r3
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	3332      	adds	r3, #50	; 0x32
 8007556:	4a08      	ldr	r2, [pc, #32]	; (8007578 <UART_SetConfig+0x2d4>)
 8007558:	fba2 2303 	umull	r2, r3, r2, r3
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	f003 0207 	and.w	r2, r3, #7
 8007562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4422      	add	r2, r4
 800756a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800756c:	e106      	b.n	800777c <UART_SetConfig+0x4d8>
 800756e:	bf00      	nop
 8007570:	40011000 	.word	0x40011000
 8007574:	40011400 	.word	0x40011400
 8007578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800757c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007580:	2200      	movs	r2, #0
 8007582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007586:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800758a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800758e:	4642      	mov	r2, r8
 8007590:	464b      	mov	r3, r9
 8007592:	1891      	adds	r1, r2, r2
 8007594:	6239      	str	r1, [r7, #32]
 8007596:	415b      	adcs	r3, r3
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
 800759a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800759e:	4641      	mov	r1, r8
 80075a0:	1854      	adds	r4, r2, r1
 80075a2:	4649      	mov	r1, r9
 80075a4:	eb43 0501 	adc.w	r5, r3, r1
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	00eb      	lsls	r3, r5, #3
 80075b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075b6:	00e2      	lsls	r2, r4, #3
 80075b8:	4614      	mov	r4, r2
 80075ba:	461d      	mov	r5, r3
 80075bc:	4643      	mov	r3, r8
 80075be:	18e3      	adds	r3, r4, r3
 80075c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075c4:	464b      	mov	r3, r9
 80075c6:	eb45 0303 	adc.w	r3, r5, r3
 80075ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075ea:	4629      	mov	r1, r5
 80075ec:	008b      	lsls	r3, r1, #2
 80075ee:	4621      	mov	r1, r4
 80075f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075f4:	4621      	mov	r1, r4
 80075f6:	008a      	lsls	r2, r1, #2
 80075f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075fc:	f7f9 fb44 	bl	8000c88 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4b60      	ldr	r3, [pc, #384]	; (8007788 <UART_SetConfig+0x4e4>)
 8007606:	fba3 2302 	umull	r2, r3, r3, r2
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	011c      	lsls	r4, r3, #4
 800760e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007612:	2200      	movs	r2, #0
 8007614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800761c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007620:	4642      	mov	r2, r8
 8007622:	464b      	mov	r3, r9
 8007624:	1891      	adds	r1, r2, r2
 8007626:	61b9      	str	r1, [r7, #24]
 8007628:	415b      	adcs	r3, r3
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007630:	4641      	mov	r1, r8
 8007632:	1851      	adds	r1, r2, r1
 8007634:	6139      	str	r1, [r7, #16]
 8007636:	4649      	mov	r1, r9
 8007638:	414b      	adcs	r3, r1
 800763a:	617b      	str	r3, [r7, #20]
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007648:	4659      	mov	r1, fp
 800764a:	00cb      	lsls	r3, r1, #3
 800764c:	4651      	mov	r1, sl
 800764e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007652:	4651      	mov	r1, sl
 8007654:	00ca      	lsls	r2, r1, #3
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	4603      	mov	r3, r0
 800765c:	4642      	mov	r2, r8
 800765e:	189b      	adds	r3, r3, r2
 8007660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007664:	464b      	mov	r3, r9
 8007666:	460a      	mov	r2, r1
 8007668:	eb42 0303 	adc.w	r3, r2, r3
 800766c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	67bb      	str	r3, [r7, #120]	; 0x78
 800767a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	f04f 0300 	mov.w	r3, #0
 8007684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007688:	4649      	mov	r1, r9
 800768a:	008b      	lsls	r3, r1, #2
 800768c:	4641      	mov	r1, r8
 800768e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007692:	4641      	mov	r1, r8
 8007694:	008a      	lsls	r2, r1, #2
 8007696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800769a:	f7f9 faf5 	bl	8000c88 <__aeabi_uldivmod>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4611      	mov	r1, r2
 80076a4:	4b38      	ldr	r3, [pc, #224]	; (8007788 <UART_SetConfig+0x4e4>)
 80076a6:	fba3 2301 	umull	r2, r3, r3, r1
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	2264      	movs	r2, #100	; 0x64
 80076ae:	fb02 f303 	mul.w	r3, r2, r3
 80076b2:	1acb      	subs	r3, r1, r3
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	3332      	adds	r3, #50	; 0x32
 80076b8:	4a33      	ldr	r2, [pc, #204]	; (8007788 <UART_SetConfig+0x4e4>)
 80076ba:	fba2 2303 	umull	r2, r3, r2, r3
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076c4:	441c      	add	r4, r3
 80076c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ca:	2200      	movs	r2, #0
 80076cc:	673b      	str	r3, [r7, #112]	; 0x70
 80076ce:	677a      	str	r2, [r7, #116]	; 0x74
 80076d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076d4:	4642      	mov	r2, r8
 80076d6:	464b      	mov	r3, r9
 80076d8:	1891      	adds	r1, r2, r2
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	415b      	adcs	r3, r3
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076e4:	4641      	mov	r1, r8
 80076e6:	1851      	adds	r1, r2, r1
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	4649      	mov	r1, r9
 80076ec:	414b      	adcs	r3, r1
 80076ee:	607b      	str	r3, [r7, #4]
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076fc:	4659      	mov	r1, fp
 80076fe:	00cb      	lsls	r3, r1, #3
 8007700:	4651      	mov	r1, sl
 8007702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007706:	4651      	mov	r1, sl
 8007708:	00ca      	lsls	r2, r1, #3
 800770a:	4610      	mov	r0, r2
 800770c:	4619      	mov	r1, r3
 800770e:	4603      	mov	r3, r0
 8007710:	4642      	mov	r2, r8
 8007712:	189b      	adds	r3, r3, r2
 8007714:	66bb      	str	r3, [r7, #104]	; 0x68
 8007716:	464b      	mov	r3, r9
 8007718:	460a      	mov	r2, r1
 800771a:	eb42 0303 	adc.w	r3, r2, r3
 800771e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	663b      	str	r3, [r7, #96]	; 0x60
 800772a:	667a      	str	r2, [r7, #100]	; 0x64
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007738:	4649      	mov	r1, r9
 800773a:	008b      	lsls	r3, r1, #2
 800773c:	4641      	mov	r1, r8
 800773e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007742:	4641      	mov	r1, r8
 8007744:	008a      	lsls	r2, r1, #2
 8007746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800774a:	f7f9 fa9d 	bl	8000c88 <__aeabi_uldivmod>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4b0d      	ldr	r3, [pc, #52]	; (8007788 <UART_SetConfig+0x4e4>)
 8007754:	fba3 1302 	umull	r1, r3, r3, r2
 8007758:	095b      	lsrs	r3, r3, #5
 800775a:	2164      	movs	r1, #100	; 0x64
 800775c:	fb01 f303 	mul.w	r3, r1, r3
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	3332      	adds	r3, #50	; 0x32
 8007766:	4a08      	ldr	r2, [pc, #32]	; (8007788 <UART_SetConfig+0x4e4>)
 8007768:	fba2 2303 	umull	r2, r3, r2, r3
 800776c:	095b      	lsrs	r3, r3, #5
 800776e:	f003 020f 	and.w	r2, r3, #15
 8007772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4422      	add	r2, r4
 800777a:	609a      	str	r2, [r3, #8]
}
 800777c:	bf00      	nop
 800777e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007782:	46bd      	mov	sp, r7
 8007784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007788:	51eb851f 	.word	0x51eb851f

0800778c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007790:	4904      	ldr	r1, [pc, #16]	; (80077a4 <MX_FATFS_Init+0x18>)
 8007792:	4805      	ldr	r0, [pc, #20]	; (80077a8 <MX_FATFS_Init+0x1c>)
 8007794:	f000 f8b0 	bl	80078f8 <FATFS_LinkDriver>
 8007798:	4603      	mov	r3, r0
 800779a:	461a      	mov	r2, r3
 800779c:	4b03      	ldr	r3, [pc, #12]	; (80077ac <MX_FATFS_Init+0x20>)
 800779e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80077a0:	bf00      	nop
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	200006e8 	.word	0x200006e8
 80077a8:	20000010 	.word	0x20000010
 80077ac:	200006e4 	.word	0x200006e4

080077b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80077ba:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <USER_initialize+0x24>)
 80077bc:	2201      	movs	r2, #1
 80077be:	701a      	strb	r2, [r3, #0]
    return Stat;
 80077c0:	4b04      	ldr	r3, [pc, #16]	; (80077d4 <USER_initialize+0x24>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	2000000d 	.word	0x2000000d

080077d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80077e2:	4b06      	ldr	r3, [pc, #24]	; (80077fc <USER_status+0x24>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <USER_status+0x24>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	2000000d 	.word	0x2000000d

08007800 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	607a      	str	r2, [r7, #4]
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	4603      	mov	r3, r0
 800780e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007810:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800782e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	603a      	str	r2, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
 8007848:	460b      	mov	r3, r1
 800784a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
    return res;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800786e:	2301      	movs	r3, #1
 8007870:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007876:	4b1f      	ldr	r3, [pc, #124]	; (80078f4 <FATFS_LinkDriverEx+0x94>)
 8007878:	7a5b      	ldrb	r3, [r3, #9]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d131      	bne.n	80078e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007880:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <FATFS_LinkDriverEx+0x94>)
 8007882:	7a5b      	ldrb	r3, [r3, #9]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <FATFS_LinkDriverEx+0x94>)
 800788a:	2100      	movs	r1, #0
 800788c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800788e:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <FATFS_LinkDriverEx+0x94>)
 8007890:	7a5b      	ldrb	r3, [r3, #9]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	4a17      	ldr	r2, [pc, #92]	; (80078f4 <FATFS_LinkDriverEx+0x94>)
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800789e:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <FATFS_LinkDriverEx+0x94>)
 80078a0:	7a5b      	ldrb	r3, [r3, #9]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	461a      	mov	r2, r3
 80078a6:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <FATFS_LinkDriverEx+0x94>)
 80078a8:	4413      	add	r3, r2
 80078aa:	79fa      	ldrb	r2, [r7, #7]
 80078ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <FATFS_LinkDriverEx+0x94>)
 80078b0:	7a5b      	ldrb	r3, [r3, #9]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	b2d1      	uxtb	r1, r2
 80078b8:	4a0e      	ldr	r2, [pc, #56]	; (80078f4 <FATFS_LinkDriverEx+0x94>)
 80078ba:	7251      	strb	r1, [r2, #9]
 80078bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80078be:	7dbb      	ldrb	r3, [r7, #22]
 80078c0:	3330      	adds	r3, #48	; 0x30
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	3301      	adds	r3, #1
 80078cc:	223a      	movs	r2, #58	; 0x3a
 80078ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	3302      	adds	r3, #2
 80078d4:	222f      	movs	r2, #47	; 0x2f
 80078d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	3303      	adds	r3, #3
 80078dc:	2200      	movs	r2, #0
 80078de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	200006ec 	.word	0x200006ec

080078f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007902:	2200      	movs	r2, #0
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff ffaa 	bl	8007860 <FATFS_LinkDriverEx>
 800790c:	4603      	mov	r3, r0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <__cvt>:
 8007916:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800791a:	ec55 4b10 	vmov	r4, r5, d0
 800791e:	2d00      	cmp	r5, #0
 8007920:	460e      	mov	r6, r1
 8007922:	4619      	mov	r1, r3
 8007924:	462b      	mov	r3, r5
 8007926:	bfbb      	ittet	lt
 8007928:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800792c:	461d      	movlt	r5, r3
 800792e:	2300      	movge	r3, #0
 8007930:	232d      	movlt	r3, #45	; 0x2d
 8007932:	700b      	strb	r3, [r1, #0]
 8007934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007936:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800793a:	4691      	mov	r9, r2
 800793c:	f023 0820 	bic.w	r8, r3, #32
 8007940:	bfbc      	itt	lt
 8007942:	4622      	movlt	r2, r4
 8007944:	4614      	movlt	r4, r2
 8007946:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800794a:	d005      	beq.n	8007958 <__cvt+0x42>
 800794c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007950:	d100      	bne.n	8007954 <__cvt+0x3e>
 8007952:	3601      	adds	r6, #1
 8007954:	2102      	movs	r1, #2
 8007956:	e000      	b.n	800795a <__cvt+0x44>
 8007958:	2103      	movs	r1, #3
 800795a:	ab03      	add	r3, sp, #12
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	ab02      	add	r3, sp, #8
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	ec45 4b10 	vmov	d0, r4, r5
 8007966:	4653      	mov	r3, sl
 8007968:	4632      	mov	r2, r6
 800796a:	f001 f8ad 	bl	8008ac8 <_dtoa_r>
 800796e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007972:	4607      	mov	r7, r0
 8007974:	d102      	bne.n	800797c <__cvt+0x66>
 8007976:	f019 0f01 	tst.w	r9, #1
 800797a:	d022      	beq.n	80079c2 <__cvt+0xac>
 800797c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007980:	eb07 0906 	add.w	r9, r7, r6
 8007984:	d110      	bne.n	80079a8 <__cvt+0x92>
 8007986:	783b      	ldrb	r3, [r7, #0]
 8007988:	2b30      	cmp	r3, #48	; 0x30
 800798a:	d10a      	bne.n	80079a2 <__cvt+0x8c>
 800798c:	2200      	movs	r2, #0
 800798e:	2300      	movs	r3, #0
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	f7f9 f898 	bl	8000ac8 <__aeabi_dcmpeq>
 8007998:	b918      	cbnz	r0, 80079a2 <__cvt+0x8c>
 800799a:	f1c6 0601 	rsb	r6, r6, #1
 800799e:	f8ca 6000 	str.w	r6, [sl]
 80079a2:	f8da 3000 	ldr.w	r3, [sl]
 80079a6:	4499      	add	r9, r3
 80079a8:	2200      	movs	r2, #0
 80079aa:	2300      	movs	r3, #0
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f9 f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80079b4:	b108      	cbz	r0, 80079ba <__cvt+0xa4>
 80079b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80079ba:	2230      	movs	r2, #48	; 0x30
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	454b      	cmp	r3, r9
 80079c0:	d307      	bcc.n	80079d2 <__cvt+0xbc>
 80079c2:	9b03      	ldr	r3, [sp, #12]
 80079c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079c6:	1bdb      	subs	r3, r3, r7
 80079c8:	4638      	mov	r0, r7
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	b004      	add	sp, #16
 80079ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	9103      	str	r1, [sp, #12]
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	e7f0      	b.n	80079bc <__cvt+0xa6>

080079da <__exponent>:
 80079da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079dc:	4603      	mov	r3, r0
 80079de:	2900      	cmp	r1, #0
 80079e0:	bfb8      	it	lt
 80079e2:	4249      	neglt	r1, r1
 80079e4:	f803 2b02 	strb.w	r2, [r3], #2
 80079e8:	bfb4      	ite	lt
 80079ea:	222d      	movlt	r2, #45	; 0x2d
 80079ec:	222b      	movge	r2, #43	; 0x2b
 80079ee:	2909      	cmp	r1, #9
 80079f0:	7042      	strb	r2, [r0, #1]
 80079f2:	dd2a      	ble.n	8007a4a <__exponent+0x70>
 80079f4:	f10d 0207 	add.w	r2, sp, #7
 80079f8:	4617      	mov	r7, r2
 80079fa:	260a      	movs	r6, #10
 80079fc:	4694      	mov	ip, r2
 80079fe:	fb91 f5f6 	sdiv	r5, r1, r6
 8007a02:	fb06 1415 	mls	r4, r6, r5, r1
 8007a06:	3430      	adds	r4, #48	; 0x30
 8007a08:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	2c63      	cmp	r4, #99	; 0x63
 8007a10:	f102 32ff 	add.w	r2, r2, #4294967295
 8007a14:	4629      	mov	r1, r5
 8007a16:	dcf1      	bgt.n	80079fc <__exponent+0x22>
 8007a18:	3130      	adds	r1, #48	; 0x30
 8007a1a:	f1ac 0402 	sub.w	r4, ip, #2
 8007a1e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007a22:	1c41      	adds	r1, r0, #1
 8007a24:	4622      	mov	r2, r4
 8007a26:	42ba      	cmp	r2, r7
 8007a28:	d30a      	bcc.n	8007a40 <__exponent+0x66>
 8007a2a:	f10d 0209 	add.w	r2, sp, #9
 8007a2e:	eba2 020c 	sub.w	r2, r2, ip
 8007a32:	42bc      	cmp	r4, r7
 8007a34:	bf88      	it	hi
 8007a36:	2200      	movhi	r2, #0
 8007a38:	4413      	add	r3, r2
 8007a3a:	1a18      	subs	r0, r3, r0
 8007a3c:	b003      	add	sp, #12
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a40:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007a44:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007a48:	e7ed      	b.n	8007a26 <__exponent+0x4c>
 8007a4a:	2330      	movs	r3, #48	; 0x30
 8007a4c:	3130      	adds	r1, #48	; 0x30
 8007a4e:	7083      	strb	r3, [r0, #2]
 8007a50:	70c1      	strb	r1, [r0, #3]
 8007a52:	1d03      	adds	r3, r0, #4
 8007a54:	e7f1      	b.n	8007a3a <__exponent+0x60>
	...

08007a58 <_printf_float>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	ed2d 8b02 	vpush	{d8}
 8007a60:	b08d      	sub	sp, #52	; 0x34
 8007a62:	460c      	mov	r4, r1
 8007a64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a68:	4616      	mov	r6, r2
 8007a6a:	461f      	mov	r7, r3
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	f000 ff25 	bl	80088bc <_localeconv_r>
 8007a72:	f8d0 a000 	ldr.w	sl, [r0]
 8007a76:	4650      	mov	r0, sl
 8007a78:	f7f8 fbfa 	bl	8000270 <strlen>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	f8d8 3000 	ldr.w	r3, [r8]
 8007a88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a8c:	3307      	adds	r3, #7
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	f103 0208 	add.w	r2, r3, #8
 8007a96:	f8c8 2000 	str.w	r2, [r8]
 8007a9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007aa2:	9307      	str	r3, [sp, #28]
 8007aa4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007aa8:	ee08 0a10 	vmov	s16, r0
 8007aac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ab4:	4b9e      	ldr	r3, [pc, #632]	; (8007d30 <_printf_float+0x2d8>)
 8007ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aba:	f7f9 f837 	bl	8000b2c <__aeabi_dcmpun>
 8007abe:	bb88      	cbnz	r0, 8007b24 <_printf_float+0xcc>
 8007ac0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ac4:	4b9a      	ldr	r3, [pc, #616]	; (8007d30 <_printf_float+0x2d8>)
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	f7f9 f811 	bl	8000af0 <__aeabi_dcmple>
 8007ace:	bb48      	cbnz	r0, 8007b24 <_printf_float+0xcc>
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	4640      	mov	r0, r8
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	f7f9 f800 	bl	8000adc <__aeabi_dcmplt>
 8007adc:	b110      	cbz	r0, 8007ae4 <_printf_float+0x8c>
 8007ade:	232d      	movs	r3, #45	; 0x2d
 8007ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae4:	4a93      	ldr	r2, [pc, #588]	; (8007d34 <_printf_float+0x2dc>)
 8007ae6:	4b94      	ldr	r3, [pc, #592]	; (8007d38 <_printf_float+0x2e0>)
 8007ae8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007aec:	bf94      	ite	ls
 8007aee:	4690      	movls	r8, r2
 8007af0:	4698      	movhi	r8, r3
 8007af2:	2303      	movs	r3, #3
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	9b05      	ldr	r3, [sp, #20]
 8007af8:	f023 0304 	bic.w	r3, r3, #4
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	f04f 0900 	mov.w	r9, #0
 8007b02:	9700      	str	r7, [sp, #0]
 8007b04:	4633      	mov	r3, r6
 8007b06:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 f9da 	bl	8007ec4 <_printf_common>
 8007b10:	3001      	adds	r0, #1
 8007b12:	f040 8090 	bne.w	8007c36 <_printf_float+0x1de>
 8007b16:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1a:	b00d      	add	sp, #52	; 0x34
 8007b1c:	ecbd 8b02 	vpop	{d8}
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	4640      	mov	r0, r8
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	f7f8 fffe 	bl	8000b2c <__aeabi_dcmpun>
 8007b30:	b140      	cbz	r0, 8007b44 <_printf_float+0xec>
 8007b32:	464b      	mov	r3, r9
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bfbc      	itt	lt
 8007b38:	232d      	movlt	r3, #45	; 0x2d
 8007b3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b3e:	4a7f      	ldr	r2, [pc, #508]	; (8007d3c <_printf_float+0x2e4>)
 8007b40:	4b7f      	ldr	r3, [pc, #508]	; (8007d40 <_printf_float+0x2e8>)
 8007b42:	e7d1      	b.n	8007ae8 <_printf_float+0x90>
 8007b44:	6863      	ldr	r3, [r4, #4]
 8007b46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b4a:	9206      	str	r2, [sp, #24]
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	d13f      	bne.n	8007bd0 <_printf_float+0x178>
 8007b50:	2306      	movs	r3, #6
 8007b52:	6063      	str	r3, [r4, #4]
 8007b54:	9b05      	ldr	r3, [sp, #20]
 8007b56:	6861      	ldr	r1, [r4, #4]
 8007b58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	ab0a      	add	r3, sp, #40	; 0x28
 8007b62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b66:	ab09      	add	r3, sp, #36	; 0x24
 8007b68:	ec49 8b10 	vmov	d0, r8, r9
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	6022      	str	r2, [r4, #0]
 8007b70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b74:	4628      	mov	r0, r5
 8007b76:	f7ff fece 	bl	8007916 <__cvt>
 8007b7a:	9b06      	ldr	r3, [sp, #24]
 8007b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b7e:	2b47      	cmp	r3, #71	; 0x47
 8007b80:	4680      	mov	r8, r0
 8007b82:	d108      	bne.n	8007b96 <_printf_float+0x13e>
 8007b84:	1cc8      	adds	r0, r1, #3
 8007b86:	db02      	blt.n	8007b8e <_printf_float+0x136>
 8007b88:	6863      	ldr	r3, [r4, #4]
 8007b8a:	4299      	cmp	r1, r3
 8007b8c:	dd41      	ble.n	8007c12 <_printf_float+0x1ba>
 8007b8e:	f1ab 0302 	sub.w	r3, fp, #2
 8007b92:	fa5f fb83 	uxtb.w	fp, r3
 8007b96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b9a:	d820      	bhi.n	8007bde <_printf_float+0x186>
 8007b9c:	3901      	subs	r1, #1
 8007b9e:	465a      	mov	r2, fp
 8007ba0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ba4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ba6:	f7ff ff18 	bl	80079da <__exponent>
 8007baa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bac:	1813      	adds	r3, r2, r0
 8007bae:	2a01      	cmp	r2, #1
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	dc02      	bgt.n	8007bbc <_printf_float+0x164>
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	07d2      	lsls	r2, r2, #31
 8007bba:	d501      	bpl.n	8007bc0 <_printf_float+0x168>
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d09c      	beq.n	8007b02 <_printf_float+0xaa>
 8007bc8:	232d      	movs	r3, #45	; 0x2d
 8007bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bce:	e798      	b.n	8007b02 <_printf_float+0xaa>
 8007bd0:	9a06      	ldr	r2, [sp, #24]
 8007bd2:	2a47      	cmp	r2, #71	; 0x47
 8007bd4:	d1be      	bne.n	8007b54 <_printf_float+0xfc>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1bc      	bne.n	8007b54 <_printf_float+0xfc>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e7b9      	b.n	8007b52 <_printf_float+0xfa>
 8007bde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007be2:	d118      	bne.n	8007c16 <_printf_float+0x1be>
 8007be4:	2900      	cmp	r1, #0
 8007be6:	6863      	ldr	r3, [r4, #4]
 8007be8:	dd0b      	ble.n	8007c02 <_printf_float+0x1aa>
 8007bea:	6121      	str	r1, [r4, #16]
 8007bec:	b913      	cbnz	r3, 8007bf4 <_printf_float+0x19c>
 8007bee:	6822      	ldr	r2, [r4, #0]
 8007bf0:	07d0      	lsls	r0, r2, #31
 8007bf2:	d502      	bpl.n	8007bfa <_printf_float+0x1a2>
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	440b      	add	r3, r1
 8007bf8:	6123      	str	r3, [r4, #16]
 8007bfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bfc:	f04f 0900 	mov.w	r9, #0
 8007c00:	e7de      	b.n	8007bc0 <_printf_float+0x168>
 8007c02:	b913      	cbnz	r3, 8007c0a <_printf_float+0x1b2>
 8007c04:	6822      	ldr	r2, [r4, #0]
 8007c06:	07d2      	lsls	r2, r2, #31
 8007c08:	d501      	bpl.n	8007c0e <_printf_float+0x1b6>
 8007c0a:	3302      	adds	r3, #2
 8007c0c:	e7f4      	b.n	8007bf8 <_printf_float+0x1a0>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e7f2      	b.n	8007bf8 <_printf_float+0x1a0>
 8007c12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c18:	4299      	cmp	r1, r3
 8007c1a:	db05      	blt.n	8007c28 <_printf_float+0x1d0>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	6121      	str	r1, [r4, #16]
 8007c20:	07d8      	lsls	r0, r3, #31
 8007c22:	d5ea      	bpl.n	8007bfa <_printf_float+0x1a2>
 8007c24:	1c4b      	adds	r3, r1, #1
 8007c26:	e7e7      	b.n	8007bf8 <_printf_float+0x1a0>
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	bfd4      	ite	le
 8007c2c:	f1c1 0202 	rsble	r2, r1, #2
 8007c30:	2201      	movgt	r2, #1
 8007c32:	4413      	add	r3, r2
 8007c34:	e7e0      	b.n	8007bf8 <_printf_float+0x1a0>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	055a      	lsls	r2, r3, #21
 8007c3a:	d407      	bmi.n	8007c4c <_printf_float+0x1f4>
 8007c3c:	6923      	ldr	r3, [r4, #16]
 8007c3e:	4642      	mov	r2, r8
 8007c40:	4631      	mov	r1, r6
 8007c42:	4628      	mov	r0, r5
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	d12c      	bne.n	8007ca4 <_printf_float+0x24c>
 8007c4a:	e764      	b.n	8007b16 <_printf_float+0xbe>
 8007c4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c50:	f240 80e0 	bls.w	8007e14 <_printf_float+0x3bc>
 8007c54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f7f8 ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d034      	beq.n	8007cce <_printf_float+0x276>
 8007c64:	4a37      	ldr	r2, [pc, #220]	; (8007d44 <_printf_float+0x2ec>)
 8007c66:	2301      	movs	r3, #1
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f af51 	beq.w	8007b16 <_printf_float+0xbe>
 8007c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	db02      	blt.n	8007c82 <_printf_float+0x22a>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	07d8      	lsls	r0, r3, #31
 8007c80:	d510      	bpl.n	8007ca4 <_printf_float+0x24c>
 8007c82:	ee18 3a10 	vmov	r3, s16
 8007c86:	4652      	mov	r2, sl
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	f43f af41 	beq.w	8007b16 <_printf_float+0xbe>
 8007c94:	f04f 0800 	mov.w	r8, #0
 8007c98:	f104 091a 	add.w	r9, r4, #26
 8007c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	4543      	cmp	r3, r8
 8007ca2:	dc09      	bgt.n	8007cb8 <_printf_float+0x260>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	079b      	lsls	r3, r3, #30
 8007ca8:	f100 8107 	bmi.w	8007eba <_printf_float+0x462>
 8007cac:	68e0      	ldr	r0, [r4, #12]
 8007cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cb0:	4298      	cmp	r0, r3
 8007cb2:	bfb8      	it	lt
 8007cb4:	4618      	movlt	r0, r3
 8007cb6:	e730      	b.n	8007b1a <_printf_float+0xc2>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	464a      	mov	r2, r9
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b8      	blx	r7
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	f43f af27 	beq.w	8007b16 <_printf_float+0xbe>
 8007cc8:	f108 0801 	add.w	r8, r8, #1
 8007ccc:	e7e6      	b.n	8007c9c <_printf_float+0x244>
 8007cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	dc39      	bgt.n	8007d48 <_printf_float+0x2f0>
 8007cd4:	4a1b      	ldr	r2, [pc, #108]	; (8007d44 <_printf_float+0x2ec>)
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f af19 	beq.w	8007b16 <_printf_float+0xbe>
 8007ce4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	d102      	bne.n	8007cf2 <_printf_float+0x29a>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	07d9      	lsls	r1, r3, #31
 8007cf0:	d5d8      	bpl.n	8007ca4 <_printf_float+0x24c>
 8007cf2:	ee18 3a10 	vmov	r3, s16
 8007cf6:	4652      	mov	r2, sl
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b8      	blx	r7
 8007cfe:	3001      	adds	r0, #1
 8007d00:	f43f af09 	beq.w	8007b16 <_printf_float+0xbe>
 8007d04:	f04f 0900 	mov.w	r9, #0
 8007d08:	f104 0a1a 	add.w	sl, r4, #26
 8007d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0e:	425b      	negs	r3, r3
 8007d10:	454b      	cmp	r3, r9
 8007d12:	dc01      	bgt.n	8007d18 <_printf_float+0x2c0>
 8007d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d16:	e792      	b.n	8007c3e <_printf_float+0x1e6>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	4652      	mov	r2, sl
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4628      	mov	r0, r5
 8007d20:	47b8      	blx	r7
 8007d22:	3001      	adds	r0, #1
 8007d24:	f43f aef7 	beq.w	8007b16 <_printf_float+0xbe>
 8007d28:	f109 0901 	add.w	r9, r9, #1
 8007d2c:	e7ee      	b.n	8007d0c <_printf_float+0x2b4>
 8007d2e:	bf00      	nop
 8007d30:	7fefffff 	.word	0x7fefffff
 8007d34:	0800caf1 	.word	0x0800caf1
 8007d38:	0800caf5 	.word	0x0800caf5
 8007d3c:	0800caf9 	.word	0x0800caf9
 8007d40:	0800cafd 	.word	0x0800cafd
 8007d44:	0800cd87 	.word	0x0800cd87
 8007d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	bfa8      	it	ge
 8007d50:	461a      	movge	r2, r3
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	4691      	mov	r9, r2
 8007d56:	dc37      	bgt.n	8007dc8 <_printf_float+0x370>
 8007d58:	f04f 0b00 	mov.w	fp, #0
 8007d5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d60:	f104 021a 	add.w	r2, r4, #26
 8007d64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d66:	9305      	str	r3, [sp, #20]
 8007d68:	eba3 0309 	sub.w	r3, r3, r9
 8007d6c:	455b      	cmp	r3, fp
 8007d6e:	dc33      	bgt.n	8007dd8 <_printf_float+0x380>
 8007d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d74:	429a      	cmp	r2, r3
 8007d76:	db3b      	blt.n	8007df0 <_printf_float+0x398>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	07da      	lsls	r2, r3, #31
 8007d7c:	d438      	bmi.n	8007df0 <_printf_float+0x398>
 8007d7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d82:	eba2 0903 	sub.w	r9, r2, r3
 8007d86:	9b05      	ldr	r3, [sp, #20]
 8007d88:	1ad2      	subs	r2, r2, r3
 8007d8a:	4591      	cmp	r9, r2
 8007d8c:	bfa8      	it	ge
 8007d8e:	4691      	movge	r9, r2
 8007d90:	f1b9 0f00 	cmp.w	r9, #0
 8007d94:	dc35      	bgt.n	8007e02 <_printf_float+0x3aa>
 8007d96:	f04f 0800 	mov.w	r8, #0
 8007d9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d9e:	f104 0a1a 	add.w	sl, r4, #26
 8007da2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	eba3 0309 	sub.w	r3, r3, r9
 8007dac:	4543      	cmp	r3, r8
 8007dae:	f77f af79 	ble.w	8007ca4 <_printf_float+0x24c>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4652      	mov	r2, sl
 8007db6:	4631      	mov	r1, r6
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b8      	blx	r7
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	f43f aeaa 	beq.w	8007b16 <_printf_float+0xbe>
 8007dc2:	f108 0801 	add.w	r8, r8, #1
 8007dc6:	e7ec      	b.n	8007da2 <_printf_float+0x34a>
 8007dc8:	4613      	mov	r3, r2
 8007dca:	4631      	mov	r1, r6
 8007dcc:	4642      	mov	r2, r8
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47b8      	blx	r7
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	d1c0      	bne.n	8007d58 <_printf_float+0x300>
 8007dd6:	e69e      	b.n	8007b16 <_printf_float+0xbe>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4628      	mov	r0, r5
 8007dde:	9205      	str	r2, [sp, #20]
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	f43f ae97 	beq.w	8007b16 <_printf_float+0xbe>
 8007de8:	9a05      	ldr	r2, [sp, #20]
 8007dea:	f10b 0b01 	add.w	fp, fp, #1
 8007dee:	e7b9      	b.n	8007d64 <_printf_float+0x30c>
 8007df0:	ee18 3a10 	vmov	r3, s16
 8007df4:	4652      	mov	r2, sl
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b8      	blx	r7
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d1be      	bne.n	8007d7e <_printf_float+0x326>
 8007e00:	e689      	b.n	8007b16 <_printf_float+0xbe>
 8007e02:	9a05      	ldr	r2, [sp, #20]
 8007e04:	464b      	mov	r3, r9
 8007e06:	4442      	add	r2, r8
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	47b8      	blx	r7
 8007e0e:	3001      	adds	r0, #1
 8007e10:	d1c1      	bne.n	8007d96 <_printf_float+0x33e>
 8007e12:	e680      	b.n	8007b16 <_printf_float+0xbe>
 8007e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e16:	2a01      	cmp	r2, #1
 8007e18:	dc01      	bgt.n	8007e1e <_printf_float+0x3c6>
 8007e1a:	07db      	lsls	r3, r3, #31
 8007e1c:	d53a      	bpl.n	8007e94 <_printf_float+0x43c>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	4642      	mov	r2, r8
 8007e22:	4631      	mov	r1, r6
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b8      	blx	r7
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f43f ae74 	beq.w	8007b16 <_printf_float+0xbe>
 8007e2e:	ee18 3a10 	vmov	r3, s16
 8007e32:	4652      	mov	r2, sl
 8007e34:	4631      	mov	r1, r6
 8007e36:	4628      	mov	r0, r5
 8007e38:	47b8      	blx	r7
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	f43f ae6b 	beq.w	8007b16 <_printf_float+0xbe>
 8007e40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e44:	2200      	movs	r2, #0
 8007e46:	2300      	movs	r3, #0
 8007e48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007e4c:	f7f8 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e50:	b9d8      	cbnz	r0, 8007e8a <_printf_float+0x432>
 8007e52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e56:	f108 0201 	add.w	r2, r8, #1
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	d10e      	bne.n	8007e82 <_printf_float+0x42a>
 8007e64:	e657      	b.n	8007b16 <_printf_float+0xbe>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4652      	mov	r2, sl
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	47b8      	blx	r7
 8007e70:	3001      	adds	r0, #1
 8007e72:	f43f ae50 	beq.w	8007b16 <_printf_float+0xbe>
 8007e76:	f108 0801 	add.w	r8, r8, #1
 8007e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	4543      	cmp	r3, r8
 8007e80:	dcf1      	bgt.n	8007e66 <_printf_float+0x40e>
 8007e82:	464b      	mov	r3, r9
 8007e84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e88:	e6da      	b.n	8007c40 <_printf_float+0x1e8>
 8007e8a:	f04f 0800 	mov.w	r8, #0
 8007e8e:	f104 0a1a 	add.w	sl, r4, #26
 8007e92:	e7f2      	b.n	8007e7a <_printf_float+0x422>
 8007e94:	2301      	movs	r3, #1
 8007e96:	4642      	mov	r2, r8
 8007e98:	e7df      	b.n	8007e5a <_printf_float+0x402>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	464a      	mov	r2, r9
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	47b8      	blx	r7
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	f43f ae36 	beq.w	8007b16 <_printf_float+0xbe>
 8007eaa:	f108 0801 	add.w	r8, r8, #1
 8007eae:	68e3      	ldr	r3, [r4, #12]
 8007eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007eb2:	1a5b      	subs	r3, r3, r1
 8007eb4:	4543      	cmp	r3, r8
 8007eb6:	dcf0      	bgt.n	8007e9a <_printf_float+0x442>
 8007eb8:	e6f8      	b.n	8007cac <_printf_float+0x254>
 8007eba:	f04f 0800 	mov.w	r8, #0
 8007ebe:	f104 0919 	add.w	r9, r4, #25
 8007ec2:	e7f4      	b.n	8007eae <_printf_float+0x456>

08007ec4 <_printf_common>:
 8007ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec8:	4616      	mov	r6, r2
 8007eca:	4699      	mov	r9, r3
 8007ecc:	688a      	ldr	r2, [r1, #8]
 8007ece:	690b      	ldr	r3, [r1, #16]
 8007ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	bfb8      	it	lt
 8007ed8:	4613      	movlt	r3, r2
 8007eda:	6033      	str	r3, [r6, #0]
 8007edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ee0:	4607      	mov	r7, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	b10a      	cbz	r2, 8007eea <_printf_common+0x26>
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	6033      	str	r3, [r6, #0]
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	0699      	lsls	r1, r3, #26
 8007eee:	bf42      	ittt	mi
 8007ef0:	6833      	ldrmi	r3, [r6, #0]
 8007ef2:	3302      	addmi	r3, #2
 8007ef4:	6033      	strmi	r3, [r6, #0]
 8007ef6:	6825      	ldr	r5, [r4, #0]
 8007ef8:	f015 0506 	ands.w	r5, r5, #6
 8007efc:	d106      	bne.n	8007f0c <_printf_common+0x48>
 8007efe:	f104 0a19 	add.w	sl, r4, #25
 8007f02:	68e3      	ldr	r3, [r4, #12]
 8007f04:	6832      	ldr	r2, [r6, #0]
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	dc26      	bgt.n	8007f5a <_printf_common+0x96>
 8007f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f10:	1e13      	subs	r3, r2, #0
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	bf18      	it	ne
 8007f16:	2301      	movne	r3, #1
 8007f18:	0692      	lsls	r2, r2, #26
 8007f1a:	d42b      	bmi.n	8007f74 <_printf_common+0xb0>
 8007f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f20:	4649      	mov	r1, r9
 8007f22:	4638      	mov	r0, r7
 8007f24:	47c0      	blx	r8
 8007f26:	3001      	adds	r0, #1
 8007f28:	d01e      	beq.n	8007f68 <_printf_common+0xa4>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	6922      	ldr	r2, [r4, #16]
 8007f2e:	f003 0306 	and.w	r3, r3, #6
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	bf02      	ittt	eq
 8007f36:	68e5      	ldreq	r5, [r4, #12]
 8007f38:	6833      	ldreq	r3, [r6, #0]
 8007f3a:	1aed      	subeq	r5, r5, r3
 8007f3c:	68a3      	ldr	r3, [r4, #8]
 8007f3e:	bf0c      	ite	eq
 8007f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f44:	2500      	movne	r5, #0
 8007f46:	4293      	cmp	r3, r2
 8007f48:	bfc4      	itt	gt
 8007f4a:	1a9b      	subgt	r3, r3, r2
 8007f4c:	18ed      	addgt	r5, r5, r3
 8007f4e:	2600      	movs	r6, #0
 8007f50:	341a      	adds	r4, #26
 8007f52:	42b5      	cmp	r5, r6
 8007f54:	d11a      	bne.n	8007f8c <_printf_common+0xc8>
 8007f56:	2000      	movs	r0, #0
 8007f58:	e008      	b.n	8007f6c <_printf_common+0xa8>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	4652      	mov	r2, sl
 8007f5e:	4649      	mov	r1, r9
 8007f60:	4638      	mov	r0, r7
 8007f62:	47c0      	blx	r8
 8007f64:	3001      	adds	r0, #1
 8007f66:	d103      	bne.n	8007f70 <_printf_common+0xac>
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f70:	3501      	adds	r5, #1
 8007f72:	e7c6      	b.n	8007f02 <_printf_common+0x3e>
 8007f74:	18e1      	adds	r1, r4, r3
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	2030      	movs	r0, #48	; 0x30
 8007f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f7e:	4422      	add	r2, r4
 8007f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f88:	3302      	adds	r3, #2
 8007f8a:	e7c7      	b.n	8007f1c <_printf_common+0x58>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4622      	mov	r2, r4
 8007f90:	4649      	mov	r1, r9
 8007f92:	4638      	mov	r0, r7
 8007f94:	47c0      	blx	r8
 8007f96:	3001      	adds	r0, #1
 8007f98:	d0e6      	beq.n	8007f68 <_printf_common+0xa4>
 8007f9a:	3601      	adds	r6, #1
 8007f9c:	e7d9      	b.n	8007f52 <_printf_common+0x8e>
	...

08007fa0 <_printf_i>:
 8007fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	7e0f      	ldrb	r7, [r1, #24]
 8007fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fa8:	2f78      	cmp	r7, #120	; 0x78
 8007faa:	4691      	mov	r9, r2
 8007fac:	4680      	mov	r8, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	469a      	mov	sl, r3
 8007fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fb6:	d807      	bhi.n	8007fc8 <_printf_i+0x28>
 8007fb8:	2f62      	cmp	r7, #98	; 0x62
 8007fba:	d80a      	bhi.n	8007fd2 <_printf_i+0x32>
 8007fbc:	2f00      	cmp	r7, #0
 8007fbe:	f000 80d4 	beq.w	800816a <_printf_i+0x1ca>
 8007fc2:	2f58      	cmp	r7, #88	; 0x58
 8007fc4:	f000 80c0 	beq.w	8008148 <_printf_i+0x1a8>
 8007fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fd0:	e03a      	b.n	8008048 <_printf_i+0xa8>
 8007fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fd6:	2b15      	cmp	r3, #21
 8007fd8:	d8f6      	bhi.n	8007fc8 <_printf_i+0x28>
 8007fda:	a101      	add	r1, pc, #4	; (adr r1, 8007fe0 <_printf_i+0x40>)
 8007fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fe0:	08008039 	.word	0x08008039
 8007fe4:	0800804d 	.word	0x0800804d
 8007fe8:	08007fc9 	.word	0x08007fc9
 8007fec:	08007fc9 	.word	0x08007fc9
 8007ff0:	08007fc9 	.word	0x08007fc9
 8007ff4:	08007fc9 	.word	0x08007fc9
 8007ff8:	0800804d 	.word	0x0800804d
 8007ffc:	08007fc9 	.word	0x08007fc9
 8008000:	08007fc9 	.word	0x08007fc9
 8008004:	08007fc9 	.word	0x08007fc9
 8008008:	08007fc9 	.word	0x08007fc9
 800800c:	08008151 	.word	0x08008151
 8008010:	08008079 	.word	0x08008079
 8008014:	0800810b 	.word	0x0800810b
 8008018:	08007fc9 	.word	0x08007fc9
 800801c:	08007fc9 	.word	0x08007fc9
 8008020:	08008173 	.word	0x08008173
 8008024:	08007fc9 	.word	0x08007fc9
 8008028:	08008079 	.word	0x08008079
 800802c:	08007fc9 	.word	0x08007fc9
 8008030:	08007fc9 	.word	0x08007fc9
 8008034:	08008113 	.word	0x08008113
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	1d1a      	adds	r2, r3, #4
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	602a      	str	r2, [r5, #0]
 8008040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008048:	2301      	movs	r3, #1
 800804a:	e09f      	b.n	800818c <_printf_i+0x1ec>
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	682b      	ldr	r3, [r5, #0]
 8008050:	0607      	lsls	r7, r0, #24
 8008052:	f103 0104 	add.w	r1, r3, #4
 8008056:	6029      	str	r1, [r5, #0]
 8008058:	d501      	bpl.n	800805e <_printf_i+0xbe>
 800805a:	681e      	ldr	r6, [r3, #0]
 800805c:	e003      	b.n	8008066 <_printf_i+0xc6>
 800805e:	0646      	lsls	r6, r0, #25
 8008060:	d5fb      	bpl.n	800805a <_printf_i+0xba>
 8008062:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008066:	2e00      	cmp	r6, #0
 8008068:	da03      	bge.n	8008072 <_printf_i+0xd2>
 800806a:	232d      	movs	r3, #45	; 0x2d
 800806c:	4276      	negs	r6, r6
 800806e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008072:	485a      	ldr	r0, [pc, #360]	; (80081dc <_printf_i+0x23c>)
 8008074:	230a      	movs	r3, #10
 8008076:	e012      	b.n	800809e <_printf_i+0xfe>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	6820      	ldr	r0, [r4, #0]
 800807c:	1d19      	adds	r1, r3, #4
 800807e:	6029      	str	r1, [r5, #0]
 8008080:	0605      	lsls	r5, r0, #24
 8008082:	d501      	bpl.n	8008088 <_printf_i+0xe8>
 8008084:	681e      	ldr	r6, [r3, #0]
 8008086:	e002      	b.n	800808e <_printf_i+0xee>
 8008088:	0641      	lsls	r1, r0, #25
 800808a:	d5fb      	bpl.n	8008084 <_printf_i+0xe4>
 800808c:	881e      	ldrh	r6, [r3, #0]
 800808e:	4853      	ldr	r0, [pc, #332]	; (80081dc <_printf_i+0x23c>)
 8008090:	2f6f      	cmp	r7, #111	; 0x6f
 8008092:	bf0c      	ite	eq
 8008094:	2308      	moveq	r3, #8
 8008096:	230a      	movne	r3, #10
 8008098:	2100      	movs	r1, #0
 800809a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800809e:	6865      	ldr	r5, [r4, #4]
 80080a0:	60a5      	str	r5, [r4, #8]
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	bfa2      	ittt	ge
 80080a6:	6821      	ldrge	r1, [r4, #0]
 80080a8:	f021 0104 	bicge.w	r1, r1, #4
 80080ac:	6021      	strge	r1, [r4, #0]
 80080ae:	b90e      	cbnz	r6, 80080b4 <_printf_i+0x114>
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	d04b      	beq.n	800814c <_printf_i+0x1ac>
 80080b4:	4615      	mov	r5, r2
 80080b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80080ba:	fb03 6711 	mls	r7, r3, r1, r6
 80080be:	5dc7      	ldrb	r7, [r0, r7]
 80080c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080c4:	4637      	mov	r7, r6
 80080c6:	42bb      	cmp	r3, r7
 80080c8:	460e      	mov	r6, r1
 80080ca:	d9f4      	bls.n	80080b6 <_printf_i+0x116>
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d10b      	bne.n	80080e8 <_printf_i+0x148>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	07de      	lsls	r6, r3, #31
 80080d4:	d508      	bpl.n	80080e8 <_printf_i+0x148>
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	6861      	ldr	r1, [r4, #4]
 80080da:	4299      	cmp	r1, r3
 80080dc:	bfde      	ittt	le
 80080de:	2330      	movle	r3, #48	; 0x30
 80080e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080e8:	1b52      	subs	r2, r2, r5
 80080ea:	6122      	str	r2, [r4, #16]
 80080ec:	f8cd a000 	str.w	sl, [sp]
 80080f0:	464b      	mov	r3, r9
 80080f2:	aa03      	add	r2, sp, #12
 80080f4:	4621      	mov	r1, r4
 80080f6:	4640      	mov	r0, r8
 80080f8:	f7ff fee4 	bl	8007ec4 <_printf_common>
 80080fc:	3001      	adds	r0, #1
 80080fe:	d14a      	bne.n	8008196 <_printf_i+0x1f6>
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	b004      	add	sp, #16
 8008106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	f043 0320 	orr.w	r3, r3, #32
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	4833      	ldr	r0, [pc, #204]	; (80081e0 <_printf_i+0x240>)
 8008114:	2778      	movs	r7, #120	; 0x78
 8008116:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	6829      	ldr	r1, [r5, #0]
 800811e:	061f      	lsls	r7, r3, #24
 8008120:	f851 6b04 	ldr.w	r6, [r1], #4
 8008124:	d402      	bmi.n	800812c <_printf_i+0x18c>
 8008126:	065f      	lsls	r7, r3, #25
 8008128:	bf48      	it	mi
 800812a:	b2b6      	uxthmi	r6, r6
 800812c:	07df      	lsls	r7, r3, #31
 800812e:	bf48      	it	mi
 8008130:	f043 0320 	orrmi.w	r3, r3, #32
 8008134:	6029      	str	r1, [r5, #0]
 8008136:	bf48      	it	mi
 8008138:	6023      	strmi	r3, [r4, #0]
 800813a:	b91e      	cbnz	r6, 8008144 <_printf_i+0x1a4>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	f023 0320 	bic.w	r3, r3, #32
 8008142:	6023      	str	r3, [r4, #0]
 8008144:	2310      	movs	r3, #16
 8008146:	e7a7      	b.n	8008098 <_printf_i+0xf8>
 8008148:	4824      	ldr	r0, [pc, #144]	; (80081dc <_printf_i+0x23c>)
 800814a:	e7e4      	b.n	8008116 <_printf_i+0x176>
 800814c:	4615      	mov	r5, r2
 800814e:	e7bd      	b.n	80080cc <_printf_i+0x12c>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	6826      	ldr	r6, [r4, #0]
 8008154:	6961      	ldr	r1, [r4, #20]
 8008156:	1d18      	adds	r0, r3, #4
 8008158:	6028      	str	r0, [r5, #0]
 800815a:	0635      	lsls	r5, r6, #24
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	d501      	bpl.n	8008164 <_printf_i+0x1c4>
 8008160:	6019      	str	r1, [r3, #0]
 8008162:	e002      	b.n	800816a <_printf_i+0x1ca>
 8008164:	0670      	lsls	r0, r6, #25
 8008166:	d5fb      	bpl.n	8008160 <_printf_i+0x1c0>
 8008168:	8019      	strh	r1, [r3, #0]
 800816a:	2300      	movs	r3, #0
 800816c:	6123      	str	r3, [r4, #16]
 800816e:	4615      	mov	r5, r2
 8008170:	e7bc      	b.n	80080ec <_printf_i+0x14c>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	1d1a      	adds	r2, r3, #4
 8008176:	602a      	str	r2, [r5, #0]
 8008178:	681d      	ldr	r5, [r3, #0]
 800817a:	6862      	ldr	r2, [r4, #4]
 800817c:	2100      	movs	r1, #0
 800817e:	4628      	mov	r0, r5
 8008180:	f7f8 f826 	bl	80001d0 <memchr>
 8008184:	b108      	cbz	r0, 800818a <_printf_i+0x1ea>
 8008186:	1b40      	subs	r0, r0, r5
 8008188:	6060      	str	r0, [r4, #4]
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	6123      	str	r3, [r4, #16]
 800818e:	2300      	movs	r3, #0
 8008190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008194:	e7aa      	b.n	80080ec <_printf_i+0x14c>
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	462a      	mov	r2, r5
 800819a:	4649      	mov	r1, r9
 800819c:	4640      	mov	r0, r8
 800819e:	47d0      	blx	sl
 80081a0:	3001      	adds	r0, #1
 80081a2:	d0ad      	beq.n	8008100 <_printf_i+0x160>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	079b      	lsls	r3, r3, #30
 80081a8:	d413      	bmi.n	80081d2 <_printf_i+0x232>
 80081aa:	68e0      	ldr	r0, [r4, #12]
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	4298      	cmp	r0, r3
 80081b0:	bfb8      	it	lt
 80081b2:	4618      	movlt	r0, r3
 80081b4:	e7a6      	b.n	8008104 <_printf_i+0x164>
 80081b6:	2301      	movs	r3, #1
 80081b8:	4632      	mov	r2, r6
 80081ba:	4649      	mov	r1, r9
 80081bc:	4640      	mov	r0, r8
 80081be:	47d0      	blx	sl
 80081c0:	3001      	adds	r0, #1
 80081c2:	d09d      	beq.n	8008100 <_printf_i+0x160>
 80081c4:	3501      	adds	r5, #1
 80081c6:	68e3      	ldr	r3, [r4, #12]
 80081c8:	9903      	ldr	r1, [sp, #12]
 80081ca:	1a5b      	subs	r3, r3, r1
 80081cc:	42ab      	cmp	r3, r5
 80081ce:	dcf2      	bgt.n	80081b6 <_printf_i+0x216>
 80081d0:	e7eb      	b.n	80081aa <_printf_i+0x20a>
 80081d2:	2500      	movs	r5, #0
 80081d4:	f104 0619 	add.w	r6, r4, #25
 80081d8:	e7f5      	b.n	80081c6 <_printf_i+0x226>
 80081da:	bf00      	nop
 80081dc:	0800cb01 	.word	0x0800cb01
 80081e0:	0800cb12 	.word	0x0800cb12

080081e4 <_scanf_float>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	b087      	sub	sp, #28
 80081ea:	4617      	mov	r7, r2
 80081ec:	9303      	str	r3, [sp, #12]
 80081ee:	688b      	ldr	r3, [r1, #8]
 80081f0:	1e5a      	subs	r2, r3, #1
 80081f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80081f6:	bf83      	ittte	hi
 80081f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80081fc:	195b      	addhi	r3, r3, r5
 80081fe:	9302      	strhi	r3, [sp, #8]
 8008200:	2300      	movls	r3, #0
 8008202:	bf86      	itte	hi
 8008204:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008208:	608b      	strhi	r3, [r1, #8]
 800820a:	9302      	strls	r3, [sp, #8]
 800820c:	680b      	ldr	r3, [r1, #0]
 800820e:	468b      	mov	fp, r1
 8008210:	2500      	movs	r5, #0
 8008212:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008216:	f84b 3b1c 	str.w	r3, [fp], #28
 800821a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800821e:	4680      	mov	r8, r0
 8008220:	460c      	mov	r4, r1
 8008222:	465e      	mov	r6, fp
 8008224:	46aa      	mov	sl, r5
 8008226:	46a9      	mov	r9, r5
 8008228:	9501      	str	r5, [sp, #4]
 800822a:	68a2      	ldr	r2, [r4, #8]
 800822c:	b152      	cbz	r2, 8008244 <_scanf_float+0x60>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b4e      	cmp	r3, #78	; 0x4e
 8008234:	d864      	bhi.n	8008300 <_scanf_float+0x11c>
 8008236:	2b40      	cmp	r3, #64	; 0x40
 8008238:	d83c      	bhi.n	80082b4 <_scanf_float+0xd0>
 800823a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800823e:	b2c8      	uxtb	r0, r1
 8008240:	280e      	cmp	r0, #14
 8008242:	d93a      	bls.n	80082ba <_scanf_float+0xd6>
 8008244:	f1b9 0f00 	cmp.w	r9, #0
 8008248:	d003      	beq.n	8008252 <_scanf_float+0x6e>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008256:	f1ba 0f01 	cmp.w	sl, #1
 800825a:	f200 8113 	bhi.w	8008484 <_scanf_float+0x2a0>
 800825e:	455e      	cmp	r6, fp
 8008260:	f200 8105 	bhi.w	800846e <_scanf_float+0x28a>
 8008264:	2501      	movs	r5, #1
 8008266:	4628      	mov	r0, r5
 8008268:	b007      	add	sp, #28
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008272:	2a0d      	cmp	r2, #13
 8008274:	d8e6      	bhi.n	8008244 <_scanf_float+0x60>
 8008276:	a101      	add	r1, pc, #4	; (adr r1, 800827c <_scanf_float+0x98>)
 8008278:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800827c:	080083bb 	.word	0x080083bb
 8008280:	08008245 	.word	0x08008245
 8008284:	08008245 	.word	0x08008245
 8008288:	08008245 	.word	0x08008245
 800828c:	0800841b 	.word	0x0800841b
 8008290:	080083f3 	.word	0x080083f3
 8008294:	08008245 	.word	0x08008245
 8008298:	08008245 	.word	0x08008245
 800829c:	080083c9 	.word	0x080083c9
 80082a0:	08008245 	.word	0x08008245
 80082a4:	08008245 	.word	0x08008245
 80082a8:	08008245 	.word	0x08008245
 80082ac:	08008245 	.word	0x08008245
 80082b0:	08008381 	.word	0x08008381
 80082b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80082b8:	e7db      	b.n	8008272 <_scanf_float+0x8e>
 80082ba:	290e      	cmp	r1, #14
 80082bc:	d8c2      	bhi.n	8008244 <_scanf_float+0x60>
 80082be:	a001      	add	r0, pc, #4	; (adr r0, 80082c4 <_scanf_float+0xe0>)
 80082c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082c4:	08008373 	.word	0x08008373
 80082c8:	08008245 	.word	0x08008245
 80082cc:	08008373 	.word	0x08008373
 80082d0:	08008407 	.word	0x08008407
 80082d4:	08008245 	.word	0x08008245
 80082d8:	08008321 	.word	0x08008321
 80082dc:	0800835d 	.word	0x0800835d
 80082e0:	0800835d 	.word	0x0800835d
 80082e4:	0800835d 	.word	0x0800835d
 80082e8:	0800835d 	.word	0x0800835d
 80082ec:	0800835d 	.word	0x0800835d
 80082f0:	0800835d 	.word	0x0800835d
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	0800835d 	.word	0x0800835d
 80082fc:	0800835d 	.word	0x0800835d
 8008300:	2b6e      	cmp	r3, #110	; 0x6e
 8008302:	d809      	bhi.n	8008318 <_scanf_float+0x134>
 8008304:	2b60      	cmp	r3, #96	; 0x60
 8008306:	d8b2      	bhi.n	800826e <_scanf_float+0x8a>
 8008308:	2b54      	cmp	r3, #84	; 0x54
 800830a:	d077      	beq.n	80083fc <_scanf_float+0x218>
 800830c:	2b59      	cmp	r3, #89	; 0x59
 800830e:	d199      	bne.n	8008244 <_scanf_float+0x60>
 8008310:	2d07      	cmp	r5, #7
 8008312:	d197      	bne.n	8008244 <_scanf_float+0x60>
 8008314:	2508      	movs	r5, #8
 8008316:	e029      	b.n	800836c <_scanf_float+0x188>
 8008318:	2b74      	cmp	r3, #116	; 0x74
 800831a:	d06f      	beq.n	80083fc <_scanf_float+0x218>
 800831c:	2b79      	cmp	r3, #121	; 0x79
 800831e:	e7f6      	b.n	800830e <_scanf_float+0x12a>
 8008320:	6821      	ldr	r1, [r4, #0]
 8008322:	05c8      	lsls	r0, r1, #23
 8008324:	d51a      	bpl.n	800835c <_scanf_float+0x178>
 8008326:	9b02      	ldr	r3, [sp, #8]
 8008328:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800832c:	6021      	str	r1, [r4, #0]
 800832e:	f109 0901 	add.w	r9, r9, #1
 8008332:	b11b      	cbz	r3, 800833c <_scanf_float+0x158>
 8008334:	3b01      	subs	r3, #1
 8008336:	3201      	adds	r2, #1
 8008338:	9302      	str	r3, [sp, #8]
 800833a:	60a2      	str	r2, [r4, #8]
 800833c:	68a3      	ldr	r3, [r4, #8]
 800833e:	3b01      	subs	r3, #1
 8008340:	60a3      	str	r3, [r4, #8]
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	3301      	adds	r3, #1
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3b01      	subs	r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	f340 8084 	ble.w	800845c <_scanf_float+0x278>
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	3301      	adds	r3, #1
 8008358:	603b      	str	r3, [r7, #0]
 800835a:	e766      	b.n	800822a <_scanf_float+0x46>
 800835c:	eb1a 0f05 	cmn.w	sl, r5
 8008360:	f47f af70 	bne.w	8008244 <_scanf_float+0x60>
 8008364:	6822      	ldr	r2, [r4, #0]
 8008366:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800836a:	6022      	str	r2, [r4, #0]
 800836c:	f806 3b01 	strb.w	r3, [r6], #1
 8008370:	e7e4      	b.n	800833c <_scanf_float+0x158>
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	0610      	lsls	r0, r2, #24
 8008376:	f57f af65 	bpl.w	8008244 <_scanf_float+0x60>
 800837a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800837e:	e7f4      	b.n	800836a <_scanf_float+0x186>
 8008380:	f1ba 0f00 	cmp.w	sl, #0
 8008384:	d10e      	bne.n	80083a4 <_scanf_float+0x1c0>
 8008386:	f1b9 0f00 	cmp.w	r9, #0
 800838a:	d10e      	bne.n	80083aa <_scanf_float+0x1c6>
 800838c:	6822      	ldr	r2, [r4, #0]
 800838e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008392:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008396:	d108      	bne.n	80083aa <_scanf_float+0x1c6>
 8008398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800839c:	6022      	str	r2, [r4, #0]
 800839e:	f04f 0a01 	mov.w	sl, #1
 80083a2:	e7e3      	b.n	800836c <_scanf_float+0x188>
 80083a4:	f1ba 0f02 	cmp.w	sl, #2
 80083a8:	d055      	beq.n	8008456 <_scanf_float+0x272>
 80083aa:	2d01      	cmp	r5, #1
 80083ac:	d002      	beq.n	80083b4 <_scanf_float+0x1d0>
 80083ae:	2d04      	cmp	r5, #4
 80083b0:	f47f af48 	bne.w	8008244 <_scanf_float+0x60>
 80083b4:	3501      	adds	r5, #1
 80083b6:	b2ed      	uxtb	r5, r5
 80083b8:	e7d8      	b.n	800836c <_scanf_float+0x188>
 80083ba:	f1ba 0f01 	cmp.w	sl, #1
 80083be:	f47f af41 	bne.w	8008244 <_scanf_float+0x60>
 80083c2:	f04f 0a02 	mov.w	sl, #2
 80083c6:	e7d1      	b.n	800836c <_scanf_float+0x188>
 80083c8:	b97d      	cbnz	r5, 80083ea <_scanf_float+0x206>
 80083ca:	f1b9 0f00 	cmp.w	r9, #0
 80083ce:	f47f af3c 	bne.w	800824a <_scanf_float+0x66>
 80083d2:	6822      	ldr	r2, [r4, #0]
 80083d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80083d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80083dc:	f47f af39 	bne.w	8008252 <_scanf_float+0x6e>
 80083e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	2501      	movs	r5, #1
 80083e8:	e7c0      	b.n	800836c <_scanf_float+0x188>
 80083ea:	2d03      	cmp	r5, #3
 80083ec:	d0e2      	beq.n	80083b4 <_scanf_float+0x1d0>
 80083ee:	2d05      	cmp	r5, #5
 80083f0:	e7de      	b.n	80083b0 <_scanf_float+0x1cc>
 80083f2:	2d02      	cmp	r5, #2
 80083f4:	f47f af26 	bne.w	8008244 <_scanf_float+0x60>
 80083f8:	2503      	movs	r5, #3
 80083fa:	e7b7      	b.n	800836c <_scanf_float+0x188>
 80083fc:	2d06      	cmp	r5, #6
 80083fe:	f47f af21 	bne.w	8008244 <_scanf_float+0x60>
 8008402:	2507      	movs	r5, #7
 8008404:	e7b2      	b.n	800836c <_scanf_float+0x188>
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	0591      	lsls	r1, r2, #22
 800840a:	f57f af1b 	bpl.w	8008244 <_scanf_float+0x60>
 800840e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008412:	6022      	str	r2, [r4, #0]
 8008414:	f8cd 9004 	str.w	r9, [sp, #4]
 8008418:	e7a8      	b.n	800836c <_scanf_float+0x188>
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008420:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008424:	d006      	beq.n	8008434 <_scanf_float+0x250>
 8008426:	0550      	lsls	r0, r2, #21
 8008428:	f57f af0c 	bpl.w	8008244 <_scanf_float+0x60>
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	f43f af0f 	beq.w	8008252 <_scanf_float+0x6e>
 8008434:	0591      	lsls	r1, r2, #22
 8008436:	bf58      	it	pl
 8008438:	9901      	ldrpl	r1, [sp, #4]
 800843a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800843e:	bf58      	it	pl
 8008440:	eba9 0101 	subpl.w	r1, r9, r1
 8008444:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008448:	bf58      	it	pl
 800844a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800844e:	6022      	str	r2, [r4, #0]
 8008450:	f04f 0900 	mov.w	r9, #0
 8008454:	e78a      	b.n	800836c <_scanf_float+0x188>
 8008456:	f04f 0a03 	mov.w	sl, #3
 800845a:	e787      	b.n	800836c <_scanf_float+0x188>
 800845c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008460:	4639      	mov	r1, r7
 8008462:	4640      	mov	r0, r8
 8008464:	4798      	blx	r3
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f aedf 	beq.w	800822a <_scanf_float+0x46>
 800846c:	e6ea      	b.n	8008244 <_scanf_float+0x60>
 800846e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008472:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008476:	463a      	mov	r2, r7
 8008478:	4640      	mov	r0, r8
 800847a:	4798      	blx	r3
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	3b01      	subs	r3, #1
 8008480:	6123      	str	r3, [r4, #16]
 8008482:	e6ec      	b.n	800825e <_scanf_float+0x7a>
 8008484:	1e6b      	subs	r3, r5, #1
 8008486:	2b06      	cmp	r3, #6
 8008488:	d825      	bhi.n	80084d6 <_scanf_float+0x2f2>
 800848a:	2d02      	cmp	r5, #2
 800848c:	d836      	bhi.n	80084fc <_scanf_float+0x318>
 800848e:	455e      	cmp	r6, fp
 8008490:	f67f aee8 	bls.w	8008264 <_scanf_float+0x80>
 8008494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008498:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800849c:	463a      	mov	r2, r7
 800849e:	4640      	mov	r0, r8
 80084a0:	4798      	blx	r3
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	e7f1      	b.n	800848e <_scanf_float+0x2aa>
 80084aa:	9802      	ldr	r0, [sp, #8]
 80084ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80084b4:	9002      	str	r0, [sp, #8]
 80084b6:	463a      	mov	r2, r7
 80084b8:	4640      	mov	r0, r8
 80084ba:	4798      	blx	r3
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	3b01      	subs	r3, #1
 80084c0:	6123      	str	r3, [r4, #16]
 80084c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084c6:	fa5f fa8a 	uxtb.w	sl, sl
 80084ca:	f1ba 0f02 	cmp.w	sl, #2
 80084ce:	d1ec      	bne.n	80084aa <_scanf_float+0x2c6>
 80084d0:	3d03      	subs	r5, #3
 80084d2:	b2ed      	uxtb	r5, r5
 80084d4:	1b76      	subs	r6, r6, r5
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	05da      	lsls	r2, r3, #23
 80084da:	d52f      	bpl.n	800853c <_scanf_float+0x358>
 80084dc:	055b      	lsls	r3, r3, #21
 80084de:	d510      	bpl.n	8008502 <_scanf_float+0x31e>
 80084e0:	455e      	cmp	r6, fp
 80084e2:	f67f aebf 	bls.w	8008264 <_scanf_float+0x80>
 80084e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084ee:	463a      	mov	r2, r7
 80084f0:	4640      	mov	r0, r8
 80084f2:	4798      	blx	r3
 80084f4:	6923      	ldr	r3, [r4, #16]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	6123      	str	r3, [r4, #16]
 80084fa:	e7f1      	b.n	80084e0 <_scanf_float+0x2fc>
 80084fc:	46aa      	mov	sl, r5
 80084fe:	9602      	str	r6, [sp, #8]
 8008500:	e7df      	b.n	80084c2 <_scanf_float+0x2de>
 8008502:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	2965      	cmp	r1, #101	; 0x65
 800850a:	f103 33ff 	add.w	r3, r3, #4294967295
 800850e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	d00c      	beq.n	8008530 <_scanf_float+0x34c>
 8008516:	2945      	cmp	r1, #69	; 0x45
 8008518:	d00a      	beq.n	8008530 <_scanf_float+0x34c>
 800851a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800851e:	463a      	mov	r2, r7
 8008520:	4640      	mov	r0, r8
 8008522:	4798      	blx	r3
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800852a:	3b01      	subs	r3, #1
 800852c:	1eb5      	subs	r5, r6, #2
 800852e:	6123      	str	r3, [r4, #16]
 8008530:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008534:	463a      	mov	r2, r7
 8008536:	4640      	mov	r0, r8
 8008538:	4798      	blx	r3
 800853a:	462e      	mov	r6, r5
 800853c:	6825      	ldr	r5, [r4, #0]
 800853e:	f015 0510 	ands.w	r5, r5, #16
 8008542:	d158      	bne.n	80085f6 <_scanf_float+0x412>
 8008544:	7035      	strb	r5, [r6, #0]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800854c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008550:	d11c      	bne.n	800858c <_scanf_float+0x3a8>
 8008552:	9b01      	ldr	r3, [sp, #4]
 8008554:	454b      	cmp	r3, r9
 8008556:	eba3 0209 	sub.w	r2, r3, r9
 800855a:	d124      	bne.n	80085a6 <_scanf_float+0x3c2>
 800855c:	2200      	movs	r2, #0
 800855e:	4659      	mov	r1, fp
 8008560:	4640      	mov	r0, r8
 8008562:	f002 fc5d 	bl	800ae20 <_strtod_r>
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	6821      	ldr	r1, [r4, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f011 0f02 	tst.w	r1, #2
 8008570:	ec57 6b10 	vmov	r6, r7, d0
 8008574:	f103 0204 	add.w	r2, r3, #4
 8008578:	d020      	beq.n	80085bc <_scanf_float+0x3d8>
 800857a:	9903      	ldr	r1, [sp, #12]
 800857c:	600a      	str	r2, [r1, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	e9c3 6700 	strd	r6, r7, [r3]
 8008584:	68e3      	ldr	r3, [r4, #12]
 8008586:	3301      	adds	r3, #1
 8008588:	60e3      	str	r3, [r4, #12]
 800858a:	e66c      	b.n	8008266 <_scanf_float+0x82>
 800858c:	9b04      	ldr	r3, [sp, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0e4      	beq.n	800855c <_scanf_float+0x378>
 8008592:	9905      	ldr	r1, [sp, #20]
 8008594:	230a      	movs	r3, #10
 8008596:	462a      	mov	r2, r5
 8008598:	3101      	adds	r1, #1
 800859a:	4640      	mov	r0, r8
 800859c:	f002 fcc8 	bl	800af30 <_strtol_r>
 80085a0:	9b04      	ldr	r3, [sp, #16]
 80085a2:	9e05      	ldr	r6, [sp, #20]
 80085a4:	1ac2      	subs	r2, r0, r3
 80085a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80085aa:	429e      	cmp	r6, r3
 80085ac:	bf28      	it	cs
 80085ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80085b2:	4912      	ldr	r1, [pc, #72]	; (80085fc <_scanf_float+0x418>)
 80085b4:	4630      	mov	r0, r6
 80085b6:	f000 f8e7 	bl	8008788 <siprintf>
 80085ba:	e7cf      	b.n	800855c <_scanf_float+0x378>
 80085bc:	f011 0f04 	tst.w	r1, #4
 80085c0:	9903      	ldr	r1, [sp, #12]
 80085c2:	600a      	str	r2, [r1, #0]
 80085c4:	d1db      	bne.n	800857e <_scanf_float+0x39a>
 80085c6:	f8d3 8000 	ldr.w	r8, [r3]
 80085ca:	ee10 2a10 	vmov	r2, s0
 80085ce:	ee10 0a10 	vmov	r0, s0
 80085d2:	463b      	mov	r3, r7
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f8 faa9 	bl	8000b2c <__aeabi_dcmpun>
 80085da:	b128      	cbz	r0, 80085e8 <_scanf_float+0x404>
 80085dc:	4808      	ldr	r0, [pc, #32]	; (8008600 <_scanf_float+0x41c>)
 80085de:	f000 f9e5 	bl	80089ac <nanf>
 80085e2:	ed88 0a00 	vstr	s0, [r8]
 80085e6:	e7cd      	b.n	8008584 <_scanf_float+0x3a0>
 80085e8:	4630      	mov	r0, r6
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f8 fafc 	bl	8000be8 <__aeabi_d2f>
 80085f0:	f8c8 0000 	str.w	r0, [r8]
 80085f4:	e7c6      	b.n	8008584 <_scanf_float+0x3a0>
 80085f6:	2500      	movs	r5, #0
 80085f8:	e635      	b.n	8008266 <_scanf_float+0x82>
 80085fa:	bf00      	nop
 80085fc:	0800cb23 	.word	0x0800cb23
 8008600:	0800cdcf 	.word	0x0800cdcf

08008604 <std>:
 8008604:	2300      	movs	r3, #0
 8008606:	b510      	push	{r4, lr}
 8008608:	4604      	mov	r4, r0
 800860a:	e9c0 3300 	strd	r3, r3, [r0]
 800860e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008612:	6083      	str	r3, [r0, #8]
 8008614:	8181      	strh	r1, [r0, #12]
 8008616:	6643      	str	r3, [r0, #100]	; 0x64
 8008618:	81c2      	strh	r2, [r0, #14]
 800861a:	6183      	str	r3, [r0, #24]
 800861c:	4619      	mov	r1, r3
 800861e:	2208      	movs	r2, #8
 8008620:	305c      	adds	r0, #92	; 0x5c
 8008622:	f000 f942 	bl	80088aa <memset>
 8008626:	4b0d      	ldr	r3, [pc, #52]	; (800865c <std+0x58>)
 8008628:	6263      	str	r3, [r4, #36]	; 0x24
 800862a:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <std+0x5c>)
 800862c:	62a3      	str	r3, [r4, #40]	; 0x28
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <std+0x60>)
 8008630:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008632:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <std+0x64>)
 8008634:	6323      	str	r3, [r4, #48]	; 0x30
 8008636:	4b0d      	ldr	r3, [pc, #52]	; (800866c <std+0x68>)
 8008638:	6224      	str	r4, [r4, #32]
 800863a:	429c      	cmp	r4, r3
 800863c:	d006      	beq.n	800864c <std+0x48>
 800863e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008642:	4294      	cmp	r4, r2
 8008644:	d002      	beq.n	800864c <std+0x48>
 8008646:	33d0      	adds	r3, #208	; 0xd0
 8008648:	429c      	cmp	r4, r3
 800864a:	d105      	bne.n	8008658 <std+0x54>
 800864c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008654:	f000 b9a6 	b.w	80089a4 <__retarget_lock_init_recursive>
 8008658:	bd10      	pop	{r4, pc}
 800865a:	bf00      	nop
 800865c:	08008821 	.word	0x08008821
 8008660:	08008847 	.word	0x08008847
 8008664:	0800887f 	.word	0x0800887f
 8008668:	080088a3 	.word	0x080088a3
 800866c:	200006f8 	.word	0x200006f8

08008670 <stdio_exit_handler>:
 8008670:	4a02      	ldr	r2, [pc, #8]	; (800867c <stdio_exit_handler+0xc>)
 8008672:	4903      	ldr	r1, [pc, #12]	; (8008680 <stdio_exit_handler+0x10>)
 8008674:	4803      	ldr	r0, [pc, #12]	; (8008684 <stdio_exit_handler+0x14>)
 8008676:	f000 b869 	b.w	800874c <_fwalk_sglue>
 800867a:	bf00      	nop
 800867c:	20000024 	.word	0x20000024
 8008680:	0800b931 	.word	0x0800b931
 8008684:	20000030 	.word	0x20000030

08008688 <cleanup_stdio>:
 8008688:	6841      	ldr	r1, [r0, #4]
 800868a:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <cleanup_stdio+0x34>)
 800868c:	4299      	cmp	r1, r3
 800868e:	b510      	push	{r4, lr}
 8008690:	4604      	mov	r4, r0
 8008692:	d001      	beq.n	8008698 <cleanup_stdio+0x10>
 8008694:	f003 f94c 	bl	800b930 <_fflush_r>
 8008698:	68a1      	ldr	r1, [r4, #8]
 800869a:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <cleanup_stdio+0x38>)
 800869c:	4299      	cmp	r1, r3
 800869e:	d002      	beq.n	80086a6 <cleanup_stdio+0x1e>
 80086a0:	4620      	mov	r0, r4
 80086a2:	f003 f945 	bl	800b930 <_fflush_r>
 80086a6:	68e1      	ldr	r1, [r4, #12]
 80086a8:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <cleanup_stdio+0x3c>)
 80086aa:	4299      	cmp	r1, r3
 80086ac:	d004      	beq.n	80086b8 <cleanup_stdio+0x30>
 80086ae:	4620      	mov	r0, r4
 80086b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b4:	f003 b93c 	b.w	800b930 <_fflush_r>
 80086b8:	bd10      	pop	{r4, pc}
 80086ba:	bf00      	nop
 80086bc:	200006f8 	.word	0x200006f8
 80086c0:	20000760 	.word	0x20000760
 80086c4:	200007c8 	.word	0x200007c8

080086c8 <global_stdio_init.part.0>:
 80086c8:	b510      	push	{r4, lr}
 80086ca:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <global_stdio_init.part.0+0x30>)
 80086cc:	4c0b      	ldr	r4, [pc, #44]	; (80086fc <global_stdio_init.part.0+0x34>)
 80086ce:	4a0c      	ldr	r2, [pc, #48]	; (8008700 <global_stdio_init.part.0+0x38>)
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	4620      	mov	r0, r4
 80086d4:	2200      	movs	r2, #0
 80086d6:	2104      	movs	r1, #4
 80086d8:	f7ff ff94 	bl	8008604 <std>
 80086dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80086e0:	2201      	movs	r2, #1
 80086e2:	2109      	movs	r1, #9
 80086e4:	f7ff ff8e 	bl	8008604 <std>
 80086e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80086ec:	2202      	movs	r2, #2
 80086ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f2:	2112      	movs	r1, #18
 80086f4:	f7ff bf86 	b.w	8008604 <std>
 80086f8:	20000830 	.word	0x20000830
 80086fc:	200006f8 	.word	0x200006f8
 8008700:	08008671 	.word	0x08008671

08008704 <__sfp_lock_acquire>:
 8008704:	4801      	ldr	r0, [pc, #4]	; (800870c <__sfp_lock_acquire+0x8>)
 8008706:	f000 b94e 	b.w	80089a6 <__retarget_lock_acquire_recursive>
 800870a:	bf00      	nop
 800870c:	20000839 	.word	0x20000839

08008710 <__sfp_lock_release>:
 8008710:	4801      	ldr	r0, [pc, #4]	; (8008718 <__sfp_lock_release+0x8>)
 8008712:	f000 b949 	b.w	80089a8 <__retarget_lock_release_recursive>
 8008716:	bf00      	nop
 8008718:	20000839 	.word	0x20000839

0800871c <__sinit>:
 800871c:	b510      	push	{r4, lr}
 800871e:	4604      	mov	r4, r0
 8008720:	f7ff fff0 	bl	8008704 <__sfp_lock_acquire>
 8008724:	6a23      	ldr	r3, [r4, #32]
 8008726:	b11b      	cbz	r3, 8008730 <__sinit+0x14>
 8008728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800872c:	f7ff bff0 	b.w	8008710 <__sfp_lock_release>
 8008730:	4b04      	ldr	r3, [pc, #16]	; (8008744 <__sinit+0x28>)
 8008732:	6223      	str	r3, [r4, #32]
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <__sinit+0x2c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f5      	bne.n	8008728 <__sinit+0xc>
 800873c:	f7ff ffc4 	bl	80086c8 <global_stdio_init.part.0>
 8008740:	e7f2      	b.n	8008728 <__sinit+0xc>
 8008742:	bf00      	nop
 8008744:	08008689 	.word	0x08008689
 8008748:	20000830 	.word	0x20000830

0800874c <_fwalk_sglue>:
 800874c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008750:	4607      	mov	r7, r0
 8008752:	4688      	mov	r8, r1
 8008754:	4614      	mov	r4, r2
 8008756:	2600      	movs	r6, #0
 8008758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800875c:	f1b9 0901 	subs.w	r9, r9, #1
 8008760:	d505      	bpl.n	800876e <_fwalk_sglue+0x22>
 8008762:	6824      	ldr	r4, [r4, #0]
 8008764:	2c00      	cmp	r4, #0
 8008766:	d1f7      	bne.n	8008758 <_fwalk_sglue+0xc>
 8008768:	4630      	mov	r0, r6
 800876a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d907      	bls.n	8008784 <_fwalk_sglue+0x38>
 8008774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008778:	3301      	adds	r3, #1
 800877a:	d003      	beq.n	8008784 <_fwalk_sglue+0x38>
 800877c:	4629      	mov	r1, r5
 800877e:	4638      	mov	r0, r7
 8008780:	47c0      	blx	r8
 8008782:	4306      	orrs	r6, r0
 8008784:	3568      	adds	r5, #104	; 0x68
 8008786:	e7e9      	b.n	800875c <_fwalk_sglue+0x10>

08008788 <siprintf>:
 8008788:	b40e      	push	{r1, r2, r3}
 800878a:	b500      	push	{lr}
 800878c:	b09c      	sub	sp, #112	; 0x70
 800878e:	ab1d      	add	r3, sp, #116	; 0x74
 8008790:	9002      	str	r0, [sp, #8]
 8008792:	9006      	str	r0, [sp, #24]
 8008794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008798:	4809      	ldr	r0, [pc, #36]	; (80087c0 <siprintf+0x38>)
 800879a:	9107      	str	r1, [sp, #28]
 800879c:	9104      	str	r1, [sp, #16]
 800879e:	4909      	ldr	r1, [pc, #36]	; (80087c4 <siprintf+0x3c>)
 80087a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a4:	9105      	str	r1, [sp, #20]
 80087a6:	6800      	ldr	r0, [r0, #0]
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	a902      	add	r1, sp, #8
 80087ac:	f002 fc1c 	bl	800afe8 <_svfiprintf_r>
 80087b0:	9b02      	ldr	r3, [sp, #8]
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	b01c      	add	sp, #112	; 0x70
 80087b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087bc:	b003      	add	sp, #12
 80087be:	4770      	bx	lr
 80087c0:	2000007c 	.word	0x2000007c
 80087c4:	ffff0208 	.word	0xffff0208

080087c8 <siscanf>:
 80087c8:	b40e      	push	{r1, r2, r3}
 80087ca:	b510      	push	{r4, lr}
 80087cc:	b09f      	sub	sp, #124	; 0x7c
 80087ce:	ac21      	add	r4, sp, #132	; 0x84
 80087d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80087d4:	f854 2b04 	ldr.w	r2, [r4], #4
 80087d8:	9201      	str	r2, [sp, #4]
 80087da:	f8ad 101c 	strh.w	r1, [sp, #28]
 80087de:	9004      	str	r0, [sp, #16]
 80087e0:	9008      	str	r0, [sp, #32]
 80087e2:	f7f7 fd45 	bl	8000270 <strlen>
 80087e6:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <siscanf+0x50>)
 80087e8:	9005      	str	r0, [sp, #20]
 80087ea:	9009      	str	r0, [sp, #36]	; 0x24
 80087ec:	930d      	str	r3, [sp, #52]	; 0x34
 80087ee:	480b      	ldr	r0, [pc, #44]	; (800881c <siscanf+0x54>)
 80087f0:	9a01      	ldr	r2, [sp, #4]
 80087f2:	6800      	ldr	r0, [r0, #0]
 80087f4:	9403      	str	r4, [sp, #12]
 80087f6:	2300      	movs	r3, #0
 80087f8:	9311      	str	r3, [sp, #68]	; 0x44
 80087fa:	9316      	str	r3, [sp, #88]	; 0x58
 80087fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008800:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008804:	a904      	add	r1, sp, #16
 8008806:	4623      	mov	r3, r4
 8008808:	f002 fd46 	bl	800b298 <__ssvfiscanf_r>
 800880c:	b01f      	add	sp, #124	; 0x7c
 800880e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008812:	b003      	add	sp, #12
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	08008843 	.word	0x08008843
 800881c:	2000007c 	.word	0x2000007c

08008820 <__sread>:
 8008820:	b510      	push	{r4, lr}
 8008822:	460c      	mov	r4, r1
 8008824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008828:	f000 f86e 	bl	8008908 <_read_r>
 800882c:	2800      	cmp	r0, #0
 800882e:	bfab      	itete	ge
 8008830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008832:	89a3      	ldrhlt	r3, [r4, #12]
 8008834:	181b      	addge	r3, r3, r0
 8008836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800883a:	bfac      	ite	ge
 800883c:	6563      	strge	r3, [r4, #84]	; 0x54
 800883e:	81a3      	strhlt	r3, [r4, #12]
 8008840:	bd10      	pop	{r4, pc}

08008842 <__seofread>:
 8008842:	2000      	movs	r0, #0
 8008844:	4770      	bx	lr

08008846 <__swrite>:
 8008846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800884a:	461f      	mov	r7, r3
 800884c:	898b      	ldrh	r3, [r1, #12]
 800884e:	05db      	lsls	r3, r3, #23
 8008850:	4605      	mov	r5, r0
 8008852:	460c      	mov	r4, r1
 8008854:	4616      	mov	r6, r2
 8008856:	d505      	bpl.n	8008864 <__swrite+0x1e>
 8008858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885c:	2302      	movs	r3, #2
 800885e:	2200      	movs	r2, #0
 8008860:	f000 f840 	bl	80088e4 <_lseek_r>
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800886a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	4632      	mov	r2, r6
 8008872:	463b      	mov	r3, r7
 8008874:	4628      	mov	r0, r5
 8008876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800887a:	f000 b857 	b.w	800892c <_write_r>

0800887e <__sseek>:
 800887e:	b510      	push	{r4, lr}
 8008880:	460c      	mov	r4, r1
 8008882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008886:	f000 f82d 	bl	80088e4 <_lseek_r>
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	bf15      	itete	ne
 8008890:	6560      	strne	r0, [r4, #84]	; 0x54
 8008892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800889a:	81a3      	strheq	r3, [r4, #12]
 800889c:	bf18      	it	ne
 800889e:	81a3      	strhne	r3, [r4, #12]
 80088a0:	bd10      	pop	{r4, pc}

080088a2 <__sclose>:
 80088a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a6:	f000 b80d 	b.w	80088c4 <_close_r>

080088aa <memset>:
 80088aa:	4402      	add	r2, r0
 80088ac:	4603      	mov	r3, r0
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d100      	bne.n	80088b4 <memset+0xa>
 80088b2:	4770      	bx	lr
 80088b4:	f803 1b01 	strb.w	r1, [r3], #1
 80088b8:	e7f9      	b.n	80088ae <memset+0x4>
	...

080088bc <_localeconv_r>:
 80088bc:	4800      	ldr	r0, [pc, #0]	; (80088c0 <_localeconv_r+0x4>)
 80088be:	4770      	bx	lr
 80088c0:	20000170 	.word	0x20000170

080088c4 <_close_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4d06      	ldr	r5, [pc, #24]	; (80088e0 <_close_r+0x1c>)
 80088c8:	2300      	movs	r3, #0
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	f7fa f821 	bl	8002916 <_close>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_close_r+0x1a>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_close_r+0x1a>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	20000834 	.word	0x20000834

080088e4 <_lseek_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d07      	ldr	r5, [pc, #28]	; (8008904 <_lseek_r+0x20>)
 80088e8:	4604      	mov	r4, r0
 80088ea:	4608      	mov	r0, r1
 80088ec:	4611      	mov	r1, r2
 80088ee:	2200      	movs	r2, #0
 80088f0:	602a      	str	r2, [r5, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f7fa f836 	bl	8002964 <_lseek>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_lseek_r+0x1e>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_lseek_r+0x1e>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	20000834 	.word	0x20000834

08008908 <_read_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4d07      	ldr	r5, [pc, #28]	; (8008928 <_read_r+0x20>)
 800890c:	4604      	mov	r4, r0
 800890e:	4608      	mov	r0, r1
 8008910:	4611      	mov	r1, r2
 8008912:	2200      	movs	r2, #0
 8008914:	602a      	str	r2, [r5, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	f7f9 ffc4 	bl	80028a4 <_read>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_read_r+0x1e>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_read_r+0x1e>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	20000834 	.word	0x20000834

0800892c <_write_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d07      	ldr	r5, [pc, #28]	; (800894c <_write_r+0x20>)
 8008930:	4604      	mov	r4, r0
 8008932:	4608      	mov	r0, r1
 8008934:	4611      	mov	r1, r2
 8008936:	2200      	movs	r2, #0
 8008938:	602a      	str	r2, [r5, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	f7f9 ffcf 	bl	80028de <_write>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_write_r+0x1e>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_write_r+0x1e>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	20000834 	.word	0x20000834

08008950 <__errno>:
 8008950:	4b01      	ldr	r3, [pc, #4]	; (8008958 <__errno+0x8>)
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	2000007c 	.word	0x2000007c

0800895c <__libc_init_array>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	4d0d      	ldr	r5, [pc, #52]	; (8008994 <__libc_init_array+0x38>)
 8008960:	4c0d      	ldr	r4, [pc, #52]	; (8008998 <__libc_init_array+0x3c>)
 8008962:	1b64      	subs	r4, r4, r5
 8008964:	10a4      	asrs	r4, r4, #2
 8008966:	2600      	movs	r6, #0
 8008968:	42a6      	cmp	r6, r4
 800896a:	d109      	bne.n	8008980 <__libc_init_array+0x24>
 800896c:	4d0b      	ldr	r5, [pc, #44]	; (800899c <__libc_init_array+0x40>)
 800896e:	4c0c      	ldr	r4, [pc, #48]	; (80089a0 <__libc_init_array+0x44>)
 8008970:	f003 ffde 	bl	800c930 <_init>
 8008974:	1b64      	subs	r4, r4, r5
 8008976:	10a4      	asrs	r4, r4, #2
 8008978:	2600      	movs	r6, #0
 800897a:	42a6      	cmp	r6, r4
 800897c:	d105      	bne.n	800898a <__libc_init_array+0x2e>
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	f855 3b04 	ldr.w	r3, [r5], #4
 8008984:	4798      	blx	r3
 8008986:	3601      	adds	r6, #1
 8008988:	e7ee      	b.n	8008968 <__libc_init_array+0xc>
 800898a:	f855 3b04 	ldr.w	r3, [r5], #4
 800898e:	4798      	blx	r3
 8008990:	3601      	adds	r6, #1
 8008992:	e7f2      	b.n	800897a <__libc_init_array+0x1e>
 8008994:	0800ce38 	.word	0x0800ce38
 8008998:	0800ce38 	.word	0x0800ce38
 800899c:	0800ce38 	.word	0x0800ce38
 80089a0:	0800ce3c 	.word	0x0800ce3c

080089a4 <__retarget_lock_init_recursive>:
 80089a4:	4770      	bx	lr

080089a6 <__retarget_lock_acquire_recursive>:
 80089a6:	4770      	bx	lr

080089a8 <__retarget_lock_release_recursive>:
 80089a8:	4770      	bx	lr
	...

080089ac <nanf>:
 80089ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089b4 <nanf+0x8>
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	7fc00000 	.word	0x7fc00000

080089b8 <quorem>:
 80089b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	6903      	ldr	r3, [r0, #16]
 80089be:	690c      	ldr	r4, [r1, #16]
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	4607      	mov	r7, r0
 80089c4:	db7e      	blt.n	8008ac4 <quorem+0x10c>
 80089c6:	3c01      	subs	r4, #1
 80089c8:	f101 0814 	add.w	r8, r1, #20
 80089cc:	f100 0514 	add.w	r5, r0, #20
 80089d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089de:	3301      	adds	r3, #1
 80089e0:	429a      	cmp	r2, r3
 80089e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80089ee:	d331      	bcc.n	8008a54 <quorem+0x9c>
 80089f0:	f04f 0e00 	mov.w	lr, #0
 80089f4:	4640      	mov	r0, r8
 80089f6:	46ac      	mov	ip, r5
 80089f8:	46f2      	mov	sl, lr
 80089fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80089fe:	b293      	uxth	r3, r2
 8008a00:	fb06 e303 	mla	r3, r6, r3, lr
 8008a04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a08:	0c1a      	lsrs	r2, r3, #16
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	ebaa 0303 	sub.w	r3, sl, r3
 8008a10:	f8dc a000 	ldr.w	sl, [ip]
 8008a14:	fa13 f38a 	uxtah	r3, r3, sl
 8008a18:	fb06 220e 	mla	r2, r6, lr, r2
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	9b00      	ldr	r3, [sp, #0]
 8008a20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a24:	b292      	uxth	r2, r2
 8008a26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a2e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a32:	4581      	cmp	r9, r0
 8008a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a38:	f84c 3b04 	str.w	r3, [ip], #4
 8008a3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a40:	d2db      	bcs.n	80089fa <quorem+0x42>
 8008a42:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a46:	b92b      	cbnz	r3, 8008a54 <quorem+0x9c>
 8008a48:	9b01      	ldr	r3, [sp, #4]
 8008a4a:	3b04      	subs	r3, #4
 8008a4c:	429d      	cmp	r5, r3
 8008a4e:	461a      	mov	r2, r3
 8008a50:	d32c      	bcc.n	8008aac <quorem+0xf4>
 8008a52:	613c      	str	r4, [r7, #16]
 8008a54:	4638      	mov	r0, r7
 8008a56:	f001 f9ef 	bl	8009e38 <__mcmp>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	db22      	blt.n	8008aa4 <quorem+0xec>
 8008a5e:	3601      	adds	r6, #1
 8008a60:	4629      	mov	r1, r5
 8008a62:	2000      	movs	r0, #0
 8008a64:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a68:	f8d1 c000 	ldr.w	ip, [r1]
 8008a6c:	b293      	uxth	r3, r2
 8008a6e:	1ac3      	subs	r3, r0, r3
 8008a70:	0c12      	lsrs	r2, r2, #16
 8008a72:	fa13 f38c 	uxtah	r3, r3, ip
 8008a76:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a84:	45c1      	cmp	r9, r8
 8008a86:	f841 3b04 	str.w	r3, [r1], #4
 8008a8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a8e:	d2e9      	bcs.n	8008a64 <quorem+0xac>
 8008a90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a98:	b922      	cbnz	r2, 8008aa4 <quorem+0xec>
 8008a9a:	3b04      	subs	r3, #4
 8008a9c:	429d      	cmp	r5, r3
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	d30a      	bcc.n	8008ab8 <quorem+0x100>
 8008aa2:	613c      	str	r4, [r7, #16]
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	b003      	add	sp, #12
 8008aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aac:	6812      	ldr	r2, [r2, #0]
 8008aae:	3b04      	subs	r3, #4
 8008ab0:	2a00      	cmp	r2, #0
 8008ab2:	d1ce      	bne.n	8008a52 <quorem+0x9a>
 8008ab4:	3c01      	subs	r4, #1
 8008ab6:	e7c9      	b.n	8008a4c <quorem+0x94>
 8008ab8:	6812      	ldr	r2, [r2, #0]
 8008aba:	3b04      	subs	r3, #4
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d1f0      	bne.n	8008aa2 <quorem+0xea>
 8008ac0:	3c01      	subs	r4, #1
 8008ac2:	e7eb      	b.n	8008a9c <quorem+0xe4>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	e7ee      	b.n	8008aa6 <quorem+0xee>

08008ac8 <_dtoa_r>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	ed2d 8b04 	vpush	{d8-d9}
 8008ad0:	69c5      	ldr	r5, [r0, #28]
 8008ad2:	b093      	sub	sp, #76	; 0x4c
 8008ad4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ad8:	ec57 6b10 	vmov	r6, r7, d0
 8008adc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ae0:	9107      	str	r1, [sp, #28]
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ae6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ae8:	b975      	cbnz	r5, 8008b08 <_dtoa_r+0x40>
 8008aea:	2010      	movs	r0, #16
 8008aec:	f000 fe2a 	bl	8009744 <malloc>
 8008af0:	4602      	mov	r2, r0
 8008af2:	61e0      	str	r0, [r4, #28]
 8008af4:	b920      	cbnz	r0, 8008b00 <_dtoa_r+0x38>
 8008af6:	4bae      	ldr	r3, [pc, #696]	; (8008db0 <_dtoa_r+0x2e8>)
 8008af8:	21ef      	movs	r1, #239	; 0xef
 8008afa:	48ae      	ldr	r0, [pc, #696]	; (8008db4 <_dtoa_r+0x2ec>)
 8008afc:	f003 f808 	bl	800bb10 <__assert_func>
 8008b00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b04:	6005      	str	r5, [r0, #0]
 8008b06:	60c5      	str	r5, [r0, #12]
 8008b08:	69e3      	ldr	r3, [r4, #28]
 8008b0a:	6819      	ldr	r1, [r3, #0]
 8008b0c:	b151      	cbz	r1, 8008b24 <_dtoa_r+0x5c>
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	604a      	str	r2, [r1, #4]
 8008b12:	2301      	movs	r3, #1
 8008b14:	4093      	lsls	r3, r2
 8008b16:	608b      	str	r3, [r1, #8]
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 ff07 	bl	800992c <_Bfree>
 8008b1e:	69e3      	ldr	r3, [r4, #28]
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	1e3b      	subs	r3, r7, #0
 8008b26:	bfbb      	ittet	lt
 8008b28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b2c:	9303      	strlt	r3, [sp, #12]
 8008b2e:	2300      	movge	r3, #0
 8008b30:	2201      	movlt	r2, #1
 8008b32:	bfac      	ite	ge
 8008b34:	f8c8 3000 	strge.w	r3, [r8]
 8008b38:	f8c8 2000 	strlt.w	r2, [r8]
 8008b3c:	4b9e      	ldr	r3, [pc, #632]	; (8008db8 <_dtoa_r+0x2f0>)
 8008b3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b42:	ea33 0308 	bics.w	r3, r3, r8
 8008b46:	d11b      	bne.n	8008b80 <_dtoa_r+0xb8>
 8008b48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b54:	4333      	orrs	r3, r6
 8008b56:	f000 8593 	beq.w	8009680 <_dtoa_r+0xbb8>
 8008b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b5c:	b963      	cbnz	r3, 8008b78 <_dtoa_r+0xb0>
 8008b5e:	4b97      	ldr	r3, [pc, #604]	; (8008dbc <_dtoa_r+0x2f4>)
 8008b60:	e027      	b.n	8008bb2 <_dtoa_r+0xea>
 8008b62:	4b97      	ldr	r3, [pc, #604]	; (8008dc0 <_dtoa_r+0x2f8>)
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	9800      	ldr	r0, [sp, #0]
 8008b6e:	b013      	add	sp, #76	; 0x4c
 8008b70:	ecbd 8b04 	vpop	{d8-d9}
 8008b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b78:	4b90      	ldr	r3, [pc, #576]	; (8008dbc <_dtoa_r+0x2f4>)
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	3303      	adds	r3, #3
 8008b7e:	e7f3      	b.n	8008b68 <_dtoa_r+0xa0>
 8008b80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b84:	2200      	movs	r2, #0
 8008b86:	ec51 0b17 	vmov	r0, r1, d7
 8008b8a:	eeb0 8a47 	vmov.f32	s16, s14
 8008b8e:	eef0 8a67 	vmov.f32	s17, s15
 8008b92:	2300      	movs	r3, #0
 8008b94:	f7f7 ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b98:	4681      	mov	r9, r0
 8008b9a:	b160      	cbz	r0, 8008bb6 <_dtoa_r+0xee>
 8008b9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 8568 	beq.w	800967a <_dtoa_r+0xbb2>
 8008baa:	4b86      	ldr	r3, [pc, #536]	; (8008dc4 <_dtoa_r+0x2fc>)
 8008bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	e7da      	b.n	8008b6c <_dtoa_r+0xa4>
 8008bb6:	aa10      	add	r2, sp, #64	; 0x40
 8008bb8:	a911      	add	r1, sp, #68	; 0x44
 8008bba:	4620      	mov	r0, r4
 8008bbc:	eeb0 0a48 	vmov.f32	s0, s16
 8008bc0:	eef0 0a68 	vmov.f32	s1, s17
 8008bc4:	f001 fa4e 	bl	800a064 <__d2b>
 8008bc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008bcc:	4682      	mov	sl, r0
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	d07f      	beq.n	8008cd2 <_dtoa_r+0x20a>
 8008bd2:	ee18 3a90 	vmov	r3, s17
 8008bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008bde:	ec51 0b18 	vmov	r0, r1, d8
 8008be2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008be6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008bee:	4619      	mov	r1, r3
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4b75      	ldr	r3, [pc, #468]	; (8008dc8 <_dtoa_r+0x300>)
 8008bf4:	f7f7 fb48 	bl	8000288 <__aeabi_dsub>
 8008bf8:	a367      	add	r3, pc, #412	; (adr r3, 8008d98 <_dtoa_r+0x2d0>)
 8008bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfe:	f7f7 fcfb 	bl	80005f8 <__aeabi_dmul>
 8008c02:	a367      	add	r3, pc, #412	; (adr r3, 8008da0 <_dtoa_r+0x2d8>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f7f7 fb40 	bl	800028c <__adddf3>
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	4628      	mov	r0, r5
 8008c10:	460f      	mov	r7, r1
 8008c12:	f7f7 fc87 	bl	8000524 <__aeabi_i2d>
 8008c16:	a364      	add	r3, pc, #400	; (adr r3, 8008da8 <_dtoa_r+0x2e0>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f7f7 fcec 	bl	80005f8 <__aeabi_dmul>
 8008c20:	4602      	mov	r2, r0
 8008c22:	460b      	mov	r3, r1
 8008c24:	4630      	mov	r0, r6
 8008c26:	4639      	mov	r1, r7
 8008c28:	f7f7 fb30 	bl	800028c <__adddf3>
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	460f      	mov	r7, r1
 8008c30:	f7f7 ff92 	bl	8000b58 <__aeabi_d2iz>
 8008c34:	2200      	movs	r2, #0
 8008c36:	4683      	mov	fp, r0
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	f7f7 ff4d 	bl	8000adc <__aeabi_dcmplt>
 8008c42:	b148      	cbz	r0, 8008c58 <_dtoa_r+0x190>
 8008c44:	4658      	mov	r0, fp
 8008c46:	f7f7 fc6d 	bl	8000524 <__aeabi_i2d>
 8008c4a:	4632      	mov	r2, r6
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	f7f7 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c52:	b908      	cbnz	r0, 8008c58 <_dtoa_r+0x190>
 8008c54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c58:	f1bb 0f16 	cmp.w	fp, #22
 8008c5c:	d857      	bhi.n	8008d0e <_dtoa_r+0x246>
 8008c5e:	4b5b      	ldr	r3, [pc, #364]	; (8008dcc <_dtoa_r+0x304>)
 8008c60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	ec51 0b18 	vmov	r0, r1, d8
 8008c6c:	f7f7 ff36 	bl	8000adc <__aeabi_dcmplt>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d04e      	beq.n	8008d12 <_dtoa_r+0x24a>
 8008c74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c78:	2300      	movs	r3, #0
 8008c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c7e:	1b5b      	subs	r3, r3, r5
 8008c80:	1e5a      	subs	r2, r3, #1
 8008c82:	bf45      	ittet	mi
 8008c84:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c88:	9305      	strmi	r3, [sp, #20]
 8008c8a:	2300      	movpl	r3, #0
 8008c8c:	2300      	movmi	r3, #0
 8008c8e:	9206      	str	r2, [sp, #24]
 8008c90:	bf54      	ite	pl
 8008c92:	9305      	strpl	r3, [sp, #20]
 8008c94:	9306      	strmi	r3, [sp, #24]
 8008c96:	f1bb 0f00 	cmp.w	fp, #0
 8008c9a:	db3c      	blt.n	8008d16 <_dtoa_r+0x24e>
 8008c9c:	9b06      	ldr	r3, [sp, #24]
 8008c9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008ca2:	445b      	add	r3, fp
 8008ca4:	9306      	str	r3, [sp, #24]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	9308      	str	r3, [sp, #32]
 8008caa:	9b07      	ldr	r3, [sp, #28]
 8008cac:	2b09      	cmp	r3, #9
 8008cae:	d868      	bhi.n	8008d82 <_dtoa_r+0x2ba>
 8008cb0:	2b05      	cmp	r3, #5
 8008cb2:	bfc4      	itt	gt
 8008cb4:	3b04      	subgt	r3, #4
 8008cb6:	9307      	strgt	r3, [sp, #28]
 8008cb8:	9b07      	ldr	r3, [sp, #28]
 8008cba:	f1a3 0302 	sub.w	r3, r3, #2
 8008cbe:	bfcc      	ite	gt
 8008cc0:	2500      	movgt	r5, #0
 8008cc2:	2501      	movle	r5, #1
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	f200 8085 	bhi.w	8008dd4 <_dtoa_r+0x30c>
 8008cca:	e8df f003 	tbb	[pc, r3]
 8008cce:	3b2e      	.short	0x3b2e
 8008cd0:	5839      	.short	0x5839
 8008cd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008cd6:	441d      	add	r5, r3
 8008cd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cdc:	2b20      	cmp	r3, #32
 8008cde:	bfc1      	itttt	gt
 8008ce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ce4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ce8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008cec:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008cf0:	bfd6      	itet	le
 8008cf2:	f1c3 0320 	rsble	r3, r3, #32
 8008cf6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008cfa:	fa06 f003 	lslle.w	r0, r6, r3
 8008cfe:	f7f7 fc01 	bl	8000504 <__aeabi_ui2d>
 8008d02:	2201      	movs	r2, #1
 8008d04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008d08:	3d01      	subs	r5, #1
 8008d0a:	920e      	str	r2, [sp, #56]	; 0x38
 8008d0c:	e76f      	b.n	8008bee <_dtoa_r+0x126>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e7b3      	b.n	8008c7a <_dtoa_r+0x1b2>
 8008d12:	900c      	str	r0, [sp, #48]	; 0x30
 8008d14:	e7b2      	b.n	8008c7c <_dtoa_r+0x1b4>
 8008d16:	9b05      	ldr	r3, [sp, #20]
 8008d18:	eba3 030b 	sub.w	r3, r3, fp
 8008d1c:	9305      	str	r3, [sp, #20]
 8008d1e:	f1cb 0300 	rsb	r3, fp, #0
 8008d22:	9308      	str	r3, [sp, #32]
 8008d24:	2300      	movs	r3, #0
 8008d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d28:	e7bf      	b.n	8008caa <_dtoa_r+0x1e2>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dc52      	bgt.n	8008dda <_dtoa_r+0x312>
 8008d34:	2301      	movs	r3, #1
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	920a      	str	r2, [sp, #40]	; 0x28
 8008d3e:	e00b      	b.n	8008d58 <_dtoa_r+0x290>
 8008d40:	2301      	movs	r3, #1
 8008d42:	e7f3      	b.n	8008d2c <_dtoa_r+0x264>
 8008d44:	2300      	movs	r3, #0
 8008d46:	9309      	str	r3, [sp, #36]	; 0x24
 8008d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d4a:	445b      	add	r3, fp
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	9304      	str	r3, [sp, #16]
 8008d54:	bfb8      	it	lt
 8008d56:	2301      	movlt	r3, #1
 8008d58:	69e0      	ldr	r0, [r4, #28]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	2204      	movs	r2, #4
 8008d5e:	f102 0614 	add.w	r6, r2, #20
 8008d62:	429e      	cmp	r6, r3
 8008d64:	d93d      	bls.n	8008de2 <_dtoa_r+0x31a>
 8008d66:	6041      	str	r1, [r0, #4]
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fd9f 	bl	80098ac <_Balloc>
 8008d6e:	9000      	str	r0, [sp, #0]
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d139      	bne.n	8008de8 <_dtoa_r+0x320>
 8008d74:	4b16      	ldr	r3, [pc, #88]	; (8008dd0 <_dtoa_r+0x308>)
 8008d76:	4602      	mov	r2, r0
 8008d78:	f240 11af 	movw	r1, #431	; 0x1af
 8008d7c:	e6bd      	b.n	8008afa <_dtoa_r+0x32>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e7e1      	b.n	8008d46 <_dtoa_r+0x27e>
 8008d82:	2501      	movs	r5, #1
 8008d84:	2300      	movs	r3, #0
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	9509      	str	r5, [sp, #36]	; 0x24
 8008d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	9304      	str	r3, [sp, #16]
 8008d92:	2200      	movs	r2, #0
 8008d94:	2312      	movs	r3, #18
 8008d96:	e7d1      	b.n	8008d3c <_dtoa_r+0x274>
 8008d98:	636f4361 	.word	0x636f4361
 8008d9c:	3fd287a7 	.word	0x3fd287a7
 8008da0:	8b60c8b3 	.word	0x8b60c8b3
 8008da4:	3fc68a28 	.word	0x3fc68a28
 8008da8:	509f79fb 	.word	0x509f79fb
 8008dac:	3fd34413 	.word	0x3fd34413
 8008db0:	0800cb35 	.word	0x0800cb35
 8008db4:	0800cb4c 	.word	0x0800cb4c
 8008db8:	7ff00000 	.word	0x7ff00000
 8008dbc:	0800cb31 	.word	0x0800cb31
 8008dc0:	0800cb28 	.word	0x0800cb28
 8008dc4:	0800cd88 	.word	0x0800cd88
 8008dc8:	3ff80000 	.word	0x3ff80000
 8008dcc:	0800cc38 	.word	0x0800cc38
 8008dd0:	0800cba4 	.word	0x0800cba4
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd8:	e7d7      	b.n	8008d8a <_dtoa_r+0x2c2>
 8008dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	e7ba      	b.n	8008d58 <_dtoa_r+0x290>
 8008de2:	3101      	adds	r1, #1
 8008de4:	0052      	lsls	r2, r2, #1
 8008de6:	e7ba      	b.n	8008d5e <_dtoa_r+0x296>
 8008de8:	69e3      	ldr	r3, [r4, #28]
 8008dea:	9a00      	ldr	r2, [sp, #0]
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	9b04      	ldr	r3, [sp, #16]
 8008df0:	2b0e      	cmp	r3, #14
 8008df2:	f200 80a8 	bhi.w	8008f46 <_dtoa_r+0x47e>
 8008df6:	2d00      	cmp	r5, #0
 8008df8:	f000 80a5 	beq.w	8008f46 <_dtoa_r+0x47e>
 8008dfc:	f1bb 0f00 	cmp.w	fp, #0
 8008e00:	dd38      	ble.n	8008e74 <_dtoa_r+0x3ac>
 8008e02:	4bc0      	ldr	r3, [pc, #768]	; (8009104 <_dtoa_r+0x63c>)
 8008e04:	f00b 020f 	and.w	r2, fp, #15
 8008e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008e14:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008e18:	d019      	beq.n	8008e4e <_dtoa_r+0x386>
 8008e1a:	4bbb      	ldr	r3, [pc, #748]	; (8009108 <_dtoa_r+0x640>)
 8008e1c:	ec51 0b18 	vmov	r0, r1, d8
 8008e20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e24:	f7f7 fd12 	bl	800084c <__aeabi_ddiv>
 8008e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e2c:	f008 080f 	and.w	r8, r8, #15
 8008e30:	2503      	movs	r5, #3
 8008e32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009108 <_dtoa_r+0x640>
 8008e36:	f1b8 0f00 	cmp.w	r8, #0
 8008e3a:	d10a      	bne.n	8008e52 <_dtoa_r+0x38a>
 8008e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e40:	4632      	mov	r2, r6
 8008e42:	463b      	mov	r3, r7
 8008e44:	f7f7 fd02 	bl	800084c <__aeabi_ddiv>
 8008e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e4c:	e02b      	b.n	8008ea6 <_dtoa_r+0x3de>
 8008e4e:	2502      	movs	r5, #2
 8008e50:	e7ef      	b.n	8008e32 <_dtoa_r+0x36a>
 8008e52:	f018 0f01 	tst.w	r8, #1
 8008e56:	d008      	beq.n	8008e6a <_dtoa_r+0x3a2>
 8008e58:	4630      	mov	r0, r6
 8008e5a:	4639      	mov	r1, r7
 8008e5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e60:	f7f7 fbca 	bl	80005f8 <__aeabi_dmul>
 8008e64:	3501      	adds	r5, #1
 8008e66:	4606      	mov	r6, r0
 8008e68:	460f      	mov	r7, r1
 8008e6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e6e:	f109 0908 	add.w	r9, r9, #8
 8008e72:	e7e0      	b.n	8008e36 <_dtoa_r+0x36e>
 8008e74:	f000 809f 	beq.w	8008fb6 <_dtoa_r+0x4ee>
 8008e78:	f1cb 0600 	rsb	r6, fp, #0
 8008e7c:	4ba1      	ldr	r3, [pc, #644]	; (8009104 <_dtoa_r+0x63c>)
 8008e7e:	4fa2      	ldr	r7, [pc, #648]	; (8009108 <_dtoa_r+0x640>)
 8008e80:	f006 020f 	and.w	r2, r6, #15
 8008e84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	ec51 0b18 	vmov	r0, r1, d8
 8008e90:	f7f7 fbb2 	bl	80005f8 <__aeabi_dmul>
 8008e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e98:	1136      	asrs	r6, r6, #4
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	2502      	movs	r5, #2
 8008e9e:	2e00      	cmp	r6, #0
 8008ea0:	d17e      	bne.n	8008fa0 <_dtoa_r+0x4d8>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1d0      	bne.n	8008e48 <_dtoa_r+0x380>
 8008ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 8084 	beq.w	8008fba <_dtoa_r+0x4f2>
 8008eb2:	4b96      	ldr	r3, [pc, #600]	; (800910c <_dtoa_r+0x644>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4649      	mov	r1, r9
 8008eba:	f7f7 fe0f 	bl	8000adc <__aeabi_dcmplt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d07b      	beq.n	8008fba <_dtoa_r+0x4f2>
 8008ec2:	9b04      	ldr	r3, [sp, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d078      	beq.n	8008fba <_dtoa_r+0x4f2>
 8008ec8:	9b01      	ldr	r3, [sp, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dd39      	ble.n	8008f42 <_dtoa_r+0x47a>
 8008ece:	4b90      	ldr	r3, [pc, #576]	; (8009110 <_dtoa_r+0x648>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	f7f7 fb8f 	bl	80005f8 <__aeabi_dmul>
 8008eda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ede:	9e01      	ldr	r6, [sp, #4]
 8008ee0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008eea:	4628      	mov	r0, r5
 8008eec:	f7f7 fb1a 	bl	8000524 <__aeabi_i2d>
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	464b      	mov	r3, r9
 8008ef4:	f7f7 fb80 	bl	80005f8 <__aeabi_dmul>
 8008ef8:	4b86      	ldr	r3, [pc, #536]	; (8009114 <_dtoa_r+0x64c>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	f7f7 f9c6 	bl	800028c <__adddf3>
 8008f00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f08:	9303      	str	r3, [sp, #12]
 8008f0a:	2e00      	cmp	r6, #0
 8008f0c:	d158      	bne.n	8008fc0 <_dtoa_r+0x4f8>
 8008f0e:	4b82      	ldr	r3, [pc, #520]	; (8009118 <_dtoa_r+0x650>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	4640      	mov	r0, r8
 8008f14:	4649      	mov	r1, r9
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f1e:	4680      	mov	r8, r0
 8008f20:	4689      	mov	r9, r1
 8008f22:	f7f7 fdf9 	bl	8000b18 <__aeabi_dcmpgt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f040 8296 	bne.w	8009458 <_dtoa_r+0x990>
 8008f2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f30:	4640      	mov	r0, r8
 8008f32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f36:	4649      	mov	r1, r9
 8008f38:	f7f7 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	f040 8289 	bne.w	8009454 <_dtoa_r+0x98c>
 8008f42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f2c0 814e 	blt.w	80091ea <_dtoa_r+0x722>
 8008f4e:	f1bb 0f0e 	cmp.w	fp, #14
 8008f52:	f300 814a 	bgt.w	80091ea <_dtoa_r+0x722>
 8008f56:	4b6b      	ldr	r3, [pc, #428]	; (8009104 <_dtoa_r+0x63c>)
 8008f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f280 80dc 	bge.w	8009120 <_dtoa_r+0x658>
 8008f68:	9b04      	ldr	r3, [sp, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f300 80d8 	bgt.w	8009120 <_dtoa_r+0x658>
 8008f70:	f040 826f 	bne.w	8009452 <_dtoa_r+0x98a>
 8008f74:	4b68      	ldr	r3, [pc, #416]	; (8009118 <_dtoa_r+0x650>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f7f7 fb3c 	bl	80005f8 <__aeabi_dmul>
 8008f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f84:	f7f7 fdbe 	bl	8000b04 <__aeabi_dcmpge>
 8008f88:	9e04      	ldr	r6, [sp, #16]
 8008f8a:	4637      	mov	r7, r6
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	f040 8245 	bne.w	800941c <_dtoa_r+0x954>
 8008f92:	9d00      	ldr	r5, [sp, #0]
 8008f94:	2331      	movs	r3, #49	; 0x31
 8008f96:	f805 3b01 	strb.w	r3, [r5], #1
 8008f9a:	f10b 0b01 	add.w	fp, fp, #1
 8008f9e:	e241      	b.n	8009424 <_dtoa_r+0x95c>
 8008fa0:	07f2      	lsls	r2, r6, #31
 8008fa2:	d505      	bpl.n	8008fb0 <_dtoa_r+0x4e8>
 8008fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa8:	f7f7 fb26 	bl	80005f8 <__aeabi_dmul>
 8008fac:	3501      	adds	r5, #1
 8008fae:	2301      	movs	r3, #1
 8008fb0:	1076      	asrs	r6, r6, #1
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	e773      	b.n	8008e9e <_dtoa_r+0x3d6>
 8008fb6:	2502      	movs	r5, #2
 8008fb8:	e775      	b.n	8008ea6 <_dtoa_r+0x3de>
 8008fba:	9e04      	ldr	r6, [sp, #16]
 8008fbc:	465f      	mov	r7, fp
 8008fbe:	e792      	b.n	8008ee6 <_dtoa_r+0x41e>
 8008fc0:	9900      	ldr	r1, [sp, #0]
 8008fc2:	4b50      	ldr	r3, [pc, #320]	; (8009104 <_dtoa_r+0x63c>)
 8008fc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fc8:	4431      	add	r1, r6
 8008fca:	9102      	str	r1, [sp, #8]
 8008fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fce:	eeb0 9a47 	vmov.f32	s18, s14
 8008fd2:	eef0 9a67 	vmov.f32	s19, s15
 8008fd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fde:	2900      	cmp	r1, #0
 8008fe0:	d044      	beq.n	800906c <_dtoa_r+0x5a4>
 8008fe2:	494e      	ldr	r1, [pc, #312]	; (800911c <_dtoa_r+0x654>)
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	f7f7 fc31 	bl	800084c <__aeabi_ddiv>
 8008fea:	ec53 2b19 	vmov	r2, r3, d9
 8008fee:	f7f7 f94b 	bl	8000288 <__aeabi_dsub>
 8008ff2:	9d00      	ldr	r5, [sp, #0]
 8008ff4:	ec41 0b19 	vmov	d9, r0, r1
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	f7f7 fdac 	bl	8000b58 <__aeabi_d2iz>
 8009000:	4606      	mov	r6, r0
 8009002:	f7f7 fa8f 	bl	8000524 <__aeabi_i2d>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4640      	mov	r0, r8
 800900c:	4649      	mov	r1, r9
 800900e:	f7f7 f93b 	bl	8000288 <__aeabi_dsub>
 8009012:	3630      	adds	r6, #48	; 0x30
 8009014:	f805 6b01 	strb.w	r6, [r5], #1
 8009018:	ec53 2b19 	vmov	r2, r3, d9
 800901c:	4680      	mov	r8, r0
 800901e:	4689      	mov	r9, r1
 8009020:	f7f7 fd5c 	bl	8000adc <__aeabi_dcmplt>
 8009024:	2800      	cmp	r0, #0
 8009026:	d164      	bne.n	80090f2 <_dtoa_r+0x62a>
 8009028:	4642      	mov	r2, r8
 800902a:	464b      	mov	r3, r9
 800902c:	4937      	ldr	r1, [pc, #220]	; (800910c <_dtoa_r+0x644>)
 800902e:	2000      	movs	r0, #0
 8009030:	f7f7 f92a 	bl	8000288 <__aeabi_dsub>
 8009034:	ec53 2b19 	vmov	r2, r3, d9
 8009038:	f7f7 fd50 	bl	8000adc <__aeabi_dcmplt>
 800903c:	2800      	cmp	r0, #0
 800903e:	f040 80b6 	bne.w	80091ae <_dtoa_r+0x6e6>
 8009042:	9b02      	ldr	r3, [sp, #8]
 8009044:	429d      	cmp	r5, r3
 8009046:	f43f af7c 	beq.w	8008f42 <_dtoa_r+0x47a>
 800904a:	4b31      	ldr	r3, [pc, #196]	; (8009110 <_dtoa_r+0x648>)
 800904c:	ec51 0b19 	vmov	r0, r1, d9
 8009050:	2200      	movs	r2, #0
 8009052:	f7f7 fad1 	bl	80005f8 <__aeabi_dmul>
 8009056:	4b2e      	ldr	r3, [pc, #184]	; (8009110 <_dtoa_r+0x648>)
 8009058:	ec41 0b19 	vmov	d9, r0, r1
 800905c:	2200      	movs	r2, #0
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f7f7 fac9 	bl	80005f8 <__aeabi_dmul>
 8009066:	4680      	mov	r8, r0
 8009068:	4689      	mov	r9, r1
 800906a:	e7c5      	b.n	8008ff8 <_dtoa_r+0x530>
 800906c:	ec51 0b17 	vmov	r0, r1, d7
 8009070:	f7f7 fac2 	bl	80005f8 <__aeabi_dmul>
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	9d00      	ldr	r5, [sp, #0]
 8009078:	930f      	str	r3, [sp, #60]	; 0x3c
 800907a:	ec41 0b19 	vmov	d9, r0, r1
 800907e:	4649      	mov	r1, r9
 8009080:	4640      	mov	r0, r8
 8009082:	f7f7 fd69 	bl	8000b58 <__aeabi_d2iz>
 8009086:	4606      	mov	r6, r0
 8009088:	f7f7 fa4c 	bl	8000524 <__aeabi_i2d>
 800908c:	3630      	adds	r6, #48	; 0x30
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	4640      	mov	r0, r8
 8009094:	4649      	mov	r1, r9
 8009096:	f7f7 f8f7 	bl	8000288 <__aeabi_dsub>
 800909a:	f805 6b01 	strb.w	r6, [r5], #1
 800909e:	9b02      	ldr	r3, [sp, #8]
 80090a0:	429d      	cmp	r5, r3
 80090a2:	4680      	mov	r8, r0
 80090a4:	4689      	mov	r9, r1
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	d124      	bne.n	80090f6 <_dtoa_r+0x62e>
 80090ac:	4b1b      	ldr	r3, [pc, #108]	; (800911c <_dtoa_r+0x654>)
 80090ae:	ec51 0b19 	vmov	r0, r1, d9
 80090b2:	f7f7 f8eb 	bl	800028c <__adddf3>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4640      	mov	r0, r8
 80090bc:	4649      	mov	r1, r9
 80090be:	f7f7 fd2b 	bl	8000b18 <__aeabi_dcmpgt>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d173      	bne.n	80091ae <_dtoa_r+0x6e6>
 80090c6:	ec53 2b19 	vmov	r2, r3, d9
 80090ca:	4914      	ldr	r1, [pc, #80]	; (800911c <_dtoa_r+0x654>)
 80090cc:	2000      	movs	r0, #0
 80090ce:	f7f7 f8db 	bl	8000288 <__aeabi_dsub>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4640      	mov	r0, r8
 80090d8:	4649      	mov	r1, r9
 80090da:	f7f7 fcff 	bl	8000adc <__aeabi_dcmplt>
 80090de:	2800      	cmp	r0, #0
 80090e0:	f43f af2f 	beq.w	8008f42 <_dtoa_r+0x47a>
 80090e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090e6:	1e6b      	subs	r3, r5, #1
 80090e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090ee:	2b30      	cmp	r3, #48	; 0x30
 80090f0:	d0f8      	beq.n	80090e4 <_dtoa_r+0x61c>
 80090f2:	46bb      	mov	fp, r7
 80090f4:	e04a      	b.n	800918c <_dtoa_r+0x6c4>
 80090f6:	4b06      	ldr	r3, [pc, #24]	; (8009110 <_dtoa_r+0x648>)
 80090f8:	f7f7 fa7e 	bl	80005f8 <__aeabi_dmul>
 80090fc:	4680      	mov	r8, r0
 80090fe:	4689      	mov	r9, r1
 8009100:	e7bd      	b.n	800907e <_dtoa_r+0x5b6>
 8009102:	bf00      	nop
 8009104:	0800cc38 	.word	0x0800cc38
 8009108:	0800cc10 	.word	0x0800cc10
 800910c:	3ff00000 	.word	0x3ff00000
 8009110:	40240000 	.word	0x40240000
 8009114:	401c0000 	.word	0x401c0000
 8009118:	40140000 	.word	0x40140000
 800911c:	3fe00000 	.word	0x3fe00000
 8009120:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009124:	9d00      	ldr	r5, [sp, #0]
 8009126:	4642      	mov	r2, r8
 8009128:	464b      	mov	r3, r9
 800912a:	4630      	mov	r0, r6
 800912c:	4639      	mov	r1, r7
 800912e:	f7f7 fb8d 	bl	800084c <__aeabi_ddiv>
 8009132:	f7f7 fd11 	bl	8000b58 <__aeabi_d2iz>
 8009136:	9001      	str	r0, [sp, #4]
 8009138:	f7f7 f9f4 	bl	8000524 <__aeabi_i2d>
 800913c:	4642      	mov	r2, r8
 800913e:	464b      	mov	r3, r9
 8009140:	f7f7 fa5a 	bl	80005f8 <__aeabi_dmul>
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	4630      	mov	r0, r6
 800914a:	4639      	mov	r1, r7
 800914c:	f7f7 f89c 	bl	8000288 <__aeabi_dsub>
 8009150:	9e01      	ldr	r6, [sp, #4]
 8009152:	9f04      	ldr	r7, [sp, #16]
 8009154:	3630      	adds	r6, #48	; 0x30
 8009156:	f805 6b01 	strb.w	r6, [r5], #1
 800915a:	9e00      	ldr	r6, [sp, #0]
 800915c:	1bae      	subs	r6, r5, r6
 800915e:	42b7      	cmp	r7, r6
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	d134      	bne.n	80091d0 <_dtoa_r+0x708>
 8009166:	f7f7 f891 	bl	800028c <__adddf3>
 800916a:	4642      	mov	r2, r8
 800916c:	464b      	mov	r3, r9
 800916e:	4606      	mov	r6, r0
 8009170:	460f      	mov	r7, r1
 8009172:	f7f7 fcd1 	bl	8000b18 <__aeabi_dcmpgt>
 8009176:	b9c8      	cbnz	r0, 80091ac <_dtoa_r+0x6e4>
 8009178:	4642      	mov	r2, r8
 800917a:	464b      	mov	r3, r9
 800917c:	4630      	mov	r0, r6
 800917e:	4639      	mov	r1, r7
 8009180:	f7f7 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009184:	b110      	cbz	r0, 800918c <_dtoa_r+0x6c4>
 8009186:	9b01      	ldr	r3, [sp, #4]
 8009188:	07db      	lsls	r3, r3, #31
 800918a:	d40f      	bmi.n	80091ac <_dtoa_r+0x6e4>
 800918c:	4651      	mov	r1, sl
 800918e:	4620      	mov	r0, r4
 8009190:	f000 fbcc 	bl	800992c <_Bfree>
 8009194:	2300      	movs	r3, #0
 8009196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009198:	702b      	strb	r3, [r5, #0]
 800919a:	f10b 0301 	add.w	r3, fp, #1
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f43f ace2 	beq.w	8008b6c <_dtoa_r+0xa4>
 80091a8:	601d      	str	r5, [r3, #0]
 80091aa:	e4df      	b.n	8008b6c <_dtoa_r+0xa4>
 80091ac:	465f      	mov	r7, fp
 80091ae:	462b      	mov	r3, r5
 80091b0:	461d      	mov	r5, r3
 80091b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091b6:	2a39      	cmp	r2, #57	; 0x39
 80091b8:	d106      	bne.n	80091c8 <_dtoa_r+0x700>
 80091ba:	9a00      	ldr	r2, [sp, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d1f7      	bne.n	80091b0 <_dtoa_r+0x6e8>
 80091c0:	9900      	ldr	r1, [sp, #0]
 80091c2:	2230      	movs	r2, #48	; 0x30
 80091c4:	3701      	adds	r7, #1
 80091c6:	700a      	strb	r2, [r1, #0]
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	3201      	adds	r2, #1
 80091cc:	701a      	strb	r2, [r3, #0]
 80091ce:	e790      	b.n	80090f2 <_dtoa_r+0x62a>
 80091d0:	4ba3      	ldr	r3, [pc, #652]	; (8009460 <_dtoa_r+0x998>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	f7f7 fa10 	bl	80005f8 <__aeabi_dmul>
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	4606      	mov	r6, r0
 80091de:	460f      	mov	r7, r1
 80091e0:	f7f7 fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d09e      	beq.n	8009126 <_dtoa_r+0x65e>
 80091e8:	e7d0      	b.n	800918c <_dtoa_r+0x6c4>
 80091ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ec:	2a00      	cmp	r2, #0
 80091ee:	f000 80ca 	beq.w	8009386 <_dtoa_r+0x8be>
 80091f2:	9a07      	ldr	r2, [sp, #28]
 80091f4:	2a01      	cmp	r2, #1
 80091f6:	f300 80ad 	bgt.w	8009354 <_dtoa_r+0x88c>
 80091fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091fc:	2a00      	cmp	r2, #0
 80091fe:	f000 80a5 	beq.w	800934c <_dtoa_r+0x884>
 8009202:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009206:	9e08      	ldr	r6, [sp, #32]
 8009208:	9d05      	ldr	r5, [sp, #20]
 800920a:	9a05      	ldr	r2, [sp, #20]
 800920c:	441a      	add	r2, r3
 800920e:	9205      	str	r2, [sp, #20]
 8009210:	9a06      	ldr	r2, [sp, #24]
 8009212:	2101      	movs	r1, #1
 8009214:	441a      	add	r2, r3
 8009216:	4620      	mov	r0, r4
 8009218:	9206      	str	r2, [sp, #24]
 800921a:	f000 fc87 	bl	8009b2c <__i2b>
 800921e:	4607      	mov	r7, r0
 8009220:	b165      	cbz	r5, 800923c <_dtoa_r+0x774>
 8009222:	9b06      	ldr	r3, [sp, #24]
 8009224:	2b00      	cmp	r3, #0
 8009226:	dd09      	ble.n	800923c <_dtoa_r+0x774>
 8009228:	42ab      	cmp	r3, r5
 800922a:	9a05      	ldr	r2, [sp, #20]
 800922c:	bfa8      	it	ge
 800922e:	462b      	movge	r3, r5
 8009230:	1ad2      	subs	r2, r2, r3
 8009232:	9205      	str	r2, [sp, #20]
 8009234:	9a06      	ldr	r2, [sp, #24]
 8009236:	1aed      	subs	r5, r5, r3
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	9306      	str	r3, [sp, #24]
 800923c:	9b08      	ldr	r3, [sp, #32]
 800923e:	b1f3      	cbz	r3, 800927e <_dtoa_r+0x7b6>
 8009240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 80a3 	beq.w	800938e <_dtoa_r+0x8c6>
 8009248:	2e00      	cmp	r6, #0
 800924a:	dd10      	ble.n	800926e <_dtoa_r+0x7a6>
 800924c:	4639      	mov	r1, r7
 800924e:	4632      	mov	r2, r6
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fd2b 	bl	8009cac <__pow5mult>
 8009256:	4652      	mov	r2, sl
 8009258:	4601      	mov	r1, r0
 800925a:	4607      	mov	r7, r0
 800925c:	4620      	mov	r0, r4
 800925e:	f000 fc7b 	bl	8009b58 <__multiply>
 8009262:	4651      	mov	r1, sl
 8009264:	4680      	mov	r8, r0
 8009266:	4620      	mov	r0, r4
 8009268:	f000 fb60 	bl	800992c <_Bfree>
 800926c:	46c2      	mov	sl, r8
 800926e:	9b08      	ldr	r3, [sp, #32]
 8009270:	1b9a      	subs	r2, r3, r6
 8009272:	d004      	beq.n	800927e <_dtoa_r+0x7b6>
 8009274:	4651      	mov	r1, sl
 8009276:	4620      	mov	r0, r4
 8009278:	f000 fd18 	bl	8009cac <__pow5mult>
 800927c:	4682      	mov	sl, r0
 800927e:	2101      	movs	r1, #1
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fc53 	bl	8009b2c <__i2b>
 8009286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009288:	2b00      	cmp	r3, #0
 800928a:	4606      	mov	r6, r0
 800928c:	f340 8081 	ble.w	8009392 <_dtoa_r+0x8ca>
 8009290:	461a      	mov	r2, r3
 8009292:	4601      	mov	r1, r0
 8009294:	4620      	mov	r0, r4
 8009296:	f000 fd09 	bl	8009cac <__pow5mult>
 800929a:	9b07      	ldr	r3, [sp, #28]
 800929c:	2b01      	cmp	r3, #1
 800929e:	4606      	mov	r6, r0
 80092a0:	dd7a      	ble.n	8009398 <_dtoa_r+0x8d0>
 80092a2:	f04f 0800 	mov.w	r8, #0
 80092a6:	6933      	ldr	r3, [r6, #16]
 80092a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092ac:	6918      	ldr	r0, [r3, #16]
 80092ae:	f000 fbef 	bl	8009a90 <__hi0bits>
 80092b2:	f1c0 0020 	rsb	r0, r0, #32
 80092b6:	9b06      	ldr	r3, [sp, #24]
 80092b8:	4418      	add	r0, r3
 80092ba:	f010 001f 	ands.w	r0, r0, #31
 80092be:	f000 8094 	beq.w	80093ea <_dtoa_r+0x922>
 80092c2:	f1c0 0320 	rsb	r3, r0, #32
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	f340 8085 	ble.w	80093d6 <_dtoa_r+0x90e>
 80092cc:	9b05      	ldr	r3, [sp, #20]
 80092ce:	f1c0 001c 	rsb	r0, r0, #28
 80092d2:	4403      	add	r3, r0
 80092d4:	9305      	str	r3, [sp, #20]
 80092d6:	9b06      	ldr	r3, [sp, #24]
 80092d8:	4403      	add	r3, r0
 80092da:	4405      	add	r5, r0
 80092dc:	9306      	str	r3, [sp, #24]
 80092de:	9b05      	ldr	r3, [sp, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dd05      	ble.n	80092f0 <_dtoa_r+0x828>
 80092e4:	4651      	mov	r1, sl
 80092e6:	461a      	mov	r2, r3
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 fd39 	bl	8009d60 <__lshift>
 80092ee:	4682      	mov	sl, r0
 80092f0:	9b06      	ldr	r3, [sp, #24]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dd05      	ble.n	8009302 <_dtoa_r+0x83a>
 80092f6:	4631      	mov	r1, r6
 80092f8:	461a      	mov	r2, r3
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fd30 	bl	8009d60 <__lshift>
 8009300:	4606      	mov	r6, r0
 8009302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009304:	2b00      	cmp	r3, #0
 8009306:	d072      	beq.n	80093ee <_dtoa_r+0x926>
 8009308:	4631      	mov	r1, r6
 800930a:	4650      	mov	r0, sl
 800930c:	f000 fd94 	bl	8009e38 <__mcmp>
 8009310:	2800      	cmp	r0, #0
 8009312:	da6c      	bge.n	80093ee <_dtoa_r+0x926>
 8009314:	2300      	movs	r3, #0
 8009316:	4651      	mov	r1, sl
 8009318:	220a      	movs	r2, #10
 800931a:	4620      	mov	r0, r4
 800931c:	f000 fb28 	bl	8009970 <__multadd>
 8009320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009326:	4682      	mov	sl, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 81b0 	beq.w	800968e <_dtoa_r+0xbc6>
 800932e:	2300      	movs	r3, #0
 8009330:	4639      	mov	r1, r7
 8009332:	220a      	movs	r2, #10
 8009334:	4620      	mov	r0, r4
 8009336:	f000 fb1b 	bl	8009970 <__multadd>
 800933a:	9b01      	ldr	r3, [sp, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	4607      	mov	r7, r0
 8009340:	f300 8096 	bgt.w	8009470 <_dtoa_r+0x9a8>
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	2b02      	cmp	r3, #2
 8009348:	dc59      	bgt.n	80093fe <_dtoa_r+0x936>
 800934a:	e091      	b.n	8009470 <_dtoa_r+0x9a8>
 800934c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800934e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009352:	e758      	b.n	8009206 <_dtoa_r+0x73e>
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	1e5e      	subs	r6, r3, #1
 8009358:	9b08      	ldr	r3, [sp, #32]
 800935a:	42b3      	cmp	r3, r6
 800935c:	bfbf      	itttt	lt
 800935e:	9b08      	ldrlt	r3, [sp, #32]
 8009360:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009362:	9608      	strlt	r6, [sp, #32]
 8009364:	1af3      	sublt	r3, r6, r3
 8009366:	bfb4      	ite	lt
 8009368:	18d2      	addlt	r2, r2, r3
 800936a:	1b9e      	subge	r6, r3, r6
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	bfbc      	itt	lt
 8009370:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009372:	2600      	movlt	r6, #0
 8009374:	2b00      	cmp	r3, #0
 8009376:	bfb7      	itett	lt
 8009378:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800937c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009380:	1a9d      	sublt	r5, r3, r2
 8009382:	2300      	movlt	r3, #0
 8009384:	e741      	b.n	800920a <_dtoa_r+0x742>
 8009386:	9e08      	ldr	r6, [sp, #32]
 8009388:	9d05      	ldr	r5, [sp, #20]
 800938a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800938c:	e748      	b.n	8009220 <_dtoa_r+0x758>
 800938e:	9a08      	ldr	r2, [sp, #32]
 8009390:	e770      	b.n	8009274 <_dtoa_r+0x7ac>
 8009392:	9b07      	ldr	r3, [sp, #28]
 8009394:	2b01      	cmp	r3, #1
 8009396:	dc19      	bgt.n	80093cc <_dtoa_r+0x904>
 8009398:	9b02      	ldr	r3, [sp, #8]
 800939a:	b9bb      	cbnz	r3, 80093cc <_dtoa_r+0x904>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093a2:	b99b      	cbnz	r3, 80093cc <_dtoa_r+0x904>
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093aa:	0d1b      	lsrs	r3, r3, #20
 80093ac:	051b      	lsls	r3, r3, #20
 80093ae:	b183      	cbz	r3, 80093d2 <_dtoa_r+0x90a>
 80093b0:	9b05      	ldr	r3, [sp, #20]
 80093b2:	3301      	adds	r3, #1
 80093b4:	9305      	str	r3, [sp, #20]
 80093b6:	9b06      	ldr	r3, [sp, #24]
 80093b8:	3301      	adds	r3, #1
 80093ba:	9306      	str	r3, [sp, #24]
 80093bc:	f04f 0801 	mov.w	r8, #1
 80093c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f47f af6f 	bne.w	80092a6 <_dtoa_r+0x7de>
 80093c8:	2001      	movs	r0, #1
 80093ca:	e774      	b.n	80092b6 <_dtoa_r+0x7ee>
 80093cc:	f04f 0800 	mov.w	r8, #0
 80093d0:	e7f6      	b.n	80093c0 <_dtoa_r+0x8f8>
 80093d2:	4698      	mov	r8, r3
 80093d4:	e7f4      	b.n	80093c0 <_dtoa_r+0x8f8>
 80093d6:	d082      	beq.n	80092de <_dtoa_r+0x816>
 80093d8:	9a05      	ldr	r2, [sp, #20]
 80093da:	331c      	adds	r3, #28
 80093dc:	441a      	add	r2, r3
 80093de:	9205      	str	r2, [sp, #20]
 80093e0:	9a06      	ldr	r2, [sp, #24]
 80093e2:	441a      	add	r2, r3
 80093e4:	441d      	add	r5, r3
 80093e6:	9206      	str	r2, [sp, #24]
 80093e8:	e779      	b.n	80092de <_dtoa_r+0x816>
 80093ea:	4603      	mov	r3, r0
 80093ec:	e7f4      	b.n	80093d8 <_dtoa_r+0x910>
 80093ee:	9b04      	ldr	r3, [sp, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	dc37      	bgt.n	8009464 <_dtoa_r+0x99c>
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	dd34      	ble.n	8009464 <_dtoa_r+0x99c>
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	b963      	cbnz	r3, 800941c <_dtoa_r+0x954>
 8009402:	4631      	mov	r1, r6
 8009404:	2205      	movs	r2, #5
 8009406:	4620      	mov	r0, r4
 8009408:	f000 fab2 	bl	8009970 <__multadd>
 800940c:	4601      	mov	r1, r0
 800940e:	4606      	mov	r6, r0
 8009410:	4650      	mov	r0, sl
 8009412:	f000 fd11 	bl	8009e38 <__mcmp>
 8009416:	2800      	cmp	r0, #0
 8009418:	f73f adbb 	bgt.w	8008f92 <_dtoa_r+0x4ca>
 800941c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800941e:	9d00      	ldr	r5, [sp, #0]
 8009420:	ea6f 0b03 	mvn.w	fp, r3
 8009424:	f04f 0800 	mov.w	r8, #0
 8009428:	4631      	mov	r1, r6
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fa7e 	bl	800992c <_Bfree>
 8009430:	2f00      	cmp	r7, #0
 8009432:	f43f aeab 	beq.w	800918c <_dtoa_r+0x6c4>
 8009436:	f1b8 0f00 	cmp.w	r8, #0
 800943a:	d005      	beq.n	8009448 <_dtoa_r+0x980>
 800943c:	45b8      	cmp	r8, r7
 800943e:	d003      	beq.n	8009448 <_dtoa_r+0x980>
 8009440:	4641      	mov	r1, r8
 8009442:	4620      	mov	r0, r4
 8009444:	f000 fa72 	bl	800992c <_Bfree>
 8009448:	4639      	mov	r1, r7
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fa6e 	bl	800992c <_Bfree>
 8009450:	e69c      	b.n	800918c <_dtoa_r+0x6c4>
 8009452:	2600      	movs	r6, #0
 8009454:	4637      	mov	r7, r6
 8009456:	e7e1      	b.n	800941c <_dtoa_r+0x954>
 8009458:	46bb      	mov	fp, r7
 800945a:	4637      	mov	r7, r6
 800945c:	e599      	b.n	8008f92 <_dtoa_r+0x4ca>
 800945e:	bf00      	nop
 8009460:	40240000 	.word	0x40240000
 8009464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80c8 	beq.w	80095fc <_dtoa_r+0xb34>
 800946c:	9b04      	ldr	r3, [sp, #16]
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	2d00      	cmp	r5, #0
 8009472:	dd05      	ble.n	8009480 <_dtoa_r+0x9b8>
 8009474:	4639      	mov	r1, r7
 8009476:	462a      	mov	r2, r5
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fc71 	bl	8009d60 <__lshift>
 800947e:	4607      	mov	r7, r0
 8009480:	f1b8 0f00 	cmp.w	r8, #0
 8009484:	d05b      	beq.n	800953e <_dtoa_r+0xa76>
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	4620      	mov	r0, r4
 800948a:	f000 fa0f 	bl	80098ac <_Balloc>
 800948e:	4605      	mov	r5, r0
 8009490:	b928      	cbnz	r0, 800949e <_dtoa_r+0x9d6>
 8009492:	4b83      	ldr	r3, [pc, #524]	; (80096a0 <_dtoa_r+0xbd8>)
 8009494:	4602      	mov	r2, r0
 8009496:	f240 21ef 	movw	r1, #751	; 0x2ef
 800949a:	f7ff bb2e 	b.w	8008afa <_dtoa_r+0x32>
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	3202      	adds	r2, #2
 80094a2:	0092      	lsls	r2, r2, #2
 80094a4:	f107 010c 	add.w	r1, r7, #12
 80094a8:	300c      	adds	r0, #12
 80094aa:	f002 fb19 	bl	800bae0 <memcpy>
 80094ae:	2201      	movs	r2, #1
 80094b0:	4629      	mov	r1, r5
 80094b2:	4620      	mov	r0, r4
 80094b4:	f000 fc54 	bl	8009d60 <__lshift>
 80094b8:	9b00      	ldr	r3, [sp, #0]
 80094ba:	3301      	adds	r3, #1
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094c2:	4413      	add	r3, r2
 80094c4:	9308      	str	r3, [sp, #32]
 80094c6:	9b02      	ldr	r3, [sp, #8]
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	46b8      	mov	r8, r7
 80094ce:	9306      	str	r3, [sp, #24]
 80094d0:	4607      	mov	r7, r0
 80094d2:	9b04      	ldr	r3, [sp, #16]
 80094d4:	4631      	mov	r1, r6
 80094d6:	3b01      	subs	r3, #1
 80094d8:	4650      	mov	r0, sl
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	f7ff fa6c 	bl	80089b8 <quorem>
 80094e0:	4641      	mov	r1, r8
 80094e2:	9002      	str	r0, [sp, #8]
 80094e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094e8:	4650      	mov	r0, sl
 80094ea:	f000 fca5 	bl	8009e38 <__mcmp>
 80094ee:	463a      	mov	r2, r7
 80094f0:	9005      	str	r0, [sp, #20]
 80094f2:	4631      	mov	r1, r6
 80094f4:	4620      	mov	r0, r4
 80094f6:	f000 fcbb 	bl	8009e70 <__mdiff>
 80094fa:	68c2      	ldr	r2, [r0, #12]
 80094fc:	4605      	mov	r5, r0
 80094fe:	bb02      	cbnz	r2, 8009542 <_dtoa_r+0xa7a>
 8009500:	4601      	mov	r1, r0
 8009502:	4650      	mov	r0, sl
 8009504:	f000 fc98 	bl	8009e38 <__mcmp>
 8009508:	4602      	mov	r2, r0
 800950a:	4629      	mov	r1, r5
 800950c:	4620      	mov	r0, r4
 800950e:	9209      	str	r2, [sp, #36]	; 0x24
 8009510:	f000 fa0c 	bl	800992c <_Bfree>
 8009514:	9b07      	ldr	r3, [sp, #28]
 8009516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009518:	9d04      	ldr	r5, [sp, #16]
 800951a:	ea43 0102 	orr.w	r1, r3, r2
 800951e:	9b06      	ldr	r3, [sp, #24]
 8009520:	4319      	orrs	r1, r3
 8009522:	d110      	bne.n	8009546 <_dtoa_r+0xa7e>
 8009524:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009528:	d029      	beq.n	800957e <_dtoa_r+0xab6>
 800952a:	9b05      	ldr	r3, [sp, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	dd02      	ble.n	8009536 <_dtoa_r+0xa6e>
 8009530:	9b02      	ldr	r3, [sp, #8]
 8009532:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	f883 9000 	strb.w	r9, [r3]
 800953c:	e774      	b.n	8009428 <_dtoa_r+0x960>
 800953e:	4638      	mov	r0, r7
 8009540:	e7ba      	b.n	80094b8 <_dtoa_r+0x9f0>
 8009542:	2201      	movs	r2, #1
 8009544:	e7e1      	b.n	800950a <_dtoa_r+0xa42>
 8009546:	9b05      	ldr	r3, [sp, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	db04      	blt.n	8009556 <_dtoa_r+0xa8e>
 800954c:	9907      	ldr	r1, [sp, #28]
 800954e:	430b      	orrs	r3, r1
 8009550:	9906      	ldr	r1, [sp, #24]
 8009552:	430b      	orrs	r3, r1
 8009554:	d120      	bne.n	8009598 <_dtoa_r+0xad0>
 8009556:	2a00      	cmp	r2, #0
 8009558:	dded      	ble.n	8009536 <_dtoa_r+0xa6e>
 800955a:	4651      	mov	r1, sl
 800955c:	2201      	movs	r2, #1
 800955e:	4620      	mov	r0, r4
 8009560:	f000 fbfe 	bl	8009d60 <__lshift>
 8009564:	4631      	mov	r1, r6
 8009566:	4682      	mov	sl, r0
 8009568:	f000 fc66 	bl	8009e38 <__mcmp>
 800956c:	2800      	cmp	r0, #0
 800956e:	dc03      	bgt.n	8009578 <_dtoa_r+0xab0>
 8009570:	d1e1      	bne.n	8009536 <_dtoa_r+0xa6e>
 8009572:	f019 0f01 	tst.w	r9, #1
 8009576:	d0de      	beq.n	8009536 <_dtoa_r+0xa6e>
 8009578:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800957c:	d1d8      	bne.n	8009530 <_dtoa_r+0xa68>
 800957e:	9a01      	ldr	r2, [sp, #4]
 8009580:	2339      	movs	r3, #57	; 0x39
 8009582:	7013      	strb	r3, [r2, #0]
 8009584:	462b      	mov	r3, r5
 8009586:	461d      	mov	r5, r3
 8009588:	3b01      	subs	r3, #1
 800958a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800958e:	2a39      	cmp	r2, #57	; 0x39
 8009590:	d06c      	beq.n	800966c <_dtoa_r+0xba4>
 8009592:	3201      	adds	r2, #1
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	e747      	b.n	8009428 <_dtoa_r+0x960>
 8009598:	2a00      	cmp	r2, #0
 800959a:	dd07      	ble.n	80095ac <_dtoa_r+0xae4>
 800959c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095a0:	d0ed      	beq.n	800957e <_dtoa_r+0xab6>
 80095a2:	9a01      	ldr	r2, [sp, #4]
 80095a4:	f109 0301 	add.w	r3, r9, #1
 80095a8:	7013      	strb	r3, [r2, #0]
 80095aa:	e73d      	b.n	8009428 <_dtoa_r+0x960>
 80095ac:	9b04      	ldr	r3, [sp, #16]
 80095ae:	9a08      	ldr	r2, [sp, #32]
 80095b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d043      	beq.n	8009640 <_dtoa_r+0xb78>
 80095b8:	4651      	mov	r1, sl
 80095ba:	2300      	movs	r3, #0
 80095bc:	220a      	movs	r2, #10
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 f9d6 	bl	8009970 <__multadd>
 80095c4:	45b8      	cmp	r8, r7
 80095c6:	4682      	mov	sl, r0
 80095c8:	f04f 0300 	mov.w	r3, #0
 80095cc:	f04f 020a 	mov.w	r2, #10
 80095d0:	4641      	mov	r1, r8
 80095d2:	4620      	mov	r0, r4
 80095d4:	d107      	bne.n	80095e6 <_dtoa_r+0xb1e>
 80095d6:	f000 f9cb 	bl	8009970 <__multadd>
 80095da:	4680      	mov	r8, r0
 80095dc:	4607      	mov	r7, r0
 80095de:	9b04      	ldr	r3, [sp, #16]
 80095e0:	3301      	adds	r3, #1
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	e775      	b.n	80094d2 <_dtoa_r+0xa0a>
 80095e6:	f000 f9c3 	bl	8009970 <__multadd>
 80095ea:	4639      	mov	r1, r7
 80095ec:	4680      	mov	r8, r0
 80095ee:	2300      	movs	r3, #0
 80095f0:	220a      	movs	r2, #10
 80095f2:	4620      	mov	r0, r4
 80095f4:	f000 f9bc 	bl	8009970 <__multadd>
 80095f8:	4607      	mov	r7, r0
 80095fa:	e7f0      	b.n	80095de <_dtoa_r+0xb16>
 80095fc:	9b04      	ldr	r3, [sp, #16]
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	9d00      	ldr	r5, [sp, #0]
 8009602:	4631      	mov	r1, r6
 8009604:	4650      	mov	r0, sl
 8009606:	f7ff f9d7 	bl	80089b8 <quorem>
 800960a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800960e:	9b00      	ldr	r3, [sp, #0]
 8009610:	f805 9b01 	strb.w	r9, [r5], #1
 8009614:	1aea      	subs	r2, r5, r3
 8009616:	9b01      	ldr	r3, [sp, #4]
 8009618:	4293      	cmp	r3, r2
 800961a:	dd07      	ble.n	800962c <_dtoa_r+0xb64>
 800961c:	4651      	mov	r1, sl
 800961e:	2300      	movs	r3, #0
 8009620:	220a      	movs	r2, #10
 8009622:	4620      	mov	r0, r4
 8009624:	f000 f9a4 	bl	8009970 <__multadd>
 8009628:	4682      	mov	sl, r0
 800962a:	e7ea      	b.n	8009602 <_dtoa_r+0xb3a>
 800962c:	9b01      	ldr	r3, [sp, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	bfc8      	it	gt
 8009632:	461d      	movgt	r5, r3
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	bfd8      	it	le
 8009638:	2501      	movle	r5, #1
 800963a:	441d      	add	r5, r3
 800963c:	f04f 0800 	mov.w	r8, #0
 8009640:	4651      	mov	r1, sl
 8009642:	2201      	movs	r2, #1
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fb8b 	bl	8009d60 <__lshift>
 800964a:	4631      	mov	r1, r6
 800964c:	4682      	mov	sl, r0
 800964e:	f000 fbf3 	bl	8009e38 <__mcmp>
 8009652:	2800      	cmp	r0, #0
 8009654:	dc96      	bgt.n	8009584 <_dtoa_r+0xabc>
 8009656:	d102      	bne.n	800965e <_dtoa_r+0xb96>
 8009658:	f019 0f01 	tst.w	r9, #1
 800965c:	d192      	bne.n	8009584 <_dtoa_r+0xabc>
 800965e:	462b      	mov	r3, r5
 8009660:	461d      	mov	r5, r3
 8009662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009666:	2a30      	cmp	r2, #48	; 0x30
 8009668:	d0fa      	beq.n	8009660 <_dtoa_r+0xb98>
 800966a:	e6dd      	b.n	8009428 <_dtoa_r+0x960>
 800966c:	9a00      	ldr	r2, [sp, #0]
 800966e:	429a      	cmp	r2, r3
 8009670:	d189      	bne.n	8009586 <_dtoa_r+0xabe>
 8009672:	f10b 0b01 	add.w	fp, fp, #1
 8009676:	2331      	movs	r3, #49	; 0x31
 8009678:	e796      	b.n	80095a8 <_dtoa_r+0xae0>
 800967a:	4b0a      	ldr	r3, [pc, #40]	; (80096a4 <_dtoa_r+0xbdc>)
 800967c:	f7ff ba99 	b.w	8008bb2 <_dtoa_r+0xea>
 8009680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009682:	2b00      	cmp	r3, #0
 8009684:	f47f aa6d 	bne.w	8008b62 <_dtoa_r+0x9a>
 8009688:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <_dtoa_r+0xbe0>)
 800968a:	f7ff ba92 	b.w	8008bb2 <_dtoa_r+0xea>
 800968e:	9b01      	ldr	r3, [sp, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	dcb5      	bgt.n	8009600 <_dtoa_r+0xb38>
 8009694:	9b07      	ldr	r3, [sp, #28]
 8009696:	2b02      	cmp	r3, #2
 8009698:	f73f aeb1 	bgt.w	80093fe <_dtoa_r+0x936>
 800969c:	e7b0      	b.n	8009600 <_dtoa_r+0xb38>
 800969e:	bf00      	nop
 80096a0:	0800cba4 	.word	0x0800cba4
 80096a4:	0800cd87 	.word	0x0800cd87
 80096a8:	0800cb28 	.word	0x0800cb28

080096ac <_free_r>:
 80096ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ae:	2900      	cmp	r1, #0
 80096b0:	d044      	beq.n	800973c <_free_r+0x90>
 80096b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b6:	9001      	str	r0, [sp, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f1a1 0404 	sub.w	r4, r1, #4
 80096be:	bfb8      	it	lt
 80096c0:	18e4      	addlt	r4, r4, r3
 80096c2:	f000 f8e7 	bl	8009894 <__malloc_lock>
 80096c6:	4a1e      	ldr	r2, [pc, #120]	; (8009740 <_free_r+0x94>)
 80096c8:	9801      	ldr	r0, [sp, #4]
 80096ca:	6813      	ldr	r3, [r2, #0]
 80096cc:	b933      	cbnz	r3, 80096dc <_free_r+0x30>
 80096ce:	6063      	str	r3, [r4, #4]
 80096d0:	6014      	str	r4, [r2, #0]
 80096d2:	b003      	add	sp, #12
 80096d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096d8:	f000 b8e2 	b.w	80098a0 <__malloc_unlock>
 80096dc:	42a3      	cmp	r3, r4
 80096de:	d908      	bls.n	80096f2 <_free_r+0x46>
 80096e0:	6825      	ldr	r5, [r4, #0]
 80096e2:	1961      	adds	r1, r4, r5
 80096e4:	428b      	cmp	r3, r1
 80096e6:	bf01      	itttt	eq
 80096e8:	6819      	ldreq	r1, [r3, #0]
 80096ea:	685b      	ldreq	r3, [r3, #4]
 80096ec:	1949      	addeq	r1, r1, r5
 80096ee:	6021      	streq	r1, [r4, #0]
 80096f0:	e7ed      	b.n	80096ce <_free_r+0x22>
 80096f2:	461a      	mov	r2, r3
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	b10b      	cbz	r3, 80096fc <_free_r+0x50>
 80096f8:	42a3      	cmp	r3, r4
 80096fa:	d9fa      	bls.n	80096f2 <_free_r+0x46>
 80096fc:	6811      	ldr	r1, [r2, #0]
 80096fe:	1855      	adds	r5, r2, r1
 8009700:	42a5      	cmp	r5, r4
 8009702:	d10b      	bne.n	800971c <_free_r+0x70>
 8009704:	6824      	ldr	r4, [r4, #0]
 8009706:	4421      	add	r1, r4
 8009708:	1854      	adds	r4, r2, r1
 800970a:	42a3      	cmp	r3, r4
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	d1e0      	bne.n	80096d2 <_free_r+0x26>
 8009710:	681c      	ldr	r4, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	6053      	str	r3, [r2, #4]
 8009716:	440c      	add	r4, r1
 8009718:	6014      	str	r4, [r2, #0]
 800971a:	e7da      	b.n	80096d2 <_free_r+0x26>
 800971c:	d902      	bls.n	8009724 <_free_r+0x78>
 800971e:	230c      	movs	r3, #12
 8009720:	6003      	str	r3, [r0, #0]
 8009722:	e7d6      	b.n	80096d2 <_free_r+0x26>
 8009724:	6825      	ldr	r5, [r4, #0]
 8009726:	1961      	adds	r1, r4, r5
 8009728:	428b      	cmp	r3, r1
 800972a:	bf04      	itt	eq
 800972c:	6819      	ldreq	r1, [r3, #0]
 800972e:	685b      	ldreq	r3, [r3, #4]
 8009730:	6063      	str	r3, [r4, #4]
 8009732:	bf04      	itt	eq
 8009734:	1949      	addeq	r1, r1, r5
 8009736:	6021      	streq	r1, [r4, #0]
 8009738:	6054      	str	r4, [r2, #4]
 800973a:	e7ca      	b.n	80096d2 <_free_r+0x26>
 800973c:	b003      	add	sp, #12
 800973e:	bd30      	pop	{r4, r5, pc}
 8009740:	2000083c 	.word	0x2000083c

08009744 <malloc>:
 8009744:	4b02      	ldr	r3, [pc, #8]	; (8009750 <malloc+0xc>)
 8009746:	4601      	mov	r1, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f000 b823 	b.w	8009794 <_malloc_r>
 800974e:	bf00      	nop
 8009750:	2000007c 	.word	0x2000007c

08009754 <sbrk_aligned>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	4e0e      	ldr	r6, [pc, #56]	; (8009790 <sbrk_aligned+0x3c>)
 8009758:	460c      	mov	r4, r1
 800975a:	6831      	ldr	r1, [r6, #0]
 800975c:	4605      	mov	r5, r0
 800975e:	b911      	cbnz	r1, 8009766 <sbrk_aligned+0x12>
 8009760:	f002 f9ae 	bl	800bac0 <_sbrk_r>
 8009764:	6030      	str	r0, [r6, #0]
 8009766:	4621      	mov	r1, r4
 8009768:	4628      	mov	r0, r5
 800976a:	f002 f9a9 	bl	800bac0 <_sbrk_r>
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	d00a      	beq.n	8009788 <sbrk_aligned+0x34>
 8009772:	1cc4      	adds	r4, r0, #3
 8009774:	f024 0403 	bic.w	r4, r4, #3
 8009778:	42a0      	cmp	r0, r4
 800977a:	d007      	beq.n	800978c <sbrk_aligned+0x38>
 800977c:	1a21      	subs	r1, r4, r0
 800977e:	4628      	mov	r0, r5
 8009780:	f002 f99e 	bl	800bac0 <_sbrk_r>
 8009784:	3001      	adds	r0, #1
 8009786:	d101      	bne.n	800978c <sbrk_aligned+0x38>
 8009788:	f04f 34ff 	mov.w	r4, #4294967295
 800978c:	4620      	mov	r0, r4
 800978e:	bd70      	pop	{r4, r5, r6, pc}
 8009790:	20000840 	.word	0x20000840

08009794 <_malloc_r>:
 8009794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009798:	1ccd      	adds	r5, r1, #3
 800979a:	f025 0503 	bic.w	r5, r5, #3
 800979e:	3508      	adds	r5, #8
 80097a0:	2d0c      	cmp	r5, #12
 80097a2:	bf38      	it	cc
 80097a4:	250c      	movcc	r5, #12
 80097a6:	2d00      	cmp	r5, #0
 80097a8:	4607      	mov	r7, r0
 80097aa:	db01      	blt.n	80097b0 <_malloc_r+0x1c>
 80097ac:	42a9      	cmp	r1, r5
 80097ae:	d905      	bls.n	80097bc <_malloc_r+0x28>
 80097b0:	230c      	movs	r3, #12
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	2600      	movs	r6, #0
 80097b6:	4630      	mov	r0, r6
 80097b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009890 <_malloc_r+0xfc>
 80097c0:	f000 f868 	bl	8009894 <__malloc_lock>
 80097c4:	f8d8 3000 	ldr.w	r3, [r8]
 80097c8:	461c      	mov	r4, r3
 80097ca:	bb5c      	cbnz	r4, 8009824 <_malloc_r+0x90>
 80097cc:	4629      	mov	r1, r5
 80097ce:	4638      	mov	r0, r7
 80097d0:	f7ff ffc0 	bl	8009754 <sbrk_aligned>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	4604      	mov	r4, r0
 80097d8:	d155      	bne.n	8009886 <_malloc_r+0xf2>
 80097da:	f8d8 4000 	ldr.w	r4, [r8]
 80097de:	4626      	mov	r6, r4
 80097e0:	2e00      	cmp	r6, #0
 80097e2:	d145      	bne.n	8009870 <_malloc_r+0xdc>
 80097e4:	2c00      	cmp	r4, #0
 80097e6:	d048      	beq.n	800987a <_malloc_r+0xe6>
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	4631      	mov	r1, r6
 80097ec:	4638      	mov	r0, r7
 80097ee:	eb04 0903 	add.w	r9, r4, r3
 80097f2:	f002 f965 	bl	800bac0 <_sbrk_r>
 80097f6:	4581      	cmp	r9, r0
 80097f8:	d13f      	bne.n	800987a <_malloc_r+0xe6>
 80097fa:	6821      	ldr	r1, [r4, #0]
 80097fc:	1a6d      	subs	r5, r5, r1
 80097fe:	4629      	mov	r1, r5
 8009800:	4638      	mov	r0, r7
 8009802:	f7ff ffa7 	bl	8009754 <sbrk_aligned>
 8009806:	3001      	adds	r0, #1
 8009808:	d037      	beq.n	800987a <_malloc_r+0xe6>
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	442b      	add	r3, r5
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	f8d8 3000 	ldr.w	r3, [r8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d038      	beq.n	800988a <_malloc_r+0xf6>
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	42a2      	cmp	r2, r4
 800981c:	d12b      	bne.n	8009876 <_malloc_r+0xe2>
 800981e:	2200      	movs	r2, #0
 8009820:	605a      	str	r2, [r3, #4]
 8009822:	e00f      	b.n	8009844 <_malloc_r+0xb0>
 8009824:	6822      	ldr	r2, [r4, #0]
 8009826:	1b52      	subs	r2, r2, r5
 8009828:	d41f      	bmi.n	800986a <_malloc_r+0xd6>
 800982a:	2a0b      	cmp	r2, #11
 800982c:	d917      	bls.n	800985e <_malloc_r+0xca>
 800982e:	1961      	adds	r1, r4, r5
 8009830:	42a3      	cmp	r3, r4
 8009832:	6025      	str	r5, [r4, #0]
 8009834:	bf18      	it	ne
 8009836:	6059      	strne	r1, [r3, #4]
 8009838:	6863      	ldr	r3, [r4, #4]
 800983a:	bf08      	it	eq
 800983c:	f8c8 1000 	streq.w	r1, [r8]
 8009840:	5162      	str	r2, [r4, r5]
 8009842:	604b      	str	r3, [r1, #4]
 8009844:	4638      	mov	r0, r7
 8009846:	f104 060b 	add.w	r6, r4, #11
 800984a:	f000 f829 	bl	80098a0 <__malloc_unlock>
 800984e:	f026 0607 	bic.w	r6, r6, #7
 8009852:	1d23      	adds	r3, r4, #4
 8009854:	1af2      	subs	r2, r6, r3
 8009856:	d0ae      	beq.n	80097b6 <_malloc_r+0x22>
 8009858:	1b9b      	subs	r3, r3, r6
 800985a:	50a3      	str	r3, [r4, r2]
 800985c:	e7ab      	b.n	80097b6 <_malloc_r+0x22>
 800985e:	42a3      	cmp	r3, r4
 8009860:	6862      	ldr	r2, [r4, #4]
 8009862:	d1dd      	bne.n	8009820 <_malloc_r+0x8c>
 8009864:	f8c8 2000 	str.w	r2, [r8]
 8009868:	e7ec      	b.n	8009844 <_malloc_r+0xb0>
 800986a:	4623      	mov	r3, r4
 800986c:	6864      	ldr	r4, [r4, #4]
 800986e:	e7ac      	b.n	80097ca <_malloc_r+0x36>
 8009870:	4634      	mov	r4, r6
 8009872:	6876      	ldr	r6, [r6, #4]
 8009874:	e7b4      	b.n	80097e0 <_malloc_r+0x4c>
 8009876:	4613      	mov	r3, r2
 8009878:	e7cc      	b.n	8009814 <_malloc_r+0x80>
 800987a:	230c      	movs	r3, #12
 800987c:	603b      	str	r3, [r7, #0]
 800987e:	4638      	mov	r0, r7
 8009880:	f000 f80e 	bl	80098a0 <__malloc_unlock>
 8009884:	e797      	b.n	80097b6 <_malloc_r+0x22>
 8009886:	6025      	str	r5, [r4, #0]
 8009888:	e7dc      	b.n	8009844 <_malloc_r+0xb0>
 800988a:	605b      	str	r3, [r3, #4]
 800988c:	deff      	udf	#255	; 0xff
 800988e:	bf00      	nop
 8009890:	2000083c 	.word	0x2000083c

08009894 <__malloc_lock>:
 8009894:	4801      	ldr	r0, [pc, #4]	; (800989c <__malloc_lock+0x8>)
 8009896:	f7ff b886 	b.w	80089a6 <__retarget_lock_acquire_recursive>
 800989a:	bf00      	nop
 800989c:	20000838 	.word	0x20000838

080098a0 <__malloc_unlock>:
 80098a0:	4801      	ldr	r0, [pc, #4]	; (80098a8 <__malloc_unlock+0x8>)
 80098a2:	f7ff b881 	b.w	80089a8 <__retarget_lock_release_recursive>
 80098a6:	bf00      	nop
 80098a8:	20000838 	.word	0x20000838

080098ac <_Balloc>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	69c6      	ldr	r6, [r0, #28]
 80098b0:	4604      	mov	r4, r0
 80098b2:	460d      	mov	r5, r1
 80098b4:	b976      	cbnz	r6, 80098d4 <_Balloc+0x28>
 80098b6:	2010      	movs	r0, #16
 80098b8:	f7ff ff44 	bl	8009744 <malloc>
 80098bc:	4602      	mov	r2, r0
 80098be:	61e0      	str	r0, [r4, #28]
 80098c0:	b920      	cbnz	r0, 80098cc <_Balloc+0x20>
 80098c2:	4b18      	ldr	r3, [pc, #96]	; (8009924 <_Balloc+0x78>)
 80098c4:	4818      	ldr	r0, [pc, #96]	; (8009928 <_Balloc+0x7c>)
 80098c6:	216b      	movs	r1, #107	; 0x6b
 80098c8:	f002 f922 	bl	800bb10 <__assert_func>
 80098cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098d0:	6006      	str	r6, [r0, #0]
 80098d2:	60c6      	str	r6, [r0, #12]
 80098d4:	69e6      	ldr	r6, [r4, #28]
 80098d6:	68f3      	ldr	r3, [r6, #12]
 80098d8:	b183      	cbz	r3, 80098fc <_Balloc+0x50>
 80098da:	69e3      	ldr	r3, [r4, #28]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098e2:	b9b8      	cbnz	r0, 8009914 <_Balloc+0x68>
 80098e4:	2101      	movs	r1, #1
 80098e6:	fa01 f605 	lsl.w	r6, r1, r5
 80098ea:	1d72      	adds	r2, r6, #5
 80098ec:	0092      	lsls	r2, r2, #2
 80098ee:	4620      	mov	r0, r4
 80098f0:	f002 f92c 	bl	800bb4c <_calloc_r>
 80098f4:	b160      	cbz	r0, 8009910 <_Balloc+0x64>
 80098f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098fa:	e00e      	b.n	800991a <_Balloc+0x6e>
 80098fc:	2221      	movs	r2, #33	; 0x21
 80098fe:	2104      	movs	r1, #4
 8009900:	4620      	mov	r0, r4
 8009902:	f002 f923 	bl	800bb4c <_calloc_r>
 8009906:	69e3      	ldr	r3, [r4, #28]
 8009908:	60f0      	str	r0, [r6, #12]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1e4      	bne.n	80098da <_Balloc+0x2e>
 8009910:	2000      	movs	r0, #0
 8009912:	bd70      	pop	{r4, r5, r6, pc}
 8009914:	6802      	ldr	r2, [r0, #0]
 8009916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800991a:	2300      	movs	r3, #0
 800991c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009920:	e7f7      	b.n	8009912 <_Balloc+0x66>
 8009922:	bf00      	nop
 8009924:	0800cb35 	.word	0x0800cb35
 8009928:	0800cbb5 	.word	0x0800cbb5

0800992c <_Bfree>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	69c6      	ldr	r6, [r0, #28]
 8009930:	4605      	mov	r5, r0
 8009932:	460c      	mov	r4, r1
 8009934:	b976      	cbnz	r6, 8009954 <_Bfree+0x28>
 8009936:	2010      	movs	r0, #16
 8009938:	f7ff ff04 	bl	8009744 <malloc>
 800993c:	4602      	mov	r2, r0
 800993e:	61e8      	str	r0, [r5, #28]
 8009940:	b920      	cbnz	r0, 800994c <_Bfree+0x20>
 8009942:	4b09      	ldr	r3, [pc, #36]	; (8009968 <_Bfree+0x3c>)
 8009944:	4809      	ldr	r0, [pc, #36]	; (800996c <_Bfree+0x40>)
 8009946:	218f      	movs	r1, #143	; 0x8f
 8009948:	f002 f8e2 	bl	800bb10 <__assert_func>
 800994c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009950:	6006      	str	r6, [r0, #0]
 8009952:	60c6      	str	r6, [r0, #12]
 8009954:	b13c      	cbz	r4, 8009966 <_Bfree+0x3a>
 8009956:	69eb      	ldr	r3, [r5, #28]
 8009958:	6862      	ldr	r2, [r4, #4]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009960:	6021      	str	r1, [r4, #0]
 8009962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009966:	bd70      	pop	{r4, r5, r6, pc}
 8009968:	0800cb35 	.word	0x0800cb35
 800996c:	0800cbb5 	.word	0x0800cbb5

08009970 <__multadd>:
 8009970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009974:	690d      	ldr	r5, [r1, #16]
 8009976:	4607      	mov	r7, r0
 8009978:	460c      	mov	r4, r1
 800997a:	461e      	mov	r6, r3
 800997c:	f101 0c14 	add.w	ip, r1, #20
 8009980:	2000      	movs	r0, #0
 8009982:	f8dc 3000 	ldr.w	r3, [ip]
 8009986:	b299      	uxth	r1, r3
 8009988:	fb02 6101 	mla	r1, r2, r1, r6
 800998c:	0c1e      	lsrs	r6, r3, #16
 800998e:	0c0b      	lsrs	r3, r1, #16
 8009990:	fb02 3306 	mla	r3, r2, r6, r3
 8009994:	b289      	uxth	r1, r1
 8009996:	3001      	adds	r0, #1
 8009998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800999c:	4285      	cmp	r5, r0
 800999e:	f84c 1b04 	str.w	r1, [ip], #4
 80099a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099a6:	dcec      	bgt.n	8009982 <__multadd+0x12>
 80099a8:	b30e      	cbz	r6, 80099ee <__multadd+0x7e>
 80099aa:	68a3      	ldr	r3, [r4, #8]
 80099ac:	42ab      	cmp	r3, r5
 80099ae:	dc19      	bgt.n	80099e4 <__multadd+0x74>
 80099b0:	6861      	ldr	r1, [r4, #4]
 80099b2:	4638      	mov	r0, r7
 80099b4:	3101      	adds	r1, #1
 80099b6:	f7ff ff79 	bl	80098ac <_Balloc>
 80099ba:	4680      	mov	r8, r0
 80099bc:	b928      	cbnz	r0, 80099ca <__multadd+0x5a>
 80099be:	4602      	mov	r2, r0
 80099c0:	4b0c      	ldr	r3, [pc, #48]	; (80099f4 <__multadd+0x84>)
 80099c2:	480d      	ldr	r0, [pc, #52]	; (80099f8 <__multadd+0x88>)
 80099c4:	21ba      	movs	r1, #186	; 0xba
 80099c6:	f002 f8a3 	bl	800bb10 <__assert_func>
 80099ca:	6922      	ldr	r2, [r4, #16]
 80099cc:	3202      	adds	r2, #2
 80099ce:	f104 010c 	add.w	r1, r4, #12
 80099d2:	0092      	lsls	r2, r2, #2
 80099d4:	300c      	adds	r0, #12
 80099d6:	f002 f883 	bl	800bae0 <memcpy>
 80099da:	4621      	mov	r1, r4
 80099dc:	4638      	mov	r0, r7
 80099de:	f7ff ffa5 	bl	800992c <_Bfree>
 80099e2:	4644      	mov	r4, r8
 80099e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099e8:	3501      	adds	r5, #1
 80099ea:	615e      	str	r6, [r3, #20]
 80099ec:	6125      	str	r5, [r4, #16]
 80099ee:	4620      	mov	r0, r4
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f4:	0800cba4 	.word	0x0800cba4
 80099f8:	0800cbb5 	.word	0x0800cbb5

080099fc <__s2b>:
 80099fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a00:	460c      	mov	r4, r1
 8009a02:	4615      	mov	r5, r2
 8009a04:	461f      	mov	r7, r3
 8009a06:	2209      	movs	r2, #9
 8009a08:	3308      	adds	r3, #8
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a10:	2100      	movs	r1, #0
 8009a12:	2201      	movs	r2, #1
 8009a14:	429a      	cmp	r2, r3
 8009a16:	db09      	blt.n	8009a2c <__s2b+0x30>
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7ff ff47 	bl	80098ac <_Balloc>
 8009a1e:	b940      	cbnz	r0, 8009a32 <__s2b+0x36>
 8009a20:	4602      	mov	r2, r0
 8009a22:	4b19      	ldr	r3, [pc, #100]	; (8009a88 <__s2b+0x8c>)
 8009a24:	4819      	ldr	r0, [pc, #100]	; (8009a8c <__s2b+0x90>)
 8009a26:	21d3      	movs	r1, #211	; 0xd3
 8009a28:	f002 f872 	bl	800bb10 <__assert_func>
 8009a2c:	0052      	lsls	r2, r2, #1
 8009a2e:	3101      	adds	r1, #1
 8009a30:	e7f0      	b.n	8009a14 <__s2b+0x18>
 8009a32:	9b08      	ldr	r3, [sp, #32]
 8009a34:	6143      	str	r3, [r0, #20]
 8009a36:	2d09      	cmp	r5, #9
 8009a38:	f04f 0301 	mov.w	r3, #1
 8009a3c:	6103      	str	r3, [r0, #16]
 8009a3e:	dd16      	ble.n	8009a6e <__s2b+0x72>
 8009a40:	f104 0909 	add.w	r9, r4, #9
 8009a44:	46c8      	mov	r8, r9
 8009a46:	442c      	add	r4, r5
 8009a48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	3b30      	subs	r3, #48	; 0x30
 8009a50:	220a      	movs	r2, #10
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7ff ff8c 	bl	8009970 <__multadd>
 8009a58:	45a0      	cmp	r8, r4
 8009a5a:	d1f5      	bne.n	8009a48 <__s2b+0x4c>
 8009a5c:	f1a5 0408 	sub.w	r4, r5, #8
 8009a60:	444c      	add	r4, r9
 8009a62:	1b2d      	subs	r5, r5, r4
 8009a64:	1963      	adds	r3, r4, r5
 8009a66:	42bb      	cmp	r3, r7
 8009a68:	db04      	blt.n	8009a74 <__s2b+0x78>
 8009a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a6e:	340a      	adds	r4, #10
 8009a70:	2509      	movs	r5, #9
 8009a72:	e7f6      	b.n	8009a62 <__s2b+0x66>
 8009a74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a78:	4601      	mov	r1, r0
 8009a7a:	3b30      	subs	r3, #48	; 0x30
 8009a7c:	220a      	movs	r2, #10
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f7ff ff76 	bl	8009970 <__multadd>
 8009a84:	e7ee      	b.n	8009a64 <__s2b+0x68>
 8009a86:	bf00      	nop
 8009a88:	0800cba4 	.word	0x0800cba4
 8009a8c:	0800cbb5 	.word	0x0800cbb5

08009a90 <__hi0bits>:
 8009a90:	0c03      	lsrs	r3, r0, #16
 8009a92:	041b      	lsls	r3, r3, #16
 8009a94:	b9d3      	cbnz	r3, 8009acc <__hi0bits+0x3c>
 8009a96:	0400      	lsls	r0, r0, #16
 8009a98:	2310      	movs	r3, #16
 8009a9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a9e:	bf04      	itt	eq
 8009aa0:	0200      	lsleq	r0, r0, #8
 8009aa2:	3308      	addeq	r3, #8
 8009aa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009aa8:	bf04      	itt	eq
 8009aaa:	0100      	lsleq	r0, r0, #4
 8009aac:	3304      	addeq	r3, #4
 8009aae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ab2:	bf04      	itt	eq
 8009ab4:	0080      	lsleq	r0, r0, #2
 8009ab6:	3302      	addeq	r3, #2
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	db05      	blt.n	8009ac8 <__hi0bits+0x38>
 8009abc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ac0:	f103 0301 	add.w	r3, r3, #1
 8009ac4:	bf08      	it	eq
 8009ac6:	2320      	moveq	r3, #32
 8009ac8:	4618      	mov	r0, r3
 8009aca:	4770      	bx	lr
 8009acc:	2300      	movs	r3, #0
 8009ace:	e7e4      	b.n	8009a9a <__hi0bits+0xa>

08009ad0 <__lo0bits>:
 8009ad0:	6803      	ldr	r3, [r0, #0]
 8009ad2:	f013 0207 	ands.w	r2, r3, #7
 8009ad6:	d00c      	beq.n	8009af2 <__lo0bits+0x22>
 8009ad8:	07d9      	lsls	r1, r3, #31
 8009ada:	d422      	bmi.n	8009b22 <__lo0bits+0x52>
 8009adc:	079a      	lsls	r2, r3, #30
 8009ade:	bf49      	itett	mi
 8009ae0:	085b      	lsrmi	r3, r3, #1
 8009ae2:	089b      	lsrpl	r3, r3, #2
 8009ae4:	6003      	strmi	r3, [r0, #0]
 8009ae6:	2201      	movmi	r2, #1
 8009ae8:	bf5c      	itt	pl
 8009aea:	6003      	strpl	r3, [r0, #0]
 8009aec:	2202      	movpl	r2, #2
 8009aee:	4610      	mov	r0, r2
 8009af0:	4770      	bx	lr
 8009af2:	b299      	uxth	r1, r3
 8009af4:	b909      	cbnz	r1, 8009afa <__lo0bits+0x2a>
 8009af6:	0c1b      	lsrs	r3, r3, #16
 8009af8:	2210      	movs	r2, #16
 8009afa:	b2d9      	uxtb	r1, r3
 8009afc:	b909      	cbnz	r1, 8009b02 <__lo0bits+0x32>
 8009afe:	3208      	adds	r2, #8
 8009b00:	0a1b      	lsrs	r3, r3, #8
 8009b02:	0719      	lsls	r1, r3, #28
 8009b04:	bf04      	itt	eq
 8009b06:	091b      	lsreq	r3, r3, #4
 8009b08:	3204      	addeq	r2, #4
 8009b0a:	0799      	lsls	r1, r3, #30
 8009b0c:	bf04      	itt	eq
 8009b0e:	089b      	lsreq	r3, r3, #2
 8009b10:	3202      	addeq	r2, #2
 8009b12:	07d9      	lsls	r1, r3, #31
 8009b14:	d403      	bmi.n	8009b1e <__lo0bits+0x4e>
 8009b16:	085b      	lsrs	r3, r3, #1
 8009b18:	f102 0201 	add.w	r2, r2, #1
 8009b1c:	d003      	beq.n	8009b26 <__lo0bits+0x56>
 8009b1e:	6003      	str	r3, [r0, #0]
 8009b20:	e7e5      	b.n	8009aee <__lo0bits+0x1e>
 8009b22:	2200      	movs	r2, #0
 8009b24:	e7e3      	b.n	8009aee <__lo0bits+0x1e>
 8009b26:	2220      	movs	r2, #32
 8009b28:	e7e1      	b.n	8009aee <__lo0bits+0x1e>
	...

08009b2c <__i2b>:
 8009b2c:	b510      	push	{r4, lr}
 8009b2e:	460c      	mov	r4, r1
 8009b30:	2101      	movs	r1, #1
 8009b32:	f7ff febb 	bl	80098ac <_Balloc>
 8009b36:	4602      	mov	r2, r0
 8009b38:	b928      	cbnz	r0, 8009b46 <__i2b+0x1a>
 8009b3a:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <__i2b+0x24>)
 8009b3c:	4805      	ldr	r0, [pc, #20]	; (8009b54 <__i2b+0x28>)
 8009b3e:	f240 1145 	movw	r1, #325	; 0x145
 8009b42:	f001 ffe5 	bl	800bb10 <__assert_func>
 8009b46:	2301      	movs	r3, #1
 8009b48:	6144      	str	r4, [r0, #20]
 8009b4a:	6103      	str	r3, [r0, #16]
 8009b4c:	bd10      	pop	{r4, pc}
 8009b4e:	bf00      	nop
 8009b50:	0800cba4 	.word	0x0800cba4
 8009b54:	0800cbb5 	.word	0x0800cbb5

08009b58 <__multiply>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	4691      	mov	r9, r2
 8009b5e:	690a      	ldr	r2, [r1, #16]
 8009b60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	bfb8      	it	lt
 8009b68:	460b      	movlt	r3, r1
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	bfbc      	itt	lt
 8009b6e:	464c      	movlt	r4, r9
 8009b70:	4699      	movlt	r9, r3
 8009b72:	6927      	ldr	r7, [r4, #16]
 8009b74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b78:	68a3      	ldr	r3, [r4, #8]
 8009b7a:	6861      	ldr	r1, [r4, #4]
 8009b7c:	eb07 060a 	add.w	r6, r7, sl
 8009b80:	42b3      	cmp	r3, r6
 8009b82:	b085      	sub	sp, #20
 8009b84:	bfb8      	it	lt
 8009b86:	3101      	addlt	r1, #1
 8009b88:	f7ff fe90 	bl	80098ac <_Balloc>
 8009b8c:	b930      	cbnz	r0, 8009b9c <__multiply+0x44>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	4b44      	ldr	r3, [pc, #272]	; (8009ca4 <__multiply+0x14c>)
 8009b92:	4845      	ldr	r0, [pc, #276]	; (8009ca8 <__multiply+0x150>)
 8009b94:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b98:	f001 ffba 	bl	800bb10 <__assert_func>
 8009b9c:	f100 0514 	add.w	r5, r0, #20
 8009ba0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ba4:	462b      	mov	r3, r5
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4543      	cmp	r3, r8
 8009baa:	d321      	bcc.n	8009bf0 <__multiply+0x98>
 8009bac:	f104 0314 	add.w	r3, r4, #20
 8009bb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009bb4:	f109 0314 	add.w	r3, r9, #20
 8009bb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bbc:	9202      	str	r2, [sp, #8]
 8009bbe:	1b3a      	subs	r2, r7, r4
 8009bc0:	3a15      	subs	r2, #21
 8009bc2:	f022 0203 	bic.w	r2, r2, #3
 8009bc6:	3204      	adds	r2, #4
 8009bc8:	f104 0115 	add.w	r1, r4, #21
 8009bcc:	428f      	cmp	r7, r1
 8009bce:	bf38      	it	cc
 8009bd0:	2204      	movcc	r2, #4
 8009bd2:	9201      	str	r2, [sp, #4]
 8009bd4:	9a02      	ldr	r2, [sp, #8]
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d80c      	bhi.n	8009bf6 <__multiply+0x9e>
 8009bdc:	2e00      	cmp	r6, #0
 8009bde:	dd03      	ble.n	8009be8 <__multiply+0x90>
 8009be0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d05b      	beq.n	8009ca0 <__multiply+0x148>
 8009be8:	6106      	str	r6, [r0, #16]
 8009bea:	b005      	add	sp, #20
 8009bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf0:	f843 2b04 	str.w	r2, [r3], #4
 8009bf4:	e7d8      	b.n	8009ba8 <__multiply+0x50>
 8009bf6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bfa:	f1ba 0f00 	cmp.w	sl, #0
 8009bfe:	d024      	beq.n	8009c4a <__multiply+0xf2>
 8009c00:	f104 0e14 	add.w	lr, r4, #20
 8009c04:	46a9      	mov	r9, r5
 8009c06:	f04f 0c00 	mov.w	ip, #0
 8009c0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c0e:	f8d9 1000 	ldr.w	r1, [r9]
 8009c12:	fa1f fb82 	uxth.w	fp, r2
 8009c16:	b289      	uxth	r1, r1
 8009c18:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c20:	f8d9 2000 	ldr.w	r2, [r9]
 8009c24:	4461      	add	r1, ip
 8009c26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c32:	b289      	uxth	r1, r1
 8009c34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c38:	4577      	cmp	r7, lr
 8009c3a:	f849 1b04 	str.w	r1, [r9], #4
 8009c3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c42:	d8e2      	bhi.n	8009c0a <__multiply+0xb2>
 8009c44:	9a01      	ldr	r2, [sp, #4]
 8009c46:	f845 c002 	str.w	ip, [r5, r2]
 8009c4a:	9a03      	ldr	r2, [sp, #12]
 8009c4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c50:	3304      	adds	r3, #4
 8009c52:	f1b9 0f00 	cmp.w	r9, #0
 8009c56:	d021      	beq.n	8009c9c <__multiply+0x144>
 8009c58:	6829      	ldr	r1, [r5, #0]
 8009c5a:	f104 0c14 	add.w	ip, r4, #20
 8009c5e:	46ae      	mov	lr, r5
 8009c60:	f04f 0a00 	mov.w	sl, #0
 8009c64:	f8bc b000 	ldrh.w	fp, [ip]
 8009c68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c6c:	fb09 220b 	mla	r2, r9, fp, r2
 8009c70:	4452      	add	r2, sl
 8009c72:	b289      	uxth	r1, r1
 8009c74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c78:	f84e 1b04 	str.w	r1, [lr], #4
 8009c7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c84:	f8be 1000 	ldrh.w	r1, [lr]
 8009c88:	fb09 110a 	mla	r1, r9, sl, r1
 8009c8c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c90:	4567      	cmp	r7, ip
 8009c92:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c96:	d8e5      	bhi.n	8009c64 <__multiply+0x10c>
 8009c98:	9a01      	ldr	r2, [sp, #4]
 8009c9a:	50a9      	str	r1, [r5, r2]
 8009c9c:	3504      	adds	r5, #4
 8009c9e:	e799      	b.n	8009bd4 <__multiply+0x7c>
 8009ca0:	3e01      	subs	r6, #1
 8009ca2:	e79b      	b.n	8009bdc <__multiply+0x84>
 8009ca4:	0800cba4 	.word	0x0800cba4
 8009ca8:	0800cbb5 	.word	0x0800cbb5

08009cac <__pow5mult>:
 8009cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	4615      	mov	r5, r2
 8009cb2:	f012 0203 	ands.w	r2, r2, #3
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	460f      	mov	r7, r1
 8009cba:	d007      	beq.n	8009ccc <__pow5mult+0x20>
 8009cbc:	4c25      	ldr	r4, [pc, #148]	; (8009d54 <__pow5mult+0xa8>)
 8009cbe:	3a01      	subs	r2, #1
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cc6:	f7ff fe53 	bl	8009970 <__multadd>
 8009cca:	4607      	mov	r7, r0
 8009ccc:	10ad      	asrs	r5, r5, #2
 8009cce:	d03d      	beq.n	8009d4c <__pow5mult+0xa0>
 8009cd0:	69f4      	ldr	r4, [r6, #28]
 8009cd2:	b97c      	cbnz	r4, 8009cf4 <__pow5mult+0x48>
 8009cd4:	2010      	movs	r0, #16
 8009cd6:	f7ff fd35 	bl	8009744 <malloc>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	61f0      	str	r0, [r6, #28]
 8009cde:	b928      	cbnz	r0, 8009cec <__pow5mult+0x40>
 8009ce0:	4b1d      	ldr	r3, [pc, #116]	; (8009d58 <__pow5mult+0xac>)
 8009ce2:	481e      	ldr	r0, [pc, #120]	; (8009d5c <__pow5mult+0xb0>)
 8009ce4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ce8:	f001 ff12 	bl	800bb10 <__assert_func>
 8009cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cf0:	6004      	str	r4, [r0, #0]
 8009cf2:	60c4      	str	r4, [r0, #12]
 8009cf4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009cf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cfc:	b94c      	cbnz	r4, 8009d12 <__pow5mult+0x66>
 8009cfe:	f240 2171 	movw	r1, #625	; 0x271
 8009d02:	4630      	mov	r0, r6
 8009d04:	f7ff ff12 	bl	8009b2c <__i2b>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d0e:	4604      	mov	r4, r0
 8009d10:	6003      	str	r3, [r0, #0]
 8009d12:	f04f 0900 	mov.w	r9, #0
 8009d16:	07eb      	lsls	r3, r5, #31
 8009d18:	d50a      	bpl.n	8009d30 <__pow5mult+0x84>
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7ff ff1a 	bl	8009b58 <__multiply>
 8009d24:	4639      	mov	r1, r7
 8009d26:	4680      	mov	r8, r0
 8009d28:	4630      	mov	r0, r6
 8009d2a:	f7ff fdff 	bl	800992c <_Bfree>
 8009d2e:	4647      	mov	r7, r8
 8009d30:	106d      	asrs	r5, r5, #1
 8009d32:	d00b      	beq.n	8009d4c <__pow5mult+0xa0>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	b938      	cbnz	r0, 8009d48 <__pow5mult+0x9c>
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f7ff ff0b 	bl	8009b58 <__multiply>
 8009d42:	6020      	str	r0, [r4, #0]
 8009d44:	f8c0 9000 	str.w	r9, [r0]
 8009d48:	4604      	mov	r4, r0
 8009d4a:	e7e4      	b.n	8009d16 <__pow5mult+0x6a>
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d52:	bf00      	nop
 8009d54:	0800cd00 	.word	0x0800cd00
 8009d58:	0800cb35 	.word	0x0800cb35
 8009d5c:	0800cbb5 	.word	0x0800cbb5

08009d60 <__lshift>:
 8009d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d64:	460c      	mov	r4, r1
 8009d66:	6849      	ldr	r1, [r1, #4]
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d6e:	68a3      	ldr	r3, [r4, #8]
 8009d70:	4607      	mov	r7, r0
 8009d72:	4691      	mov	r9, r2
 8009d74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d78:	f108 0601 	add.w	r6, r8, #1
 8009d7c:	42b3      	cmp	r3, r6
 8009d7e:	db0b      	blt.n	8009d98 <__lshift+0x38>
 8009d80:	4638      	mov	r0, r7
 8009d82:	f7ff fd93 	bl	80098ac <_Balloc>
 8009d86:	4605      	mov	r5, r0
 8009d88:	b948      	cbnz	r0, 8009d9e <__lshift+0x3e>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	4b28      	ldr	r3, [pc, #160]	; (8009e30 <__lshift+0xd0>)
 8009d8e:	4829      	ldr	r0, [pc, #164]	; (8009e34 <__lshift+0xd4>)
 8009d90:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d94:	f001 febc 	bl	800bb10 <__assert_func>
 8009d98:	3101      	adds	r1, #1
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	e7ee      	b.n	8009d7c <__lshift+0x1c>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f100 0114 	add.w	r1, r0, #20
 8009da4:	f100 0210 	add.w	r2, r0, #16
 8009da8:	4618      	mov	r0, r3
 8009daa:	4553      	cmp	r3, sl
 8009dac:	db33      	blt.n	8009e16 <__lshift+0xb6>
 8009dae:	6920      	ldr	r0, [r4, #16]
 8009db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009db4:	f104 0314 	add.w	r3, r4, #20
 8009db8:	f019 091f 	ands.w	r9, r9, #31
 8009dbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dc4:	d02b      	beq.n	8009e1e <__lshift+0xbe>
 8009dc6:	f1c9 0e20 	rsb	lr, r9, #32
 8009dca:	468a      	mov	sl, r1
 8009dcc:	2200      	movs	r2, #0
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	fa00 f009 	lsl.w	r0, r0, r9
 8009dd4:	4310      	orrs	r0, r2
 8009dd6:	f84a 0b04 	str.w	r0, [sl], #4
 8009dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dde:	459c      	cmp	ip, r3
 8009de0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009de4:	d8f3      	bhi.n	8009dce <__lshift+0x6e>
 8009de6:	ebac 0304 	sub.w	r3, ip, r4
 8009dea:	3b15      	subs	r3, #21
 8009dec:	f023 0303 	bic.w	r3, r3, #3
 8009df0:	3304      	adds	r3, #4
 8009df2:	f104 0015 	add.w	r0, r4, #21
 8009df6:	4584      	cmp	ip, r0
 8009df8:	bf38      	it	cc
 8009dfa:	2304      	movcc	r3, #4
 8009dfc:	50ca      	str	r2, [r1, r3]
 8009dfe:	b10a      	cbz	r2, 8009e04 <__lshift+0xa4>
 8009e00:	f108 0602 	add.w	r6, r8, #2
 8009e04:	3e01      	subs	r6, #1
 8009e06:	4638      	mov	r0, r7
 8009e08:	612e      	str	r6, [r5, #16]
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	f7ff fd8e 	bl	800992c <_Bfree>
 8009e10:	4628      	mov	r0, r5
 8009e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e16:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	e7c5      	b.n	8009daa <__lshift+0x4a>
 8009e1e:	3904      	subs	r1, #4
 8009e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e24:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e28:	459c      	cmp	ip, r3
 8009e2a:	d8f9      	bhi.n	8009e20 <__lshift+0xc0>
 8009e2c:	e7ea      	b.n	8009e04 <__lshift+0xa4>
 8009e2e:	bf00      	nop
 8009e30:	0800cba4 	.word	0x0800cba4
 8009e34:	0800cbb5 	.word	0x0800cbb5

08009e38 <__mcmp>:
 8009e38:	b530      	push	{r4, r5, lr}
 8009e3a:	6902      	ldr	r2, [r0, #16]
 8009e3c:	690c      	ldr	r4, [r1, #16]
 8009e3e:	1b12      	subs	r2, r2, r4
 8009e40:	d10e      	bne.n	8009e60 <__mcmp+0x28>
 8009e42:	f100 0314 	add.w	r3, r0, #20
 8009e46:	3114      	adds	r1, #20
 8009e48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e58:	42a5      	cmp	r5, r4
 8009e5a:	d003      	beq.n	8009e64 <__mcmp+0x2c>
 8009e5c:	d305      	bcc.n	8009e6a <__mcmp+0x32>
 8009e5e:	2201      	movs	r2, #1
 8009e60:	4610      	mov	r0, r2
 8009e62:	bd30      	pop	{r4, r5, pc}
 8009e64:	4283      	cmp	r3, r0
 8009e66:	d3f3      	bcc.n	8009e50 <__mcmp+0x18>
 8009e68:	e7fa      	b.n	8009e60 <__mcmp+0x28>
 8009e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6e:	e7f7      	b.n	8009e60 <__mcmp+0x28>

08009e70 <__mdiff>:
 8009e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	460c      	mov	r4, r1
 8009e76:	4606      	mov	r6, r0
 8009e78:	4611      	mov	r1, r2
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	4690      	mov	r8, r2
 8009e7e:	f7ff ffdb 	bl	8009e38 <__mcmp>
 8009e82:	1e05      	subs	r5, r0, #0
 8009e84:	d110      	bne.n	8009ea8 <__mdiff+0x38>
 8009e86:	4629      	mov	r1, r5
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f7ff fd0f 	bl	80098ac <_Balloc>
 8009e8e:	b930      	cbnz	r0, 8009e9e <__mdiff+0x2e>
 8009e90:	4b3a      	ldr	r3, [pc, #232]	; (8009f7c <__mdiff+0x10c>)
 8009e92:	4602      	mov	r2, r0
 8009e94:	f240 2137 	movw	r1, #567	; 0x237
 8009e98:	4839      	ldr	r0, [pc, #228]	; (8009f80 <__mdiff+0x110>)
 8009e9a:	f001 fe39 	bl	800bb10 <__assert_func>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea8:	bfa4      	itt	ge
 8009eaa:	4643      	movge	r3, r8
 8009eac:	46a0      	movge	r8, r4
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009eb4:	bfa6      	itte	ge
 8009eb6:	461c      	movge	r4, r3
 8009eb8:	2500      	movge	r5, #0
 8009eba:	2501      	movlt	r5, #1
 8009ebc:	f7ff fcf6 	bl	80098ac <_Balloc>
 8009ec0:	b920      	cbnz	r0, 8009ecc <__mdiff+0x5c>
 8009ec2:	4b2e      	ldr	r3, [pc, #184]	; (8009f7c <__mdiff+0x10c>)
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	f240 2145 	movw	r1, #581	; 0x245
 8009eca:	e7e5      	b.n	8009e98 <__mdiff+0x28>
 8009ecc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ed0:	6926      	ldr	r6, [r4, #16]
 8009ed2:	60c5      	str	r5, [r0, #12]
 8009ed4:	f104 0914 	add.w	r9, r4, #20
 8009ed8:	f108 0514 	add.w	r5, r8, #20
 8009edc:	f100 0e14 	add.w	lr, r0, #20
 8009ee0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ee4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ee8:	f108 0210 	add.w	r2, r8, #16
 8009eec:	46f2      	mov	sl, lr
 8009eee:	2100      	movs	r1, #0
 8009ef0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ef4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ef8:	fa11 f88b 	uxtah	r8, r1, fp
 8009efc:	b299      	uxth	r1, r3
 8009efe:	0c1b      	lsrs	r3, r3, #16
 8009f00:	eba8 0801 	sub.w	r8, r8, r1
 8009f04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f08:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f0c:	fa1f f888 	uxth.w	r8, r8
 8009f10:	1419      	asrs	r1, r3, #16
 8009f12:	454e      	cmp	r6, r9
 8009f14:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f18:	f84a 3b04 	str.w	r3, [sl], #4
 8009f1c:	d8e8      	bhi.n	8009ef0 <__mdiff+0x80>
 8009f1e:	1b33      	subs	r3, r6, r4
 8009f20:	3b15      	subs	r3, #21
 8009f22:	f023 0303 	bic.w	r3, r3, #3
 8009f26:	3304      	adds	r3, #4
 8009f28:	3415      	adds	r4, #21
 8009f2a:	42a6      	cmp	r6, r4
 8009f2c:	bf38      	it	cc
 8009f2e:	2304      	movcc	r3, #4
 8009f30:	441d      	add	r5, r3
 8009f32:	4473      	add	r3, lr
 8009f34:	469e      	mov	lr, r3
 8009f36:	462e      	mov	r6, r5
 8009f38:	4566      	cmp	r6, ip
 8009f3a:	d30e      	bcc.n	8009f5a <__mdiff+0xea>
 8009f3c:	f10c 0203 	add.w	r2, ip, #3
 8009f40:	1b52      	subs	r2, r2, r5
 8009f42:	f022 0203 	bic.w	r2, r2, #3
 8009f46:	3d03      	subs	r5, #3
 8009f48:	45ac      	cmp	ip, r5
 8009f4a:	bf38      	it	cc
 8009f4c:	2200      	movcc	r2, #0
 8009f4e:	4413      	add	r3, r2
 8009f50:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f54:	b17a      	cbz	r2, 8009f76 <__mdiff+0x106>
 8009f56:	6107      	str	r7, [r0, #16]
 8009f58:	e7a4      	b.n	8009ea4 <__mdiff+0x34>
 8009f5a:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f5e:	fa11 f288 	uxtah	r2, r1, r8
 8009f62:	1414      	asrs	r4, r2, #16
 8009f64:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f68:	b292      	uxth	r2, r2
 8009f6a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f6e:	f84e 2b04 	str.w	r2, [lr], #4
 8009f72:	1421      	asrs	r1, r4, #16
 8009f74:	e7e0      	b.n	8009f38 <__mdiff+0xc8>
 8009f76:	3f01      	subs	r7, #1
 8009f78:	e7ea      	b.n	8009f50 <__mdiff+0xe0>
 8009f7a:	bf00      	nop
 8009f7c:	0800cba4 	.word	0x0800cba4
 8009f80:	0800cbb5 	.word	0x0800cbb5

08009f84 <__ulp>:
 8009f84:	b082      	sub	sp, #8
 8009f86:	ed8d 0b00 	vstr	d0, [sp]
 8009f8a:	9a01      	ldr	r2, [sp, #4]
 8009f8c:	4b0f      	ldr	r3, [pc, #60]	; (8009fcc <__ulp+0x48>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dc08      	bgt.n	8009faa <__ulp+0x26>
 8009f98:	425b      	negs	r3, r3
 8009f9a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009f9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009fa2:	da04      	bge.n	8009fae <__ulp+0x2a>
 8009fa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009fa8:	4113      	asrs	r3, r2
 8009faa:	2200      	movs	r2, #0
 8009fac:	e008      	b.n	8009fc0 <__ulp+0x3c>
 8009fae:	f1a2 0314 	sub.w	r3, r2, #20
 8009fb2:	2b1e      	cmp	r3, #30
 8009fb4:	bfda      	itte	le
 8009fb6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009fba:	40da      	lsrle	r2, r3
 8009fbc:	2201      	movgt	r2, #1
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	ec41 0b10 	vmov	d0, r0, r1
 8009fc8:	b002      	add	sp, #8
 8009fca:	4770      	bx	lr
 8009fcc:	7ff00000 	.word	0x7ff00000

08009fd0 <__b2d>:
 8009fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd4:	6906      	ldr	r6, [r0, #16]
 8009fd6:	f100 0814 	add.w	r8, r0, #20
 8009fda:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009fde:	1f37      	subs	r7, r6, #4
 8009fe0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	f7ff fd53 	bl	8009a90 <__hi0bits>
 8009fea:	f1c0 0320 	rsb	r3, r0, #32
 8009fee:	280a      	cmp	r0, #10
 8009ff0:	600b      	str	r3, [r1, #0]
 8009ff2:	491b      	ldr	r1, [pc, #108]	; (800a060 <__b2d+0x90>)
 8009ff4:	dc15      	bgt.n	800a022 <__b2d+0x52>
 8009ff6:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ffa:	fa22 f30c 	lsr.w	r3, r2, ip
 8009ffe:	45b8      	cmp	r8, r7
 800a000:	ea43 0501 	orr.w	r5, r3, r1
 800a004:	bf34      	ite	cc
 800a006:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a00a:	2300      	movcs	r3, #0
 800a00c:	3015      	adds	r0, #21
 800a00e:	fa02 f000 	lsl.w	r0, r2, r0
 800a012:	fa23 f30c 	lsr.w	r3, r3, ip
 800a016:	4303      	orrs	r3, r0
 800a018:	461c      	mov	r4, r3
 800a01a:	ec45 4b10 	vmov	d0, r4, r5
 800a01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a022:	45b8      	cmp	r8, r7
 800a024:	bf3a      	itte	cc
 800a026:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a02a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a02e:	2300      	movcs	r3, #0
 800a030:	380b      	subs	r0, #11
 800a032:	d012      	beq.n	800a05a <__b2d+0x8a>
 800a034:	f1c0 0120 	rsb	r1, r0, #32
 800a038:	fa23 f401 	lsr.w	r4, r3, r1
 800a03c:	4082      	lsls	r2, r0
 800a03e:	4322      	orrs	r2, r4
 800a040:	4547      	cmp	r7, r8
 800a042:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a046:	bf8c      	ite	hi
 800a048:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a04c:	2200      	movls	r2, #0
 800a04e:	4083      	lsls	r3, r0
 800a050:	40ca      	lsrs	r2, r1
 800a052:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a056:	4313      	orrs	r3, r2
 800a058:	e7de      	b.n	800a018 <__b2d+0x48>
 800a05a:	ea42 0501 	orr.w	r5, r2, r1
 800a05e:	e7db      	b.n	800a018 <__b2d+0x48>
 800a060:	3ff00000 	.word	0x3ff00000

0800a064 <__d2b>:
 800a064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a068:	460f      	mov	r7, r1
 800a06a:	2101      	movs	r1, #1
 800a06c:	ec59 8b10 	vmov	r8, r9, d0
 800a070:	4616      	mov	r6, r2
 800a072:	f7ff fc1b 	bl	80098ac <_Balloc>
 800a076:	4604      	mov	r4, r0
 800a078:	b930      	cbnz	r0, 800a088 <__d2b+0x24>
 800a07a:	4602      	mov	r2, r0
 800a07c:	4b24      	ldr	r3, [pc, #144]	; (800a110 <__d2b+0xac>)
 800a07e:	4825      	ldr	r0, [pc, #148]	; (800a114 <__d2b+0xb0>)
 800a080:	f240 310f 	movw	r1, #783	; 0x30f
 800a084:	f001 fd44 	bl	800bb10 <__assert_func>
 800a088:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a08c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a090:	bb2d      	cbnz	r5, 800a0de <__d2b+0x7a>
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	f1b8 0300 	subs.w	r3, r8, #0
 800a098:	d026      	beq.n	800a0e8 <__d2b+0x84>
 800a09a:	4668      	mov	r0, sp
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	f7ff fd17 	bl	8009ad0 <__lo0bits>
 800a0a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0a6:	b1e8      	cbz	r0, 800a0e4 <__d2b+0x80>
 800a0a8:	f1c0 0320 	rsb	r3, r0, #32
 800a0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b0:	430b      	orrs	r3, r1
 800a0b2:	40c2      	lsrs	r2, r0
 800a0b4:	6163      	str	r3, [r4, #20]
 800a0b6:	9201      	str	r2, [sp, #4]
 800a0b8:	9b01      	ldr	r3, [sp, #4]
 800a0ba:	61a3      	str	r3, [r4, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bf14      	ite	ne
 800a0c0:	2202      	movne	r2, #2
 800a0c2:	2201      	moveq	r2, #1
 800a0c4:	6122      	str	r2, [r4, #16]
 800a0c6:	b1bd      	cbz	r5, 800a0f8 <__d2b+0x94>
 800a0c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0cc:	4405      	add	r5, r0
 800a0ce:	603d      	str	r5, [r7, #0]
 800a0d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0d4:	6030      	str	r0, [r6, #0]
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	b003      	add	sp, #12
 800a0da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0e2:	e7d6      	b.n	800a092 <__d2b+0x2e>
 800a0e4:	6161      	str	r1, [r4, #20]
 800a0e6:	e7e7      	b.n	800a0b8 <__d2b+0x54>
 800a0e8:	a801      	add	r0, sp, #4
 800a0ea:	f7ff fcf1 	bl	8009ad0 <__lo0bits>
 800a0ee:	9b01      	ldr	r3, [sp, #4]
 800a0f0:	6163      	str	r3, [r4, #20]
 800a0f2:	3020      	adds	r0, #32
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	e7e5      	b.n	800a0c4 <__d2b+0x60>
 800a0f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a100:	6038      	str	r0, [r7, #0]
 800a102:	6918      	ldr	r0, [r3, #16]
 800a104:	f7ff fcc4 	bl	8009a90 <__hi0bits>
 800a108:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a10c:	e7e2      	b.n	800a0d4 <__d2b+0x70>
 800a10e:	bf00      	nop
 800a110:	0800cba4 	.word	0x0800cba4
 800a114:	0800cbb5 	.word	0x0800cbb5

0800a118 <__ratio>:
 800a118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	4688      	mov	r8, r1
 800a11e:	4669      	mov	r1, sp
 800a120:	4681      	mov	r9, r0
 800a122:	f7ff ff55 	bl	8009fd0 <__b2d>
 800a126:	a901      	add	r1, sp, #4
 800a128:	4640      	mov	r0, r8
 800a12a:	ec55 4b10 	vmov	r4, r5, d0
 800a12e:	f7ff ff4f 	bl	8009fd0 <__b2d>
 800a132:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a136:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a13a:	eba3 0c02 	sub.w	ip, r3, r2
 800a13e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a142:	1a9b      	subs	r3, r3, r2
 800a144:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a148:	ec51 0b10 	vmov	r0, r1, d0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	bfd6      	itet	le
 800a150:	460a      	movle	r2, r1
 800a152:	462a      	movgt	r2, r5
 800a154:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a158:	468b      	mov	fp, r1
 800a15a:	462f      	mov	r7, r5
 800a15c:	bfd4      	ite	le
 800a15e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a162:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a166:	4620      	mov	r0, r4
 800a168:	ee10 2a10 	vmov	r2, s0
 800a16c:	465b      	mov	r3, fp
 800a16e:	4639      	mov	r1, r7
 800a170:	f7f6 fb6c 	bl	800084c <__aeabi_ddiv>
 800a174:	ec41 0b10 	vmov	d0, r0, r1
 800a178:	b003      	add	sp, #12
 800a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a17e <__copybits>:
 800a17e:	3901      	subs	r1, #1
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	1149      	asrs	r1, r1, #5
 800a184:	6914      	ldr	r4, [r2, #16]
 800a186:	3101      	adds	r1, #1
 800a188:	f102 0314 	add.w	r3, r2, #20
 800a18c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a190:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a194:	1f05      	subs	r5, r0, #4
 800a196:	42a3      	cmp	r3, r4
 800a198:	d30c      	bcc.n	800a1b4 <__copybits+0x36>
 800a19a:	1aa3      	subs	r3, r4, r2
 800a19c:	3b11      	subs	r3, #17
 800a19e:	f023 0303 	bic.w	r3, r3, #3
 800a1a2:	3211      	adds	r2, #17
 800a1a4:	42a2      	cmp	r2, r4
 800a1a6:	bf88      	it	hi
 800a1a8:	2300      	movhi	r3, #0
 800a1aa:	4418      	add	r0, r3
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4288      	cmp	r0, r1
 800a1b0:	d305      	bcc.n	800a1be <__copybits+0x40>
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}
 800a1b4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1b8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1bc:	e7eb      	b.n	800a196 <__copybits+0x18>
 800a1be:	f840 3b04 	str.w	r3, [r0], #4
 800a1c2:	e7f4      	b.n	800a1ae <__copybits+0x30>

0800a1c4 <__any_on>:
 800a1c4:	f100 0214 	add.w	r2, r0, #20
 800a1c8:	6900      	ldr	r0, [r0, #16]
 800a1ca:	114b      	asrs	r3, r1, #5
 800a1cc:	4298      	cmp	r0, r3
 800a1ce:	b510      	push	{r4, lr}
 800a1d0:	db11      	blt.n	800a1f6 <__any_on+0x32>
 800a1d2:	dd0a      	ble.n	800a1ea <__any_on+0x26>
 800a1d4:	f011 011f 	ands.w	r1, r1, #31
 800a1d8:	d007      	beq.n	800a1ea <__any_on+0x26>
 800a1da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1de:	fa24 f001 	lsr.w	r0, r4, r1
 800a1e2:	fa00 f101 	lsl.w	r1, r0, r1
 800a1e6:	428c      	cmp	r4, r1
 800a1e8:	d10b      	bne.n	800a202 <__any_on+0x3e>
 800a1ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d803      	bhi.n	800a1fa <__any_on+0x36>
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	bd10      	pop	{r4, pc}
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	e7f7      	b.n	800a1ea <__any_on+0x26>
 800a1fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1fe:	2900      	cmp	r1, #0
 800a200:	d0f5      	beq.n	800a1ee <__any_on+0x2a>
 800a202:	2001      	movs	r0, #1
 800a204:	e7f6      	b.n	800a1f4 <__any_on+0x30>

0800a206 <sulp>:
 800a206:	b570      	push	{r4, r5, r6, lr}
 800a208:	4604      	mov	r4, r0
 800a20a:	460d      	mov	r5, r1
 800a20c:	ec45 4b10 	vmov	d0, r4, r5
 800a210:	4616      	mov	r6, r2
 800a212:	f7ff feb7 	bl	8009f84 <__ulp>
 800a216:	ec51 0b10 	vmov	r0, r1, d0
 800a21a:	b17e      	cbz	r6, 800a23c <sulp+0x36>
 800a21c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a220:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a224:	2b00      	cmp	r3, #0
 800a226:	dd09      	ble.n	800a23c <sulp+0x36>
 800a228:	051b      	lsls	r3, r3, #20
 800a22a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a22e:	2400      	movs	r4, #0
 800a230:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a234:	4622      	mov	r2, r4
 800a236:	462b      	mov	r3, r5
 800a238:	f7f6 f9de 	bl	80005f8 <__aeabi_dmul>
 800a23c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a240 <_strtod_l>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	ed2d 8b02 	vpush	{d8}
 800a248:	b09b      	sub	sp, #108	; 0x6c
 800a24a:	4604      	mov	r4, r0
 800a24c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a24e:	2200      	movs	r2, #0
 800a250:	9216      	str	r2, [sp, #88]	; 0x58
 800a252:	460d      	mov	r5, r1
 800a254:	f04f 0800 	mov.w	r8, #0
 800a258:	f04f 0900 	mov.w	r9, #0
 800a25c:	460a      	mov	r2, r1
 800a25e:	9215      	str	r2, [sp, #84]	; 0x54
 800a260:	7811      	ldrb	r1, [r2, #0]
 800a262:	292b      	cmp	r1, #43	; 0x2b
 800a264:	d04c      	beq.n	800a300 <_strtod_l+0xc0>
 800a266:	d83a      	bhi.n	800a2de <_strtod_l+0x9e>
 800a268:	290d      	cmp	r1, #13
 800a26a:	d834      	bhi.n	800a2d6 <_strtod_l+0x96>
 800a26c:	2908      	cmp	r1, #8
 800a26e:	d834      	bhi.n	800a2da <_strtod_l+0x9a>
 800a270:	2900      	cmp	r1, #0
 800a272:	d03d      	beq.n	800a2f0 <_strtod_l+0xb0>
 800a274:	2200      	movs	r2, #0
 800a276:	920a      	str	r2, [sp, #40]	; 0x28
 800a278:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a27a:	7832      	ldrb	r2, [r6, #0]
 800a27c:	2a30      	cmp	r2, #48	; 0x30
 800a27e:	f040 80b4 	bne.w	800a3ea <_strtod_l+0x1aa>
 800a282:	7872      	ldrb	r2, [r6, #1]
 800a284:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a288:	2a58      	cmp	r2, #88	; 0x58
 800a28a:	d170      	bne.n	800a36e <_strtod_l+0x12e>
 800a28c:	9302      	str	r3, [sp, #8]
 800a28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	ab16      	add	r3, sp, #88	; 0x58
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	4a8e      	ldr	r2, [pc, #568]	; (800a4d0 <_strtod_l+0x290>)
 800a298:	ab17      	add	r3, sp, #92	; 0x5c
 800a29a:	a915      	add	r1, sp, #84	; 0x54
 800a29c:	4620      	mov	r0, r4
 800a29e:	f001 fcd3 	bl	800bc48 <__gethex>
 800a2a2:	f010 070f 	ands.w	r7, r0, #15
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	d005      	beq.n	800a2b6 <_strtod_l+0x76>
 800a2aa:	2f06      	cmp	r7, #6
 800a2ac:	d12a      	bne.n	800a304 <_strtod_l+0xc4>
 800a2ae:	3601      	adds	r6, #1
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9615      	str	r6, [sp, #84]	; 0x54
 800a2b4:	930a      	str	r3, [sp, #40]	; 0x28
 800a2b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f040 857f 	bne.w	800adbc <_strtod_l+0xb7c>
 800a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c0:	b1db      	cbz	r3, 800a2fa <_strtod_l+0xba>
 800a2c2:	4642      	mov	r2, r8
 800a2c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a2c8:	ec43 2b10 	vmov	d0, r2, r3
 800a2cc:	b01b      	add	sp, #108	; 0x6c
 800a2ce:	ecbd 8b02 	vpop	{d8}
 800a2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d6:	2920      	cmp	r1, #32
 800a2d8:	d1cc      	bne.n	800a274 <_strtod_l+0x34>
 800a2da:	3201      	adds	r2, #1
 800a2dc:	e7bf      	b.n	800a25e <_strtod_l+0x1e>
 800a2de:	292d      	cmp	r1, #45	; 0x2d
 800a2e0:	d1c8      	bne.n	800a274 <_strtod_l+0x34>
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	910a      	str	r1, [sp, #40]	; 0x28
 800a2e6:	1c51      	adds	r1, r2, #1
 800a2e8:	9115      	str	r1, [sp, #84]	; 0x54
 800a2ea:	7852      	ldrb	r2, [r2, #1]
 800a2ec:	2a00      	cmp	r2, #0
 800a2ee:	d1c3      	bne.n	800a278 <_strtod_l+0x38>
 800a2f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2f2:	9515      	str	r5, [sp, #84]	; 0x54
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f040 855f 	bne.w	800adb8 <_strtod_l+0xb78>
 800a2fa:	4642      	mov	r2, r8
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	e7e3      	b.n	800a2c8 <_strtod_l+0x88>
 800a300:	2100      	movs	r1, #0
 800a302:	e7ef      	b.n	800a2e4 <_strtod_l+0xa4>
 800a304:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a306:	b13a      	cbz	r2, 800a318 <_strtod_l+0xd8>
 800a308:	2135      	movs	r1, #53	; 0x35
 800a30a:	a818      	add	r0, sp, #96	; 0x60
 800a30c:	f7ff ff37 	bl	800a17e <__copybits>
 800a310:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a312:	4620      	mov	r0, r4
 800a314:	f7ff fb0a 	bl	800992c <_Bfree>
 800a318:	3f01      	subs	r7, #1
 800a31a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a31c:	2f04      	cmp	r7, #4
 800a31e:	d806      	bhi.n	800a32e <_strtod_l+0xee>
 800a320:	e8df f007 	tbb	[pc, r7]
 800a324:	201d0314 	.word	0x201d0314
 800a328:	14          	.byte	0x14
 800a329:	00          	.byte	0x00
 800a32a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a32e:	05e9      	lsls	r1, r5, #23
 800a330:	bf48      	it	mi
 800a332:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a336:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a33a:	0d1b      	lsrs	r3, r3, #20
 800a33c:	051b      	lsls	r3, r3, #20
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1b9      	bne.n	800a2b6 <_strtod_l+0x76>
 800a342:	f7fe fb05 	bl	8008950 <__errno>
 800a346:	2322      	movs	r3, #34	; 0x22
 800a348:	6003      	str	r3, [r0, #0]
 800a34a:	e7b4      	b.n	800a2b6 <_strtod_l+0x76>
 800a34c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a350:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a354:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a358:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a35c:	e7e7      	b.n	800a32e <_strtod_l+0xee>
 800a35e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a4d8 <_strtod_l+0x298>
 800a362:	e7e4      	b.n	800a32e <_strtod_l+0xee>
 800a364:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a368:	f04f 38ff 	mov.w	r8, #4294967295
 800a36c:	e7df      	b.n	800a32e <_strtod_l+0xee>
 800a36e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	9215      	str	r2, [sp, #84]	; 0x54
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	2b30      	cmp	r3, #48	; 0x30
 800a378:	d0f9      	beq.n	800a36e <_strtod_l+0x12e>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d09b      	beq.n	800a2b6 <_strtod_l+0x76>
 800a37e:	2301      	movs	r3, #1
 800a380:	f04f 0a00 	mov.w	sl, #0
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a388:	930b      	str	r3, [sp, #44]	; 0x2c
 800a38a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a38e:	46d3      	mov	fp, sl
 800a390:	220a      	movs	r2, #10
 800a392:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a394:	7806      	ldrb	r6, [r0, #0]
 800a396:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a39a:	b2d9      	uxtb	r1, r3
 800a39c:	2909      	cmp	r1, #9
 800a39e:	d926      	bls.n	800a3ee <_strtod_l+0x1ae>
 800a3a0:	494c      	ldr	r1, [pc, #304]	; (800a4d4 <_strtod_l+0x294>)
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f001 fb79 	bl	800ba9a <strncmp>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d030      	beq.n	800a40e <_strtod_l+0x1ce>
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	9005      	str	r0, [sp, #20]
 800a3b2:	465e      	mov	r6, fp
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2a65      	cmp	r2, #101	; 0x65
 800a3b8:	d001      	beq.n	800a3be <_strtod_l+0x17e>
 800a3ba:	2a45      	cmp	r2, #69	; 0x45
 800a3bc:	d113      	bne.n	800a3e6 <_strtod_l+0x1a6>
 800a3be:	b91e      	cbnz	r6, 800a3c8 <_strtod_l+0x188>
 800a3c0:	9a04      	ldr	r2, [sp, #16]
 800a3c2:	4302      	orrs	r2, r0
 800a3c4:	d094      	beq.n	800a2f0 <_strtod_l+0xb0>
 800a3c6:	2600      	movs	r6, #0
 800a3c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a3ca:	1c6a      	adds	r2, r5, #1
 800a3cc:	9215      	str	r2, [sp, #84]	; 0x54
 800a3ce:	786a      	ldrb	r2, [r5, #1]
 800a3d0:	2a2b      	cmp	r2, #43	; 0x2b
 800a3d2:	d074      	beq.n	800a4be <_strtod_l+0x27e>
 800a3d4:	2a2d      	cmp	r2, #45	; 0x2d
 800a3d6:	d078      	beq.n	800a4ca <_strtod_l+0x28a>
 800a3d8:	f04f 0c00 	mov.w	ip, #0
 800a3dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a3e0:	2909      	cmp	r1, #9
 800a3e2:	d97f      	bls.n	800a4e4 <_strtod_l+0x2a4>
 800a3e4:	9515      	str	r5, [sp, #84]	; 0x54
 800a3e6:	2700      	movs	r7, #0
 800a3e8:	e09e      	b.n	800a528 <_strtod_l+0x2e8>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e7c8      	b.n	800a380 <_strtod_l+0x140>
 800a3ee:	f1bb 0f08 	cmp.w	fp, #8
 800a3f2:	bfd8      	it	le
 800a3f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a3f6:	f100 0001 	add.w	r0, r0, #1
 800a3fa:	bfda      	itte	le
 800a3fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a400:	9309      	strle	r3, [sp, #36]	; 0x24
 800a402:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a406:	f10b 0b01 	add.w	fp, fp, #1
 800a40a:	9015      	str	r0, [sp, #84]	; 0x54
 800a40c:	e7c1      	b.n	800a392 <_strtod_l+0x152>
 800a40e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	9215      	str	r2, [sp, #84]	; 0x54
 800a414:	785a      	ldrb	r2, [r3, #1]
 800a416:	f1bb 0f00 	cmp.w	fp, #0
 800a41a:	d037      	beq.n	800a48c <_strtod_l+0x24c>
 800a41c:	9005      	str	r0, [sp, #20]
 800a41e:	465e      	mov	r6, fp
 800a420:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a424:	2b09      	cmp	r3, #9
 800a426:	d912      	bls.n	800a44e <_strtod_l+0x20e>
 800a428:	2301      	movs	r3, #1
 800a42a:	e7c4      	b.n	800a3b6 <_strtod_l+0x176>
 800a42c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	9215      	str	r2, [sp, #84]	; 0x54
 800a432:	785a      	ldrb	r2, [r3, #1]
 800a434:	3001      	adds	r0, #1
 800a436:	2a30      	cmp	r2, #48	; 0x30
 800a438:	d0f8      	beq.n	800a42c <_strtod_l+0x1ec>
 800a43a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a43e:	2b08      	cmp	r3, #8
 800a440:	f200 84c1 	bhi.w	800adc6 <_strtod_l+0xb86>
 800a444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a446:	9005      	str	r0, [sp, #20]
 800a448:	2000      	movs	r0, #0
 800a44a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a44c:	4606      	mov	r6, r0
 800a44e:	3a30      	subs	r2, #48	; 0x30
 800a450:	f100 0301 	add.w	r3, r0, #1
 800a454:	d014      	beq.n	800a480 <_strtod_l+0x240>
 800a456:	9905      	ldr	r1, [sp, #20]
 800a458:	4419      	add	r1, r3
 800a45a:	9105      	str	r1, [sp, #20]
 800a45c:	4633      	mov	r3, r6
 800a45e:	eb00 0c06 	add.w	ip, r0, r6
 800a462:	210a      	movs	r1, #10
 800a464:	4563      	cmp	r3, ip
 800a466:	d113      	bne.n	800a490 <_strtod_l+0x250>
 800a468:	1833      	adds	r3, r6, r0
 800a46a:	2b08      	cmp	r3, #8
 800a46c:	f106 0601 	add.w	r6, r6, #1
 800a470:	4406      	add	r6, r0
 800a472:	dc1a      	bgt.n	800a4aa <_strtod_l+0x26a>
 800a474:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a476:	230a      	movs	r3, #10
 800a478:	fb03 2301 	mla	r3, r3, r1, r2
 800a47c:	9309      	str	r3, [sp, #36]	; 0x24
 800a47e:	2300      	movs	r3, #0
 800a480:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a482:	1c51      	adds	r1, r2, #1
 800a484:	9115      	str	r1, [sp, #84]	; 0x54
 800a486:	7852      	ldrb	r2, [r2, #1]
 800a488:	4618      	mov	r0, r3
 800a48a:	e7c9      	b.n	800a420 <_strtod_l+0x1e0>
 800a48c:	4658      	mov	r0, fp
 800a48e:	e7d2      	b.n	800a436 <_strtod_l+0x1f6>
 800a490:	2b08      	cmp	r3, #8
 800a492:	f103 0301 	add.w	r3, r3, #1
 800a496:	dc03      	bgt.n	800a4a0 <_strtod_l+0x260>
 800a498:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a49a:	434f      	muls	r7, r1
 800a49c:	9709      	str	r7, [sp, #36]	; 0x24
 800a49e:	e7e1      	b.n	800a464 <_strtod_l+0x224>
 800a4a0:	2b10      	cmp	r3, #16
 800a4a2:	bfd8      	it	le
 800a4a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a4a8:	e7dc      	b.n	800a464 <_strtod_l+0x224>
 800a4aa:	2e10      	cmp	r6, #16
 800a4ac:	bfdc      	itt	le
 800a4ae:	230a      	movle	r3, #10
 800a4b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a4b4:	e7e3      	b.n	800a47e <_strtod_l+0x23e>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9305      	str	r3, [sp, #20]
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e780      	b.n	800a3c0 <_strtod_l+0x180>
 800a4be:	f04f 0c00 	mov.w	ip, #0
 800a4c2:	1caa      	adds	r2, r5, #2
 800a4c4:	9215      	str	r2, [sp, #84]	; 0x54
 800a4c6:	78aa      	ldrb	r2, [r5, #2]
 800a4c8:	e788      	b.n	800a3dc <_strtod_l+0x19c>
 800a4ca:	f04f 0c01 	mov.w	ip, #1
 800a4ce:	e7f8      	b.n	800a4c2 <_strtod_l+0x282>
 800a4d0:	0800cd10 	.word	0x0800cd10
 800a4d4:	0800cd0c 	.word	0x0800cd0c
 800a4d8:	7ff00000 	.word	0x7ff00000
 800a4dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4de:	1c51      	adds	r1, r2, #1
 800a4e0:	9115      	str	r1, [sp, #84]	; 0x54
 800a4e2:	7852      	ldrb	r2, [r2, #1]
 800a4e4:	2a30      	cmp	r2, #48	; 0x30
 800a4e6:	d0f9      	beq.n	800a4dc <_strtod_l+0x29c>
 800a4e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a4ec:	2908      	cmp	r1, #8
 800a4ee:	f63f af7a 	bhi.w	800a3e6 <_strtod_l+0x1a6>
 800a4f2:	3a30      	subs	r2, #48	; 0x30
 800a4f4:	9208      	str	r2, [sp, #32]
 800a4f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4f8:	920c      	str	r2, [sp, #48]	; 0x30
 800a4fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4fc:	1c57      	adds	r7, r2, #1
 800a4fe:	9715      	str	r7, [sp, #84]	; 0x54
 800a500:	7852      	ldrb	r2, [r2, #1]
 800a502:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a506:	f1be 0f09 	cmp.w	lr, #9
 800a50a:	d938      	bls.n	800a57e <_strtod_l+0x33e>
 800a50c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a50e:	1a7f      	subs	r7, r7, r1
 800a510:	2f08      	cmp	r7, #8
 800a512:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a516:	dc03      	bgt.n	800a520 <_strtod_l+0x2e0>
 800a518:	9908      	ldr	r1, [sp, #32]
 800a51a:	428f      	cmp	r7, r1
 800a51c:	bfa8      	it	ge
 800a51e:	460f      	movge	r7, r1
 800a520:	f1bc 0f00 	cmp.w	ip, #0
 800a524:	d000      	beq.n	800a528 <_strtod_l+0x2e8>
 800a526:	427f      	negs	r7, r7
 800a528:	2e00      	cmp	r6, #0
 800a52a:	d14f      	bne.n	800a5cc <_strtod_l+0x38c>
 800a52c:	9904      	ldr	r1, [sp, #16]
 800a52e:	4301      	orrs	r1, r0
 800a530:	f47f aec1 	bne.w	800a2b6 <_strtod_l+0x76>
 800a534:	2b00      	cmp	r3, #0
 800a536:	f47f aedb 	bne.w	800a2f0 <_strtod_l+0xb0>
 800a53a:	2a69      	cmp	r2, #105	; 0x69
 800a53c:	d029      	beq.n	800a592 <_strtod_l+0x352>
 800a53e:	dc26      	bgt.n	800a58e <_strtod_l+0x34e>
 800a540:	2a49      	cmp	r2, #73	; 0x49
 800a542:	d026      	beq.n	800a592 <_strtod_l+0x352>
 800a544:	2a4e      	cmp	r2, #78	; 0x4e
 800a546:	f47f aed3 	bne.w	800a2f0 <_strtod_l+0xb0>
 800a54a:	499b      	ldr	r1, [pc, #620]	; (800a7b8 <_strtod_l+0x578>)
 800a54c:	a815      	add	r0, sp, #84	; 0x54
 800a54e:	f001 fdbb 	bl	800c0c8 <__match>
 800a552:	2800      	cmp	r0, #0
 800a554:	f43f aecc 	beq.w	800a2f0 <_strtod_l+0xb0>
 800a558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b28      	cmp	r3, #40	; 0x28
 800a55e:	d12f      	bne.n	800a5c0 <_strtod_l+0x380>
 800a560:	4996      	ldr	r1, [pc, #600]	; (800a7bc <_strtod_l+0x57c>)
 800a562:	aa18      	add	r2, sp, #96	; 0x60
 800a564:	a815      	add	r0, sp, #84	; 0x54
 800a566:	f001 fdc3 	bl	800c0f0 <__hexnan>
 800a56a:	2805      	cmp	r0, #5
 800a56c:	d128      	bne.n	800a5c0 <_strtod_l+0x380>
 800a56e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a570:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a574:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a578:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a57c:	e69b      	b.n	800a2b6 <_strtod_l+0x76>
 800a57e:	9f08      	ldr	r7, [sp, #32]
 800a580:	210a      	movs	r1, #10
 800a582:	fb01 2107 	mla	r1, r1, r7, r2
 800a586:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a58a:	9208      	str	r2, [sp, #32]
 800a58c:	e7b5      	b.n	800a4fa <_strtod_l+0x2ba>
 800a58e:	2a6e      	cmp	r2, #110	; 0x6e
 800a590:	e7d9      	b.n	800a546 <_strtod_l+0x306>
 800a592:	498b      	ldr	r1, [pc, #556]	; (800a7c0 <_strtod_l+0x580>)
 800a594:	a815      	add	r0, sp, #84	; 0x54
 800a596:	f001 fd97 	bl	800c0c8 <__match>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f43f aea8 	beq.w	800a2f0 <_strtod_l+0xb0>
 800a5a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5a2:	4988      	ldr	r1, [pc, #544]	; (800a7c4 <_strtod_l+0x584>)
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	a815      	add	r0, sp, #84	; 0x54
 800a5a8:	9315      	str	r3, [sp, #84]	; 0x54
 800a5aa:	f001 fd8d 	bl	800c0c8 <__match>
 800a5ae:	b910      	cbnz	r0, 800a5b6 <_strtod_l+0x376>
 800a5b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	9315      	str	r3, [sp, #84]	; 0x54
 800a5b6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a7d4 <_strtod_l+0x594>
 800a5ba:	f04f 0800 	mov.w	r8, #0
 800a5be:	e67a      	b.n	800a2b6 <_strtod_l+0x76>
 800a5c0:	4881      	ldr	r0, [pc, #516]	; (800a7c8 <_strtod_l+0x588>)
 800a5c2:	f001 fa9d 	bl	800bb00 <nan>
 800a5c6:	ec59 8b10 	vmov	r8, r9, d0
 800a5ca:	e674      	b.n	800a2b6 <_strtod_l+0x76>
 800a5cc:	9b05      	ldr	r3, [sp, #20]
 800a5ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5d0:	1afb      	subs	r3, r7, r3
 800a5d2:	f1bb 0f00 	cmp.w	fp, #0
 800a5d6:	bf08      	it	eq
 800a5d8:	46b3      	moveq	fp, r6
 800a5da:	2e10      	cmp	r6, #16
 800a5dc:	9308      	str	r3, [sp, #32]
 800a5de:	4635      	mov	r5, r6
 800a5e0:	bfa8      	it	ge
 800a5e2:	2510      	movge	r5, #16
 800a5e4:	f7f5 ff8e 	bl	8000504 <__aeabi_ui2d>
 800a5e8:	2e09      	cmp	r6, #9
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	4689      	mov	r9, r1
 800a5ee:	dd13      	ble.n	800a618 <_strtod_l+0x3d8>
 800a5f0:	4b76      	ldr	r3, [pc, #472]	; (800a7cc <_strtod_l+0x58c>)
 800a5f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a5f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a5fa:	f7f5 fffd 	bl	80005f8 <__aeabi_dmul>
 800a5fe:	4680      	mov	r8, r0
 800a600:	4650      	mov	r0, sl
 800a602:	4689      	mov	r9, r1
 800a604:	f7f5 ff7e 	bl	8000504 <__aeabi_ui2d>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4640      	mov	r0, r8
 800a60e:	4649      	mov	r1, r9
 800a610:	f7f5 fe3c 	bl	800028c <__adddf3>
 800a614:	4680      	mov	r8, r0
 800a616:	4689      	mov	r9, r1
 800a618:	2e0f      	cmp	r6, #15
 800a61a:	dc38      	bgt.n	800a68e <_strtod_l+0x44e>
 800a61c:	9b08      	ldr	r3, [sp, #32]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f43f ae49 	beq.w	800a2b6 <_strtod_l+0x76>
 800a624:	dd24      	ble.n	800a670 <_strtod_l+0x430>
 800a626:	2b16      	cmp	r3, #22
 800a628:	dc0b      	bgt.n	800a642 <_strtod_l+0x402>
 800a62a:	4968      	ldr	r1, [pc, #416]	; (800a7cc <_strtod_l+0x58c>)
 800a62c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a630:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a634:	4642      	mov	r2, r8
 800a636:	464b      	mov	r3, r9
 800a638:	f7f5 ffde 	bl	80005f8 <__aeabi_dmul>
 800a63c:	4680      	mov	r8, r0
 800a63e:	4689      	mov	r9, r1
 800a640:	e639      	b.n	800a2b6 <_strtod_l+0x76>
 800a642:	9a08      	ldr	r2, [sp, #32]
 800a644:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a648:	4293      	cmp	r3, r2
 800a64a:	db20      	blt.n	800a68e <_strtod_l+0x44e>
 800a64c:	4c5f      	ldr	r4, [pc, #380]	; (800a7cc <_strtod_l+0x58c>)
 800a64e:	f1c6 060f 	rsb	r6, r6, #15
 800a652:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a656:	4642      	mov	r2, r8
 800a658:	464b      	mov	r3, r9
 800a65a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a65e:	f7f5 ffcb 	bl	80005f8 <__aeabi_dmul>
 800a662:	9b08      	ldr	r3, [sp, #32]
 800a664:	1b9e      	subs	r6, r3, r6
 800a666:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a66a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a66e:	e7e3      	b.n	800a638 <_strtod_l+0x3f8>
 800a670:	9b08      	ldr	r3, [sp, #32]
 800a672:	3316      	adds	r3, #22
 800a674:	db0b      	blt.n	800a68e <_strtod_l+0x44e>
 800a676:	9b05      	ldr	r3, [sp, #20]
 800a678:	1bdf      	subs	r7, r3, r7
 800a67a:	4b54      	ldr	r3, [pc, #336]	; (800a7cc <_strtod_l+0x58c>)
 800a67c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a680:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a684:	4640      	mov	r0, r8
 800a686:	4649      	mov	r1, r9
 800a688:	f7f6 f8e0 	bl	800084c <__aeabi_ddiv>
 800a68c:	e7d6      	b.n	800a63c <_strtod_l+0x3fc>
 800a68e:	9b08      	ldr	r3, [sp, #32]
 800a690:	1b75      	subs	r5, r6, r5
 800a692:	441d      	add	r5, r3
 800a694:	2d00      	cmp	r5, #0
 800a696:	dd70      	ble.n	800a77a <_strtod_l+0x53a>
 800a698:	f015 030f 	ands.w	r3, r5, #15
 800a69c:	d00a      	beq.n	800a6b4 <_strtod_l+0x474>
 800a69e:	494b      	ldr	r1, [pc, #300]	; (800a7cc <_strtod_l+0x58c>)
 800a6a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ac:	f7f5 ffa4 	bl	80005f8 <__aeabi_dmul>
 800a6b0:	4680      	mov	r8, r0
 800a6b2:	4689      	mov	r9, r1
 800a6b4:	f035 050f 	bics.w	r5, r5, #15
 800a6b8:	d04d      	beq.n	800a756 <_strtod_l+0x516>
 800a6ba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a6be:	dd22      	ble.n	800a706 <_strtod_l+0x4c6>
 800a6c0:	2500      	movs	r5, #0
 800a6c2:	46ab      	mov	fp, r5
 800a6c4:	9509      	str	r5, [sp, #36]	; 0x24
 800a6c6:	9505      	str	r5, [sp, #20]
 800a6c8:	2322      	movs	r3, #34	; 0x22
 800a6ca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a7d4 <_strtod_l+0x594>
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	f04f 0800 	mov.w	r8, #0
 800a6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f43f aded 	beq.w	800a2b6 <_strtod_l+0x76>
 800a6dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f7ff f924 	bl	800992c <_Bfree>
 800a6e4:	9905      	ldr	r1, [sp, #20]
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7ff f920 	bl	800992c <_Bfree>
 800a6ec:	4659      	mov	r1, fp
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f7ff f91c 	bl	800992c <_Bfree>
 800a6f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f7ff f918 	bl	800992c <_Bfree>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4620      	mov	r0, r4
 800a700:	f7ff f914 	bl	800992c <_Bfree>
 800a704:	e5d7      	b.n	800a2b6 <_strtod_l+0x76>
 800a706:	4b32      	ldr	r3, [pc, #200]	; (800a7d0 <_strtod_l+0x590>)
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	2300      	movs	r3, #0
 800a70c:	112d      	asrs	r5, r5, #4
 800a70e:	4640      	mov	r0, r8
 800a710:	4649      	mov	r1, r9
 800a712:	469a      	mov	sl, r3
 800a714:	2d01      	cmp	r5, #1
 800a716:	dc21      	bgt.n	800a75c <_strtod_l+0x51c>
 800a718:	b10b      	cbz	r3, 800a71e <_strtod_l+0x4de>
 800a71a:	4680      	mov	r8, r0
 800a71c:	4689      	mov	r9, r1
 800a71e:	492c      	ldr	r1, [pc, #176]	; (800a7d0 <_strtod_l+0x590>)
 800a720:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a724:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a728:	4642      	mov	r2, r8
 800a72a:	464b      	mov	r3, r9
 800a72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a730:	f7f5 ff62 	bl	80005f8 <__aeabi_dmul>
 800a734:	4b27      	ldr	r3, [pc, #156]	; (800a7d4 <_strtod_l+0x594>)
 800a736:	460a      	mov	r2, r1
 800a738:	400b      	ands	r3, r1
 800a73a:	4927      	ldr	r1, [pc, #156]	; (800a7d8 <_strtod_l+0x598>)
 800a73c:	428b      	cmp	r3, r1
 800a73e:	4680      	mov	r8, r0
 800a740:	d8be      	bhi.n	800a6c0 <_strtod_l+0x480>
 800a742:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a746:	428b      	cmp	r3, r1
 800a748:	bf86      	itte	hi
 800a74a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a7dc <_strtod_l+0x59c>
 800a74e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a752:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a756:	2300      	movs	r3, #0
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	e07b      	b.n	800a854 <_strtod_l+0x614>
 800a75c:	07ea      	lsls	r2, r5, #31
 800a75e:	d505      	bpl.n	800a76c <_strtod_l+0x52c>
 800a760:	9b04      	ldr	r3, [sp, #16]
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 ff47 	bl	80005f8 <__aeabi_dmul>
 800a76a:	2301      	movs	r3, #1
 800a76c:	9a04      	ldr	r2, [sp, #16]
 800a76e:	3208      	adds	r2, #8
 800a770:	f10a 0a01 	add.w	sl, sl, #1
 800a774:	106d      	asrs	r5, r5, #1
 800a776:	9204      	str	r2, [sp, #16]
 800a778:	e7cc      	b.n	800a714 <_strtod_l+0x4d4>
 800a77a:	d0ec      	beq.n	800a756 <_strtod_l+0x516>
 800a77c:	426d      	negs	r5, r5
 800a77e:	f015 020f 	ands.w	r2, r5, #15
 800a782:	d00a      	beq.n	800a79a <_strtod_l+0x55a>
 800a784:	4b11      	ldr	r3, [pc, #68]	; (800a7cc <_strtod_l+0x58c>)
 800a786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a78a:	4640      	mov	r0, r8
 800a78c:	4649      	mov	r1, r9
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	f7f6 f85b 	bl	800084c <__aeabi_ddiv>
 800a796:	4680      	mov	r8, r0
 800a798:	4689      	mov	r9, r1
 800a79a:	112d      	asrs	r5, r5, #4
 800a79c:	d0db      	beq.n	800a756 <_strtod_l+0x516>
 800a79e:	2d1f      	cmp	r5, #31
 800a7a0:	dd1e      	ble.n	800a7e0 <_strtod_l+0x5a0>
 800a7a2:	2500      	movs	r5, #0
 800a7a4:	46ab      	mov	fp, r5
 800a7a6:	9509      	str	r5, [sp, #36]	; 0x24
 800a7a8:	9505      	str	r5, [sp, #20]
 800a7aa:	2322      	movs	r3, #34	; 0x22
 800a7ac:	f04f 0800 	mov.w	r8, #0
 800a7b0:	f04f 0900 	mov.w	r9, #0
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	e78d      	b.n	800a6d4 <_strtod_l+0x494>
 800a7b8:	0800cafe 	.word	0x0800cafe
 800a7bc:	0800cd24 	.word	0x0800cd24
 800a7c0:	0800caf6 	.word	0x0800caf6
 800a7c4:	0800cb2b 	.word	0x0800cb2b
 800a7c8:	0800cdcf 	.word	0x0800cdcf
 800a7cc:	0800cc38 	.word	0x0800cc38
 800a7d0:	0800cc10 	.word	0x0800cc10
 800a7d4:	7ff00000 	.word	0x7ff00000
 800a7d8:	7ca00000 	.word	0x7ca00000
 800a7dc:	7fefffff 	.word	0x7fefffff
 800a7e0:	f015 0310 	ands.w	r3, r5, #16
 800a7e4:	bf18      	it	ne
 800a7e6:	236a      	movne	r3, #106	; 0x6a
 800a7e8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ab8c <_strtod_l+0x94c>
 800a7ec:	9304      	str	r3, [sp, #16]
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	07ea      	lsls	r2, r5, #31
 800a7f6:	d504      	bpl.n	800a802 <_strtod_l+0x5c2>
 800a7f8:	e9da 2300 	ldrd	r2, r3, [sl]
 800a7fc:	f7f5 fefc 	bl	80005f8 <__aeabi_dmul>
 800a800:	2301      	movs	r3, #1
 800a802:	106d      	asrs	r5, r5, #1
 800a804:	f10a 0a08 	add.w	sl, sl, #8
 800a808:	d1f4      	bne.n	800a7f4 <_strtod_l+0x5b4>
 800a80a:	b10b      	cbz	r3, 800a810 <_strtod_l+0x5d0>
 800a80c:	4680      	mov	r8, r0
 800a80e:	4689      	mov	r9, r1
 800a810:	9b04      	ldr	r3, [sp, #16]
 800a812:	b1bb      	cbz	r3, 800a844 <_strtod_l+0x604>
 800a814:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a818:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	4649      	mov	r1, r9
 800a820:	dd10      	ble.n	800a844 <_strtod_l+0x604>
 800a822:	2b1f      	cmp	r3, #31
 800a824:	f340 811e 	ble.w	800aa64 <_strtod_l+0x824>
 800a828:	2b34      	cmp	r3, #52	; 0x34
 800a82a:	bfde      	ittt	le
 800a82c:	f04f 33ff 	movle.w	r3, #4294967295
 800a830:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a834:	4093      	lslle	r3, r2
 800a836:	f04f 0800 	mov.w	r8, #0
 800a83a:	bfcc      	ite	gt
 800a83c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a840:	ea03 0901 	andle.w	r9, r3, r1
 800a844:	2200      	movs	r2, #0
 800a846:	2300      	movs	r3, #0
 800a848:	4640      	mov	r0, r8
 800a84a:	4649      	mov	r1, r9
 800a84c:	f7f6 f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a850:	2800      	cmp	r0, #0
 800a852:	d1a6      	bne.n	800a7a2 <_strtod_l+0x562>
 800a854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a85a:	4633      	mov	r3, r6
 800a85c:	465a      	mov	r2, fp
 800a85e:	4620      	mov	r0, r4
 800a860:	f7ff f8cc 	bl	80099fc <__s2b>
 800a864:	9009      	str	r0, [sp, #36]	; 0x24
 800a866:	2800      	cmp	r0, #0
 800a868:	f43f af2a 	beq.w	800a6c0 <_strtod_l+0x480>
 800a86c:	9a08      	ldr	r2, [sp, #32]
 800a86e:	9b05      	ldr	r3, [sp, #20]
 800a870:	2a00      	cmp	r2, #0
 800a872:	eba3 0307 	sub.w	r3, r3, r7
 800a876:	bfa8      	it	ge
 800a878:	2300      	movge	r3, #0
 800a87a:	930c      	str	r3, [sp, #48]	; 0x30
 800a87c:	2500      	movs	r5, #0
 800a87e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a882:	9312      	str	r3, [sp, #72]	; 0x48
 800a884:	46ab      	mov	fp, r5
 800a886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a888:	4620      	mov	r0, r4
 800a88a:	6859      	ldr	r1, [r3, #4]
 800a88c:	f7ff f80e 	bl	80098ac <_Balloc>
 800a890:	9005      	str	r0, [sp, #20]
 800a892:	2800      	cmp	r0, #0
 800a894:	f43f af18 	beq.w	800a6c8 <_strtod_l+0x488>
 800a898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89a:	691a      	ldr	r2, [r3, #16]
 800a89c:	3202      	adds	r2, #2
 800a89e:	f103 010c 	add.w	r1, r3, #12
 800a8a2:	0092      	lsls	r2, r2, #2
 800a8a4:	300c      	adds	r0, #12
 800a8a6:	f001 f91b 	bl	800bae0 <memcpy>
 800a8aa:	ec49 8b10 	vmov	d0, r8, r9
 800a8ae:	aa18      	add	r2, sp, #96	; 0x60
 800a8b0:	a917      	add	r1, sp, #92	; 0x5c
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f7ff fbd6 	bl	800a064 <__d2b>
 800a8b8:	ec49 8b18 	vmov	d8, r8, r9
 800a8bc:	9016      	str	r0, [sp, #88]	; 0x58
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	f43f af02 	beq.w	800a6c8 <_strtod_l+0x488>
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7ff f930 	bl	8009b2c <__i2b>
 800a8cc:	4683      	mov	fp, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	f43f aefa 	beq.w	800a6c8 <_strtod_l+0x488>
 800a8d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a8d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a8d8:	2e00      	cmp	r6, #0
 800a8da:	bfab      	itete	ge
 800a8dc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a8de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a8e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a8e2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a8e6:	bfac      	ite	ge
 800a8e8:	eb06 0a03 	addge.w	sl, r6, r3
 800a8ec:	1b9f      	sublt	r7, r3, r6
 800a8ee:	9b04      	ldr	r3, [sp, #16]
 800a8f0:	1af6      	subs	r6, r6, r3
 800a8f2:	4416      	add	r6, r2
 800a8f4:	4ba0      	ldr	r3, [pc, #640]	; (800ab78 <_strtod_l+0x938>)
 800a8f6:	3e01      	subs	r6, #1
 800a8f8:	429e      	cmp	r6, r3
 800a8fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a8fe:	f280 80c4 	bge.w	800aa8a <_strtod_l+0x84a>
 800a902:	1b9b      	subs	r3, r3, r6
 800a904:	2b1f      	cmp	r3, #31
 800a906:	eba2 0203 	sub.w	r2, r2, r3
 800a90a:	f04f 0101 	mov.w	r1, #1
 800a90e:	f300 80b0 	bgt.w	800aa72 <_strtod_l+0x832>
 800a912:	fa01 f303 	lsl.w	r3, r1, r3
 800a916:	930e      	str	r3, [sp, #56]	; 0x38
 800a918:	2300      	movs	r3, #0
 800a91a:	930d      	str	r3, [sp, #52]	; 0x34
 800a91c:	eb0a 0602 	add.w	r6, sl, r2
 800a920:	9b04      	ldr	r3, [sp, #16]
 800a922:	45b2      	cmp	sl, r6
 800a924:	4417      	add	r7, r2
 800a926:	441f      	add	r7, r3
 800a928:	4653      	mov	r3, sl
 800a92a:	bfa8      	it	ge
 800a92c:	4633      	movge	r3, r6
 800a92e:	42bb      	cmp	r3, r7
 800a930:	bfa8      	it	ge
 800a932:	463b      	movge	r3, r7
 800a934:	2b00      	cmp	r3, #0
 800a936:	bfc2      	ittt	gt
 800a938:	1af6      	subgt	r6, r6, r3
 800a93a:	1aff      	subgt	r7, r7, r3
 800a93c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a942:	2b00      	cmp	r3, #0
 800a944:	dd17      	ble.n	800a976 <_strtod_l+0x736>
 800a946:	4659      	mov	r1, fp
 800a948:	461a      	mov	r2, r3
 800a94a:	4620      	mov	r0, r4
 800a94c:	f7ff f9ae 	bl	8009cac <__pow5mult>
 800a950:	4683      	mov	fp, r0
 800a952:	2800      	cmp	r0, #0
 800a954:	f43f aeb8 	beq.w	800a6c8 <_strtod_l+0x488>
 800a958:	4601      	mov	r1, r0
 800a95a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a95c:	4620      	mov	r0, r4
 800a95e:	f7ff f8fb 	bl	8009b58 <__multiply>
 800a962:	900b      	str	r0, [sp, #44]	; 0x2c
 800a964:	2800      	cmp	r0, #0
 800a966:	f43f aeaf 	beq.w	800a6c8 <_strtod_l+0x488>
 800a96a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a96c:	4620      	mov	r0, r4
 800a96e:	f7fe ffdd 	bl	800992c <_Bfree>
 800a972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a974:	9316      	str	r3, [sp, #88]	; 0x58
 800a976:	2e00      	cmp	r6, #0
 800a978:	f300 808c 	bgt.w	800aa94 <_strtod_l+0x854>
 800a97c:	9b08      	ldr	r3, [sp, #32]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	dd08      	ble.n	800a994 <_strtod_l+0x754>
 800a982:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a984:	9905      	ldr	r1, [sp, #20]
 800a986:	4620      	mov	r0, r4
 800a988:	f7ff f990 	bl	8009cac <__pow5mult>
 800a98c:	9005      	str	r0, [sp, #20]
 800a98e:	2800      	cmp	r0, #0
 800a990:	f43f ae9a 	beq.w	800a6c8 <_strtod_l+0x488>
 800a994:	2f00      	cmp	r7, #0
 800a996:	dd08      	ble.n	800a9aa <_strtod_l+0x76a>
 800a998:	9905      	ldr	r1, [sp, #20]
 800a99a:	463a      	mov	r2, r7
 800a99c:	4620      	mov	r0, r4
 800a99e:	f7ff f9df 	bl	8009d60 <__lshift>
 800a9a2:	9005      	str	r0, [sp, #20]
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	f43f ae8f 	beq.w	800a6c8 <_strtod_l+0x488>
 800a9aa:	f1ba 0f00 	cmp.w	sl, #0
 800a9ae:	dd08      	ble.n	800a9c2 <_strtod_l+0x782>
 800a9b0:	4659      	mov	r1, fp
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f7ff f9d3 	bl	8009d60 <__lshift>
 800a9ba:	4683      	mov	fp, r0
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	f43f ae83 	beq.w	800a6c8 <_strtod_l+0x488>
 800a9c2:	9a05      	ldr	r2, [sp, #20]
 800a9c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f7ff fa52 	bl	8009e70 <__mdiff>
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	f43f ae7a 	beq.w	800a6c8 <_strtod_l+0x488>
 800a9d4:	68c3      	ldr	r3, [r0, #12]
 800a9d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60c3      	str	r3, [r0, #12]
 800a9dc:	4659      	mov	r1, fp
 800a9de:	f7ff fa2b 	bl	8009e38 <__mcmp>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	da60      	bge.n	800aaa8 <_strtod_l+0x868>
 800a9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e8:	ea53 0308 	orrs.w	r3, r3, r8
 800a9ec:	f040 8084 	bne.w	800aaf8 <_strtod_l+0x8b8>
 800a9f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d17f      	bne.n	800aaf8 <_strtod_l+0x8b8>
 800a9f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9fc:	0d1b      	lsrs	r3, r3, #20
 800a9fe:	051b      	lsls	r3, r3, #20
 800aa00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa04:	d978      	bls.n	800aaf8 <_strtod_l+0x8b8>
 800aa06:	696b      	ldr	r3, [r5, #20]
 800aa08:	b913      	cbnz	r3, 800aa10 <_strtod_l+0x7d0>
 800aa0a:	692b      	ldr	r3, [r5, #16]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	dd73      	ble.n	800aaf8 <_strtod_l+0x8b8>
 800aa10:	4629      	mov	r1, r5
 800aa12:	2201      	movs	r2, #1
 800aa14:	4620      	mov	r0, r4
 800aa16:	f7ff f9a3 	bl	8009d60 <__lshift>
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	f7ff fa0b 	bl	8009e38 <__mcmp>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	dd68      	ble.n	800aaf8 <_strtod_l+0x8b8>
 800aa26:	9904      	ldr	r1, [sp, #16]
 800aa28:	4a54      	ldr	r2, [pc, #336]	; (800ab7c <_strtod_l+0x93c>)
 800aa2a:	464b      	mov	r3, r9
 800aa2c:	2900      	cmp	r1, #0
 800aa2e:	f000 8084 	beq.w	800ab3a <_strtod_l+0x8fa>
 800aa32:	ea02 0109 	and.w	r1, r2, r9
 800aa36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa3a:	dc7e      	bgt.n	800ab3a <_strtod_l+0x8fa>
 800aa3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa40:	f77f aeb3 	ble.w	800a7aa <_strtod_l+0x56a>
 800aa44:	4b4e      	ldr	r3, [pc, #312]	; (800ab80 <_strtod_l+0x940>)
 800aa46:	4640      	mov	r0, r8
 800aa48:	4649      	mov	r1, r9
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f7f5 fdd4 	bl	80005f8 <__aeabi_dmul>
 800aa50:	4b4a      	ldr	r3, [pc, #296]	; (800ab7c <_strtod_l+0x93c>)
 800aa52:	400b      	ands	r3, r1
 800aa54:	4680      	mov	r8, r0
 800aa56:	4689      	mov	r9, r1
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f47f ae3f 	bne.w	800a6dc <_strtod_l+0x49c>
 800aa5e:	2322      	movs	r3, #34	; 0x22
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	e63b      	b.n	800a6dc <_strtod_l+0x49c>
 800aa64:	f04f 32ff 	mov.w	r2, #4294967295
 800aa68:	fa02 f303 	lsl.w	r3, r2, r3
 800aa6c:	ea03 0808 	and.w	r8, r3, r8
 800aa70:	e6e8      	b.n	800a844 <_strtod_l+0x604>
 800aa72:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800aa76:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800aa7a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800aa7e:	36e2      	adds	r6, #226	; 0xe2
 800aa80:	fa01 f306 	lsl.w	r3, r1, r6
 800aa84:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800aa88:	e748      	b.n	800a91c <_strtod_l+0x6dc>
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800aa92:	e743      	b.n	800a91c <_strtod_l+0x6dc>
 800aa94:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa96:	4632      	mov	r2, r6
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f7ff f961 	bl	8009d60 <__lshift>
 800aa9e:	9016      	str	r0, [sp, #88]	; 0x58
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	f47f af6b 	bne.w	800a97c <_strtod_l+0x73c>
 800aaa6:	e60f      	b.n	800a6c8 <_strtod_l+0x488>
 800aaa8:	46ca      	mov	sl, r9
 800aaaa:	d171      	bne.n	800ab90 <_strtod_l+0x950>
 800aaac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aab2:	b352      	cbz	r2, 800ab0a <_strtod_l+0x8ca>
 800aab4:	4a33      	ldr	r2, [pc, #204]	; (800ab84 <_strtod_l+0x944>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d12a      	bne.n	800ab10 <_strtod_l+0x8d0>
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	4641      	mov	r1, r8
 800aabe:	b1fb      	cbz	r3, 800ab00 <_strtod_l+0x8c0>
 800aac0:	4b2e      	ldr	r3, [pc, #184]	; (800ab7c <_strtod_l+0x93c>)
 800aac2:	ea09 0303 	and.w	r3, r9, r3
 800aac6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aaca:	f04f 32ff 	mov.w	r2, #4294967295
 800aace:	d81a      	bhi.n	800ab06 <_strtod_l+0x8c6>
 800aad0:	0d1b      	lsrs	r3, r3, #20
 800aad2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aad6:	fa02 f303 	lsl.w	r3, r2, r3
 800aada:	4299      	cmp	r1, r3
 800aadc:	d118      	bne.n	800ab10 <_strtod_l+0x8d0>
 800aade:	4b2a      	ldr	r3, [pc, #168]	; (800ab88 <_strtod_l+0x948>)
 800aae0:	459a      	cmp	sl, r3
 800aae2:	d102      	bne.n	800aaea <_strtod_l+0x8aa>
 800aae4:	3101      	adds	r1, #1
 800aae6:	f43f adef 	beq.w	800a6c8 <_strtod_l+0x488>
 800aaea:	4b24      	ldr	r3, [pc, #144]	; (800ab7c <_strtod_l+0x93c>)
 800aaec:	ea0a 0303 	and.w	r3, sl, r3
 800aaf0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800aaf4:	f04f 0800 	mov.w	r8, #0
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1a2      	bne.n	800aa44 <_strtod_l+0x804>
 800aafe:	e5ed      	b.n	800a6dc <_strtod_l+0x49c>
 800ab00:	f04f 33ff 	mov.w	r3, #4294967295
 800ab04:	e7e9      	b.n	800aada <_strtod_l+0x89a>
 800ab06:	4613      	mov	r3, r2
 800ab08:	e7e7      	b.n	800aada <_strtod_l+0x89a>
 800ab0a:	ea53 0308 	orrs.w	r3, r3, r8
 800ab0e:	d08a      	beq.n	800aa26 <_strtod_l+0x7e6>
 800ab10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab12:	b1e3      	cbz	r3, 800ab4e <_strtod_l+0x90e>
 800ab14:	ea13 0f0a 	tst.w	r3, sl
 800ab18:	d0ee      	beq.n	800aaf8 <_strtod_l+0x8b8>
 800ab1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab1c:	9a04      	ldr	r2, [sp, #16]
 800ab1e:	4640      	mov	r0, r8
 800ab20:	4649      	mov	r1, r9
 800ab22:	b1c3      	cbz	r3, 800ab56 <_strtod_l+0x916>
 800ab24:	f7ff fb6f 	bl	800a206 <sulp>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	ec51 0b18 	vmov	r0, r1, d8
 800ab30:	f7f5 fbac 	bl	800028c <__adddf3>
 800ab34:	4680      	mov	r8, r0
 800ab36:	4689      	mov	r9, r1
 800ab38:	e7de      	b.n	800aaf8 <_strtod_l+0x8b8>
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab40:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ab44:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ab48:	f04f 38ff 	mov.w	r8, #4294967295
 800ab4c:	e7d4      	b.n	800aaf8 <_strtod_l+0x8b8>
 800ab4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab50:	ea13 0f08 	tst.w	r3, r8
 800ab54:	e7e0      	b.n	800ab18 <_strtod_l+0x8d8>
 800ab56:	f7ff fb56 	bl	800a206 <sulp>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	ec51 0b18 	vmov	r0, r1, d8
 800ab62:	f7f5 fb91 	bl	8000288 <__aeabi_dsub>
 800ab66:	2200      	movs	r2, #0
 800ab68:	2300      	movs	r3, #0
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	4689      	mov	r9, r1
 800ab6e:	f7f5 ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d0c0      	beq.n	800aaf8 <_strtod_l+0x8b8>
 800ab76:	e618      	b.n	800a7aa <_strtod_l+0x56a>
 800ab78:	fffffc02 	.word	0xfffffc02
 800ab7c:	7ff00000 	.word	0x7ff00000
 800ab80:	39500000 	.word	0x39500000
 800ab84:	000fffff 	.word	0x000fffff
 800ab88:	7fefffff 	.word	0x7fefffff
 800ab8c:	0800cd38 	.word	0x0800cd38
 800ab90:	4659      	mov	r1, fp
 800ab92:	4628      	mov	r0, r5
 800ab94:	f7ff fac0 	bl	800a118 <__ratio>
 800ab98:	ec57 6b10 	vmov	r6, r7, d0
 800ab9c:	ee10 0a10 	vmov	r0, s0
 800aba0:	2200      	movs	r2, #0
 800aba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aba6:	4639      	mov	r1, r7
 800aba8:	f7f5 ffa2 	bl	8000af0 <__aeabi_dcmple>
 800abac:	2800      	cmp	r0, #0
 800abae:	d071      	beq.n	800ac94 <_strtod_l+0xa54>
 800abb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d17c      	bne.n	800acb0 <_strtod_l+0xa70>
 800abb6:	f1b8 0f00 	cmp.w	r8, #0
 800abba:	d15a      	bne.n	800ac72 <_strtod_l+0xa32>
 800abbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d15d      	bne.n	800ac80 <_strtod_l+0xa40>
 800abc4:	4b90      	ldr	r3, [pc, #576]	; (800ae08 <_strtod_l+0xbc8>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	4630      	mov	r0, r6
 800abca:	4639      	mov	r1, r7
 800abcc:	f7f5 ff86 	bl	8000adc <__aeabi_dcmplt>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d15c      	bne.n	800ac8e <_strtod_l+0xa4e>
 800abd4:	4630      	mov	r0, r6
 800abd6:	4639      	mov	r1, r7
 800abd8:	4b8c      	ldr	r3, [pc, #560]	; (800ae0c <_strtod_l+0xbcc>)
 800abda:	2200      	movs	r2, #0
 800abdc:	f7f5 fd0c 	bl	80005f8 <__aeabi_dmul>
 800abe0:	4606      	mov	r6, r0
 800abe2:	460f      	mov	r7, r1
 800abe4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800abe8:	9606      	str	r6, [sp, #24]
 800abea:	9307      	str	r3, [sp, #28]
 800abec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abf0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800abf4:	4b86      	ldr	r3, [pc, #536]	; (800ae10 <_strtod_l+0xbd0>)
 800abf6:	ea0a 0303 	and.w	r3, sl, r3
 800abfa:	930d      	str	r3, [sp, #52]	; 0x34
 800abfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abfe:	4b85      	ldr	r3, [pc, #532]	; (800ae14 <_strtod_l+0xbd4>)
 800ac00:	429a      	cmp	r2, r3
 800ac02:	f040 8090 	bne.w	800ad26 <_strtod_l+0xae6>
 800ac06:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ac0a:	ec49 8b10 	vmov	d0, r8, r9
 800ac0e:	f7ff f9b9 	bl	8009f84 <__ulp>
 800ac12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac16:	ec51 0b10 	vmov	r0, r1, d0
 800ac1a:	f7f5 fced 	bl	80005f8 <__aeabi_dmul>
 800ac1e:	4642      	mov	r2, r8
 800ac20:	464b      	mov	r3, r9
 800ac22:	f7f5 fb33 	bl	800028c <__adddf3>
 800ac26:	460b      	mov	r3, r1
 800ac28:	4979      	ldr	r1, [pc, #484]	; (800ae10 <_strtod_l+0xbd0>)
 800ac2a:	4a7b      	ldr	r2, [pc, #492]	; (800ae18 <_strtod_l+0xbd8>)
 800ac2c:	4019      	ands	r1, r3
 800ac2e:	4291      	cmp	r1, r2
 800ac30:	4680      	mov	r8, r0
 800ac32:	d944      	bls.n	800acbe <_strtod_l+0xa7e>
 800ac34:	ee18 2a90 	vmov	r2, s17
 800ac38:	4b78      	ldr	r3, [pc, #480]	; (800ae1c <_strtod_l+0xbdc>)
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d104      	bne.n	800ac48 <_strtod_l+0xa08>
 800ac3e:	ee18 3a10 	vmov	r3, s16
 800ac42:	3301      	adds	r3, #1
 800ac44:	f43f ad40 	beq.w	800a6c8 <_strtod_l+0x488>
 800ac48:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ae1c <_strtod_l+0xbdc>
 800ac4c:	f04f 38ff 	mov.w	r8, #4294967295
 800ac50:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac52:	4620      	mov	r0, r4
 800ac54:	f7fe fe6a 	bl	800992c <_Bfree>
 800ac58:	9905      	ldr	r1, [sp, #20]
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f7fe fe66 	bl	800992c <_Bfree>
 800ac60:	4659      	mov	r1, fp
 800ac62:	4620      	mov	r0, r4
 800ac64:	f7fe fe62 	bl	800992c <_Bfree>
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f7fe fe5e 	bl	800992c <_Bfree>
 800ac70:	e609      	b.n	800a886 <_strtod_l+0x646>
 800ac72:	f1b8 0f01 	cmp.w	r8, #1
 800ac76:	d103      	bne.n	800ac80 <_strtod_l+0xa40>
 800ac78:	f1b9 0f00 	cmp.w	r9, #0
 800ac7c:	f43f ad95 	beq.w	800a7aa <_strtod_l+0x56a>
 800ac80:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800add8 <_strtod_l+0xb98>
 800ac84:	4f60      	ldr	r7, [pc, #384]	; (800ae08 <_strtod_l+0xbc8>)
 800ac86:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	e7ae      	b.n	800abec <_strtod_l+0x9ac>
 800ac8e:	4f5f      	ldr	r7, [pc, #380]	; (800ae0c <_strtod_l+0xbcc>)
 800ac90:	2600      	movs	r6, #0
 800ac92:	e7a7      	b.n	800abe4 <_strtod_l+0x9a4>
 800ac94:	4b5d      	ldr	r3, [pc, #372]	; (800ae0c <_strtod_l+0xbcc>)
 800ac96:	4630      	mov	r0, r6
 800ac98:	4639      	mov	r1, r7
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f7f5 fcac 	bl	80005f8 <__aeabi_dmul>
 800aca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aca2:	4606      	mov	r6, r0
 800aca4:	460f      	mov	r7, r1
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d09c      	beq.n	800abe4 <_strtod_l+0x9a4>
 800acaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800acae:	e79d      	b.n	800abec <_strtod_l+0x9ac>
 800acb0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ade0 <_strtod_l+0xba0>
 800acb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800acb8:	ec57 6b17 	vmov	r6, r7, d7
 800acbc:	e796      	b.n	800abec <_strtod_l+0x9ac>
 800acbe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800acc2:	9b04      	ldr	r3, [sp, #16]
 800acc4:	46ca      	mov	sl, r9
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1c2      	bne.n	800ac50 <_strtod_l+0xa10>
 800acca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acd0:	0d1b      	lsrs	r3, r3, #20
 800acd2:	051b      	lsls	r3, r3, #20
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d1bb      	bne.n	800ac50 <_strtod_l+0xa10>
 800acd8:	4630      	mov	r0, r6
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f5 ffec 	bl	8000cb8 <__aeabi_d2lz>
 800ace0:	f7f5 fc5c 	bl	800059c <__aeabi_l2d>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4630      	mov	r0, r6
 800acea:	4639      	mov	r1, r7
 800acec:	f7f5 facc 	bl	8000288 <__aeabi_dsub>
 800acf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acf2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acf6:	ea43 0308 	orr.w	r3, r3, r8
 800acfa:	4313      	orrs	r3, r2
 800acfc:	4606      	mov	r6, r0
 800acfe:	460f      	mov	r7, r1
 800ad00:	d054      	beq.n	800adac <_strtod_l+0xb6c>
 800ad02:	a339      	add	r3, pc, #228	; (adr r3, 800ade8 <_strtod_l+0xba8>)
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	f7f5 fee8 	bl	8000adc <__aeabi_dcmplt>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	f47f ace5 	bne.w	800a6dc <_strtod_l+0x49c>
 800ad12:	a337      	add	r3, pc, #220	; (adr r3, 800adf0 <_strtod_l+0xbb0>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	4630      	mov	r0, r6
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	f7f5 fefc 	bl	8000b18 <__aeabi_dcmpgt>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d095      	beq.n	800ac50 <_strtod_l+0xa10>
 800ad24:	e4da      	b.n	800a6dc <_strtod_l+0x49c>
 800ad26:	9b04      	ldr	r3, [sp, #16]
 800ad28:	b333      	cbz	r3, 800ad78 <_strtod_l+0xb38>
 800ad2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad30:	d822      	bhi.n	800ad78 <_strtod_l+0xb38>
 800ad32:	a331      	add	r3, pc, #196	; (adr r3, 800adf8 <_strtod_l+0xbb8>)
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	4630      	mov	r0, r6
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	f7f5 fed8 	bl	8000af0 <__aeabi_dcmple>
 800ad40:	b1a0      	cbz	r0, 800ad6c <_strtod_l+0xb2c>
 800ad42:	4639      	mov	r1, r7
 800ad44:	4630      	mov	r0, r6
 800ad46:	f7f5 ff2f 	bl	8000ba8 <__aeabi_d2uiz>
 800ad4a:	2801      	cmp	r0, #1
 800ad4c:	bf38      	it	cc
 800ad4e:	2001      	movcc	r0, #1
 800ad50:	f7f5 fbd8 	bl	8000504 <__aeabi_ui2d>
 800ad54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad56:	4606      	mov	r6, r0
 800ad58:	460f      	mov	r7, r1
 800ad5a:	bb23      	cbnz	r3, 800ada6 <_strtod_l+0xb66>
 800ad5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad60:	9010      	str	r0, [sp, #64]	; 0x40
 800ad62:	9311      	str	r3, [sp, #68]	; 0x44
 800ad64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ad6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad74:	1a9b      	subs	r3, r3, r2
 800ad76:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad7c:	eeb0 0a48 	vmov.f32	s0, s16
 800ad80:	eef0 0a68 	vmov.f32	s1, s17
 800ad84:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ad88:	f7ff f8fc 	bl	8009f84 <__ulp>
 800ad8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad90:	ec53 2b10 	vmov	r2, r3, d0
 800ad94:	f7f5 fc30 	bl	80005f8 <__aeabi_dmul>
 800ad98:	ec53 2b18 	vmov	r2, r3, d8
 800ad9c:	f7f5 fa76 	bl	800028c <__adddf3>
 800ada0:	4680      	mov	r8, r0
 800ada2:	4689      	mov	r9, r1
 800ada4:	e78d      	b.n	800acc2 <_strtod_l+0xa82>
 800ada6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800adaa:	e7db      	b.n	800ad64 <_strtod_l+0xb24>
 800adac:	a314      	add	r3, pc, #80	; (adr r3, 800ae00 <_strtod_l+0xbc0>)
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	f7f5 fe93 	bl	8000adc <__aeabi_dcmplt>
 800adb6:	e7b3      	b.n	800ad20 <_strtod_l+0xae0>
 800adb8:	2300      	movs	r3, #0
 800adba:	930a      	str	r3, [sp, #40]	; 0x28
 800adbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800adbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adc0:	6013      	str	r3, [r2, #0]
 800adc2:	f7ff ba7c 	b.w	800a2be <_strtod_l+0x7e>
 800adc6:	2a65      	cmp	r2, #101	; 0x65
 800adc8:	f43f ab75 	beq.w	800a4b6 <_strtod_l+0x276>
 800adcc:	2a45      	cmp	r2, #69	; 0x45
 800adce:	f43f ab72 	beq.w	800a4b6 <_strtod_l+0x276>
 800add2:	2301      	movs	r3, #1
 800add4:	f7ff bbaa 	b.w	800a52c <_strtod_l+0x2ec>
 800add8:	00000000 	.word	0x00000000
 800addc:	bff00000 	.word	0xbff00000
 800ade0:	00000000 	.word	0x00000000
 800ade4:	3ff00000 	.word	0x3ff00000
 800ade8:	94a03595 	.word	0x94a03595
 800adec:	3fdfffff 	.word	0x3fdfffff
 800adf0:	35afe535 	.word	0x35afe535
 800adf4:	3fe00000 	.word	0x3fe00000
 800adf8:	ffc00000 	.word	0xffc00000
 800adfc:	41dfffff 	.word	0x41dfffff
 800ae00:	94a03595 	.word	0x94a03595
 800ae04:	3fcfffff 	.word	0x3fcfffff
 800ae08:	3ff00000 	.word	0x3ff00000
 800ae0c:	3fe00000 	.word	0x3fe00000
 800ae10:	7ff00000 	.word	0x7ff00000
 800ae14:	7fe00000 	.word	0x7fe00000
 800ae18:	7c9fffff 	.word	0x7c9fffff
 800ae1c:	7fefffff 	.word	0x7fefffff

0800ae20 <_strtod_r>:
 800ae20:	4b01      	ldr	r3, [pc, #4]	; (800ae28 <_strtod_r+0x8>)
 800ae22:	f7ff ba0d 	b.w	800a240 <_strtod_l>
 800ae26:	bf00      	nop
 800ae28:	20000080 	.word	0x20000080

0800ae2c <_strtol_l.constprop.0>:
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae32:	d001      	beq.n	800ae38 <_strtol_l.constprop.0+0xc>
 800ae34:	2b24      	cmp	r3, #36	; 0x24
 800ae36:	d906      	bls.n	800ae46 <_strtol_l.constprop.0+0x1a>
 800ae38:	f7fd fd8a 	bl	8008950 <__errno>
 800ae3c:	2316      	movs	r3, #22
 800ae3e:	6003      	str	r3, [r0, #0]
 800ae40:	2000      	movs	r0, #0
 800ae42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800af2c <_strtol_l.constprop.0+0x100>
 800ae4a:	460d      	mov	r5, r1
 800ae4c:	462e      	mov	r6, r5
 800ae4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae52:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ae56:	f017 0708 	ands.w	r7, r7, #8
 800ae5a:	d1f7      	bne.n	800ae4c <_strtol_l.constprop.0+0x20>
 800ae5c:	2c2d      	cmp	r4, #45	; 0x2d
 800ae5e:	d132      	bne.n	800aec6 <_strtol_l.constprop.0+0x9a>
 800ae60:	782c      	ldrb	r4, [r5, #0]
 800ae62:	2701      	movs	r7, #1
 800ae64:	1cb5      	adds	r5, r6, #2
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d05b      	beq.n	800af22 <_strtol_l.constprop.0+0xf6>
 800ae6a:	2b10      	cmp	r3, #16
 800ae6c:	d109      	bne.n	800ae82 <_strtol_l.constprop.0+0x56>
 800ae6e:	2c30      	cmp	r4, #48	; 0x30
 800ae70:	d107      	bne.n	800ae82 <_strtol_l.constprop.0+0x56>
 800ae72:	782c      	ldrb	r4, [r5, #0]
 800ae74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ae78:	2c58      	cmp	r4, #88	; 0x58
 800ae7a:	d14d      	bne.n	800af18 <_strtol_l.constprop.0+0xec>
 800ae7c:	786c      	ldrb	r4, [r5, #1]
 800ae7e:	2310      	movs	r3, #16
 800ae80:	3502      	adds	r5, #2
 800ae82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ae86:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae8a:	f04f 0e00 	mov.w	lr, #0
 800ae8e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ae92:	4676      	mov	r6, lr
 800ae94:	fb03 8a19 	mls	sl, r3, r9, r8
 800ae98:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ae9c:	f1bc 0f09 	cmp.w	ip, #9
 800aea0:	d816      	bhi.n	800aed0 <_strtol_l.constprop.0+0xa4>
 800aea2:	4664      	mov	r4, ip
 800aea4:	42a3      	cmp	r3, r4
 800aea6:	dd24      	ble.n	800aef2 <_strtol_l.constprop.0+0xc6>
 800aea8:	f1be 3fff 	cmp.w	lr, #4294967295
 800aeac:	d008      	beq.n	800aec0 <_strtol_l.constprop.0+0x94>
 800aeae:	45b1      	cmp	r9, r6
 800aeb0:	d31c      	bcc.n	800aeec <_strtol_l.constprop.0+0xc0>
 800aeb2:	d101      	bne.n	800aeb8 <_strtol_l.constprop.0+0x8c>
 800aeb4:	45a2      	cmp	sl, r4
 800aeb6:	db19      	blt.n	800aeec <_strtol_l.constprop.0+0xc0>
 800aeb8:	fb06 4603 	mla	r6, r6, r3, r4
 800aebc:	f04f 0e01 	mov.w	lr, #1
 800aec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aec4:	e7e8      	b.n	800ae98 <_strtol_l.constprop.0+0x6c>
 800aec6:	2c2b      	cmp	r4, #43	; 0x2b
 800aec8:	bf04      	itt	eq
 800aeca:	782c      	ldrbeq	r4, [r5, #0]
 800aecc:	1cb5      	addeq	r5, r6, #2
 800aece:	e7ca      	b.n	800ae66 <_strtol_l.constprop.0+0x3a>
 800aed0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aed4:	f1bc 0f19 	cmp.w	ip, #25
 800aed8:	d801      	bhi.n	800aede <_strtol_l.constprop.0+0xb2>
 800aeda:	3c37      	subs	r4, #55	; 0x37
 800aedc:	e7e2      	b.n	800aea4 <_strtol_l.constprop.0+0x78>
 800aede:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aee2:	f1bc 0f19 	cmp.w	ip, #25
 800aee6:	d804      	bhi.n	800aef2 <_strtol_l.constprop.0+0xc6>
 800aee8:	3c57      	subs	r4, #87	; 0x57
 800aeea:	e7db      	b.n	800aea4 <_strtol_l.constprop.0+0x78>
 800aeec:	f04f 3eff 	mov.w	lr, #4294967295
 800aef0:	e7e6      	b.n	800aec0 <_strtol_l.constprop.0+0x94>
 800aef2:	f1be 3fff 	cmp.w	lr, #4294967295
 800aef6:	d105      	bne.n	800af04 <_strtol_l.constprop.0+0xd8>
 800aef8:	2322      	movs	r3, #34	; 0x22
 800aefa:	6003      	str	r3, [r0, #0]
 800aefc:	4646      	mov	r6, r8
 800aefe:	b942      	cbnz	r2, 800af12 <_strtol_l.constprop.0+0xe6>
 800af00:	4630      	mov	r0, r6
 800af02:	e79e      	b.n	800ae42 <_strtol_l.constprop.0+0x16>
 800af04:	b107      	cbz	r7, 800af08 <_strtol_l.constprop.0+0xdc>
 800af06:	4276      	negs	r6, r6
 800af08:	2a00      	cmp	r2, #0
 800af0a:	d0f9      	beq.n	800af00 <_strtol_l.constprop.0+0xd4>
 800af0c:	f1be 0f00 	cmp.w	lr, #0
 800af10:	d000      	beq.n	800af14 <_strtol_l.constprop.0+0xe8>
 800af12:	1e69      	subs	r1, r5, #1
 800af14:	6011      	str	r1, [r2, #0]
 800af16:	e7f3      	b.n	800af00 <_strtol_l.constprop.0+0xd4>
 800af18:	2430      	movs	r4, #48	; 0x30
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1b1      	bne.n	800ae82 <_strtol_l.constprop.0+0x56>
 800af1e:	2308      	movs	r3, #8
 800af20:	e7af      	b.n	800ae82 <_strtol_l.constprop.0+0x56>
 800af22:	2c30      	cmp	r4, #48	; 0x30
 800af24:	d0a5      	beq.n	800ae72 <_strtol_l.constprop.0+0x46>
 800af26:	230a      	movs	r3, #10
 800af28:	e7ab      	b.n	800ae82 <_strtol_l.constprop.0+0x56>
 800af2a:	bf00      	nop
 800af2c:	0800c9f1 	.word	0x0800c9f1

0800af30 <_strtol_r>:
 800af30:	f7ff bf7c 	b.w	800ae2c <_strtol_l.constprop.0>

0800af34 <__ssputs_r>:
 800af34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af38:	688e      	ldr	r6, [r1, #8]
 800af3a:	461f      	mov	r7, r3
 800af3c:	42be      	cmp	r6, r7
 800af3e:	680b      	ldr	r3, [r1, #0]
 800af40:	4682      	mov	sl, r0
 800af42:	460c      	mov	r4, r1
 800af44:	4690      	mov	r8, r2
 800af46:	d82c      	bhi.n	800afa2 <__ssputs_r+0x6e>
 800af48:	898a      	ldrh	r2, [r1, #12]
 800af4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af4e:	d026      	beq.n	800af9e <__ssputs_r+0x6a>
 800af50:	6965      	ldr	r5, [r4, #20]
 800af52:	6909      	ldr	r1, [r1, #16]
 800af54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af58:	eba3 0901 	sub.w	r9, r3, r1
 800af5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af60:	1c7b      	adds	r3, r7, #1
 800af62:	444b      	add	r3, r9
 800af64:	106d      	asrs	r5, r5, #1
 800af66:	429d      	cmp	r5, r3
 800af68:	bf38      	it	cc
 800af6a:	461d      	movcc	r5, r3
 800af6c:	0553      	lsls	r3, r2, #21
 800af6e:	d527      	bpl.n	800afc0 <__ssputs_r+0x8c>
 800af70:	4629      	mov	r1, r5
 800af72:	f7fe fc0f 	bl	8009794 <_malloc_r>
 800af76:	4606      	mov	r6, r0
 800af78:	b360      	cbz	r0, 800afd4 <__ssputs_r+0xa0>
 800af7a:	6921      	ldr	r1, [r4, #16]
 800af7c:	464a      	mov	r2, r9
 800af7e:	f000 fdaf 	bl	800bae0 <memcpy>
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af8c:	81a3      	strh	r3, [r4, #12]
 800af8e:	6126      	str	r6, [r4, #16]
 800af90:	6165      	str	r5, [r4, #20]
 800af92:	444e      	add	r6, r9
 800af94:	eba5 0509 	sub.w	r5, r5, r9
 800af98:	6026      	str	r6, [r4, #0]
 800af9a:	60a5      	str	r5, [r4, #8]
 800af9c:	463e      	mov	r6, r7
 800af9e:	42be      	cmp	r6, r7
 800afa0:	d900      	bls.n	800afa4 <__ssputs_r+0x70>
 800afa2:	463e      	mov	r6, r7
 800afa4:	6820      	ldr	r0, [r4, #0]
 800afa6:	4632      	mov	r2, r6
 800afa8:	4641      	mov	r1, r8
 800afaa:	f000 fd5c 	bl	800ba66 <memmove>
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	1b9b      	subs	r3, r3, r6
 800afb2:	60a3      	str	r3, [r4, #8]
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	4433      	add	r3, r6
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	2000      	movs	r0, #0
 800afbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc0:	462a      	mov	r2, r5
 800afc2:	f001 f942 	bl	800c24a <_realloc_r>
 800afc6:	4606      	mov	r6, r0
 800afc8:	2800      	cmp	r0, #0
 800afca:	d1e0      	bne.n	800af8e <__ssputs_r+0x5a>
 800afcc:	6921      	ldr	r1, [r4, #16]
 800afce:	4650      	mov	r0, sl
 800afd0:	f7fe fb6c 	bl	80096ac <_free_r>
 800afd4:	230c      	movs	r3, #12
 800afd6:	f8ca 3000 	str.w	r3, [sl]
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	f04f 30ff 	mov.w	r0, #4294967295
 800afe6:	e7e9      	b.n	800afbc <__ssputs_r+0x88>

0800afe8 <_svfiprintf_r>:
 800afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afec:	4698      	mov	r8, r3
 800afee:	898b      	ldrh	r3, [r1, #12]
 800aff0:	061b      	lsls	r3, r3, #24
 800aff2:	b09d      	sub	sp, #116	; 0x74
 800aff4:	4607      	mov	r7, r0
 800aff6:	460d      	mov	r5, r1
 800aff8:	4614      	mov	r4, r2
 800affa:	d50e      	bpl.n	800b01a <_svfiprintf_r+0x32>
 800affc:	690b      	ldr	r3, [r1, #16]
 800affe:	b963      	cbnz	r3, 800b01a <_svfiprintf_r+0x32>
 800b000:	2140      	movs	r1, #64	; 0x40
 800b002:	f7fe fbc7 	bl	8009794 <_malloc_r>
 800b006:	6028      	str	r0, [r5, #0]
 800b008:	6128      	str	r0, [r5, #16]
 800b00a:	b920      	cbnz	r0, 800b016 <_svfiprintf_r+0x2e>
 800b00c:	230c      	movs	r3, #12
 800b00e:	603b      	str	r3, [r7, #0]
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	e0d0      	b.n	800b1b8 <_svfiprintf_r+0x1d0>
 800b016:	2340      	movs	r3, #64	; 0x40
 800b018:	616b      	str	r3, [r5, #20]
 800b01a:	2300      	movs	r3, #0
 800b01c:	9309      	str	r3, [sp, #36]	; 0x24
 800b01e:	2320      	movs	r3, #32
 800b020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b024:	f8cd 800c 	str.w	r8, [sp, #12]
 800b028:	2330      	movs	r3, #48	; 0x30
 800b02a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b1d0 <_svfiprintf_r+0x1e8>
 800b02e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b032:	f04f 0901 	mov.w	r9, #1
 800b036:	4623      	mov	r3, r4
 800b038:	469a      	mov	sl, r3
 800b03a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b03e:	b10a      	cbz	r2, 800b044 <_svfiprintf_r+0x5c>
 800b040:	2a25      	cmp	r2, #37	; 0x25
 800b042:	d1f9      	bne.n	800b038 <_svfiprintf_r+0x50>
 800b044:	ebba 0b04 	subs.w	fp, sl, r4
 800b048:	d00b      	beq.n	800b062 <_svfiprintf_r+0x7a>
 800b04a:	465b      	mov	r3, fp
 800b04c:	4622      	mov	r2, r4
 800b04e:	4629      	mov	r1, r5
 800b050:	4638      	mov	r0, r7
 800b052:	f7ff ff6f 	bl	800af34 <__ssputs_r>
 800b056:	3001      	adds	r0, #1
 800b058:	f000 80a9 	beq.w	800b1ae <_svfiprintf_r+0x1c6>
 800b05c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b05e:	445a      	add	r2, fp
 800b060:	9209      	str	r2, [sp, #36]	; 0x24
 800b062:	f89a 3000 	ldrb.w	r3, [sl]
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 80a1 	beq.w	800b1ae <_svfiprintf_r+0x1c6>
 800b06c:	2300      	movs	r3, #0
 800b06e:	f04f 32ff 	mov.w	r2, #4294967295
 800b072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b076:	f10a 0a01 	add.w	sl, sl, #1
 800b07a:	9304      	str	r3, [sp, #16]
 800b07c:	9307      	str	r3, [sp, #28]
 800b07e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b082:	931a      	str	r3, [sp, #104]	; 0x68
 800b084:	4654      	mov	r4, sl
 800b086:	2205      	movs	r2, #5
 800b088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b08c:	4850      	ldr	r0, [pc, #320]	; (800b1d0 <_svfiprintf_r+0x1e8>)
 800b08e:	f7f5 f89f 	bl	80001d0 <memchr>
 800b092:	9a04      	ldr	r2, [sp, #16]
 800b094:	b9d8      	cbnz	r0, 800b0ce <_svfiprintf_r+0xe6>
 800b096:	06d0      	lsls	r0, r2, #27
 800b098:	bf44      	itt	mi
 800b09a:	2320      	movmi	r3, #32
 800b09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a0:	0711      	lsls	r1, r2, #28
 800b0a2:	bf44      	itt	mi
 800b0a4:	232b      	movmi	r3, #43	; 0x2b
 800b0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b0b0:	d015      	beq.n	800b0de <_svfiprintf_r+0xf6>
 800b0b2:	9a07      	ldr	r2, [sp, #28]
 800b0b4:	4654      	mov	r4, sl
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	f04f 0c0a 	mov.w	ip, #10
 800b0bc:	4621      	mov	r1, r4
 800b0be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0c2:	3b30      	subs	r3, #48	; 0x30
 800b0c4:	2b09      	cmp	r3, #9
 800b0c6:	d94d      	bls.n	800b164 <_svfiprintf_r+0x17c>
 800b0c8:	b1b0      	cbz	r0, 800b0f8 <_svfiprintf_r+0x110>
 800b0ca:	9207      	str	r2, [sp, #28]
 800b0cc:	e014      	b.n	800b0f8 <_svfiprintf_r+0x110>
 800b0ce:	eba0 0308 	sub.w	r3, r0, r8
 800b0d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	9304      	str	r3, [sp, #16]
 800b0da:	46a2      	mov	sl, r4
 800b0dc:	e7d2      	b.n	800b084 <_svfiprintf_r+0x9c>
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	1d19      	adds	r1, r3, #4
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	9103      	str	r1, [sp, #12]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	bfbb      	ittet	lt
 800b0ea:	425b      	neglt	r3, r3
 800b0ec:	f042 0202 	orrlt.w	r2, r2, #2
 800b0f0:	9307      	strge	r3, [sp, #28]
 800b0f2:	9307      	strlt	r3, [sp, #28]
 800b0f4:	bfb8      	it	lt
 800b0f6:	9204      	strlt	r2, [sp, #16]
 800b0f8:	7823      	ldrb	r3, [r4, #0]
 800b0fa:	2b2e      	cmp	r3, #46	; 0x2e
 800b0fc:	d10c      	bne.n	800b118 <_svfiprintf_r+0x130>
 800b0fe:	7863      	ldrb	r3, [r4, #1]
 800b100:	2b2a      	cmp	r3, #42	; 0x2a
 800b102:	d134      	bne.n	800b16e <_svfiprintf_r+0x186>
 800b104:	9b03      	ldr	r3, [sp, #12]
 800b106:	1d1a      	adds	r2, r3, #4
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	9203      	str	r2, [sp, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bfb8      	it	lt
 800b110:	f04f 33ff 	movlt.w	r3, #4294967295
 800b114:	3402      	adds	r4, #2
 800b116:	9305      	str	r3, [sp, #20]
 800b118:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b1e0 <_svfiprintf_r+0x1f8>
 800b11c:	7821      	ldrb	r1, [r4, #0]
 800b11e:	2203      	movs	r2, #3
 800b120:	4650      	mov	r0, sl
 800b122:	f7f5 f855 	bl	80001d0 <memchr>
 800b126:	b138      	cbz	r0, 800b138 <_svfiprintf_r+0x150>
 800b128:	9b04      	ldr	r3, [sp, #16]
 800b12a:	eba0 000a 	sub.w	r0, r0, sl
 800b12e:	2240      	movs	r2, #64	; 0x40
 800b130:	4082      	lsls	r2, r0
 800b132:	4313      	orrs	r3, r2
 800b134:	3401      	adds	r4, #1
 800b136:	9304      	str	r3, [sp, #16]
 800b138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13c:	4825      	ldr	r0, [pc, #148]	; (800b1d4 <_svfiprintf_r+0x1ec>)
 800b13e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b142:	2206      	movs	r2, #6
 800b144:	f7f5 f844 	bl	80001d0 <memchr>
 800b148:	2800      	cmp	r0, #0
 800b14a:	d038      	beq.n	800b1be <_svfiprintf_r+0x1d6>
 800b14c:	4b22      	ldr	r3, [pc, #136]	; (800b1d8 <_svfiprintf_r+0x1f0>)
 800b14e:	bb1b      	cbnz	r3, 800b198 <_svfiprintf_r+0x1b0>
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	3307      	adds	r3, #7
 800b154:	f023 0307 	bic.w	r3, r3, #7
 800b158:	3308      	adds	r3, #8
 800b15a:	9303      	str	r3, [sp, #12]
 800b15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15e:	4433      	add	r3, r6
 800b160:	9309      	str	r3, [sp, #36]	; 0x24
 800b162:	e768      	b.n	800b036 <_svfiprintf_r+0x4e>
 800b164:	fb0c 3202 	mla	r2, ip, r2, r3
 800b168:	460c      	mov	r4, r1
 800b16a:	2001      	movs	r0, #1
 800b16c:	e7a6      	b.n	800b0bc <_svfiprintf_r+0xd4>
 800b16e:	2300      	movs	r3, #0
 800b170:	3401      	adds	r4, #1
 800b172:	9305      	str	r3, [sp, #20]
 800b174:	4619      	mov	r1, r3
 800b176:	f04f 0c0a 	mov.w	ip, #10
 800b17a:	4620      	mov	r0, r4
 800b17c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b180:	3a30      	subs	r2, #48	; 0x30
 800b182:	2a09      	cmp	r2, #9
 800b184:	d903      	bls.n	800b18e <_svfiprintf_r+0x1a6>
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0c6      	beq.n	800b118 <_svfiprintf_r+0x130>
 800b18a:	9105      	str	r1, [sp, #20]
 800b18c:	e7c4      	b.n	800b118 <_svfiprintf_r+0x130>
 800b18e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b192:	4604      	mov	r4, r0
 800b194:	2301      	movs	r3, #1
 800b196:	e7f0      	b.n	800b17a <_svfiprintf_r+0x192>
 800b198:	ab03      	add	r3, sp, #12
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	462a      	mov	r2, r5
 800b19e:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <_svfiprintf_r+0x1f4>)
 800b1a0:	a904      	add	r1, sp, #16
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	f7fc fc58 	bl	8007a58 <_printf_float>
 800b1a8:	1c42      	adds	r2, r0, #1
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	d1d6      	bne.n	800b15c <_svfiprintf_r+0x174>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	065b      	lsls	r3, r3, #25
 800b1b2:	f53f af2d 	bmi.w	800b010 <_svfiprintf_r+0x28>
 800b1b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b8:	b01d      	add	sp, #116	; 0x74
 800b1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1be:	ab03      	add	r3, sp, #12
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	4b05      	ldr	r3, [pc, #20]	; (800b1dc <_svfiprintf_r+0x1f4>)
 800b1c6:	a904      	add	r1, sp, #16
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	f7fc fee9 	bl	8007fa0 <_printf_i>
 800b1ce:	e7eb      	b.n	800b1a8 <_svfiprintf_r+0x1c0>
 800b1d0:	0800cd60 	.word	0x0800cd60
 800b1d4:	0800cd6a 	.word	0x0800cd6a
 800b1d8:	08007a59 	.word	0x08007a59
 800b1dc:	0800af35 	.word	0x0800af35
 800b1e0:	0800cd66 	.word	0x0800cd66

0800b1e4 <_sungetc_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	1c4b      	adds	r3, r1, #1
 800b1e8:	4614      	mov	r4, r2
 800b1ea:	d103      	bne.n	800b1f4 <_sungetc_r+0x10>
 800b1ec:	f04f 35ff 	mov.w	r5, #4294967295
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	bd38      	pop	{r3, r4, r5, pc}
 800b1f4:	8993      	ldrh	r3, [r2, #12]
 800b1f6:	f023 0320 	bic.w	r3, r3, #32
 800b1fa:	8193      	strh	r3, [r2, #12]
 800b1fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1fe:	6852      	ldr	r2, [r2, #4]
 800b200:	b2cd      	uxtb	r5, r1
 800b202:	b18b      	cbz	r3, 800b228 <_sungetc_r+0x44>
 800b204:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b206:	4293      	cmp	r3, r2
 800b208:	dd08      	ble.n	800b21c <_sungetc_r+0x38>
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	1e5a      	subs	r2, r3, #1
 800b20e:	6022      	str	r2, [r4, #0]
 800b210:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b214:	6863      	ldr	r3, [r4, #4]
 800b216:	3301      	adds	r3, #1
 800b218:	6063      	str	r3, [r4, #4]
 800b21a:	e7e9      	b.n	800b1f0 <_sungetc_r+0xc>
 800b21c:	4621      	mov	r1, r4
 800b21e:	f000 fbe8 	bl	800b9f2 <__submore>
 800b222:	2800      	cmp	r0, #0
 800b224:	d0f1      	beq.n	800b20a <_sungetc_r+0x26>
 800b226:	e7e1      	b.n	800b1ec <_sungetc_r+0x8>
 800b228:	6921      	ldr	r1, [r4, #16]
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	b151      	cbz	r1, 800b244 <_sungetc_r+0x60>
 800b22e:	4299      	cmp	r1, r3
 800b230:	d208      	bcs.n	800b244 <_sungetc_r+0x60>
 800b232:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b236:	42a9      	cmp	r1, r5
 800b238:	d104      	bne.n	800b244 <_sungetc_r+0x60>
 800b23a:	3b01      	subs	r3, #1
 800b23c:	3201      	adds	r2, #1
 800b23e:	6023      	str	r3, [r4, #0]
 800b240:	6062      	str	r2, [r4, #4]
 800b242:	e7d5      	b.n	800b1f0 <_sungetc_r+0xc>
 800b244:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b24c:	6363      	str	r3, [r4, #52]	; 0x34
 800b24e:	2303      	movs	r3, #3
 800b250:	63a3      	str	r3, [r4, #56]	; 0x38
 800b252:	4623      	mov	r3, r4
 800b254:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	2301      	movs	r3, #1
 800b25c:	e7dc      	b.n	800b218 <_sungetc_r+0x34>

0800b25e <__ssrefill_r>:
 800b25e:	b510      	push	{r4, lr}
 800b260:	460c      	mov	r4, r1
 800b262:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b264:	b169      	cbz	r1, 800b282 <__ssrefill_r+0x24>
 800b266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b26a:	4299      	cmp	r1, r3
 800b26c:	d001      	beq.n	800b272 <__ssrefill_r+0x14>
 800b26e:	f7fe fa1d 	bl	80096ac <_free_r>
 800b272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b274:	6063      	str	r3, [r4, #4]
 800b276:	2000      	movs	r0, #0
 800b278:	6360      	str	r0, [r4, #52]	; 0x34
 800b27a:	b113      	cbz	r3, 800b282 <__ssrefill_r+0x24>
 800b27c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b27e:	6023      	str	r3, [r4, #0]
 800b280:	bd10      	pop	{r4, pc}
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	2300      	movs	r3, #0
 800b288:	6063      	str	r3, [r4, #4]
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	f043 0320 	orr.w	r3, r3, #32
 800b290:	81a3      	strh	r3, [r4, #12]
 800b292:	f04f 30ff 	mov.w	r0, #4294967295
 800b296:	e7f3      	b.n	800b280 <__ssrefill_r+0x22>

0800b298 <__ssvfiscanf_r>:
 800b298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29c:	460c      	mov	r4, r1
 800b29e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b2a8:	49a6      	ldr	r1, [pc, #664]	; (800b544 <__ssvfiscanf_r+0x2ac>)
 800b2aa:	91a0      	str	r1, [sp, #640]	; 0x280
 800b2ac:	f10d 0804 	add.w	r8, sp, #4
 800b2b0:	49a5      	ldr	r1, [pc, #660]	; (800b548 <__ssvfiscanf_r+0x2b0>)
 800b2b2:	4fa6      	ldr	r7, [pc, #664]	; (800b54c <__ssvfiscanf_r+0x2b4>)
 800b2b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b550 <__ssvfiscanf_r+0x2b8>
 800b2b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b2bc:	4606      	mov	r6, r0
 800b2be:	91a1      	str	r1, [sp, #644]	; 0x284
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	7813      	ldrb	r3, [r2, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 815a 	beq.w	800b57e <__ssvfiscanf_r+0x2e6>
 800b2ca:	5cf9      	ldrb	r1, [r7, r3]
 800b2cc:	f011 0108 	ands.w	r1, r1, #8
 800b2d0:	f102 0501 	add.w	r5, r2, #1
 800b2d4:	d019      	beq.n	800b30a <__ssvfiscanf_r+0x72>
 800b2d6:	6863      	ldr	r3, [r4, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	dd0f      	ble.n	800b2fc <__ssvfiscanf_r+0x64>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	781a      	ldrb	r2, [r3, #0]
 800b2e0:	5cba      	ldrb	r2, [r7, r2]
 800b2e2:	0712      	lsls	r2, r2, #28
 800b2e4:	d401      	bmi.n	800b2ea <__ssvfiscanf_r+0x52>
 800b2e6:	462a      	mov	r2, r5
 800b2e8:	e7eb      	b.n	800b2c2 <__ssvfiscanf_r+0x2a>
 800b2ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2ec:	3201      	adds	r2, #1
 800b2ee:	9245      	str	r2, [sp, #276]	; 0x114
 800b2f0:	6862      	ldr	r2, [r4, #4]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	3a01      	subs	r2, #1
 800b2f6:	6062      	str	r2, [r4, #4]
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	e7ec      	b.n	800b2d6 <__ssvfiscanf_r+0x3e>
 800b2fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2fe:	4621      	mov	r1, r4
 800b300:	4630      	mov	r0, r6
 800b302:	4798      	blx	r3
 800b304:	2800      	cmp	r0, #0
 800b306:	d0e9      	beq.n	800b2dc <__ssvfiscanf_r+0x44>
 800b308:	e7ed      	b.n	800b2e6 <__ssvfiscanf_r+0x4e>
 800b30a:	2b25      	cmp	r3, #37	; 0x25
 800b30c:	d012      	beq.n	800b334 <__ssvfiscanf_r+0x9c>
 800b30e:	469a      	mov	sl, r3
 800b310:	6863      	ldr	r3, [r4, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	f340 8091 	ble.w	800b43a <__ssvfiscanf_r+0x1a2>
 800b318:	6822      	ldr	r2, [r4, #0]
 800b31a:	7813      	ldrb	r3, [r2, #0]
 800b31c:	4553      	cmp	r3, sl
 800b31e:	f040 812e 	bne.w	800b57e <__ssvfiscanf_r+0x2e6>
 800b322:	6863      	ldr	r3, [r4, #4]
 800b324:	3b01      	subs	r3, #1
 800b326:	6063      	str	r3, [r4, #4]
 800b328:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b32a:	3201      	adds	r2, #1
 800b32c:	3301      	adds	r3, #1
 800b32e:	6022      	str	r2, [r4, #0]
 800b330:	9345      	str	r3, [sp, #276]	; 0x114
 800b332:	e7d8      	b.n	800b2e6 <__ssvfiscanf_r+0x4e>
 800b334:	9141      	str	r1, [sp, #260]	; 0x104
 800b336:	9143      	str	r1, [sp, #268]	; 0x10c
 800b338:	7853      	ldrb	r3, [r2, #1]
 800b33a:	2b2a      	cmp	r3, #42	; 0x2a
 800b33c:	bf02      	ittt	eq
 800b33e:	2310      	moveq	r3, #16
 800b340:	1c95      	addeq	r5, r2, #2
 800b342:	9341      	streq	r3, [sp, #260]	; 0x104
 800b344:	220a      	movs	r2, #10
 800b346:	46aa      	mov	sl, r5
 800b348:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b34c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b350:	2b09      	cmp	r3, #9
 800b352:	d91c      	bls.n	800b38e <__ssvfiscanf_r+0xf6>
 800b354:	487e      	ldr	r0, [pc, #504]	; (800b550 <__ssvfiscanf_r+0x2b8>)
 800b356:	2203      	movs	r2, #3
 800b358:	f7f4 ff3a 	bl	80001d0 <memchr>
 800b35c:	b138      	cbz	r0, 800b36e <__ssvfiscanf_r+0xd6>
 800b35e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b360:	eba0 0009 	sub.w	r0, r0, r9
 800b364:	2301      	movs	r3, #1
 800b366:	4083      	lsls	r3, r0
 800b368:	4313      	orrs	r3, r2
 800b36a:	9341      	str	r3, [sp, #260]	; 0x104
 800b36c:	4655      	mov	r5, sl
 800b36e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b372:	2b78      	cmp	r3, #120	; 0x78
 800b374:	d806      	bhi.n	800b384 <__ssvfiscanf_r+0xec>
 800b376:	2b57      	cmp	r3, #87	; 0x57
 800b378:	d810      	bhi.n	800b39c <__ssvfiscanf_r+0x104>
 800b37a:	2b25      	cmp	r3, #37	; 0x25
 800b37c:	d0c7      	beq.n	800b30e <__ssvfiscanf_r+0x76>
 800b37e:	d857      	bhi.n	800b430 <__ssvfiscanf_r+0x198>
 800b380:	2b00      	cmp	r3, #0
 800b382:	d065      	beq.n	800b450 <__ssvfiscanf_r+0x1b8>
 800b384:	2303      	movs	r3, #3
 800b386:	9347      	str	r3, [sp, #284]	; 0x11c
 800b388:	230a      	movs	r3, #10
 800b38a:	9342      	str	r3, [sp, #264]	; 0x108
 800b38c:	e076      	b.n	800b47c <__ssvfiscanf_r+0x1e4>
 800b38e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b390:	fb02 1103 	mla	r1, r2, r3, r1
 800b394:	3930      	subs	r1, #48	; 0x30
 800b396:	9143      	str	r1, [sp, #268]	; 0x10c
 800b398:	4655      	mov	r5, sl
 800b39a:	e7d4      	b.n	800b346 <__ssvfiscanf_r+0xae>
 800b39c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b3a0:	2a20      	cmp	r2, #32
 800b3a2:	d8ef      	bhi.n	800b384 <__ssvfiscanf_r+0xec>
 800b3a4:	a101      	add	r1, pc, #4	; (adr r1, 800b3ac <__ssvfiscanf_r+0x114>)
 800b3a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b3aa:	bf00      	nop
 800b3ac:	0800b45f 	.word	0x0800b45f
 800b3b0:	0800b385 	.word	0x0800b385
 800b3b4:	0800b385 	.word	0x0800b385
 800b3b8:	0800b4bd 	.word	0x0800b4bd
 800b3bc:	0800b385 	.word	0x0800b385
 800b3c0:	0800b385 	.word	0x0800b385
 800b3c4:	0800b385 	.word	0x0800b385
 800b3c8:	0800b385 	.word	0x0800b385
 800b3cc:	0800b385 	.word	0x0800b385
 800b3d0:	0800b385 	.word	0x0800b385
 800b3d4:	0800b385 	.word	0x0800b385
 800b3d8:	0800b4d3 	.word	0x0800b4d3
 800b3dc:	0800b4b9 	.word	0x0800b4b9
 800b3e0:	0800b437 	.word	0x0800b437
 800b3e4:	0800b437 	.word	0x0800b437
 800b3e8:	0800b437 	.word	0x0800b437
 800b3ec:	0800b385 	.word	0x0800b385
 800b3f0:	0800b475 	.word	0x0800b475
 800b3f4:	0800b385 	.word	0x0800b385
 800b3f8:	0800b385 	.word	0x0800b385
 800b3fc:	0800b385 	.word	0x0800b385
 800b400:	0800b385 	.word	0x0800b385
 800b404:	0800b4e3 	.word	0x0800b4e3
 800b408:	0800b4b1 	.word	0x0800b4b1
 800b40c:	0800b457 	.word	0x0800b457
 800b410:	0800b385 	.word	0x0800b385
 800b414:	0800b385 	.word	0x0800b385
 800b418:	0800b4df 	.word	0x0800b4df
 800b41c:	0800b385 	.word	0x0800b385
 800b420:	0800b4b9 	.word	0x0800b4b9
 800b424:	0800b385 	.word	0x0800b385
 800b428:	0800b385 	.word	0x0800b385
 800b42c:	0800b45f 	.word	0x0800b45f
 800b430:	3b45      	subs	r3, #69	; 0x45
 800b432:	2b02      	cmp	r3, #2
 800b434:	d8a6      	bhi.n	800b384 <__ssvfiscanf_r+0xec>
 800b436:	2305      	movs	r3, #5
 800b438:	e01f      	b.n	800b47a <__ssvfiscanf_r+0x1e2>
 800b43a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b43c:	4621      	mov	r1, r4
 800b43e:	4630      	mov	r0, r6
 800b440:	4798      	blx	r3
 800b442:	2800      	cmp	r0, #0
 800b444:	f43f af68 	beq.w	800b318 <__ssvfiscanf_r+0x80>
 800b448:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b44a:	2800      	cmp	r0, #0
 800b44c:	f040 808d 	bne.w	800b56a <__ssvfiscanf_r+0x2d2>
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	e08f      	b.n	800b576 <__ssvfiscanf_r+0x2de>
 800b456:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b458:	f042 0220 	orr.w	r2, r2, #32
 800b45c:	9241      	str	r2, [sp, #260]	; 0x104
 800b45e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b464:	9241      	str	r2, [sp, #260]	; 0x104
 800b466:	2210      	movs	r2, #16
 800b468:	2b6f      	cmp	r3, #111	; 0x6f
 800b46a:	9242      	str	r2, [sp, #264]	; 0x108
 800b46c:	bf34      	ite	cc
 800b46e:	2303      	movcc	r3, #3
 800b470:	2304      	movcs	r3, #4
 800b472:	e002      	b.n	800b47a <__ssvfiscanf_r+0x1e2>
 800b474:	2300      	movs	r3, #0
 800b476:	9342      	str	r3, [sp, #264]	; 0x108
 800b478:	2303      	movs	r3, #3
 800b47a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b47c:	6863      	ldr	r3, [r4, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dd3d      	ble.n	800b4fe <__ssvfiscanf_r+0x266>
 800b482:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b484:	0659      	lsls	r1, r3, #25
 800b486:	d404      	bmi.n	800b492 <__ssvfiscanf_r+0x1fa>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	781a      	ldrb	r2, [r3, #0]
 800b48c:	5cba      	ldrb	r2, [r7, r2]
 800b48e:	0712      	lsls	r2, r2, #28
 800b490:	d43c      	bmi.n	800b50c <__ssvfiscanf_r+0x274>
 800b492:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b494:	2b02      	cmp	r3, #2
 800b496:	dc4b      	bgt.n	800b530 <__ssvfiscanf_r+0x298>
 800b498:	466b      	mov	r3, sp
 800b49a:	4622      	mov	r2, r4
 800b49c:	a941      	add	r1, sp, #260	; 0x104
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f000 f872 	bl	800b588 <_scanf_chars>
 800b4a4:	2801      	cmp	r0, #1
 800b4a6:	d06a      	beq.n	800b57e <__ssvfiscanf_r+0x2e6>
 800b4a8:	2802      	cmp	r0, #2
 800b4aa:	f47f af1c 	bne.w	800b2e6 <__ssvfiscanf_r+0x4e>
 800b4ae:	e7cb      	b.n	800b448 <__ssvfiscanf_r+0x1b0>
 800b4b0:	2308      	movs	r3, #8
 800b4b2:	9342      	str	r3, [sp, #264]	; 0x108
 800b4b4:	2304      	movs	r3, #4
 800b4b6:	e7e0      	b.n	800b47a <__ssvfiscanf_r+0x1e2>
 800b4b8:	220a      	movs	r2, #10
 800b4ba:	e7d5      	b.n	800b468 <__ssvfiscanf_r+0x1d0>
 800b4bc:	4629      	mov	r1, r5
 800b4be:	4640      	mov	r0, r8
 800b4c0:	f000 fa5e 	bl	800b980 <__sccl>
 800b4c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b4c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ca:	9341      	str	r3, [sp, #260]	; 0x104
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e7d3      	b.n	800b47a <__ssvfiscanf_r+0x1e2>
 800b4d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d8:	9341      	str	r3, [sp, #260]	; 0x104
 800b4da:	2300      	movs	r3, #0
 800b4dc:	e7cd      	b.n	800b47a <__ssvfiscanf_r+0x1e2>
 800b4de:	2302      	movs	r3, #2
 800b4e0:	e7cb      	b.n	800b47a <__ssvfiscanf_r+0x1e2>
 800b4e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b4e4:	06c3      	lsls	r3, r0, #27
 800b4e6:	f53f aefe 	bmi.w	800b2e6 <__ssvfiscanf_r+0x4e>
 800b4ea:	9b00      	ldr	r3, [sp, #0]
 800b4ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b4ee:	1d19      	adds	r1, r3, #4
 800b4f0:	9100      	str	r1, [sp, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	07c0      	lsls	r0, r0, #31
 800b4f6:	bf4c      	ite	mi
 800b4f8:	801a      	strhmi	r2, [r3, #0]
 800b4fa:	601a      	strpl	r2, [r3, #0]
 800b4fc:	e6f3      	b.n	800b2e6 <__ssvfiscanf_r+0x4e>
 800b4fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b500:	4621      	mov	r1, r4
 800b502:	4630      	mov	r0, r6
 800b504:	4798      	blx	r3
 800b506:	2800      	cmp	r0, #0
 800b508:	d0bb      	beq.n	800b482 <__ssvfiscanf_r+0x1ea>
 800b50a:	e79d      	b.n	800b448 <__ssvfiscanf_r+0x1b0>
 800b50c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b50e:	3201      	adds	r2, #1
 800b510:	9245      	str	r2, [sp, #276]	; 0x114
 800b512:	6862      	ldr	r2, [r4, #4]
 800b514:	3a01      	subs	r2, #1
 800b516:	2a00      	cmp	r2, #0
 800b518:	6062      	str	r2, [r4, #4]
 800b51a:	dd02      	ble.n	800b522 <__ssvfiscanf_r+0x28a>
 800b51c:	3301      	adds	r3, #1
 800b51e:	6023      	str	r3, [r4, #0]
 800b520:	e7b2      	b.n	800b488 <__ssvfiscanf_r+0x1f0>
 800b522:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b524:	4621      	mov	r1, r4
 800b526:	4630      	mov	r0, r6
 800b528:	4798      	blx	r3
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d0ac      	beq.n	800b488 <__ssvfiscanf_r+0x1f0>
 800b52e:	e78b      	b.n	800b448 <__ssvfiscanf_r+0x1b0>
 800b530:	2b04      	cmp	r3, #4
 800b532:	dc0f      	bgt.n	800b554 <__ssvfiscanf_r+0x2bc>
 800b534:	466b      	mov	r3, sp
 800b536:	4622      	mov	r2, r4
 800b538:	a941      	add	r1, sp, #260	; 0x104
 800b53a:	4630      	mov	r0, r6
 800b53c:	f000 f87e 	bl	800b63c <_scanf_i>
 800b540:	e7b0      	b.n	800b4a4 <__ssvfiscanf_r+0x20c>
 800b542:	bf00      	nop
 800b544:	0800b1e5 	.word	0x0800b1e5
 800b548:	0800b25f 	.word	0x0800b25f
 800b54c:	0800c9f1 	.word	0x0800c9f1
 800b550:	0800cd66 	.word	0x0800cd66
 800b554:	4b0b      	ldr	r3, [pc, #44]	; (800b584 <__ssvfiscanf_r+0x2ec>)
 800b556:	2b00      	cmp	r3, #0
 800b558:	f43f aec5 	beq.w	800b2e6 <__ssvfiscanf_r+0x4e>
 800b55c:	466b      	mov	r3, sp
 800b55e:	4622      	mov	r2, r4
 800b560:	a941      	add	r1, sp, #260	; 0x104
 800b562:	4630      	mov	r0, r6
 800b564:	f7fc fe3e 	bl	80081e4 <_scanf_float>
 800b568:	e79c      	b.n	800b4a4 <__ssvfiscanf_r+0x20c>
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b570:	bf18      	it	ne
 800b572:	f04f 30ff 	movne.w	r0, #4294967295
 800b576:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b57e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b580:	e7f9      	b.n	800b576 <__ssvfiscanf_r+0x2de>
 800b582:	bf00      	nop
 800b584:	080081e5 	.word	0x080081e5

0800b588 <_scanf_chars>:
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	4615      	mov	r5, r2
 800b58e:	688a      	ldr	r2, [r1, #8]
 800b590:	4680      	mov	r8, r0
 800b592:	460c      	mov	r4, r1
 800b594:	b932      	cbnz	r2, 800b5a4 <_scanf_chars+0x1c>
 800b596:	698a      	ldr	r2, [r1, #24]
 800b598:	2a00      	cmp	r2, #0
 800b59a:	bf0c      	ite	eq
 800b59c:	2201      	moveq	r2, #1
 800b59e:	f04f 32ff 	movne.w	r2, #4294967295
 800b5a2:	608a      	str	r2, [r1, #8]
 800b5a4:	6822      	ldr	r2, [r4, #0]
 800b5a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b638 <_scanf_chars+0xb0>
 800b5aa:	06d1      	lsls	r1, r2, #27
 800b5ac:	bf5f      	itttt	pl
 800b5ae:	681a      	ldrpl	r2, [r3, #0]
 800b5b0:	1d11      	addpl	r1, r2, #4
 800b5b2:	6019      	strpl	r1, [r3, #0]
 800b5b4:	6816      	ldrpl	r6, [r2, #0]
 800b5b6:	2700      	movs	r7, #0
 800b5b8:	69a0      	ldr	r0, [r4, #24]
 800b5ba:	b188      	cbz	r0, 800b5e0 <_scanf_chars+0x58>
 800b5bc:	2801      	cmp	r0, #1
 800b5be:	d107      	bne.n	800b5d0 <_scanf_chars+0x48>
 800b5c0:	682a      	ldr	r2, [r5, #0]
 800b5c2:	7811      	ldrb	r1, [r2, #0]
 800b5c4:	6962      	ldr	r2, [r4, #20]
 800b5c6:	5c52      	ldrb	r2, [r2, r1]
 800b5c8:	b952      	cbnz	r2, 800b5e0 <_scanf_chars+0x58>
 800b5ca:	2f00      	cmp	r7, #0
 800b5cc:	d031      	beq.n	800b632 <_scanf_chars+0xaa>
 800b5ce:	e022      	b.n	800b616 <_scanf_chars+0x8e>
 800b5d0:	2802      	cmp	r0, #2
 800b5d2:	d120      	bne.n	800b616 <_scanf_chars+0x8e>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b5dc:	071b      	lsls	r3, r3, #28
 800b5de:	d41a      	bmi.n	800b616 <_scanf_chars+0x8e>
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	06da      	lsls	r2, r3, #27
 800b5e4:	bf5e      	ittt	pl
 800b5e6:	682b      	ldrpl	r3, [r5, #0]
 800b5e8:	781b      	ldrbpl	r3, [r3, #0]
 800b5ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b5ee:	682a      	ldr	r2, [r5, #0]
 800b5f0:	686b      	ldr	r3, [r5, #4]
 800b5f2:	3201      	adds	r2, #1
 800b5f4:	602a      	str	r2, [r5, #0]
 800b5f6:	68a2      	ldr	r2, [r4, #8]
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	3a01      	subs	r2, #1
 800b5fc:	606b      	str	r3, [r5, #4]
 800b5fe:	3701      	adds	r7, #1
 800b600:	60a2      	str	r2, [r4, #8]
 800b602:	b142      	cbz	r2, 800b616 <_scanf_chars+0x8e>
 800b604:	2b00      	cmp	r3, #0
 800b606:	dcd7      	bgt.n	800b5b8 <_scanf_chars+0x30>
 800b608:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b60c:	4629      	mov	r1, r5
 800b60e:	4640      	mov	r0, r8
 800b610:	4798      	blx	r3
 800b612:	2800      	cmp	r0, #0
 800b614:	d0d0      	beq.n	800b5b8 <_scanf_chars+0x30>
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	f013 0310 	ands.w	r3, r3, #16
 800b61c:	d105      	bne.n	800b62a <_scanf_chars+0xa2>
 800b61e:	68e2      	ldr	r2, [r4, #12]
 800b620:	3201      	adds	r2, #1
 800b622:	60e2      	str	r2, [r4, #12]
 800b624:	69a2      	ldr	r2, [r4, #24]
 800b626:	b102      	cbz	r2, 800b62a <_scanf_chars+0xa2>
 800b628:	7033      	strb	r3, [r6, #0]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	443b      	add	r3, r7
 800b62e:	6123      	str	r3, [r4, #16]
 800b630:	2000      	movs	r0, #0
 800b632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b636:	bf00      	nop
 800b638:	0800c9f1 	.word	0x0800c9f1

0800b63c <_scanf_i>:
 800b63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	4698      	mov	r8, r3
 800b642:	4b74      	ldr	r3, [pc, #464]	; (800b814 <_scanf_i+0x1d8>)
 800b644:	460c      	mov	r4, r1
 800b646:	4682      	mov	sl, r0
 800b648:	4616      	mov	r6, r2
 800b64a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b64e:	b087      	sub	sp, #28
 800b650:	ab03      	add	r3, sp, #12
 800b652:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b656:	4b70      	ldr	r3, [pc, #448]	; (800b818 <_scanf_i+0x1dc>)
 800b658:	69a1      	ldr	r1, [r4, #24]
 800b65a:	4a70      	ldr	r2, [pc, #448]	; (800b81c <_scanf_i+0x1e0>)
 800b65c:	2903      	cmp	r1, #3
 800b65e:	bf18      	it	ne
 800b660:	461a      	movne	r2, r3
 800b662:	68a3      	ldr	r3, [r4, #8]
 800b664:	9201      	str	r2, [sp, #4]
 800b666:	1e5a      	subs	r2, r3, #1
 800b668:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b66c:	bf88      	it	hi
 800b66e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b672:	4627      	mov	r7, r4
 800b674:	bf82      	ittt	hi
 800b676:	eb03 0905 	addhi.w	r9, r3, r5
 800b67a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b67e:	60a3      	strhi	r3, [r4, #8]
 800b680:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b684:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b688:	bf98      	it	ls
 800b68a:	f04f 0900 	movls.w	r9, #0
 800b68e:	6023      	str	r3, [r4, #0]
 800b690:	463d      	mov	r5, r7
 800b692:	f04f 0b00 	mov.w	fp, #0
 800b696:	6831      	ldr	r1, [r6, #0]
 800b698:	ab03      	add	r3, sp, #12
 800b69a:	7809      	ldrb	r1, [r1, #0]
 800b69c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	f7f4 fd95 	bl	80001d0 <memchr>
 800b6a6:	b328      	cbz	r0, 800b6f4 <_scanf_i+0xb8>
 800b6a8:	f1bb 0f01 	cmp.w	fp, #1
 800b6ac:	d159      	bne.n	800b762 <_scanf_i+0x126>
 800b6ae:	6862      	ldr	r2, [r4, #4]
 800b6b0:	b92a      	cbnz	r2, 800b6be <_scanf_i+0x82>
 800b6b2:	6822      	ldr	r2, [r4, #0]
 800b6b4:	2308      	movs	r3, #8
 800b6b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ba:	6063      	str	r3, [r4, #4]
 800b6bc:	6022      	str	r2, [r4, #0]
 800b6be:	6822      	ldr	r2, [r4, #0]
 800b6c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b6c4:	6022      	str	r2, [r4, #0]
 800b6c6:	68a2      	ldr	r2, [r4, #8]
 800b6c8:	1e51      	subs	r1, r2, #1
 800b6ca:	60a1      	str	r1, [r4, #8]
 800b6cc:	b192      	cbz	r2, 800b6f4 <_scanf_i+0xb8>
 800b6ce:	6832      	ldr	r2, [r6, #0]
 800b6d0:	1c51      	adds	r1, r2, #1
 800b6d2:	6031      	str	r1, [r6, #0]
 800b6d4:	7812      	ldrb	r2, [r2, #0]
 800b6d6:	f805 2b01 	strb.w	r2, [r5], #1
 800b6da:	6872      	ldr	r2, [r6, #4]
 800b6dc:	3a01      	subs	r2, #1
 800b6de:	2a00      	cmp	r2, #0
 800b6e0:	6072      	str	r2, [r6, #4]
 800b6e2:	dc07      	bgt.n	800b6f4 <_scanf_i+0xb8>
 800b6e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b6e8:	4631      	mov	r1, r6
 800b6ea:	4650      	mov	r0, sl
 800b6ec:	4790      	blx	r2
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	f040 8085 	bne.w	800b7fe <_scanf_i+0x1c2>
 800b6f4:	f10b 0b01 	add.w	fp, fp, #1
 800b6f8:	f1bb 0f03 	cmp.w	fp, #3
 800b6fc:	d1cb      	bne.n	800b696 <_scanf_i+0x5a>
 800b6fe:	6863      	ldr	r3, [r4, #4]
 800b700:	b90b      	cbnz	r3, 800b706 <_scanf_i+0xca>
 800b702:	230a      	movs	r3, #10
 800b704:	6063      	str	r3, [r4, #4]
 800b706:	6863      	ldr	r3, [r4, #4]
 800b708:	4945      	ldr	r1, [pc, #276]	; (800b820 <_scanf_i+0x1e4>)
 800b70a:	6960      	ldr	r0, [r4, #20]
 800b70c:	1ac9      	subs	r1, r1, r3
 800b70e:	f000 f937 	bl	800b980 <__sccl>
 800b712:	f04f 0b00 	mov.w	fp, #0
 800b716:	68a3      	ldr	r3, [r4, #8]
 800b718:	6822      	ldr	r2, [r4, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d03d      	beq.n	800b79a <_scanf_i+0x15e>
 800b71e:	6831      	ldr	r1, [r6, #0]
 800b720:	6960      	ldr	r0, [r4, #20]
 800b722:	f891 c000 	ldrb.w	ip, [r1]
 800b726:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d035      	beq.n	800b79a <_scanf_i+0x15e>
 800b72e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b732:	d124      	bne.n	800b77e <_scanf_i+0x142>
 800b734:	0510      	lsls	r0, r2, #20
 800b736:	d522      	bpl.n	800b77e <_scanf_i+0x142>
 800b738:	f10b 0b01 	add.w	fp, fp, #1
 800b73c:	f1b9 0f00 	cmp.w	r9, #0
 800b740:	d003      	beq.n	800b74a <_scanf_i+0x10e>
 800b742:	3301      	adds	r3, #1
 800b744:	f109 39ff 	add.w	r9, r9, #4294967295
 800b748:	60a3      	str	r3, [r4, #8]
 800b74a:	6873      	ldr	r3, [r6, #4]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	2b00      	cmp	r3, #0
 800b750:	6073      	str	r3, [r6, #4]
 800b752:	dd1b      	ble.n	800b78c <_scanf_i+0x150>
 800b754:	6833      	ldr	r3, [r6, #0]
 800b756:	3301      	adds	r3, #1
 800b758:	6033      	str	r3, [r6, #0]
 800b75a:	68a3      	ldr	r3, [r4, #8]
 800b75c:	3b01      	subs	r3, #1
 800b75e:	60a3      	str	r3, [r4, #8]
 800b760:	e7d9      	b.n	800b716 <_scanf_i+0xda>
 800b762:	f1bb 0f02 	cmp.w	fp, #2
 800b766:	d1ae      	bne.n	800b6c6 <_scanf_i+0x8a>
 800b768:	6822      	ldr	r2, [r4, #0]
 800b76a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b76e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b772:	d1bf      	bne.n	800b6f4 <_scanf_i+0xb8>
 800b774:	2310      	movs	r3, #16
 800b776:	6063      	str	r3, [r4, #4]
 800b778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b77c:	e7a2      	b.n	800b6c4 <_scanf_i+0x88>
 800b77e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b782:	6022      	str	r2, [r4, #0]
 800b784:	780b      	ldrb	r3, [r1, #0]
 800b786:	f805 3b01 	strb.w	r3, [r5], #1
 800b78a:	e7de      	b.n	800b74a <_scanf_i+0x10e>
 800b78c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b790:	4631      	mov	r1, r6
 800b792:	4650      	mov	r0, sl
 800b794:	4798      	blx	r3
 800b796:	2800      	cmp	r0, #0
 800b798:	d0df      	beq.n	800b75a <_scanf_i+0x11e>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	05d9      	lsls	r1, r3, #23
 800b79e:	d50d      	bpl.n	800b7bc <_scanf_i+0x180>
 800b7a0:	42bd      	cmp	r5, r7
 800b7a2:	d909      	bls.n	800b7b8 <_scanf_i+0x17c>
 800b7a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b7a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	4650      	mov	r0, sl
 800b7b0:	4798      	blx	r3
 800b7b2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b7b6:	464d      	mov	r5, r9
 800b7b8:	42bd      	cmp	r5, r7
 800b7ba:	d028      	beq.n	800b80e <_scanf_i+0x1d2>
 800b7bc:	6822      	ldr	r2, [r4, #0]
 800b7be:	f012 0210 	ands.w	r2, r2, #16
 800b7c2:	d113      	bne.n	800b7ec <_scanf_i+0x1b0>
 800b7c4:	702a      	strb	r2, [r5, #0]
 800b7c6:	6863      	ldr	r3, [r4, #4]
 800b7c8:	9e01      	ldr	r6, [sp, #4]
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	4650      	mov	r0, sl
 800b7ce:	47b0      	blx	r6
 800b7d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d4:	6821      	ldr	r1, [r4, #0]
 800b7d6:	1d1a      	adds	r2, r3, #4
 800b7d8:	f8c8 2000 	str.w	r2, [r8]
 800b7dc:	f011 0f20 	tst.w	r1, #32
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	d00f      	beq.n	800b804 <_scanf_i+0x1c8>
 800b7e4:	6018      	str	r0, [r3, #0]
 800b7e6:	68e3      	ldr	r3, [r4, #12]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	60e3      	str	r3, [r4, #12]
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	1bed      	subs	r5, r5, r7
 800b7f0:	445d      	add	r5, fp
 800b7f2:	442b      	add	r3, r5
 800b7f4:	6123      	str	r3, [r4, #16]
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	b007      	add	sp, #28
 800b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fe:	f04f 0b00 	mov.w	fp, #0
 800b802:	e7ca      	b.n	800b79a <_scanf_i+0x15e>
 800b804:	07ca      	lsls	r2, r1, #31
 800b806:	bf4c      	ite	mi
 800b808:	8018      	strhmi	r0, [r3, #0]
 800b80a:	6018      	strpl	r0, [r3, #0]
 800b80c:	e7eb      	b.n	800b7e6 <_scanf_i+0x1aa>
 800b80e:	2001      	movs	r0, #1
 800b810:	e7f2      	b.n	800b7f8 <_scanf_i+0x1bc>
 800b812:	bf00      	nop
 800b814:	0800c9c4 	.word	0x0800c9c4
 800b818:	0800c38d 	.word	0x0800c38d
 800b81c:	0800af31 	.word	0x0800af31
 800b820:	0800cd81 	.word	0x0800cd81

0800b824 <__sflush_r>:
 800b824:	898a      	ldrh	r2, [r1, #12]
 800b826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82a:	4605      	mov	r5, r0
 800b82c:	0710      	lsls	r0, r2, #28
 800b82e:	460c      	mov	r4, r1
 800b830:	d458      	bmi.n	800b8e4 <__sflush_r+0xc0>
 800b832:	684b      	ldr	r3, [r1, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	dc05      	bgt.n	800b844 <__sflush_r+0x20>
 800b838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dc02      	bgt.n	800b844 <__sflush_r+0x20>
 800b83e:	2000      	movs	r0, #0
 800b840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b846:	2e00      	cmp	r6, #0
 800b848:	d0f9      	beq.n	800b83e <__sflush_r+0x1a>
 800b84a:	2300      	movs	r3, #0
 800b84c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b850:	682f      	ldr	r7, [r5, #0]
 800b852:	6a21      	ldr	r1, [r4, #32]
 800b854:	602b      	str	r3, [r5, #0]
 800b856:	d032      	beq.n	800b8be <__sflush_r+0x9a>
 800b858:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	075a      	lsls	r2, r3, #29
 800b85e:	d505      	bpl.n	800b86c <__sflush_r+0x48>
 800b860:	6863      	ldr	r3, [r4, #4]
 800b862:	1ac0      	subs	r0, r0, r3
 800b864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b866:	b10b      	cbz	r3, 800b86c <__sflush_r+0x48>
 800b868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b86a:	1ac0      	subs	r0, r0, r3
 800b86c:	2300      	movs	r3, #0
 800b86e:	4602      	mov	r2, r0
 800b870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b872:	6a21      	ldr	r1, [r4, #32]
 800b874:	4628      	mov	r0, r5
 800b876:	47b0      	blx	r6
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	d106      	bne.n	800b88c <__sflush_r+0x68>
 800b87e:	6829      	ldr	r1, [r5, #0]
 800b880:	291d      	cmp	r1, #29
 800b882:	d82b      	bhi.n	800b8dc <__sflush_r+0xb8>
 800b884:	4a29      	ldr	r2, [pc, #164]	; (800b92c <__sflush_r+0x108>)
 800b886:	410a      	asrs	r2, r1
 800b888:	07d6      	lsls	r6, r2, #31
 800b88a:	d427      	bmi.n	800b8dc <__sflush_r+0xb8>
 800b88c:	2200      	movs	r2, #0
 800b88e:	6062      	str	r2, [r4, #4]
 800b890:	04d9      	lsls	r1, r3, #19
 800b892:	6922      	ldr	r2, [r4, #16]
 800b894:	6022      	str	r2, [r4, #0]
 800b896:	d504      	bpl.n	800b8a2 <__sflush_r+0x7e>
 800b898:	1c42      	adds	r2, r0, #1
 800b89a:	d101      	bne.n	800b8a0 <__sflush_r+0x7c>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b903      	cbnz	r3, 800b8a2 <__sflush_r+0x7e>
 800b8a0:	6560      	str	r0, [r4, #84]	; 0x54
 800b8a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8a4:	602f      	str	r7, [r5, #0]
 800b8a6:	2900      	cmp	r1, #0
 800b8a8:	d0c9      	beq.n	800b83e <__sflush_r+0x1a>
 800b8aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8ae:	4299      	cmp	r1, r3
 800b8b0:	d002      	beq.n	800b8b8 <__sflush_r+0x94>
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f7fd fefa 	bl	80096ac <_free_r>
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	6360      	str	r0, [r4, #52]	; 0x34
 800b8bc:	e7c0      	b.n	800b840 <__sflush_r+0x1c>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	47b0      	blx	r6
 800b8c4:	1c41      	adds	r1, r0, #1
 800b8c6:	d1c8      	bne.n	800b85a <__sflush_r+0x36>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0c5      	beq.n	800b85a <__sflush_r+0x36>
 800b8ce:	2b1d      	cmp	r3, #29
 800b8d0:	d001      	beq.n	800b8d6 <__sflush_r+0xb2>
 800b8d2:	2b16      	cmp	r3, #22
 800b8d4:	d101      	bne.n	800b8da <__sflush_r+0xb6>
 800b8d6:	602f      	str	r7, [r5, #0]
 800b8d8:	e7b1      	b.n	800b83e <__sflush_r+0x1a>
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	e7ad      	b.n	800b840 <__sflush_r+0x1c>
 800b8e4:	690f      	ldr	r7, [r1, #16]
 800b8e6:	2f00      	cmp	r7, #0
 800b8e8:	d0a9      	beq.n	800b83e <__sflush_r+0x1a>
 800b8ea:	0793      	lsls	r3, r2, #30
 800b8ec:	680e      	ldr	r6, [r1, #0]
 800b8ee:	bf08      	it	eq
 800b8f0:	694b      	ldreq	r3, [r1, #20]
 800b8f2:	600f      	str	r7, [r1, #0]
 800b8f4:	bf18      	it	ne
 800b8f6:	2300      	movne	r3, #0
 800b8f8:	eba6 0807 	sub.w	r8, r6, r7
 800b8fc:	608b      	str	r3, [r1, #8]
 800b8fe:	f1b8 0f00 	cmp.w	r8, #0
 800b902:	dd9c      	ble.n	800b83e <__sflush_r+0x1a>
 800b904:	6a21      	ldr	r1, [r4, #32]
 800b906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b908:	4643      	mov	r3, r8
 800b90a:	463a      	mov	r2, r7
 800b90c:	4628      	mov	r0, r5
 800b90e:	47b0      	blx	r6
 800b910:	2800      	cmp	r0, #0
 800b912:	dc06      	bgt.n	800b922 <__sflush_r+0xfe>
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	e78e      	b.n	800b840 <__sflush_r+0x1c>
 800b922:	4407      	add	r7, r0
 800b924:	eba8 0800 	sub.w	r8, r8, r0
 800b928:	e7e9      	b.n	800b8fe <__sflush_r+0xda>
 800b92a:	bf00      	nop
 800b92c:	dfbffffe 	.word	0xdfbffffe

0800b930 <_fflush_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	690b      	ldr	r3, [r1, #16]
 800b934:	4605      	mov	r5, r0
 800b936:	460c      	mov	r4, r1
 800b938:	b913      	cbnz	r3, 800b940 <_fflush_r+0x10>
 800b93a:	2500      	movs	r5, #0
 800b93c:	4628      	mov	r0, r5
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	b118      	cbz	r0, 800b94a <_fflush_r+0x1a>
 800b942:	6a03      	ldr	r3, [r0, #32]
 800b944:	b90b      	cbnz	r3, 800b94a <_fflush_r+0x1a>
 800b946:	f7fc fee9 	bl	800871c <__sinit>
 800b94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0f3      	beq.n	800b93a <_fflush_r+0xa>
 800b952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b954:	07d0      	lsls	r0, r2, #31
 800b956:	d404      	bmi.n	800b962 <_fflush_r+0x32>
 800b958:	0599      	lsls	r1, r3, #22
 800b95a:	d402      	bmi.n	800b962 <_fflush_r+0x32>
 800b95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b95e:	f7fd f822 	bl	80089a6 <__retarget_lock_acquire_recursive>
 800b962:	4628      	mov	r0, r5
 800b964:	4621      	mov	r1, r4
 800b966:	f7ff ff5d 	bl	800b824 <__sflush_r>
 800b96a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b96c:	07da      	lsls	r2, r3, #31
 800b96e:	4605      	mov	r5, r0
 800b970:	d4e4      	bmi.n	800b93c <_fflush_r+0xc>
 800b972:	89a3      	ldrh	r3, [r4, #12]
 800b974:	059b      	lsls	r3, r3, #22
 800b976:	d4e1      	bmi.n	800b93c <_fflush_r+0xc>
 800b978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b97a:	f7fd f815 	bl	80089a8 <__retarget_lock_release_recursive>
 800b97e:	e7dd      	b.n	800b93c <_fflush_r+0xc>

0800b980 <__sccl>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	780b      	ldrb	r3, [r1, #0]
 800b984:	4604      	mov	r4, r0
 800b986:	2b5e      	cmp	r3, #94	; 0x5e
 800b988:	bf0b      	itete	eq
 800b98a:	784b      	ldrbeq	r3, [r1, #1]
 800b98c:	1c4a      	addne	r2, r1, #1
 800b98e:	1c8a      	addeq	r2, r1, #2
 800b990:	2100      	movne	r1, #0
 800b992:	bf08      	it	eq
 800b994:	2101      	moveq	r1, #1
 800b996:	3801      	subs	r0, #1
 800b998:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b99c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b9a0:	42a8      	cmp	r0, r5
 800b9a2:	d1fb      	bne.n	800b99c <__sccl+0x1c>
 800b9a4:	b90b      	cbnz	r3, 800b9aa <__sccl+0x2a>
 800b9a6:	1e50      	subs	r0, r2, #1
 800b9a8:	bd70      	pop	{r4, r5, r6, pc}
 800b9aa:	f081 0101 	eor.w	r1, r1, #1
 800b9ae:	54e1      	strb	r1, [r4, r3]
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b9b8:	2d2d      	cmp	r5, #45	; 0x2d
 800b9ba:	d005      	beq.n	800b9c8 <__sccl+0x48>
 800b9bc:	2d5d      	cmp	r5, #93	; 0x5d
 800b9be:	d016      	beq.n	800b9ee <__sccl+0x6e>
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	d0f1      	beq.n	800b9a8 <__sccl+0x28>
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	e7f2      	b.n	800b9ae <__sccl+0x2e>
 800b9c8:	7846      	ldrb	r6, [r0, #1]
 800b9ca:	2e5d      	cmp	r6, #93	; 0x5d
 800b9cc:	d0fa      	beq.n	800b9c4 <__sccl+0x44>
 800b9ce:	42b3      	cmp	r3, r6
 800b9d0:	dcf8      	bgt.n	800b9c4 <__sccl+0x44>
 800b9d2:	3002      	adds	r0, #2
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	3201      	adds	r2, #1
 800b9d8:	4296      	cmp	r6, r2
 800b9da:	54a1      	strb	r1, [r4, r2]
 800b9dc:	dcfb      	bgt.n	800b9d6 <__sccl+0x56>
 800b9de:	1af2      	subs	r2, r6, r3
 800b9e0:	3a01      	subs	r2, #1
 800b9e2:	1c5d      	adds	r5, r3, #1
 800b9e4:	42b3      	cmp	r3, r6
 800b9e6:	bfa8      	it	ge
 800b9e8:	2200      	movge	r2, #0
 800b9ea:	18ab      	adds	r3, r5, r2
 800b9ec:	e7e1      	b.n	800b9b2 <__sccl+0x32>
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	e7da      	b.n	800b9a8 <__sccl+0x28>

0800b9f2 <__submore>:
 800b9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9fe:	4299      	cmp	r1, r3
 800ba00:	d11d      	bne.n	800ba3e <__submore+0x4c>
 800ba02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ba06:	f7fd fec5 	bl	8009794 <_malloc_r>
 800ba0a:	b918      	cbnz	r0, 800ba14 <__submore+0x22>
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba18:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba1a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ba1e:	6360      	str	r0, [r4, #52]	; 0x34
 800ba20:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ba24:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba28:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ba2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba30:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ba34:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ba38:	6020      	str	r0, [r4, #0]
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	e7e8      	b.n	800ba10 <__submore+0x1e>
 800ba3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ba40:	0077      	lsls	r7, r6, #1
 800ba42:	463a      	mov	r2, r7
 800ba44:	f000 fc01 	bl	800c24a <_realloc_r>
 800ba48:	4605      	mov	r5, r0
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d0de      	beq.n	800ba0c <__submore+0x1a>
 800ba4e:	eb00 0806 	add.w	r8, r0, r6
 800ba52:	4601      	mov	r1, r0
 800ba54:	4632      	mov	r2, r6
 800ba56:	4640      	mov	r0, r8
 800ba58:	f000 f842 	bl	800bae0 <memcpy>
 800ba5c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ba60:	f8c4 8000 	str.w	r8, [r4]
 800ba64:	e7e9      	b.n	800ba3a <__submore+0x48>

0800ba66 <memmove>:
 800ba66:	4288      	cmp	r0, r1
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	eb01 0402 	add.w	r4, r1, r2
 800ba6e:	d902      	bls.n	800ba76 <memmove+0x10>
 800ba70:	4284      	cmp	r4, r0
 800ba72:	4623      	mov	r3, r4
 800ba74:	d807      	bhi.n	800ba86 <memmove+0x20>
 800ba76:	1e43      	subs	r3, r0, #1
 800ba78:	42a1      	cmp	r1, r4
 800ba7a:	d008      	beq.n	800ba8e <memmove+0x28>
 800ba7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba80:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba84:	e7f8      	b.n	800ba78 <memmove+0x12>
 800ba86:	4402      	add	r2, r0
 800ba88:	4601      	mov	r1, r0
 800ba8a:	428a      	cmp	r2, r1
 800ba8c:	d100      	bne.n	800ba90 <memmove+0x2a>
 800ba8e:	bd10      	pop	{r4, pc}
 800ba90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba98:	e7f7      	b.n	800ba8a <memmove+0x24>

0800ba9a <strncmp>:
 800ba9a:	b510      	push	{r4, lr}
 800ba9c:	b16a      	cbz	r2, 800baba <strncmp+0x20>
 800ba9e:	3901      	subs	r1, #1
 800baa0:	1884      	adds	r4, r0, r2
 800baa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baa6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800baaa:	429a      	cmp	r2, r3
 800baac:	d103      	bne.n	800bab6 <strncmp+0x1c>
 800baae:	42a0      	cmp	r0, r4
 800bab0:	d001      	beq.n	800bab6 <strncmp+0x1c>
 800bab2:	2a00      	cmp	r2, #0
 800bab4:	d1f5      	bne.n	800baa2 <strncmp+0x8>
 800bab6:	1ad0      	subs	r0, r2, r3
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	4610      	mov	r0, r2
 800babc:	e7fc      	b.n	800bab8 <strncmp+0x1e>
	...

0800bac0 <_sbrk_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4d06      	ldr	r5, [pc, #24]	; (800badc <_sbrk_r+0x1c>)
 800bac4:	2300      	movs	r3, #0
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	602b      	str	r3, [r5, #0]
 800bacc:	f7f6 ff58 	bl	8002980 <_sbrk>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_sbrk_r+0x1a>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_sbrk_r+0x1a>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	20000834 	.word	0x20000834

0800bae0 <memcpy>:
 800bae0:	440a      	add	r2, r1
 800bae2:	4291      	cmp	r1, r2
 800bae4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bae8:	d100      	bne.n	800baec <memcpy+0xc>
 800baea:	4770      	bx	lr
 800baec:	b510      	push	{r4, lr}
 800baee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baf6:	4291      	cmp	r1, r2
 800baf8:	d1f9      	bne.n	800baee <memcpy+0xe>
 800bafa:	bd10      	pop	{r4, pc}
 800bafc:	0000      	movs	r0, r0
	...

0800bb00 <nan>:
 800bb00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb08 <nan+0x8>
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	00000000 	.word	0x00000000
 800bb0c:	7ff80000 	.word	0x7ff80000

0800bb10 <__assert_func>:
 800bb10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb12:	4614      	mov	r4, r2
 800bb14:	461a      	mov	r2, r3
 800bb16:	4b09      	ldr	r3, [pc, #36]	; (800bb3c <__assert_func+0x2c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	68d8      	ldr	r0, [r3, #12]
 800bb1e:	b14c      	cbz	r4, 800bb34 <__assert_func+0x24>
 800bb20:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <__assert_func+0x30>)
 800bb22:	9100      	str	r1, [sp, #0]
 800bb24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb28:	4906      	ldr	r1, [pc, #24]	; (800bb44 <__assert_func+0x34>)
 800bb2a:	462b      	mov	r3, r5
 800bb2c:	f000 fc3e 	bl	800c3ac <fiprintf>
 800bb30:	f000 fc4e 	bl	800c3d0 <abort>
 800bb34:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <__assert_func+0x38>)
 800bb36:	461c      	mov	r4, r3
 800bb38:	e7f3      	b.n	800bb22 <__assert_func+0x12>
 800bb3a:	bf00      	nop
 800bb3c:	2000007c 	.word	0x2000007c
 800bb40:	0800cd94 	.word	0x0800cd94
 800bb44:	0800cda1 	.word	0x0800cda1
 800bb48:	0800cdcf 	.word	0x0800cdcf

0800bb4c <_calloc_r>:
 800bb4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb4e:	fba1 2402 	umull	r2, r4, r1, r2
 800bb52:	b94c      	cbnz	r4, 800bb68 <_calloc_r+0x1c>
 800bb54:	4611      	mov	r1, r2
 800bb56:	9201      	str	r2, [sp, #4]
 800bb58:	f7fd fe1c 	bl	8009794 <_malloc_r>
 800bb5c:	9a01      	ldr	r2, [sp, #4]
 800bb5e:	4605      	mov	r5, r0
 800bb60:	b930      	cbnz	r0, 800bb70 <_calloc_r+0x24>
 800bb62:	4628      	mov	r0, r5
 800bb64:	b003      	add	sp, #12
 800bb66:	bd30      	pop	{r4, r5, pc}
 800bb68:	220c      	movs	r2, #12
 800bb6a:	6002      	str	r2, [r0, #0]
 800bb6c:	2500      	movs	r5, #0
 800bb6e:	e7f8      	b.n	800bb62 <_calloc_r+0x16>
 800bb70:	4621      	mov	r1, r4
 800bb72:	f7fc fe9a 	bl	80088aa <memset>
 800bb76:	e7f4      	b.n	800bb62 <_calloc_r+0x16>

0800bb78 <rshift>:
 800bb78:	6903      	ldr	r3, [r0, #16]
 800bb7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb82:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb86:	f100 0414 	add.w	r4, r0, #20
 800bb8a:	dd45      	ble.n	800bc18 <rshift+0xa0>
 800bb8c:	f011 011f 	ands.w	r1, r1, #31
 800bb90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb98:	d10c      	bne.n	800bbb4 <rshift+0x3c>
 800bb9a:	f100 0710 	add.w	r7, r0, #16
 800bb9e:	4629      	mov	r1, r5
 800bba0:	42b1      	cmp	r1, r6
 800bba2:	d334      	bcc.n	800bc0e <rshift+0x96>
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	1eea      	subs	r2, r5, #3
 800bbaa:	4296      	cmp	r6, r2
 800bbac:	bf38      	it	cc
 800bbae:	2300      	movcc	r3, #0
 800bbb0:	4423      	add	r3, r4
 800bbb2:	e015      	b.n	800bbe0 <rshift+0x68>
 800bbb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbb8:	f1c1 0820 	rsb	r8, r1, #32
 800bbbc:	40cf      	lsrs	r7, r1
 800bbbe:	f105 0e04 	add.w	lr, r5, #4
 800bbc2:	46a1      	mov	r9, r4
 800bbc4:	4576      	cmp	r6, lr
 800bbc6:	46f4      	mov	ip, lr
 800bbc8:	d815      	bhi.n	800bbf6 <rshift+0x7e>
 800bbca:	1a9a      	subs	r2, r3, r2
 800bbcc:	0092      	lsls	r2, r2, #2
 800bbce:	3a04      	subs	r2, #4
 800bbd0:	3501      	adds	r5, #1
 800bbd2:	42ae      	cmp	r6, r5
 800bbd4:	bf38      	it	cc
 800bbd6:	2200      	movcc	r2, #0
 800bbd8:	18a3      	adds	r3, r4, r2
 800bbda:	50a7      	str	r7, [r4, r2]
 800bbdc:	b107      	cbz	r7, 800bbe0 <rshift+0x68>
 800bbde:	3304      	adds	r3, #4
 800bbe0:	1b1a      	subs	r2, r3, r4
 800bbe2:	42a3      	cmp	r3, r4
 800bbe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbe8:	bf08      	it	eq
 800bbea:	2300      	moveq	r3, #0
 800bbec:	6102      	str	r2, [r0, #16]
 800bbee:	bf08      	it	eq
 800bbf0:	6143      	streq	r3, [r0, #20]
 800bbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf6:	f8dc c000 	ldr.w	ip, [ip]
 800bbfa:	fa0c fc08 	lsl.w	ip, ip, r8
 800bbfe:	ea4c 0707 	orr.w	r7, ip, r7
 800bc02:	f849 7b04 	str.w	r7, [r9], #4
 800bc06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc0a:	40cf      	lsrs	r7, r1
 800bc0c:	e7da      	b.n	800bbc4 <rshift+0x4c>
 800bc0e:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc12:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc16:	e7c3      	b.n	800bba0 <rshift+0x28>
 800bc18:	4623      	mov	r3, r4
 800bc1a:	e7e1      	b.n	800bbe0 <rshift+0x68>

0800bc1c <__hexdig_fun>:
 800bc1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bc20:	2b09      	cmp	r3, #9
 800bc22:	d802      	bhi.n	800bc2a <__hexdig_fun+0xe>
 800bc24:	3820      	subs	r0, #32
 800bc26:	b2c0      	uxtb	r0, r0
 800bc28:	4770      	bx	lr
 800bc2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bc2e:	2b05      	cmp	r3, #5
 800bc30:	d801      	bhi.n	800bc36 <__hexdig_fun+0x1a>
 800bc32:	3847      	subs	r0, #71	; 0x47
 800bc34:	e7f7      	b.n	800bc26 <__hexdig_fun+0xa>
 800bc36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bc3a:	2b05      	cmp	r3, #5
 800bc3c:	d801      	bhi.n	800bc42 <__hexdig_fun+0x26>
 800bc3e:	3827      	subs	r0, #39	; 0x27
 800bc40:	e7f1      	b.n	800bc26 <__hexdig_fun+0xa>
 800bc42:	2000      	movs	r0, #0
 800bc44:	4770      	bx	lr
	...

0800bc48 <__gethex>:
 800bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4c:	4617      	mov	r7, r2
 800bc4e:	680a      	ldr	r2, [r1, #0]
 800bc50:	b085      	sub	sp, #20
 800bc52:	f102 0b02 	add.w	fp, r2, #2
 800bc56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bc5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bc5e:	4681      	mov	r9, r0
 800bc60:	468a      	mov	sl, r1
 800bc62:	9302      	str	r3, [sp, #8]
 800bc64:	32fe      	adds	r2, #254	; 0xfe
 800bc66:	eb02 030b 	add.w	r3, r2, fp
 800bc6a:	46d8      	mov	r8, fp
 800bc6c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	2830      	cmp	r0, #48	; 0x30
 800bc74:	d0f7      	beq.n	800bc66 <__gethex+0x1e>
 800bc76:	f7ff ffd1 	bl	800bc1c <__hexdig_fun>
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d138      	bne.n	800bcf2 <__gethex+0xaa>
 800bc80:	49a7      	ldr	r1, [pc, #668]	; (800bf20 <__gethex+0x2d8>)
 800bc82:	2201      	movs	r2, #1
 800bc84:	4640      	mov	r0, r8
 800bc86:	f7ff ff08 	bl	800ba9a <strncmp>
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d169      	bne.n	800bd64 <__gethex+0x11c>
 800bc90:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bc94:	465d      	mov	r5, fp
 800bc96:	f7ff ffc1 	bl	800bc1c <__hexdig_fun>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d064      	beq.n	800bd68 <__gethex+0x120>
 800bc9e:	465a      	mov	r2, fp
 800bca0:	7810      	ldrb	r0, [r2, #0]
 800bca2:	2830      	cmp	r0, #48	; 0x30
 800bca4:	4690      	mov	r8, r2
 800bca6:	f102 0201 	add.w	r2, r2, #1
 800bcaa:	d0f9      	beq.n	800bca0 <__gethex+0x58>
 800bcac:	f7ff ffb6 	bl	800bc1c <__hexdig_fun>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	fab0 f480 	clz	r4, r0
 800bcb6:	0964      	lsrs	r4, r4, #5
 800bcb8:	465e      	mov	r6, fp
 800bcba:	9301      	str	r3, [sp, #4]
 800bcbc:	4642      	mov	r2, r8
 800bcbe:	4615      	mov	r5, r2
 800bcc0:	3201      	adds	r2, #1
 800bcc2:	7828      	ldrb	r0, [r5, #0]
 800bcc4:	f7ff ffaa 	bl	800bc1c <__hexdig_fun>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d1f8      	bne.n	800bcbe <__gethex+0x76>
 800bccc:	4994      	ldr	r1, [pc, #592]	; (800bf20 <__gethex+0x2d8>)
 800bcce:	2201      	movs	r2, #1
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	f7ff fee2 	bl	800ba9a <strncmp>
 800bcd6:	b978      	cbnz	r0, 800bcf8 <__gethex+0xb0>
 800bcd8:	b946      	cbnz	r6, 800bcec <__gethex+0xa4>
 800bcda:	1c6e      	adds	r6, r5, #1
 800bcdc:	4632      	mov	r2, r6
 800bcde:	4615      	mov	r5, r2
 800bce0:	3201      	adds	r2, #1
 800bce2:	7828      	ldrb	r0, [r5, #0]
 800bce4:	f7ff ff9a 	bl	800bc1c <__hexdig_fun>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d1f8      	bne.n	800bcde <__gethex+0x96>
 800bcec:	1b73      	subs	r3, r6, r5
 800bcee:	009e      	lsls	r6, r3, #2
 800bcf0:	e004      	b.n	800bcfc <__gethex+0xb4>
 800bcf2:	2400      	movs	r4, #0
 800bcf4:	4626      	mov	r6, r4
 800bcf6:	e7e1      	b.n	800bcbc <__gethex+0x74>
 800bcf8:	2e00      	cmp	r6, #0
 800bcfa:	d1f7      	bne.n	800bcec <__gethex+0xa4>
 800bcfc:	782b      	ldrb	r3, [r5, #0]
 800bcfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd02:	2b50      	cmp	r3, #80	; 0x50
 800bd04:	d13d      	bne.n	800bd82 <__gethex+0x13a>
 800bd06:	786b      	ldrb	r3, [r5, #1]
 800bd08:	2b2b      	cmp	r3, #43	; 0x2b
 800bd0a:	d02f      	beq.n	800bd6c <__gethex+0x124>
 800bd0c:	2b2d      	cmp	r3, #45	; 0x2d
 800bd0e:	d031      	beq.n	800bd74 <__gethex+0x12c>
 800bd10:	1c69      	adds	r1, r5, #1
 800bd12:	f04f 0b00 	mov.w	fp, #0
 800bd16:	7808      	ldrb	r0, [r1, #0]
 800bd18:	f7ff ff80 	bl	800bc1c <__hexdig_fun>
 800bd1c:	1e42      	subs	r2, r0, #1
 800bd1e:	b2d2      	uxtb	r2, r2
 800bd20:	2a18      	cmp	r2, #24
 800bd22:	d82e      	bhi.n	800bd82 <__gethex+0x13a>
 800bd24:	f1a0 0210 	sub.w	r2, r0, #16
 800bd28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd2c:	f7ff ff76 	bl	800bc1c <__hexdig_fun>
 800bd30:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd34:	fa5f fc8c 	uxtb.w	ip, ip
 800bd38:	f1bc 0f18 	cmp.w	ip, #24
 800bd3c:	d91d      	bls.n	800bd7a <__gethex+0x132>
 800bd3e:	f1bb 0f00 	cmp.w	fp, #0
 800bd42:	d000      	beq.n	800bd46 <__gethex+0xfe>
 800bd44:	4252      	negs	r2, r2
 800bd46:	4416      	add	r6, r2
 800bd48:	f8ca 1000 	str.w	r1, [sl]
 800bd4c:	b1dc      	cbz	r4, 800bd86 <__gethex+0x13e>
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	bf14      	ite	ne
 800bd54:	f04f 0800 	movne.w	r8, #0
 800bd58:	f04f 0806 	moveq.w	r8, #6
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	b005      	add	sp, #20
 800bd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd64:	4645      	mov	r5, r8
 800bd66:	4626      	mov	r6, r4
 800bd68:	2401      	movs	r4, #1
 800bd6a:	e7c7      	b.n	800bcfc <__gethex+0xb4>
 800bd6c:	f04f 0b00 	mov.w	fp, #0
 800bd70:	1ca9      	adds	r1, r5, #2
 800bd72:	e7d0      	b.n	800bd16 <__gethex+0xce>
 800bd74:	f04f 0b01 	mov.w	fp, #1
 800bd78:	e7fa      	b.n	800bd70 <__gethex+0x128>
 800bd7a:	230a      	movs	r3, #10
 800bd7c:	fb03 0002 	mla	r0, r3, r2, r0
 800bd80:	e7d0      	b.n	800bd24 <__gethex+0xdc>
 800bd82:	4629      	mov	r1, r5
 800bd84:	e7e0      	b.n	800bd48 <__gethex+0x100>
 800bd86:	eba5 0308 	sub.w	r3, r5, r8
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	2b07      	cmp	r3, #7
 800bd90:	dc0a      	bgt.n	800bda8 <__gethex+0x160>
 800bd92:	4648      	mov	r0, r9
 800bd94:	f7fd fd8a 	bl	80098ac <_Balloc>
 800bd98:	4604      	mov	r4, r0
 800bd9a:	b940      	cbnz	r0, 800bdae <__gethex+0x166>
 800bd9c:	4b61      	ldr	r3, [pc, #388]	; (800bf24 <__gethex+0x2dc>)
 800bd9e:	4602      	mov	r2, r0
 800bda0:	21e4      	movs	r1, #228	; 0xe4
 800bda2:	4861      	ldr	r0, [pc, #388]	; (800bf28 <__gethex+0x2e0>)
 800bda4:	f7ff feb4 	bl	800bb10 <__assert_func>
 800bda8:	3101      	adds	r1, #1
 800bdaa:	105b      	asrs	r3, r3, #1
 800bdac:	e7ef      	b.n	800bd8e <__gethex+0x146>
 800bdae:	f100 0a14 	add.w	sl, r0, #20
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	495a      	ldr	r1, [pc, #360]	; (800bf20 <__gethex+0x2d8>)
 800bdb6:	f8cd a004 	str.w	sl, [sp, #4]
 800bdba:	469b      	mov	fp, r3
 800bdbc:	45a8      	cmp	r8, r5
 800bdbe:	d342      	bcc.n	800be46 <__gethex+0x1fe>
 800bdc0:	9801      	ldr	r0, [sp, #4]
 800bdc2:	f840 bb04 	str.w	fp, [r0], #4
 800bdc6:	eba0 000a 	sub.w	r0, r0, sl
 800bdca:	1080      	asrs	r0, r0, #2
 800bdcc:	6120      	str	r0, [r4, #16]
 800bdce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bdd2:	4658      	mov	r0, fp
 800bdd4:	f7fd fe5c 	bl	8009a90 <__hi0bits>
 800bdd8:	683d      	ldr	r5, [r7, #0]
 800bdda:	eba8 0000 	sub.w	r0, r8, r0
 800bdde:	42a8      	cmp	r0, r5
 800bde0:	dd59      	ble.n	800be96 <__gethex+0x24e>
 800bde2:	eba0 0805 	sub.w	r8, r0, r5
 800bde6:	4641      	mov	r1, r8
 800bde8:	4620      	mov	r0, r4
 800bdea:	f7fe f9eb 	bl	800a1c4 <__any_on>
 800bdee:	4683      	mov	fp, r0
 800bdf0:	b1b8      	cbz	r0, 800be22 <__gethex+0x1da>
 800bdf2:	f108 33ff 	add.w	r3, r8, #4294967295
 800bdf6:	1159      	asrs	r1, r3, #5
 800bdf8:	f003 021f 	and.w	r2, r3, #31
 800bdfc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800be00:	f04f 0b01 	mov.w	fp, #1
 800be04:	fa0b f202 	lsl.w	r2, fp, r2
 800be08:	420a      	tst	r2, r1
 800be0a:	d00a      	beq.n	800be22 <__gethex+0x1da>
 800be0c:	455b      	cmp	r3, fp
 800be0e:	dd06      	ble.n	800be1e <__gethex+0x1d6>
 800be10:	f1a8 0102 	sub.w	r1, r8, #2
 800be14:	4620      	mov	r0, r4
 800be16:	f7fe f9d5 	bl	800a1c4 <__any_on>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d138      	bne.n	800be90 <__gethex+0x248>
 800be1e:	f04f 0b02 	mov.w	fp, #2
 800be22:	4641      	mov	r1, r8
 800be24:	4620      	mov	r0, r4
 800be26:	f7ff fea7 	bl	800bb78 <rshift>
 800be2a:	4446      	add	r6, r8
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	42b3      	cmp	r3, r6
 800be30:	da41      	bge.n	800beb6 <__gethex+0x26e>
 800be32:	4621      	mov	r1, r4
 800be34:	4648      	mov	r0, r9
 800be36:	f7fd fd79 	bl	800992c <_Bfree>
 800be3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be3c:	2300      	movs	r3, #0
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800be44:	e78a      	b.n	800bd5c <__gethex+0x114>
 800be46:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800be4a:	2a2e      	cmp	r2, #46	; 0x2e
 800be4c:	d014      	beq.n	800be78 <__gethex+0x230>
 800be4e:	2b20      	cmp	r3, #32
 800be50:	d106      	bne.n	800be60 <__gethex+0x218>
 800be52:	9b01      	ldr	r3, [sp, #4]
 800be54:	f843 bb04 	str.w	fp, [r3], #4
 800be58:	f04f 0b00 	mov.w	fp, #0
 800be5c:	9301      	str	r3, [sp, #4]
 800be5e:	465b      	mov	r3, fp
 800be60:	7828      	ldrb	r0, [r5, #0]
 800be62:	9303      	str	r3, [sp, #12]
 800be64:	f7ff feda 	bl	800bc1c <__hexdig_fun>
 800be68:	9b03      	ldr	r3, [sp, #12]
 800be6a:	f000 000f 	and.w	r0, r0, #15
 800be6e:	4098      	lsls	r0, r3
 800be70:	ea4b 0b00 	orr.w	fp, fp, r0
 800be74:	3304      	adds	r3, #4
 800be76:	e7a1      	b.n	800bdbc <__gethex+0x174>
 800be78:	45a8      	cmp	r8, r5
 800be7a:	d8e8      	bhi.n	800be4e <__gethex+0x206>
 800be7c:	2201      	movs	r2, #1
 800be7e:	4628      	mov	r0, r5
 800be80:	9303      	str	r3, [sp, #12]
 800be82:	f7ff fe0a 	bl	800ba9a <strncmp>
 800be86:	4926      	ldr	r1, [pc, #152]	; (800bf20 <__gethex+0x2d8>)
 800be88:	9b03      	ldr	r3, [sp, #12]
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d1df      	bne.n	800be4e <__gethex+0x206>
 800be8e:	e795      	b.n	800bdbc <__gethex+0x174>
 800be90:	f04f 0b03 	mov.w	fp, #3
 800be94:	e7c5      	b.n	800be22 <__gethex+0x1da>
 800be96:	da0b      	bge.n	800beb0 <__gethex+0x268>
 800be98:	eba5 0800 	sub.w	r8, r5, r0
 800be9c:	4621      	mov	r1, r4
 800be9e:	4642      	mov	r2, r8
 800bea0:	4648      	mov	r0, r9
 800bea2:	f7fd ff5d 	bl	8009d60 <__lshift>
 800bea6:	eba6 0608 	sub.w	r6, r6, r8
 800beaa:	4604      	mov	r4, r0
 800beac:	f100 0a14 	add.w	sl, r0, #20
 800beb0:	f04f 0b00 	mov.w	fp, #0
 800beb4:	e7ba      	b.n	800be2c <__gethex+0x1e4>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	42b3      	cmp	r3, r6
 800beba:	dd73      	ble.n	800bfa4 <__gethex+0x35c>
 800bebc:	1b9e      	subs	r6, r3, r6
 800bebe:	42b5      	cmp	r5, r6
 800bec0:	dc34      	bgt.n	800bf2c <__gethex+0x2e4>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d023      	beq.n	800bf10 <__gethex+0x2c8>
 800bec8:	2b03      	cmp	r3, #3
 800beca:	d025      	beq.n	800bf18 <__gethex+0x2d0>
 800becc:	2b01      	cmp	r3, #1
 800bece:	d115      	bne.n	800befc <__gethex+0x2b4>
 800bed0:	42b5      	cmp	r5, r6
 800bed2:	d113      	bne.n	800befc <__gethex+0x2b4>
 800bed4:	2d01      	cmp	r5, #1
 800bed6:	d10b      	bne.n	800bef0 <__gethex+0x2a8>
 800bed8:	9a02      	ldr	r2, [sp, #8]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6013      	str	r3, [r2, #0]
 800bede:	2301      	movs	r3, #1
 800bee0:	6123      	str	r3, [r4, #16]
 800bee2:	f8ca 3000 	str.w	r3, [sl]
 800bee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bee8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800beec:	601c      	str	r4, [r3, #0]
 800beee:	e735      	b.n	800bd5c <__gethex+0x114>
 800bef0:	1e69      	subs	r1, r5, #1
 800bef2:	4620      	mov	r0, r4
 800bef4:	f7fe f966 	bl	800a1c4 <__any_on>
 800bef8:	2800      	cmp	r0, #0
 800befa:	d1ed      	bne.n	800bed8 <__gethex+0x290>
 800befc:	4621      	mov	r1, r4
 800befe:	4648      	mov	r0, r9
 800bf00:	f7fd fd14 	bl	800992c <_Bfree>
 800bf04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf06:	2300      	movs	r3, #0
 800bf08:	6013      	str	r3, [r2, #0]
 800bf0a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bf0e:	e725      	b.n	800bd5c <__gethex+0x114>
 800bf10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1f2      	bne.n	800befc <__gethex+0x2b4>
 800bf16:	e7df      	b.n	800bed8 <__gethex+0x290>
 800bf18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1dc      	bne.n	800bed8 <__gethex+0x290>
 800bf1e:	e7ed      	b.n	800befc <__gethex+0x2b4>
 800bf20:	0800cd0c 	.word	0x0800cd0c
 800bf24:	0800cba4 	.word	0x0800cba4
 800bf28:	0800cdd0 	.word	0x0800cdd0
 800bf2c:	f106 38ff 	add.w	r8, r6, #4294967295
 800bf30:	f1bb 0f00 	cmp.w	fp, #0
 800bf34:	d133      	bne.n	800bf9e <__gethex+0x356>
 800bf36:	f1b8 0f00 	cmp.w	r8, #0
 800bf3a:	d004      	beq.n	800bf46 <__gethex+0x2fe>
 800bf3c:	4641      	mov	r1, r8
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f7fe f940 	bl	800a1c4 <__any_on>
 800bf44:	4683      	mov	fp, r0
 800bf46:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf50:	f008 081f 	and.w	r8, r8, #31
 800bf54:	fa03 f308 	lsl.w	r3, r3, r8
 800bf58:	4213      	tst	r3, r2
 800bf5a:	4631      	mov	r1, r6
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	bf18      	it	ne
 800bf60:	f04b 0b02 	orrne.w	fp, fp, #2
 800bf64:	1bad      	subs	r5, r5, r6
 800bf66:	f7ff fe07 	bl	800bb78 <rshift>
 800bf6a:	687e      	ldr	r6, [r7, #4]
 800bf6c:	f04f 0802 	mov.w	r8, #2
 800bf70:	f1bb 0f00 	cmp.w	fp, #0
 800bf74:	d04a      	beq.n	800c00c <__gethex+0x3c4>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d016      	beq.n	800bfaa <__gethex+0x362>
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d018      	beq.n	800bfb2 <__gethex+0x36a>
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d109      	bne.n	800bf98 <__gethex+0x350>
 800bf84:	f01b 0f02 	tst.w	fp, #2
 800bf88:	d006      	beq.n	800bf98 <__gethex+0x350>
 800bf8a:	f8da 3000 	ldr.w	r3, [sl]
 800bf8e:	ea4b 0b03 	orr.w	fp, fp, r3
 800bf92:	f01b 0f01 	tst.w	fp, #1
 800bf96:	d10f      	bne.n	800bfb8 <__gethex+0x370>
 800bf98:	f048 0810 	orr.w	r8, r8, #16
 800bf9c:	e036      	b.n	800c00c <__gethex+0x3c4>
 800bf9e:	f04f 0b01 	mov.w	fp, #1
 800bfa2:	e7d0      	b.n	800bf46 <__gethex+0x2fe>
 800bfa4:	f04f 0801 	mov.w	r8, #1
 800bfa8:	e7e2      	b.n	800bf70 <__gethex+0x328>
 800bfaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfac:	f1c3 0301 	rsb	r3, r3, #1
 800bfb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d0ef      	beq.n	800bf98 <__gethex+0x350>
 800bfb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bfbc:	f104 0214 	add.w	r2, r4, #20
 800bfc0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4694      	mov	ip, r2
 800bfce:	f852 1b04 	ldr.w	r1, [r2], #4
 800bfd2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bfd6:	d01e      	beq.n	800c016 <__gethex+0x3ce>
 800bfd8:	3101      	adds	r1, #1
 800bfda:	f8cc 1000 	str.w	r1, [ip]
 800bfde:	f1b8 0f02 	cmp.w	r8, #2
 800bfe2:	f104 0214 	add.w	r2, r4, #20
 800bfe6:	d13d      	bne.n	800c064 <__gethex+0x41c>
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	42ab      	cmp	r3, r5
 800bfee:	d10b      	bne.n	800c008 <__gethex+0x3c0>
 800bff0:	1169      	asrs	r1, r5, #5
 800bff2:	2301      	movs	r3, #1
 800bff4:	f005 051f 	and.w	r5, r5, #31
 800bff8:	fa03 f505 	lsl.w	r5, r3, r5
 800bffc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c000:	421d      	tst	r5, r3
 800c002:	bf18      	it	ne
 800c004:	f04f 0801 	movne.w	r8, #1
 800c008:	f048 0820 	orr.w	r8, r8, #32
 800c00c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c00e:	601c      	str	r4, [r3, #0]
 800c010:	9b02      	ldr	r3, [sp, #8]
 800c012:	601e      	str	r6, [r3, #0]
 800c014:	e6a2      	b.n	800bd5c <__gethex+0x114>
 800c016:	4290      	cmp	r0, r2
 800c018:	f842 3c04 	str.w	r3, [r2, #-4]
 800c01c:	d8d6      	bhi.n	800bfcc <__gethex+0x384>
 800c01e:	68a2      	ldr	r2, [r4, #8]
 800c020:	4593      	cmp	fp, r2
 800c022:	db17      	blt.n	800c054 <__gethex+0x40c>
 800c024:	6861      	ldr	r1, [r4, #4]
 800c026:	4648      	mov	r0, r9
 800c028:	3101      	adds	r1, #1
 800c02a:	f7fd fc3f 	bl	80098ac <_Balloc>
 800c02e:	4682      	mov	sl, r0
 800c030:	b918      	cbnz	r0, 800c03a <__gethex+0x3f2>
 800c032:	4b1b      	ldr	r3, [pc, #108]	; (800c0a0 <__gethex+0x458>)
 800c034:	4602      	mov	r2, r0
 800c036:	2184      	movs	r1, #132	; 0x84
 800c038:	e6b3      	b.n	800bda2 <__gethex+0x15a>
 800c03a:	6922      	ldr	r2, [r4, #16]
 800c03c:	3202      	adds	r2, #2
 800c03e:	f104 010c 	add.w	r1, r4, #12
 800c042:	0092      	lsls	r2, r2, #2
 800c044:	300c      	adds	r0, #12
 800c046:	f7ff fd4b 	bl	800bae0 <memcpy>
 800c04a:	4621      	mov	r1, r4
 800c04c:	4648      	mov	r0, r9
 800c04e:	f7fd fc6d 	bl	800992c <_Bfree>
 800c052:	4654      	mov	r4, sl
 800c054:	6922      	ldr	r2, [r4, #16]
 800c056:	1c51      	adds	r1, r2, #1
 800c058:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c05c:	6121      	str	r1, [r4, #16]
 800c05e:	2101      	movs	r1, #1
 800c060:	6151      	str	r1, [r2, #20]
 800c062:	e7bc      	b.n	800bfde <__gethex+0x396>
 800c064:	6921      	ldr	r1, [r4, #16]
 800c066:	4559      	cmp	r1, fp
 800c068:	dd0b      	ble.n	800c082 <__gethex+0x43a>
 800c06a:	2101      	movs	r1, #1
 800c06c:	4620      	mov	r0, r4
 800c06e:	f7ff fd83 	bl	800bb78 <rshift>
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	3601      	adds	r6, #1
 800c076:	42b3      	cmp	r3, r6
 800c078:	f6ff aedb 	blt.w	800be32 <__gethex+0x1ea>
 800c07c:	f04f 0801 	mov.w	r8, #1
 800c080:	e7c2      	b.n	800c008 <__gethex+0x3c0>
 800c082:	f015 051f 	ands.w	r5, r5, #31
 800c086:	d0f9      	beq.n	800c07c <__gethex+0x434>
 800c088:	9b01      	ldr	r3, [sp, #4]
 800c08a:	441a      	add	r2, r3
 800c08c:	f1c5 0520 	rsb	r5, r5, #32
 800c090:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c094:	f7fd fcfc 	bl	8009a90 <__hi0bits>
 800c098:	42a8      	cmp	r0, r5
 800c09a:	dbe6      	blt.n	800c06a <__gethex+0x422>
 800c09c:	e7ee      	b.n	800c07c <__gethex+0x434>
 800c09e:	bf00      	nop
 800c0a0:	0800cba4 	.word	0x0800cba4

0800c0a4 <L_shift>:
 800c0a4:	f1c2 0208 	rsb	r2, r2, #8
 800c0a8:	0092      	lsls	r2, r2, #2
 800c0aa:	b570      	push	{r4, r5, r6, lr}
 800c0ac:	f1c2 0620 	rsb	r6, r2, #32
 800c0b0:	6843      	ldr	r3, [r0, #4]
 800c0b2:	6804      	ldr	r4, [r0, #0]
 800c0b4:	fa03 f506 	lsl.w	r5, r3, r6
 800c0b8:	432c      	orrs	r4, r5
 800c0ba:	40d3      	lsrs	r3, r2
 800c0bc:	6004      	str	r4, [r0, #0]
 800c0be:	f840 3f04 	str.w	r3, [r0, #4]!
 800c0c2:	4288      	cmp	r0, r1
 800c0c4:	d3f4      	bcc.n	800c0b0 <L_shift+0xc>
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}

0800c0c8 <__match>:
 800c0c8:	b530      	push	{r4, r5, lr}
 800c0ca:	6803      	ldr	r3, [r0, #0]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0d2:	b914      	cbnz	r4, 800c0da <__match+0x12>
 800c0d4:	6003      	str	r3, [r0, #0]
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	bd30      	pop	{r4, r5, pc}
 800c0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c0e2:	2d19      	cmp	r5, #25
 800c0e4:	bf98      	it	ls
 800c0e6:	3220      	addls	r2, #32
 800c0e8:	42a2      	cmp	r2, r4
 800c0ea:	d0f0      	beq.n	800c0ce <__match+0x6>
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	e7f3      	b.n	800c0d8 <__match+0x10>

0800c0f0 <__hexnan>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	680b      	ldr	r3, [r1, #0]
 800c0f6:	6801      	ldr	r1, [r0, #0]
 800c0f8:	115e      	asrs	r6, r3, #5
 800c0fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0fe:	f013 031f 	ands.w	r3, r3, #31
 800c102:	b087      	sub	sp, #28
 800c104:	bf18      	it	ne
 800c106:	3604      	addne	r6, #4
 800c108:	2500      	movs	r5, #0
 800c10a:	1f37      	subs	r7, r6, #4
 800c10c:	4682      	mov	sl, r0
 800c10e:	4690      	mov	r8, r2
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	f846 5c04 	str.w	r5, [r6, #-4]
 800c116:	46b9      	mov	r9, r7
 800c118:	463c      	mov	r4, r7
 800c11a:	9502      	str	r5, [sp, #8]
 800c11c:	46ab      	mov	fp, r5
 800c11e:	784a      	ldrb	r2, [r1, #1]
 800c120:	1c4b      	adds	r3, r1, #1
 800c122:	9303      	str	r3, [sp, #12]
 800c124:	b342      	cbz	r2, 800c178 <__hexnan+0x88>
 800c126:	4610      	mov	r0, r2
 800c128:	9105      	str	r1, [sp, #20]
 800c12a:	9204      	str	r2, [sp, #16]
 800c12c:	f7ff fd76 	bl	800bc1c <__hexdig_fun>
 800c130:	2800      	cmp	r0, #0
 800c132:	d14f      	bne.n	800c1d4 <__hexnan+0xe4>
 800c134:	9a04      	ldr	r2, [sp, #16]
 800c136:	9905      	ldr	r1, [sp, #20]
 800c138:	2a20      	cmp	r2, #32
 800c13a:	d818      	bhi.n	800c16e <__hexnan+0x7e>
 800c13c:	9b02      	ldr	r3, [sp, #8]
 800c13e:	459b      	cmp	fp, r3
 800c140:	dd13      	ble.n	800c16a <__hexnan+0x7a>
 800c142:	454c      	cmp	r4, r9
 800c144:	d206      	bcs.n	800c154 <__hexnan+0x64>
 800c146:	2d07      	cmp	r5, #7
 800c148:	dc04      	bgt.n	800c154 <__hexnan+0x64>
 800c14a:	462a      	mov	r2, r5
 800c14c:	4649      	mov	r1, r9
 800c14e:	4620      	mov	r0, r4
 800c150:	f7ff ffa8 	bl	800c0a4 <L_shift>
 800c154:	4544      	cmp	r4, r8
 800c156:	d950      	bls.n	800c1fa <__hexnan+0x10a>
 800c158:	2300      	movs	r3, #0
 800c15a:	f1a4 0904 	sub.w	r9, r4, #4
 800c15e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c162:	f8cd b008 	str.w	fp, [sp, #8]
 800c166:	464c      	mov	r4, r9
 800c168:	461d      	mov	r5, r3
 800c16a:	9903      	ldr	r1, [sp, #12]
 800c16c:	e7d7      	b.n	800c11e <__hexnan+0x2e>
 800c16e:	2a29      	cmp	r2, #41	; 0x29
 800c170:	d155      	bne.n	800c21e <__hexnan+0x12e>
 800c172:	3102      	adds	r1, #2
 800c174:	f8ca 1000 	str.w	r1, [sl]
 800c178:	f1bb 0f00 	cmp.w	fp, #0
 800c17c:	d04f      	beq.n	800c21e <__hexnan+0x12e>
 800c17e:	454c      	cmp	r4, r9
 800c180:	d206      	bcs.n	800c190 <__hexnan+0xa0>
 800c182:	2d07      	cmp	r5, #7
 800c184:	dc04      	bgt.n	800c190 <__hexnan+0xa0>
 800c186:	462a      	mov	r2, r5
 800c188:	4649      	mov	r1, r9
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7ff ff8a 	bl	800c0a4 <L_shift>
 800c190:	4544      	cmp	r4, r8
 800c192:	d934      	bls.n	800c1fe <__hexnan+0x10e>
 800c194:	f1a8 0204 	sub.w	r2, r8, #4
 800c198:	4623      	mov	r3, r4
 800c19a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c19e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1a2:	429f      	cmp	r7, r3
 800c1a4:	d2f9      	bcs.n	800c19a <__hexnan+0xaa>
 800c1a6:	1b3b      	subs	r3, r7, r4
 800c1a8:	f023 0303 	bic.w	r3, r3, #3
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	3e03      	subs	r6, #3
 800c1b0:	3401      	adds	r4, #1
 800c1b2:	42a6      	cmp	r6, r4
 800c1b4:	bf38      	it	cc
 800c1b6:	2304      	movcc	r3, #4
 800c1b8:	4443      	add	r3, r8
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f843 2b04 	str.w	r2, [r3], #4
 800c1c0:	429f      	cmp	r7, r3
 800c1c2:	d2fb      	bcs.n	800c1bc <__hexnan+0xcc>
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	b91b      	cbnz	r3, 800c1d0 <__hexnan+0xe0>
 800c1c8:	4547      	cmp	r7, r8
 800c1ca:	d126      	bne.n	800c21a <__hexnan+0x12a>
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	603b      	str	r3, [r7, #0]
 800c1d0:	2005      	movs	r0, #5
 800c1d2:	e025      	b.n	800c220 <__hexnan+0x130>
 800c1d4:	3501      	adds	r5, #1
 800c1d6:	2d08      	cmp	r5, #8
 800c1d8:	f10b 0b01 	add.w	fp, fp, #1
 800c1dc:	dd06      	ble.n	800c1ec <__hexnan+0xfc>
 800c1de:	4544      	cmp	r4, r8
 800c1e0:	d9c3      	bls.n	800c16a <__hexnan+0x7a>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1e8:	2501      	movs	r5, #1
 800c1ea:	3c04      	subs	r4, #4
 800c1ec:	6822      	ldr	r2, [r4, #0]
 800c1ee:	f000 000f 	and.w	r0, r0, #15
 800c1f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1f6:	6020      	str	r0, [r4, #0]
 800c1f8:	e7b7      	b.n	800c16a <__hexnan+0x7a>
 800c1fa:	2508      	movs	r5, #8
 800c1fc:	e7b5      	b.n	800c16a <__hexnan+0x7a>
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d0df      	beq.n	800c1c4 <__hexnan+0xd4>
 800c204:	f1c3 0320 	rsb	r3, r3, #32
 800c208:	f04f 32ff 	mov.w	r2, #4294967295
 800c20c:	40da      	lsrs	r2, r3
 800c20e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c212:	4013      	ands	r3, r2
 800c214:	f846 3c04 	str.w	r3, [r6, #-4]
 800c218:	e7d4      	b.n	800c1c4 <__hexnan+0xd4>
 800c21a:	3f04      	subs	r7, #4
 800c21c:	e7d2      	b.n	800c1c4 <__hexnan+0xd4>
 800c21e:	2004      	movs	r0, #4
 800c220:	b007      	add	sp, #28
 800c222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c226 <__ascii_mbtowc>:
 800c226:	b082      	sub	sp, #8
 800c228:	b901      	cbnz	r1, 800c22c <__ascii_mbtowc+0x6>
 800c22a:	a901      	add	r1, sp, #4
 800c22c:	b142      	cbz	r2, 800c240 <__ascii_mbtowc+0x1a>
 800c22e:	b14b      	cbz	r3, 800c244 <__ascii_mbtowc+0x1e>
 800c230:	7813      	ldrb	r3, [r2, #0]
 800c232:	600b      	str	r3, [r1, #0]
 800c234:	7812      	ldrb	r2, [r2, #0]
 800c236:	1e10      	subs	r0, r2, #0
 800c238:	bf18      	it	ne
 800c23a:	2001      	movne	r0, #1
 800c23c:	b002      	add	sp, #8
 800c23e:	4770      	bx	lr
 800c240:	4610      	mov	r0, r2
 800c242:	e7fb      	b.n	800c23c <__ascii_mbtowc+0x16>
 800c244:	f06f 0001 	mvn.w	r0, #1
 800c248:	e7f8      	b.n	800c23c <__ascii_mbtowc+0x16>

0800c24a <_realloc_r>:
 800c24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24e:	4680      	mov	r8, r0
 800c250:	4614      	mov	r4, r2
 800c252:	460e      	mov	r6, r1
 800c254:	b921      	cbnz	r1, 800c260 <_realloc_r+0x16>
 800c256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c25a:	4611      	mov	r1, r2
 800c25c:	f7fd ba9a 	b.w	8009794 <_malloc_r>
 800c260:	b92a      	cbnz	r2, 800c26e <_realloc_r+0x24>
 800c262:	f7fd fa23 	bl	80096ac <_free_r>
 800c266:	4625      	mov	r5, r4
 800c268:	4628      	mov	r0, r5
 800c26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26e:	f000 f8b6 	bl	800c3de <_malloc_usable_size_r>
 800c272:	4284      	cmp	r4, r0
 800c274:	4607      	mov	r7, r0
 800c276:	d802      	bhi.n	800c27e <_realloc_r+0x34>
 800c278:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c27c:	d812      	bhi.n	800c2a4 <_realloc_r+0x5a>
 800c27e:	4621      	mov	r1, r4
 800c280:	4640      	mov	r0, r8
 800c282:	f7fd fa87 	bl	8009794 <_malloc_r>
 800c286:	4605      	mov	r5, r0
 800c288:	2800      	cmp	r0, #0
 800c28a:	d0ed      	beq.n	800c268 <_realloc_r+0x1e>
 800c28c:	42bc      	cmp	r4, r7
 800c28e:	4622      	mov	r2, r4
 800c290:	4631      	mov	r1, r6
 800c292:	bf28      	it	cs
 800c294:	463a      	movcs	r2, r7
 800c296:	f7ff fc23 	bl	800bae0 <memcpy>
 800c29a:	4631      	mov	r1, r6
 800c29c:	4640      	mov	r0, r8
 800c29e:	f7fd fa05 	bl	80096ac <_free_r>
 800c2a2:	e7e1      	b.n	800c268 <_realloc_r+0x1e>
 800c2a4:	4635      	mov	r5, r6
 800c2a6:	e7df      	b.n	800c268 <_realloc_r+0x1e>

0800c2a8 <_strtoul_l.constprop.0>:
 800c2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2ac:	4f36      	ldr	r7, [pc, #216]	; (800c388 <_strtoul_l.constprop.0+0xe0>)
 800c2ae:	4686      	mov	lr, r0
 800c2b0:	460d      	mov	r5, r1
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2b8:	5d3e      	ldrb	r6, [r7, r4]
 800c2ba:	f016 0608 	ands.w	r6, r6, #8
 800c2be:	d1f8      	bne.n	800c2b2 <_strtoul_l.constprop.0+0xa>
 800c2c0:	2c2d      	cmp	r4, #45	; 0x2d
 800c2c2:	d130      	bne.n	800c326 <_strtoul_l.constprop.0+0x7e>
 800c2c4:	782c      	ldrb	r4, [r5, #0]
 800c2c6:	2601      	movs	r6, #1
 800c2c8:	1c85      	adds	r5, r0, #2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d057      	beq.n	800c37e <_strtoul_l.constprop.0+0xd6>
 800c2ce:	2b10      	cmp	r3, #16
 800c2d0:	d109      	bne.n	800c2e6 <_strtoul_l.constprop.0+0x3e>
 800c2d2:	2c30      	cmp	r4, #48	; 0x30
 800c2d4:	d107      	bne.n	800c2e6 <_strtoul_l.constprop.0+0x3e>
 800c2d6:	7828      	ldrb	r0, [r5, #0]
 800c2d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c2dc:	2858      	cmp	r0, #88	; 0x58
 800c2de:	d149      	bne.n	800c374 <_strtoul_l.constprop.0+0xcc>
 800c2e0:	786c      	ldrb	r4, [r5, #1]
 800c2e2:	2310      	movs	r3, #16
 800c2e4:	3502      	adds	r5, #2
 800c2e6:	f04f 38ff 	mov.w	r8, #4294967295
 800c2ea:	2700      	movs	r7, #0
 800c2ec:	fbb8 f8f3 	udiv	r8, r8, r3
 800c2f0:	fb03 f908 	mul.w	r9, r3, r8
 800c2f4:	ea6f 0909 	mvn.w	r9, r9
 800c2f8:	4638      	mov	r0, r7
 800c2fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c2fe:	f1bc 0f09 	cmp.w	ip, #9
 800c302:	d815      	bhi.n	800c330 <_strtoul_l.constprop.0+0x88>
 800c304:	4664      	mov	r4, ip
 800c306:	42a3      	cmp	r3, r4
 800c308:	dd23      	ble.n	800c352 <_strtoul_l.constprop.0+0xaa>
 800c30a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800c30e:	d007      	beq.n	800c320 <_strtoul_l.constprop.0+0x78>
 800c310:	4580      	cmp	r8, r0
 800c312:	d31b      	bcc.n	800c34c <_strtoul_l.constprop.0+0xa4>
 800c314:	d101      	bne.n	800c31a <_strtoul_l.constprop.0+0x72>
 800c316:	45a1      	cmp	r9, r4
 800c318:	db18      	blt.n	800c34c <_strtoul_l.constprop.0+0xa4>
 800c31a:	fb00 4003 	mla	r0, r0, r3, r4
 800c31e:	2701      	movs	r7, #1
 800c320:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c324:	e7e9      	b.n	800c2fa <_strtoul_l.constprop.0+0x52>
 800c326:	2c2b      	cmp	r4, #43	; 0x2b
 800c328:	bf04      	itt	eq
 800c32a:	782c      	ldrbeq	r4, [r5, #0]
 800c32c:	1c85      	addeq	r5, r0, #2
 800c32e:	e7cc      	b.n	800c2ca <_strtoul_l.constprop.0+0x22>
 800c330:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c334:	f1bc 0f19 	cmp.w	ip, #25
 800c338:	d801      	bhi.n	800c33e <_strtoul_l.constprop.0+0x96>
 800c33a:	3c37      	subs	r4, #55	; 0x37
 800c33c:	e7e3      	b.n	800c306 <_strtoul_l.constprop.0+0x5e>
 800c33e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c342:	f1bc 0f19 	cmp.w	ip, #25
 800c346:	d804      	bhi.n	800c352 <_strtoul_l.constprop.0+0xaa>
 800c348:	3c57      	subs	r4, #87	; 0x57
 800c34a:	e7dc      	b.n	800c306 <_strtoul_l.constprop.0+0x5e>
 800c34c:	f04f 37ff 	mov.w	r7, #4294967295
 800c350:	e7e6      	b.n	800c320 <_strtoul_l.constprop.0+0x78>
 800c352:	1c7b      	adds	r3, r7, #1
 800c354:	d106      	bne.n	800c364 <_strtoul_l.constprop.0+0xbc>
 800c356:	2322      	movs	r3, #34	; 0x22
 800c358:	f8ce 3000 	str.w	r3, [lr]
 800c35c:	4638      	mov	r0, r7
 800c35e:	b932      	cbnz	r2, 800c36e <_strtoul_l.constprop.0+0xc6>
 800c360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c364:	b106      	cbz	r6, 800c368 <_strtoul_l.constprop.0+0xc0>
 800c366:	4240      	negs	r0, r0
 800c368:	2a00      	cmp	r2, #0
 800c36a:	d0f9      	beq.n	800c360 <_strtoul_l.constprop.0+0xb8>
 800c36c:	b107      	cbz	r7, 800c370 <_strtoul_l.constprop.0+0xc8>
 800c36e:	1e69      	subs	r1, r5, #1
 800c370:	6011      	str	r1, [r2, #0]
 800c372:	e7f5      	b.n	800c360 <_strtoul_l.constprop.0+0xb8>
 800c374:	2430      	movs	r4, #48	; 0x30
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1b5      	bne.n	800c2e6 <_strtoul_l.constprop.0+0x3e>
 800c37a:	2308      	movs	r3, #8
 800c37c:	e7b3      	b.n	800c2e6 <_strtoul_l.constprop.0+0x3e>
 800c37e:	2c30      	cmp	r4, #48	; 0x30
 800c380:	d0a9      	beq.n	800c2d6 <_strtoul_l.constprop.0+0x2e>
 800c382:	230a      	movs	r3, #10
 800c384:	e7af      	b.n	800c2e6 <_strtoul_l.constprop.0+0x3e>
 800c386:	bf00      	nop
 800c388:	0800c9f1 	.word	0x0800c9f1

0800c38c <_strtoul_r>:
 800c38c:	f7ff bf8c 	b.w	800c2a8 <_strtoul_l.constprop.0>

0800c390 <__ascii_wctomb>:
 800c390:	b149      	cbz	r1, 800c3a6 <__ascii_wctomb+0x16>
 800c392:	2aff      	cmp	r2, #255	; 0xff
 800c394:	bf85      	ittet	hi
 800c396:	238a      	movhi	r3, #138	; 0x8a
 800c398:	6003      	strhi	r3, [r0, #0]
 800c39a:	700a      	strbls	r2, [r1, #0]
 800c39c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c3a0:	bf98      	it	ls
 800c3a2:	2001      	movls	r0, #1
 800c3a4:	4770      	bx	lr
 800c3a6:	4608      	mov	r0, r1
 800c3a8:	4770      	bx	lr
	...

0800c3ac <fiprintf>:
 800c3ac:	b40e      	push	{r1, r2, r3}
 800c3ae:	b503      	push	{r0, r1, lr}
 800c3b0:	4601      	mov	r1, r0
 800c3b2:	ab03      	add	r3, sp, #12
 800c3b4:	4805      	ldr	r0, [pc, #20]	; (800c3cc <fiprintf+0x20>)
 800c3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ba:	6800      	ldr	r0, [r0, #0]
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	f000 f83f 	bl	800c440 <_vfiprintf_r>
 800c3c2:	b002      	add	sp, #8
 800c3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3c8:	b003      	add	sp, #12
 800c3ca:	4770      	bx	lr
 800c3cc:	2000007c 	.word	0x2000007c

0800c3d0 <abort>:
 800c3d0:	b508      	push	{r3, lr}
 800c3d2:	2006      	movs	r0, #6
 800c3d4:	f000 fa0c 	bl	800c7f0 <raise>
 800c3d8:	2001      	movs	r0, #1
 800c3da:	f7f6 fa59 	bl	8002890 <_exit>

0800c3de <_malloc_usable_size_r>:
 800c3de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e2:	1f18      	subs	r0, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bfbc      	itt	lt
 800c3e8:	580b      	ldrlt	r3, [r1, r0]
 800c3ea:	18c0      	addlt	r0, r0, r3
 800c3ec:	4770      	bx	lr

0800c3ee <__sfputc_r>:
 800c3ee:	6893      	ldr	r3, [r2, #8]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	b410      	push	{r4}
 800c3f6:	6093      	str	r3, [r2, #8]
 800c3f8:	da08      	bge.n	800c40c <__sfputc_r+0x1e>
 800c3fa:	6994      	ldr	r4, [r2, #24]
 800c3fc:	42a3      	cmp	r3, r4
 800c3fe:	db01      	blt.n	800c404 <__sfputc_r+0x16>
 800c400:	290a      	cmp	r1, #10
 800c402:	d103      	bne.n	800c40c <__sfputc_r+0x1e>
 800c404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c408:	f000 b934 	b.w	800c674 <__swbuf_r>
 800c40c:	6813      	ldr	r3, [r2, #0]
 800c40e:	1c58      	adds	r0, r3, #1
 800c410:	6010      	str	r0, [r2, #0]
 800c412:	7019      	strb	r1, [r3, #0]
 800c414:	4608      	mov	r0, r1
 800c416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <__sfputs_r>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	4606      	mov	r6, r0
 800c420:	460f      	mov	r7, r1
 800c422:	4614      	mov	r4, r2
 800c424:	18d5      	adds	r5, r2, r3
 800c426:	42ac      	cmp	r4, r5
 800c428:	d101      	bne.n	800c42e <__sfputs_r+0x12>
 800c42a:	2000      	movs	r0, #0
 800c42c:	e007      	b.n	800c43e <__sfputs_r+0x22>
 800c42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c432:	463a      	mov	r2, r7
 800c434:	4630      	mov	r0, r6
 800c436:	f7ff ffda 	bl	800c3ee <__sfputc_r>
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	d1f3      	bne.n	800c426 <__sfputs_r+0xa>
 800c43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c440 <_vfiprintf_r>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	460d      	mov	r5, r1
 800c446:	b09d      	sub	sp, #116	; 0x74
 800c448:	4614      	mov	r4, r2
 800c44a:	4698      	mov	r8, r3
 800c44c:	4606      	mov	r6, r0
 800c44e:	b118      	cbz	r0, 800c458 <_vfiprintf_r+0x18>
 800c450:	6a03      	ldr	r3, [r0, #32]
 800c452:	b90b      	cbnz	r3, 800c458 <_vfiprintf_r+0x18>
 800c454:	f7fc f962 	bl	800871c <__sinit>
 800c458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c45a:	07d9      	lsls	r1, r3, #31
 800c45c:	d405      	bmi.n	800c46a <_vfiprintf_r+0x2a>
 800c45e:	89ab      	ldrh	r3, [r5, #12]
 800c460:	059a      	lsls	r2, r3, #22
 800c462:	d402      	bmi.n	800c46a <_vfiprintf_r+0x2a>
 800c464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c466:	f7fc fa9e 	bl	80089a6 <__retarget_lock_acquire_recursive>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	071b      	lsls	r3, r3, #28
 800c46e:	d501      	bpl.n	800c474 <_vfiprintf_r+0x34>
 800c470:	692b      	ldr	r3, [r5, #16]
 800c472:	b99b      	cbnz	r3, 800c49c <_vfiprintf_r+0x5c>
 800c474:	4629      	mov	r1, r5
 800c476:	4630      	mov	r0, r6
 800c478:	f000 f93a 	bl	800c6f0 <__swsetup_r>
 800c47c:	b170      	cbz	r0, 800c49c <_vfiprintf_r+0x5c>
 800c47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c480:	07dc      	lsls	r4, r3, #31
 800c482:	d504      	bpl.n	800c48e <_vfiprintf_r+0x4e>
 800c484:	f04f 30ff 	mov.w	r0, #4294967295
 800c488:	b01d      	add	sp, #116	; 0x74
 800c48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48e:	89ab      	ldrh	r3, [r5, #12]
 800c490:	0598      	lsls	r0, r3, #22
 800c492:	d4f7      	bmi.n	800c484 <_vfiprintf_r+0x44>
 800c494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c496:	f7fc fa87 	bl	80089a8 <__retarget_lock_release_recursive>
 800c49a:	e7f3      	b.n	800c484 <_vfiprintf_r+0x44>
 800c49c:	2300      	movs	r3, #0
 800c49e:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a0:	2320      	movs	r3, #32
 800c4a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4aa:	2330      	movs	r3, #48	; 0x30
 800c4ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c660 <_vfiprintf_r+0x220>
 800c4b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4b4:	f04f 0901 	mov.w	r9, #1
 800c4b8:	4623      	mov	r3, r4
 800c4ba:	469a      	mov	sl, r3
 800c4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c0:	b10a      	cbz	r2, 800c4c6 <_vfiprintf_r+0x86>
 800c4c2:	2a25      	cmp	r2, #37	; 0x25
 800c4c4:	d1f9      	bne.n	800c4ba <_vfiprintf_r+0x7a>
 800c4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ca:	d00b      	beq.n	800c4e4 <_vfiprintf_r+0xa4>
 800c4cc:	465b      	mov	r3, fp
 800c4ce:	4622      	mov	r2, r4
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7ff ffa2 	bl	800c41c <__sfputs_r>
 800c4d8:	3001      	adds	r0, #1
 800c4da:	f000 80a9 	beq.w	800c630 <_vfiprintf_r+0x1f0>
 800c4de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4e0:	445a      	add	r2, fp
 800c4e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 80a1 	beq.w	800c630 <_vfiprintf_r+0x1f0>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4f8:	f10a 0a01 	add.w	sl, sl, #1
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	9307      	str	r3, [sp, #28]
 800c500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c504:	931a      	str	r3, [sp, #104]	; 0x68
 800c506:	4654      	mov	r4, sl
 800c508:	2205      	movs	r2, #5
 800c50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50e:	4854      	ldr	r0, [pc, #336]	; (800c660 <_vfiprintf_r+0x220>)
 800c510:	f7f3 fe5e 	bl	80001d0 <memchr>
 800c514:	9a04      	ldr	r2, [sp, #16]
 800c516:	b9d8      	cbnz	r0, 800c550 <_vfiprintf_r+0x110>
 800c518:	06d1      	lsls	r1, r2, #27
 800c51a:	bf44      	itt	mi
 800c51c:	2320      	movmi	r3, #32
 800c51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c522:	0713      	lsls	r3, r2, #28
 800c524:	bf44      	itt	mi
 800c526:	232b      	movmi	r3, #43	; 0x2b
 800c528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c52c:	f89a 3000 	ldrb.w	r3, [sl]
 800c530:	2b2a      	cmp	r3, #42	; 0x2a
 800c532:	d015      	beq.n	800c560 <_vfiprintf_r+0x120>
 800c534:	9a07      	ldr	r2, [sp, #28]
 800c536:	4654      	mov	r4, sl
 800c538:	2000      	movs	r0, #0
 800c53a:	f04f 0c0a 	mov.w	ip, #10
 800c53e:	4621      	mov	r1, r4
 800c540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c544:	3b30      	subs	r3, #48	; 0x30
 800c546:	2b09      	cmp	r3, #9
 800c548:	d94d      	bls.n	800c5e6 <_vfiprintf_r+0x1a6>
 800c54a:	b1b0      	cbz	r0, 800c57a <_vfiprintf_r+0x13a>
 800c54c:	9207      	str	r2, [sp, #28]
 800c54e:	e014      	b.n	800c57a <_vfiprintf_r+0x13a>
 800c550:	eba0 0308 	sub.w	r3, r0, r8
 800c554:	fa09 f303 	lsl.w	r3, r9, r3
 800c558:	4313      	orrs	r3, r2
 800c55a:	9304      	str	r3, [sp, #16]
 800c55c:	46a2      	mov	sl, r4
 800c55e:	e7d2      	b.n	800c506 <_vfiprintf_r+0xc6>
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	1d19      	adds	r1, r3, #4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	9103      	str	r1, [sp, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	bfbb      	ittet	lt
 800c56c:	425b      	neglt	r3, r3
 800c56e:	f042 0202 	orrlt.w	r2, r2, #2
 800c572:	9307      	strge	r3, [sp, #28]
 800c574:	9307      	strlt	r3, [sp, #28]
 800c576:	bfb8      	it	lt
 800c578:	9204      	strlt	r2, [sp, #16]
 800c57a:	7823      	ldrb	r3, [r4, #0]
 800c57c:	2b2e      	cmp	r3, #46	; 0x2e
 800c57e:	d10c      	bne.n	800c59a <_vfiprintf_r+0x15a>
 800c580:	7863      	ldrb	r3, [r4, #1]
 800c582:	2b2a      	cmp	r3, #42	; 0x2a
 800c584:	d134      	bne.n	800c5f0 <_vfiprintf_r+0x1b0>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	1d1a      	adds	r2, r3, #4
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	9203      	str	r2, [sp, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	bfb8      	it	lt
 800c592:	f04f 33ff 	movlt.w	r3, #4294967295
 800c596:	3402      	adds	r4, #2
 800c598:	9305      	str	r3, [sp, #20]
 800c59a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c670 <_vfiprintf_r+0x230>
 800c59e:	7821      	ldrb	r1, [r4, #0]
 800c5a0:	2203      	movs	r2, #3
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	f7f3 fe14 	bl	80001d0 <memchr>
 800c5a8:	b138      	cbz	r0, 800c5ba <_vfiprintf_r+0x17a>
 800c5aa:	9b04      	ldr	r3, [sp, #16]
 800c5ac:	eba0 000a 	sub.w	r0, r0, sl
 800c5b0:	2240      	movs	r2, #64	; 0x40
 800c5b2:	4082      	lsls	r2, r0
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	3401      	adds	r4, #1
 800c5b8:	9304      	str	r3, [sp, #16]
 800c5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5be:	4829      	ldr	r0, [pc, #164]	; (800c664 <_vfiprintf_r+0x224>)
 800c5c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5c4:	2206      	movs	r2, #6
 800c5c6:	f7f3 fe03 	bl	80001d0 <memchr>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d03f      	beq.n	800c64e <_vfiprintf_r+0x20e>
 800c5ce:	4b26      	ldr	r3, [pc, #152]	; (800c668 <_vfiprintf_r+0x228>)
 800c5d0:	bb1b      	cbnz	r3, 800c61a <_vfiprintf_r+0x1da>
 800c5d2:	9b03      	ldr	r3, [sp, #12]
 800c5d4:	3307      	adds	r3, #7
 800c5d6:	f023 0307 	bic.w	r3, r3, #7
 800c5da:	3308      	adds	r3, #8
 800c5dc:	9303      	str	r3, [sp, #12]
 800c5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e0:	443b      	add	r3, r7
 800c5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e4:	e768      	b.n	800c4b8 <_vfiprintf_r+0x78>
 800c5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	2001      	movs	r0, #1
 800c5ee:	e7a6      	b.n	800c53e <_vfiprintf_r+0xfe>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	3401      	adds	r4, #1
 800c5f4:	9305      	str	r3, [sp, #20]
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	f04f 0c0a 	mov.w	ip, #10
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c602:	3a30      	subs	r2, #48	; 0x30
 800c604:	2a09      	cmp	r2, #9
 800c606:	d903      	bls.n	800c610 <_vfiprintf_r+0x1d0>
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0c6      	beq.n	800c59a <_vfiprintf_r+0x15a>
 800c60c:	9105      	str	r1, [sp, #20]
 800c60e:	e7c4      	b.n	800c59a <_vfiprintf_r+0x15a>
 800c610:	fb0c 2101 	mla	r1, ip, r1, r2
 800c614:	4604      	mov	r4, r0
 800c616:	2301      	movs	r3, #1
 800c618:	e7f0      	b.n	800c5fc <_vfiprintf_r+0x1bc>
 800c61a:	ab03      	add	r3, sp, #12
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	462a      	mov	r2, r5
 800c620:	4b12      	ldr	r3, [pc, #72]	; (800c66c <_vfiprintf_r+0x22c>)
 800c622:	a904      	add	r1, sp, #16
 800c624:	4630      	mov	r0, r6
 800c626:	f7fb fa17 	bl	8007a58 <_printf_float>
 800c62a:	4607      	mov	r7, r0
 800c62c:	1c78      	adds	r0, r7, #1
 800c62e:	d1d6      	bne.n	800c5de <_vfiprintf_r+0x19e>
 800c630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c632:	07d9      	lsls	r1, r3, #31
 800c634:	d405      	bmi.n	800c642 <_vfiprintf_r+0x202>
 800c636:	89ab      	ldrh	r3, [r5, #12]
 800c638:	059a      	lsls	r2, r3, #22
 800c63a:	d402      	bmi.n	800c642 <_vfiprintf_r+0x202>
 800c63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c63e:	f7fc f9b3 	bl	80089a8 <__retarget_lock_release_recursive>
 800c642:	89ab      	ldrh	r3, [r5, #12]
 800c644:	065b      	lsls	r3, r3, #25
 800c646:	f53f af1d 	bmi.w	800c484 <_vfiprintf_r+0x44>
 800c64a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c64c:	e71c      	b.n	800c488 <_vfiprintf_r+0x48>
 800c64e:	ab03      	add	r3, sp, #12
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	462a      	mov	r2, r5
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <_vfiprintf_r+0x22c>)
 800c656:	a904      	add	r1, sp, #16
 800c658:	4630      	mov	r0, r6
 800c65a:	f7fb fca1 	bl	8007fa0 <_printf_i>
 800c65e:	e7e4      	b.n	800c62a <_vfiprintf_r+0x1ea>
 800c660:	0800cd60 	.word	0x0800cd60
 800c664:	0800cd6a 	.word	0x0800cd6a
 800c668:	08007a59 	.word	0x08007a59
 800c66c:	0800c41d 	.word	0x0800c41d
 800c670:	0800cd66 	.word	0x0800cd66

0800c674 <__swbuf_r>:
 800c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c676:	460e      	mov	r6, r1
 800c678:	4614      	mov	r4, r2
 800c67a:	4605      	mov	r5, r0
 800c67c:	b118      	cbz	r0, 800c686 <__swbuf_r+0x12>
 800c67e:	6a03      	ldr	r3, [r0, #32]
 800c680:	b90b      	cbnz	r3, 800c686 <__swbuf_r+0x12>
 800c682:	f7fc f84b 	bl	800871c <__sinit>
 800c686:	69a3      	ldr	r3, [r4, #24]
 800c688:	60a3      	str	r3, [r4, #8]
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	071a      	lsls	r2, r3, #28
 800c68e:	d525      	bpl.n	800c6dc <__swbuf_r+0x68>
 800c690:	6923      	ldr	r3, [r4, #16]
 800c692:	b31b      	cbz	r3, 800c6dc <__swbuf_r+0x68>
 800c694:	6823      	ldr	r3, [r4, #0]
 800c696:	6922      	ldr	r2, [r4, #16]
 800c698:	1a98      	subs	r0, r3, r2
 800c69a:	6963      	ldr	r3, [r4, #20]
 800c69c:	b2f6      	uxtb	r6, r6
 800c69e:	4283      	cmp	r3, r0
 800c6a0:	4637      	mov	r7, r6
 800c6a2:	dc04      	bgt.n	800c6ae <__swbuf_r+0x3a>
 800c6a4:	4621      	mov	r1, r4
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	f7ff f942 	bl	800b930 <_fflush_r>
 800c6ac:	b9e0      	cbnz	r0, 800c6e8 <__swbuf_r+0x74>
 800c6ae:	68a3      	ldr	r3, [r4, #8]
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	60a3      	str	r3, [r4, #8]
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	1c5a      	adds	r2, r3, #1
 800c6b8:	6022      	str	r2, [r4, #0]
 800c6ba:	701e      	strb	r6, [r3, #0]
 800c6bc:	6962      	ldr	r2, [r4, #20]
 800c6be:	1c43      	adds	r3, r0, #1
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d004      	beq.n	800c6ce <__swbuf_r+0x5a>
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	07db      	lsls	r3, r3, #31
 800c6c8:	d506      	bpl.n	800c6d8 <__swbuf_r+0x64>
 800c6ca:	2e0a      	cmp	r6, #10
 800c6cc:	d104      	bne.n	800c6d8 <__swbuf_r+0x64>
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f7ff f92d 	bl	800b930 <_fflush_r>
 800c6d6:	b938      	cbnz	r0, 800c6e8 <__swbuf_r+0x74>
 800c6d8:	4638      	mov	r0, r7
 800c6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6dc:	4621      	mov	r1, r4
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f000 f806 	bl	800c6f0 <__swsetup_r>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d0d5      	beq.n	800c694 <__swbuf_r+0x20>
 800c6e8:	f04f 37ff 	mov.w	r7, #4294967295
 800c6ec:	e7f4      	b.n	800c6d8 <__swbuf_r+0x64>
	...

0800c6f0 <__swsetup_r>:
 800c6f0:	b538      	push	{r3, r4, r5, lr}
 800c6f2:	4b2a      	ldr	r3, [pc, #168]	; (800c79c <__swsetup_r+0xac>)
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	6818      	ldr	r0, [r3, #0]
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	b118      	cbz	r0, 800c704 <__swsetup_r+0x14>
 800c6fc:	6a03      	ldr	r3, [r0, #32]
 800c6fe:	b90b      	cbnz	r3, 800c704 <__swsetup_r+0x14>
 800c700:	f7fc f80c 	bl	800871c <__sinit>
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c70a:	0718      	lsls	r0, r3, #28
 800c70c:	d422      	bmi.n	800c754 <__swsetup_r+0x64>
 800c70e:	06d9      	lsls	r1, r3, #27
 800c710:	d407      	bmi.n	800c722 <__swsetup_r+0x32>
 800c712:	2309      	movs	r3, #9
 800c714:	602b      	str	r3, [r5, #0]
 800c716:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c71a:	81a3      	strh	r3, [r4, #12]
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295
 800c720:	e034      	b.n	800c78c <__swsetup_r+0x9c>
 800c722:	0758      	lsls	r0, r3, #29
 800c724:	d512      	bpl.n	800c74c <__swsetup_r+0x5c>
 800c726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c728:	b141      	cbz	r1, 800c73c <__swsetup_r+0x4c>
 800c72a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c72e:	4299      	cmp	r1, r3
 800c730:	d002      	beq.n	800c738 <__swsetup_r+0x48>
 800c732:	4628      	mov	r0, r5
 800c734:	f7fc ffba 	bl	80096ac <_free_r>
 800c738:	2300      	movs	r3, #0
 800c73a:	6363      	str	r3, [r4, #52]	; 0x34
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c742:	81a3      	strh	r3, [r4, #12]
 800c744:	2300      	movs	r3, #0
 800c746:	6063      	str	r3, [r4, #4]
 800c748:	6923      	ldr	r3, [r4, #16]
 800c74a:	6023      	str	r3, [r4, #0]
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	f043 0308 	orr.w	r3, r3, #8
 800c752:	81a3      	strh	r3, [r4, #12]
 800c754:	6923      	ldr	r3, [r4, #16]
 800c756:	b94b      	cbnz	r3, 800c76c <__swsetup_r+0x7c>
 800c758:	89a3      	ldrh	r3, [r4, #12]
 800c75a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c75e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c762:	d003      	beq.n	800c76c <__swsetup_r+0x7c>
 800c764:	4621      	mov	r1, r4
 800c766:	4628      	mov	r0, r5
 800c768:	f000 f884 	bl	800c874 <__smakebuf_r>
 800c76c:	89a0      	ldrh	r0, [r4, #12]
 800c76e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c772:	f010 0301 	ands.w	r3, r0, #1
 800c776:	d00a      	beq.n	800c78e <__swsetup_r+0x9e>
 800c778:	2300      	movs	r3, #0
 800c77a:	60a3      	str	r3, [r4, #8]
 800c77c:	6963      	ldr	r3, [r4, #20]
 800c77e:	425b      	negs	r3, r3
 800c780:	61a3      	str	r3, [r4, #24]
 800c782:	6923      	ldr	r3, [r4, #16]
 800c784:	b943      	cbnz	r3, 800c798 <__swsetup_r+0xa8>
 800c786:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c78a:	d1c4      	bne.n	800c716 <__swsetup_r+0x26>
 800c78c:	bd38      	pop	{r3, r4, r5, pc}
 800c78e:	0781      	lsls	r1, r0, #30
 800c790:	bf58      	it	pl
 800c792:	6963      	ldrpl	r3, [r4, #20]
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	e7f4      	b.n	800c782 <__swsetup_r+0x92>
 800c798:	2000      	movs	r0, #0
 800c79a:	e7f7      	b.n	800c78c <__swsetup_r+0x9c>
 800c79c:	2000007c 	.word	0x2000007c

0800c7a0 <_raise_r>:
 800c7a0:	291f      	cmp	r1, #31
 800c7a2:	b538      	push	{r3, r4, r5, lr}
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	460d      	mov	r5, r1
 800c7a8:	d904      	bls.n	800c7b4 <_raise_r+0x14>
 800c7aa:	2316      	movs	r3, #22
 800c7ac:	6003      	str	r3, [r0, #0]
 800c7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c7b6:	b112      	cbz	r2, 800c7be <_raise_r+0x1e>
 800c7b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7bc:	b94b      	cbnz	r3, 800c7d2 <_raise_r+0x32>
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 f830 	bl	800c824 <_getpid_r>
 800c7c4:	462a      	mov	r2, r5
 800c7c6:	4601      	mov	r1, r0
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7ce:	f000 b817 	b.w	800c800 <_kill_r>
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d00a      	beq.n	800c7ec <_raise_r+0x4c>
 800c7d6:	1c59      	adds	r1, r3, #1
 800c7d8:	d103      	bne.n	800c7e2 <_raise_r+0x42>
 800c7da:	2316      	movs	r3, #22
 800c7dc:	6003      	str	r3, [r0, #0]
 800c7de:	2001      	movs	r0, #1
 800c7e0:	e7e7      	b.n	800c7b2 <_raise_r+0x12>
 800c7e2:	2400      	movs	r4, #0
 800c7e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	4798      	blx	r3
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	e7e0      	b.n	800c7b2 <_raise_r+0x12>

0800c7f0 <raise>:
 800c7f0:	4b02      	ldr	r3, [pc, #8]	; (800c7fc <raise+0xc>)
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	f7ff bfd3 	b.w	800c7a0 <_raise_r>
 800c7fa:	bf00      	nop
 800c7fc:	2000007c 	.word	0x2000007c

0800c800 <_kill_r>:
 800c800:	b538      	push	{r3, r4, r5, lr}
 800c802:	4d07      	ldr	r5, [pc, #28]	; (800c820 <_kill_r+0x20>)
 800c804:	2300      	movs	r3, #0
 800c806:	4604      	mov	r4, r0
 800c808:	4608      	mov	r0, r1
 800c80a:	4611      	mov	r1, r2
 800c80c:	602b      	str	r3, [r5, #0]
 800c80e:	f7f6 f82f 	bl	8002870 <_kill>
 800c812:	1c43      	adds	r3, r0, #1
 800c814:	d102      	bne.n	800c81c <_kill_r+0x1c>
 800c816:	682b      	ldr	r3, [r5, #0]
 800c818:	b103      	cbz	r3, 800c81c <_kill_r+0x1c>
 800c81a:	6023      	str	r3, [r4, #0]
 800c81c:	bd38      	pop	{r3, r4, r5, pc}
 800c81e:	bf00      	nop
 800c820:	20000834 	.word	0x20000834

0800c824 <_getpid_r>:
 800c824:	f7f6 b81c 	b.w	8002860 <_getpid>

0800c828 <__swhatbuf_r>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	460c      	mov	r4, r1
 800c82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c830:	2900      	cmp	r1, #0
 800c832:	b096      	sub	sp, #88	; 0x58
 800c834:	4615      	mov	r5, r2
 800c836:	461e      	mov	r6, r3
 800c838:	da0d      	bge.n	800c856 <__swhatbuf_r+0x2e>
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c840:	f04f 0100 	mov.w	r1, #0
 800c844:	bf0c      	ite	eq
 800c846:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c84a:	2340      	movne	r3, #64	; 0x40
 800c84c:	2000      	movs	r0, #0
 800c84e:	6031      	str	r1, [r6, #0]
 800c850:	602b      	str	r3, [r5, #0]
 800c852:	b016      	add	sp, #88	; 0x58
 800c854:	bd70      	pop	{r4, r5, r6, pc}
 800c856:	466a      	mov	r2, sp
 800c858:	f000 f848 	bl	800c8ec <_fstat_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	dbec      	blt.n	800c83a <__swhatbuf_r+0x12>
 800c860:	9901      	ldr	r1, [sp, #4]
 800c862:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c866:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c86a:	4259      	negs	r1, r3
 800c86c:	4159      	adcs	r1, r3
 800c86e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c872:	e7eb      	b.n	800c84c <__swhatbuf_r+0x24>

0800c874 <__smakebuf_r>:
 800c874:	898b      	ldrh	r3, [r1, #12]
 800c876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c878:	079d      	lsls	r5, r3, #30
 800c87a:	4606      	mov	r6, r0
 800c87c:	460c      	mov	r4, r1
 800c87e:	d507      	bpl.n	800c890 <__smakebuf_r+0x1c>
 800c880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	6123      	str	r3, [r4, #16]
 800c888:	2301      	movs	r3, #1
 800c88a:	6163      	str	r3, [r4, #20]
 800c88c:	b002      	add	sp, #8
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	ab01      	add	r3, sp, #4
 800c892:	466a      	mov	r2, sp
 800c894:	f7ff ffc8 	bl	800c828 <__swhatbuf_r>
 800c898:	9900      	ldr	r1, [sp, #0]
 800c89a:	4605      	mov	r5, r0
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7fc ff79 	bl	8009794 <_malloc_r>
 800c8a2:	b948      	cbnz	r0, 800c8b8 <__smakebuf_r+0x44>
 800c8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a8:	059a      	lsls	r2, r3, #22
 800c8aa:	d4ef      	bmi.n	800c88c <__smakebuf_r+0x18>
 800c8ac:	f023 0303 	bic.w	r3, r3, #3
 800c8b0:	f043 0302 	orr.w	r3, r3, #2
 800c8b4:	81a3      	strh	r3, [r4, #12]
 800c8b6:	e7e3      	b.n	800c880 <__smakebuf_r+0xc>
 800c8b8:	89a3      	ldrh	r3, [r4, #12]
 800c8ba:	6020      	str	r0, [r4, #0]
 800c8bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8c0:	81a3      	strh	r3, [r4, #12]
 800c8c2:	9b00      	ldr	r3, [sp, #0]
 800c8c4:	6163      	str	r3, [r4, #20]
 800c8c6:	9b01      	ldr	r3, [sp, #4]
 800c8c8:	6120      	str	r0, [r4, #16]
 800c8ca:	b15b      	cbz	r3, 800c8e4 <__smakebuf_r+0x70>
 800c8cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f000 f81d 	bl	800c910 <_isatty_r>
 800c8d6:	b128      	cbz	r0, 800c8e4 <__smakebuf_r+0x70>
 800c8d8:	89a3      	ldrh	r3, [r4, #12]
 800c8da:	f023 0303 	bic.w	r3, r3, #3
 800c8de:	f043 0301 	orr.w	r3, r3, #1
 800c8e2:	81a3      	strh	r3, [r4, #12]
 800c8e4:	89a3      	ldrh	r3, [r4, #12]
 800c8e6:	431d      	orrs	r5, r3
 800c8e8:	81a5      	strh	r5, [r4, #12]
 800c8ea:	e7cf      	b.n	800c88c <__smakebuf_r+0x18>

0800c8ec <_fstat_r>:
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	4d07      	ldr	r5, [pc, #28]	; (800c90c <_fstat_r+0x20>)
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	4608      	mov	r0, r1
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	602b      	str	r3, [r5, #0]
 800c8fa:	f7f6 f818 	bl	800292e <_fstat>
 800c8fe:	1c43      	adds	r3, r0, #1
 800c900:	d102      	bne.n	800c908 <_fstat_r+0x1c>
 800c902:	682b      	ldr	r3, [r5, #0]
 800c904:	b103      	cbz	r3, 800c908 <_fstat_r+0x1c>
 800c906:	6023      	str	r3, [r4, #0]
 800c908:	bd38      	pop	{r3, r4, r5, pc}
 800c90a:	bf00      	nop
 800c90c:	20000834 	.word	0x20000834

0800c910 <_isatty_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4d06      	ldr	r5, [pc, #24]	; (800c92c <_isatty_r+0x1c>)
 800c914:	2300      	movs	r3, #0
 800c916:	4604      	mov	r4, r0
 800c918:	4608      	mov	r0, r1
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	f7f6 f817 	bl	800294e <_isatty>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_isatty_r+0x1a>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_isatty_r+0x1a>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	20000834 	.word	0x20000834

0800c930 <_init>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	bf00      	nop
 800c934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c936:	bc08      	pop	{r3}
 800c938:	469e      	mov	lr, r3
 800c93a:	4770      	bx	lr

0800c93c <_fini>:
 800c93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93e:	bf00      	nop
 800c940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c942:	bc08      	pop	{r3}
 800c944:	469e      	mov	lr, r3
 800c946:	4770      	bx	lr
