
My_Robbie_3_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800abb8  0800abb8  0001abb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b088  0800b088  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b088  0800b088  0001b088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b090  0800b090  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b090  0800b090  0001b090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b094  0800b094  0001b094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000003e8  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005d0  200005d0  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ffc0  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002706  00000000  00000000  0003021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f10  00000000  00000000  00032928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bae  00000000  00000000  00033838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021ad0  00000000  00000000  000343e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013594  00000000  00000000  00055eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c877c  00000000  00000000  0006944a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000053dc  00000000  00000000  00131bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00136fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aba0 	.word	0x0800aba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800aba0 	.word	0x0800aba0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f000 ff24 	bl	8001e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f852 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f000 fa50 	bl	80014a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001000:	f000 fa26 	bl	8001450 <MX_DMA_Init>
  MX_RTC_Init();
 8001004:	f000 f8ac 	bl	8001160 <MX_RTC_Init>
  MX_TIM1_Init();
 8001008:	f000 f8d0 	bl	80011ac <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800100c:	f000 f9f6 	bl	80013fc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001010:	f000 f924 	bl	800125c <MX_TIM3_Init>
  MX_FATFS_Init();
 8001014:	f005 f918 	bl	8006248 <MX_FATFS_Init>
  MX_TIM5_Init();
 8001018:	f000 f9a2 	bl	8001360 <MX_TIM5_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // led rojo prendido
  HAL_GPIO_WritePin(STATUS_LED_RED_GPIO_Port, STATUS_LED_RED_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	4816      	ldr	r0, [pc, #88]	; (800107c <main+0x8c>)
 8001024:	f001 fe2e 	bl	8002c84 <HAL_GPIO_WritePin>

  // inicializo los pwm para los motores
  HAL_GPIO_WritePin(AMOT2_GPIO_Port, AMOT2_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2104      	movs	r1, #4
 800102c:	4814      	ldr	r0, [pc, #80]	; (8001080 <main+0x90>)
 800102e:	f001 fe29 	bl	8002c84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BMOT2_GPIO_Port, BMOT2_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <main+0x94>)
 800103a:	f001 fe23 	bl	8002c84 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800103e:	2100      	movs	r1, #0
 8001040:	4811      	ldr	r0, [pc, #68]	; (8001088 <main+0x98>)
 8001042:	f002 fdc5 	bl	8003bd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001046:	2104      	movs	r1, #4
 8001048:	480f      	ldr	r0, [pc, #60]	; (8001088 <main+0x98>)
 800104a:	f002 fdc1 	bl	8003bd0 <HAL_TIM_PWM_Start>

  printWelcomeMessage(&huart3);
 800104e:	480f      	ldr	r0, [pc, #60]	; (800108c <main+0x9c>)
 8001050:	f000 fb1e 	bl	8001690 <printWelcomeMessage>



  // un solo encoder
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001054:	213c      	movs	r1, #60	; 0x3c
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <main+0xa0>)
 8001058:	f002 ff28 	bl	8003eac <HAL_TIM_Encoder_Start>
  cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <main+0xa0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	461a      	mov	r2, r3
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <main+0xa4>)
 8001066:	601a      	str	r2, [r3, #0]

  // tiempo base de 10 Hz
  HAL_TIM_Base_Start_IT(&htim5);
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <main+0xa8>)
 800106a:	f002 fce7 	bl	8003a3c <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_DMA(&huart3,(uint8_t*)&MSG_Rx,3);
 800106e:	2203      	movs	r2, #3
 8001070:	490a      	ldr	r1, [pc, #40]	; (800109c <main+0xac>)
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <main+0x9c>)
 8001074:	f003 ff60 	bl	8004f38 <HAL_UART_Receive_DMA>

  while (1)
 8001078:	e7fe      	b.n	8001078 <main+0x88>
 800107a:	bf00      	nop
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40020400 	.word	0x40020400
 8001088:	2000026c 	.word	0x2000026c
 800108c:	200002fc 	.word	0x200002fc
 8001090:	20000224 	.word	0x20000224
 8001094:	2000045c 	.word	0x2000045c
 8001098:	200002b4 	.word	0x200002b4
 800109c:	20000400 	.word	0x20000400

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 f9bd 	bl	800742e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <SystemClock_Config+0xb8>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <SystemClock_Config+0xb8>)
 80010ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <SystemClock_Config+0xb8>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <SystemClock_Config+0xbc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1c      	ldr	r2, [pc, #112]	; (800115c <SystemClock_Config+0xbc>)
 80010ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <SystemClock_Config+0xbc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010fc:	230a      	movs	r3, #10
 80010fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	2301      	movs	r3, #1
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001104:	2310      	movs	r3, #16
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fdcf 	bl	8002cb8 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001120:	f000 fb6a 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 f832 	bl	80031a8 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800114a:	f000 fb55 	bl	80017f8 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_RTC_Init+0x44>)
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <MX_RTC_Init+0x48>)
 8001168:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_RTC_Init+0x44>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_RTC_Init+0x44>)
 8001172:	227f      	movs	r2, #127	; 0x7f
 8001174:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_RTC_Init+0x44>)
 8001178:	22ff      	movs	r2, #255	; 0xff
 800117a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_RTC_Init+0x44>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_RTC_Init+0x44>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_RTC_Init+0x44>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_RTC_Init+0x44>)
 8001190:	f002 fb0a 	bl	80037a8 <HAL_RTC_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800119a:	f000 fb2d 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000204 	.word	0x20000204
 80011a8:	40002800 	.word	0x40002800

080011ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	; 0x30
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2224      	movs	r2, #36	; 0x24
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f006 f937 	bl	800742e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_TIM1_Init+0xa8>)
 80011ca:	4a23      	ldr	r2, [pc, #140]	; (8001258 <MX_TIM1_Init+0xac>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_TIM1_Init+0xa8>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_TIM1_Init+0xa8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <MX_TIM1_Init+0xa8>)
 80011dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_TIM1_Init+0xa8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_TIM1_Init+0xa8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_TIM1_Init+0xa8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011fc:	2301      	movs	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_TIM1_Init+0xa8>)
 8001220:	f002 fd9e 	bl	8003d60 <HAL_TIM_Encoder_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800122a:	f000 fae5 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_TIM1_Init+0xa8>)
 800123c:	f003 fc8e 	bl	8004b5c <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001246:	f000 fad7 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000224 	.word	0x20000224
 8001258:	40010000 	.word	0x40010000

0800125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]
 800128a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <MX_TIM3_Init+0xfc>)
 800128e:	4a33      	ldr	r2, [pc, #204]	; (800135c <MX_TIM3_Init+0x100>)
 8001290:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <MX_TIM3_Init+0xfc>)
 8001294:	220f      	movs	r2, #15
 8001296:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <MX_TIM3_Init+0xfc>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b2:	4829      	ldr	r0, [pc, #164]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012b4:	f002 fb72 	bl	800399c <HAL_TIM_Base_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012be:	f000 fa9b 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4822      	ldr	r0, [pc, #136]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012d0:	f003 f844 	bl	800435c <HAL_TIM_ConfigClockSource>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012da:	f000 fa8d 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012de:	481e      	ldr	r0, [pc, #120]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012e0:	f002 fc1c 	bl	8003b1c <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012ea:	f000 fa85 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	4619      	mov	r1, r3
 80012fc:	4816      	ldr	r0, [pc, #88]	; (8001358 <MX_TIM3_Init+0xfc>)
 80012fe:	f003 fc2d 	bl	8004b5c <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001308:	f000 fa76 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	2360      	movs	r3, #96	; 0x60
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM3_Init+0xfc>)
 8001324:	f002 ff58 	bl	80041d8 <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800132e:	f000 fa63 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2204      	movs	r2, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM3_Init+0xfc>)
 800133a:	f002 ff4d 	bl	80041d8 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001344:	f000 fa58 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM3_Init+0xfc>)
 800134a:	f000 fb33 	bl	80019b4 <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	; 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000026c 	.word	0x2000026c
 800135c:	40000400 	.word	0x40000400

08001360 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <MX_TIM5_Init+0x94>)
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <MX_TIM5_Init+0x98>)
 8001380:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_TIM5_Init+0x94>)
 8001384:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001388:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_TIM5_Init+0x94>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1599;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_TIM5_Init+0x94>)
 8001392:	f240 623f 	movw	r2, #1599	; 0x63f
 8001396:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_TIM5_Init+0x94>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_TIM5_Init+0x94>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013a4:	4813      	ldr	r0, [pc, #76]	; (80013f4 <MX_TIM5_Init+0x94>)
 80013a6:	f002 faf9 	bl	800399c <HAL_TIM_Base_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013b0:	f000 fa22 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <MX_TIM5_Init+0x94>)
 80013c2:	f002 ffcb 	bl	800435c <HAL_TIM_ConfigClockSource>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80013cc:	f000 fa14 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_TIM5_Init+0x94>)
 80013de:	f003 fbbd 	bl	8004b5c <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80013e8:	f000 fa06 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200002b4 	.word	0x200002b4
 80013f8:	40000c00 	.word	0x40000c00

080013fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART3_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART3_UART_Init+0x4c>)
 8001434:	f003 fc22 	bl	8004c7c <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f000 f9db 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200002fc 	.word	0x200002fc
 800144c:	40004800 	.word	0x40004800

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <MX_DMA_Init+0x4c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <MX_DMA_Init+0x4c>)
 8001460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <MX_DMA_Init+0x4c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	200c      	movs	r0, #12
 8001478:	f000 fe2f 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800147c:	200c      	movs	r0, #12
 800147e:	f000 fe48 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	200e      	movs	r0, #14
 8001488:	f000 fe27 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800148c:	200e      	movs	r0, #14
 800148e:	f000 fe40 	bl	8002112 <HAL_NVIC_EnableIRQ>

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b53      	ldr	r3, [pc, #332]	; (8001608 <MX_GPIO_Init+0x168>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a52      	ldr	r2, [pc, #328]	; (8001608 <MX_GPIO_Init+0x168>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b50      	ldr	r3, [pc, #320]	; (8001608 <MX_GPIO_Init+0x168>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <MX_GPIO_Init+0x168>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a4b      	ldr	r2, [pc, #300]	; (8001608 <MX_GPIO_Init+0x168>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b49      	ldr	r3, [pc, #292]	; (8001608 <MX_GPIO_Init+0x168>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b45      	ldr	r3, [pc, #276]	; (8001608 <MX_GPIO_Init+0x168>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a44      	ldr	r2, [pc, #272]	; (8001608 <MX_GPIO_Init+0x168>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b42      	ldr	r3, [pc, #264]	; (8001608 <MX_GPIO_Init+0x168>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <MX_GPIO_Init+0x168>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a3d      	ldr	r2, [pc, #244]	; (8001608 <MX_GPIO_Init+0x168>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <MX_GPIO_Init+0x168>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <MX_GPIO_Init+0x168>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a36      	ldr	r2, [pc, #216]	; (8001608 <MX_GPIO_Init+0x168>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b34      	ldr	r3, [pc, #208]	; (8001608 <MX_GPIO_Init+0x168>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_RED_GPIO_Port, STATUS_LED_RED_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001548:	4830      	ldr	r0, [pc, #192]	; (800160c <MX_GPIO_Init+0x16c>)
 800154a:	f001 fb9b 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMOT2_GPIO_Port, AMOT2_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2104      	movs	r1, #4
 8001552:	482f      	ldr	r0, [pc, #188]	; (8001610 <MX_GPIO_Init+0x170>)
 8001554:	f001 fb96 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMOT2_GPIO_Port, BMOT2_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155e:	482d      	ldr	r0, [pc, #180]	; (8001614 <MX_GPIO_Init+0x174>)
 8001560:	f001 fb90 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_RED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_RED_Pin;
 8001564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4823      	ldr	r0, [pc, #140]	; (800160c <MX_GPIO_Init+0x16c>)
 800157e:	f001 f9e5 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : C2_2_Pin */
  GPIO_InitStruct.Pin = C2_2_Pin;
 8001582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001594:	2301      	movs	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C2_2_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	481e      	ldr	r0, [pc, #120]	; (8001618 <MX_GPIO_Init+0x178>)
 80015a0:	f001 f9d4 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : AMOT2_Pin */
  GPIO_InitStruct.Pin = AMOT2_Pin;
 80015a4:	2304      	movs	r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AMOT2_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4815      	ldr	r0, [pc, #84]	; (8001610 <MX_GPIO_Init+0x170>)
 80015bc:	f001 f9c6 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : C1_2_Pin */
  GPIO_InitStruct.Pin = C1_2_Pin;
 80015c0:	2308      	movs	r3, #8
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015d0:	2301      	movs	r3, #1
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(C1_2_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	480e      	ldr	r0, [pc, #56]	; (8001614 <MX_GPIO_Init+0x174>)
 80015dc:	f001 f9b6 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMOT2_Pin */
  GPIO_InitStruct.Pin = BMOT2_Pin;
 80015e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMOT2_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_GPIO_Init+0x174>)
 80015fa:	f001 f9a7 	bl	800294c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40020800 	.word	0x40020800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40020400 	.word	0x40020400
 8001618:	40020000 	.word	0x40020000

0800161c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	uint16_t Duty = atoi(MSG_Rx);
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <HAL_UART_RxCpltCallback+0x58>)
 8001626:	f004 fed4 	bl	80063d2 <atoi>
 800162a:	4603      	mov	r3, r0
 800162c:	81fb      	strh	r3, [r7, #14]
//	HAL_GPIO_TogglePin(STATUS_LED_RED_GPIO_Port, STATUS_LED_RED_Pin);

//	if (Duty >= 0 && Duty <=__HAL_TIM_GET_AUTORELOAD(&htim3) ) {
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,Duty);
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_UART_RxCpltCallback+0x5c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	89fa      	ldrh	r2, [r7, #14]
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,Duty);
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_UART_RxCpltCallback+0x5c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	89fa      	ldrh	r2, [r7, #14]
 800163c:	639a      	str	r2, [r3, #56]	; 0x38
//	}

//	devolucion de valor de duty
	data = __HAL_TIM_GET_AUTORELOAD(&htim1)+1;
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_UART_RxCpltCallback+0x60>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	3301      	adds	r3, #1
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_UART_RxCpltCallback+0x64>)
 8001648:	6013      	str	r3, [r2, #0]
	sprintf(MSG_Tx,"\r\nDuty: %d ARR: %d",(int) Duty,(int) data);
 800164a:	89fa      	ldrh	r2, [r7, #14]
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_UART_RxCpltCallback+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <HAL_UART_RxCpltCallback+0x68>)
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <HAL_UART_RxCpltCallback+0x6c>)
 8001654:	f005 fe88 	bl	8007368 <siprintf>
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&MSG_Tx,strlen(MSG_Tx));
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <HAL_UART_RxCpltCallback+0x6c>)
 800165a:	f7fe fe09 	bl	8000270 <strlen>
 800165e:	4603      	mov	r3, r0
 8001660:	b29b      	uxth	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	4908      	ldr	r1, [pc, #32]	; (8001688 <HAL_UART_RxCpltCallback+0x6c>)
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <HAL_UART_RxCpltCallback+0x70>)
 8001668:	f003 fbe8 	bl	8004e3c <HAL_UART_Transmit_DMA>

}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000400 	.word	0x20000400
 8001678:	2000026c 	.word	0x2000026c
 800167c:	20000224 	.word	0x20000224
 8001680:	20000464 	.word	0x20000464
 8001684:	0800abb8 	.word	0x0800abb8
 8001688:	20000420 	.word	0x20000420
 800168c:	200002fc 	.word	0x200002fc

08001690 <printWelcomeMessage>:
void printWelcomeMessage(UART_HandleTypeDef *huart) {
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	char *strings[] = {"\033[0;0H",
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <printWelcomeMessage+0x64>)
 800169a:	f107 0408 	add.w	r4, r7, #8
 800169e:	461d      	mov	r5, r3
 80016a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	6023      	str	r3, [r4, #0]
			"\033[2J",
			"Bienvenidos al stm32:\r\n",
			"1) Valor del PWM:",
			PROMT};

	for (uint8_t i = 0; i < 5; i++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	77fb      	strb	r3, [r7, #31]
 80016ac:	e019      	b.n	80016e2 <printWelcomeMessage+0x52>
		HAL_UART_Transmit(huart, (uint8_t*)strings[i], strlen(strings[i]),1000);
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	3320      	adds	r3, #32
 80016b4:	443b      	add	r3, r7
 80016b6:	f853 4c18 	ldr.w	r4, [r3, #-24]
 80016ba:	7ffb      	ldrb	r3, [r7, #31]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	3320      	adds	r3, #32
 80016c0:	443b      	add	r3, r7
 80016c2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fdd2 	bl	8000270 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d4:	4621      	mov	r1, r4
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f003 fb1d 	bl	8004d16 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 5; i++) {
 80016dc:	7ffb      	ldrb	r3, [r7, #31]
 80016de:	3301      	adds	r3, #1
 80016e0:	77fb      	strb	r3, [r7, #31]
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d9e2      	bls.n	80016ae <printWelcomeMessage+0x1e>
	}
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bdb0      	pop	{r4, r5, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	0800ac0c 	.word	0x0800ac0c

080016f8 <HAL_TIM_PeriodElapsedCallback>:
float Convert_Pulse_To_Rpm(int32_t counter, int32_t time){
	float value = (counter/time)*85.7142;
	return value;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5){
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a35      	ldr	r2, [pc, #212]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d163      	bne.n	80017d2 <HAL_TIM_PeriodElapsedCallback+0xda>
		int32_t diff = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
//		float speed = 0;

		cnt2 = __HAL_TIM_GET_COUNTER(&htim1);
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	461a      	mov	r2, r3
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001718:	601a      	str	r2, [r3, #0]
		if (cnt2  == cnt1) {
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d102      	bne.n	800172c <HAL_TIM_PeriodElapsedCallback+0x34>
			diff = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	e037      	b.n	800179c <HAL_TIM_PeriodElapsedCallback+0xa4>
		} else {
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)){
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b10      	cmp	r3, #16
 8001738:	d118      	bne.n	800176c <HAL_TIM_PeriodElapsedCallback+0x74>
				if (cnt2 < cnt1) /* Check for counter underflow */
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	da06      	bge.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x5c>
					diff = cnt1 - cnt2;
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	e023      	b.n	800179c <HAL_TIM_PeriodElapsedCallback+0xa4>
				else
					diff = ((__HAL_TIM_GET_AUTORELOAD(&htim1)+1) - cnt2) + cnt1;
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	4413      	add	r3, r2
 8001766:	3301      	adds	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e017      	b.n	800179c <HAL_TIM_PeriodElapsedCallback+0xa4>
			} else {
				if (cnt2 > cnt1) /* Check for counter overflow */
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	dd06      	ble.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x8e>
					diff = cnt2 - cnt1;
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e00a      	b.n	800179c <HAL_TIM_PeriodElapsedCallback+0xa4>
				else
					diff = ((__HAL_TIM_GET_AUTORELOAD(&htim1)+1) - cnt1) + cnt2;
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	4413      	add	r3, r2
 8001798:	3301      	adds	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
			}
		}
//		speed = Convert_Pulse_To_Rpm(diff, 100);

//		sprintf(MSG_Tx,"\r\ndiff: %d speed: %.3f",(int) diff, speed);
		sprintf(MSG_Tx,"\r\ncnt1: %d cnt2: %d diff: %d",(int) cnt1, (int) cnt2,(int) diff);
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	460b      	mov	r3, r1
 80017aa:	4910      	ldr	r1, [pc, #64]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80017ae:	f005 fddb 	bl	8007368 <siprintf>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&MSG_Tx,strlen(MSG_Tx));
 80017b2:	480f      	ldr	r0, [pc, #60]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80017b4:	f7fe fd5c 	bl	8000270 <strlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	490c      	ldr	r1, [pc, #48]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80017c2:	f003 fb3b 	bl	8004e3c <HAL_UART_Transmit_DMA>

		cnt1 = __HAL_TIM_GET_COUNTER(&htim1);
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80017d0:	601a      	str	r2, [r3, #0]
	}
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40000c00 	.word	0x40000c00
 80017e0:	20000224 	.word	0x20000224
 80017e4:	20000460 	.word	0x20000460
 80017e8:	2000045c 	.word	0x2000045c
 80017ec:	0800ac20 	.word	0x0800ac20
 80017f0:	20000420 	.word	0x20000420
 80017f4:	200002fc 	.word	0x200002fc

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>
	...

08001804 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_MspInit+0x4c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_MspInit+0x4c>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_MspInit+0x4c>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_MspInit+0x4c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_MspInit+0x4c>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_MspInit+0x4c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_RTC_MspInit+0x4c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d111      	bne.n	8001898 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001874:	2302      	movs	r3, #2
 8001876:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800187c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4618      	mov	r0, r3
 8001884:	f001 feae 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800188e:	f7ff ffb3 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_RTC_MspInit+0x50>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40002800 	.word	0x40002800
 80018a4:	42470e3c 	.word	0x42470e3c

080018a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_TIM_Encoder_MspInit+0x84>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d12c      	bne.n	8001924 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_TIM_Encoder_MspInit+0x88>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_TIM_Encoder_MspInit+0x88>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_TIM_Encoder_MspInit+0x88>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_TIM_Encoder_MspInit+0x88>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_TIM_Encoder_MspInit+0x88>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_TIM_Encoder_MspInit+0x88>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = C1_1_Pin|C2_1_Pin;
 8001902:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001914:	2301      	movs	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001920:	f001 f814 	bl	800294c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	; 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40010000 	.word	0x40010000
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000

08001938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <HAL_TIM_Base_MspInit+0x70>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10e      	bne.n	8001968 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_TIM_Base_MspInit+0x74>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_TIM_Base_MspInit+0x74>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_TIM_Base_MspInit+0x74>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001966:	e01a      	b.n	800199e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_TIM_Base_MspInit+0x78>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d115      	bne.n	800199e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_TIM_Base_MspInit+0x74>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <HAL_TIM_Base_MspInit+0x74>)
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_TIM_Base_MspInit+0x74>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2032      	movs	r0, #50	; 0x32
 8001994:	f000 fba1 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001998:	2032      	movs	r0, #50	; 0x32
 800199a:	f000 fbba 	bl	8002112 <HAL_NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40000c00 	.word	0x40000c00

080019b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <HAL_TIM_MspPostInit+0x68>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d11d      	bne.n	8001a12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_TIM_MspPostInit+0x6c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_TIM_MspPostInit+0x6c>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_TIM_MspPostInit+0x6c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = AMOT1_Pin|BMOT1_Pin;
 80019f2:	2330      	movs	r3, #48	; 0x30
 80019f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_TIM_MspPostInit+0x70>)
 8001a0e:	f000 ff9d 	bl	800294c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020400 	.word	0x40020400

08001a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <HAL_UART_MspInit+0x154>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	f040 8093 	bne.w	8001b72 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <HAL_UART_MspInit+0x158>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	4a4a      	ldr	r2, [pc, #296]	; (8001b80 <HAL_UART_MspInit+0x158>)
 8001a56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5c:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <HAL_UART_MspInit+0x158>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <HAL_UART_MspInit+0x158>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a43      	ldr	r2, [pc, #268]	; (8001b80 <HAL_UART_MspInit+0x158>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <HAL_UART_MspInit+0x158>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a96:	2307      	movs	r3, #7
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4838      	ldr	r0, [pc, #224]	; (8001b84 <HAL_UART_MspInit+0x15c>)
 8001aa2:	f000 ff53 	bl	800294c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001aa6:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001aa8:	4a38      	ldr	r2, [pc, #224]	; (8001b8c <HAL_UART_MspInit+0x164>)
 8001aaa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ab2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab4:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aba:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ada:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001ade:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ae2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001aea:	4827      	ldr	r0, [pc, #156]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001aec:	f000 fb2c 	bl	8002148 <HAL_DMA_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001af6:	f7ff fe7f 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
 8001b00:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_UART_MspInit+0x160>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_UART_MspInit+0x16c>)
 8001b0a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b12:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b26:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001b46:	4812      	ldr	r0, [pc, #72]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b48:	f000 fafe 	bl	8002148 <HAL_DMA_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001b52:	f7ff fe51 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_UART_MspInit+0x168>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2027      	movs	r0, #39	; 0x27
 8001b68:	f000 fab7 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b6c:	2027      	movs	r0, #39	; 0x27
 8001b6e:	f000 fad0 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40004800 	.word	0x40004800
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020800 	.word	0x40020800
 8001b88:	20000340 	.word	0x20000340
 8001b8c:	40026028 	.word	0x40026028
 8001b90:	200003a0 	.word	0x200003a0
 8001b94:	40026058 	.word	0x40026058

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be4:	f000 f97e 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <DMA1_Stream1_IRQHandler+0x10>)
 8001bf2:	f000 fc41 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000340 	.word	0x20000340

08001c00 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <DMA1_Stream3_IRQHandler+0x10>)
 8001c06:	f000 fc37 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200003a0 	.word	0x200003a0

08001c14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <USART3_IRQHandler+0x10>)
 8001c1a:	f003 f9bd 	bl	8004f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002fc 	.word	0x200002fc

08001c28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM5_IRQHandler+0x10>)
 8001c2e:	f002 f9cb 	bl	8003fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200002b4 	.word	0x200002b4

08001c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_kill>:

int _kill(int pid, int sig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c56:	f005 fc3d 	bl	80074d4 <__errno>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffe7 	bl	8001c4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c7e:	e7fe      	b.n	8001c7e <_exit+0x12>

08001c80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e00a      	b.n	8001ca8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c92:	f3af 8000 	nop.w
 8001c96:	4601      	mov	r1, r0
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	60ba      	str	r2, [r7, #8]
 8001c9e:	b2ca      	uxtb	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf0      	blt.n	8001c92 <_read+0x12>
  }

  return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e009      	b.n	8001ce0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	60ba      	str	r2, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf1      	blt.n	8001ccc <_write+0x12>
  }
  return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_close>:

int _close(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_isatty>:

int _isatty(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f005 fba2 	bl	80074d4 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20020000 	.word	0x20020000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	20000468 	.word	0x20000468
 8001dc4:	200005d0 	.word	0x200005d0

08001dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001df2:	490e      	ldr	r1, [pc, #56]	; (8001e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e08:	4c0b      	ldr	r4, [pc, #44]	; (8001e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e16:	f7ff ffd7 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f005 fb61 	bl	80074e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1e:	f7ff f8e7 	bl	8000ff0 <main>
  bx  lr    
 8001e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e2c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001e30:	0800b098 	.word	0x0800b098
  ldr r2, =_sbss
 8001e34:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e38:	200005d0 	.word	0x200005d0

08001e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC_IRQHandler>
	...

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_Init+0x40>)
 8001e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_Init+0x40>)
 8001e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_Init+0x40>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 f92b 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 f808 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e74:	f7ff fcc6 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x54>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f943 	bl	800212e <HAL_SYSTICK_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d80a      	bhi.n	8001ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec0:	f000 f90b 	bl	80020da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_InitTick+0x5c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008
 8001f08:	2000046c 	.word	0x2000046c

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	2000046c 	.word	0x2000046c

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <__NVIC_EnableIRQ+0x38>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
         );
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a4:	f7ff ff8e 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff29 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff3e 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff8e 	bl	8002018 <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5d 	bl	8001fc4 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff31 	bl	8001f88 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff feda 	bl	8001f0c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e099      	b.n	8002298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002184:	e00f      	b.n	80021a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002186:	f7ff fec1 	bl	8001f0c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b05      	cmp	r3, #5
 8002192:	d908      	bls.n	80021a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2203      	movs	r2, #3
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e078      	b.n	8002298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e8      	bne.n	8002186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_DMA_Init+0x158>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d107      	bne.n	8002210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4313      	orrs	r3, r2
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f023 0307 	bic.w	r3, r3, #7
 8002226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b04      	cmp	r3, #4
 8002238:	d117      	bne.n	800226a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00e      	beq.n	800226a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fb01 	bl	8002854 <DMA_CheckFifoParam>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002266:	2301      	movs	r3, #1
 8002268:	e016      	b.n	8002298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fab8 	bl	80027e8 <DMA_CalcBaseAndBitshift>
 8002278:	4603      	mov	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	223f      	movs	r2, #63	; 0x3f
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	f010803f 	.word	0xf010803f

080022a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_DMA_Start_IT+0x26>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e040      	b.n	800234c <HAL_DMA_Start_IT+0xa8>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d12f      	bne.n	800233e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2202      	movs	r2, #2
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fa4a 	bl	800278c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	223f      	movs	r2, #63	; 0x3f
 80022fe:	409a      	lsls	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0216 	orr.w	r2, r2, #22
 8002312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0208 	orr.w	r2, r2, #8
 800232a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e005      	b.n	800234a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002346:	2302      	movs	r3, #2
 8002348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800234a:	7dfb      	ldrb	r3, [r7, #23]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002362:	f7ff fdd3 	bl	8001f0c <HAL_GetTick>
 8002366:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d008      	beq.n	8002386 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e052      	b.n	800242c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0216 	bic.w	r2, r2, #22
 8002394:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <HAL_DMA_Abort+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0208 	bic.w	r2, r2, #8
 80023c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d6:	e013      	b.n	8002400 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d8:	f7ff fd98 	bl	8001f0c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d90c      	bls.n	8002400 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2203      	movs	r2, #3
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e015      	b.n	800242c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e4      	bne.n	80023d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	223f      	movs	r2, #63	; 0x3f
 8002414:	409a      	lsls	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d004      	beq.n	8002452 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00c      	b.n	800246c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2205      	movs	r2, #5
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002484:	4b8e      	ldr	r3, [pc, #568]	; (80026c0 <HAL_DMA_IRQHandler+0x248>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a8e      	ldr	r2, [pc, #568]	; (80026c4 <HAL_DMA_IRQHandler+0x24c>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	2208      	movs	r2, #8
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01a      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	2208      	movs	r2, #8
 80024d2:	409a      	lsls	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2201      	movs	r2, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2201      	movs	r2, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2204      	movs	r2, #4
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	2204      	movs	r2, #4
 800253e:	409a      	lsls	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0204 	orr.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	2210      	movs	r2, #16
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d043      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03c      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2210      	movs	r2, #16
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d018      	beq.n	80025ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d024      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
 80025a6:	e01f      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0208 	bic.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2220      	movs	r2, #32
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 808f 	beq.w	8002718 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8087 	beq.w	8002718 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2220      	movs	r2, #32
 8002610:	409a      	lsls	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b05      	cmp	r3, #5
 8002620:	d136      	bne.n	8002690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0216 	bic.w	r2, r2, #22
 8002630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_DMA_IRQHandler+0x1da>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0208 	bic.w	r2, r2, #8
 8002660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	223f      	movs	r2, #63	; 0x3f
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d07e      	beq.n	8002784 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
        }
        return;
 800268e:	e079      	b.n	8002784 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01d      	beq.n	80026da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d031      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e02c      	b.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000
 80026c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e01e      	b.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10f      	bne.n	8002708 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0210 	bic.w	r2, r2, #16
 80026f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	2b00      	cmp	r3, #0
 800271e:	d032      	beq.n	8002786 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d022      	beq.n	8002772 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2205      	movs	r2, #5
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3301      	adds	r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	d307      	bcc.n	8002760 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f2      	bne.n	8002744 <HAL_DMA_IRQHandler+0x2cc>
 800275e:	e000      	b.n	8002762 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002760:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	e000      	b.n	8002786 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002784:	bf00      	nop
    }
  }
}
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d108      	bne.n	80027cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ca:	e007      	b.n	80027dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	3b10      	subs	r3, #16
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <DMA_CalcBaseAndBitshift+0x64>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <DMA_CalcBaseAndBitshift+0x68>)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d909      	bls.n	800282a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	1d1a      	adds	r2, r3, #4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58
 8002828:	e007      	b.n	800283a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	aaaaaaab 	.word	0xaaaaaaab
 8002850:	0800ac58 	.word	0x0800ac58

08002854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11f      	bne.n	80028ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d856      	bhi.n	8002922 <DMA_CheckFifoParam+0xce>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <DMA_CheckFifoParam+0x28>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	0800288d 	.word	0x0800288d
 8002880:	0800289f 	.word	0x0800289f
 8002884:	0800288d 	.word	0x0800288d
 8002888:	08002923 	.word	0x08002923
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d046      	beq.n	8002926 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289c:	e043      	b.n	8002926 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a6:	d140      	bne.n	800292a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e03d      	b.n	800292a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	d121      	bne.n	80028fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d837      	bhi.n	800292e <DMA_CheckFifoParam+0xda>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <DMA_CheckFifoParam+0x70>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028db 	.word	0x080028db
 80028cc:	080028d5 	.word	0x080028d5
 80028d0:	080028ed 	.word	0x080028ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e030      	b.n	800293c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d025      	beq.n	8002932 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ea:	e022      	b.n	8002932 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028f4:	d11f      	bne.n	8002936 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028fa:	e01c      	b.n	8002936 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d903      	bls.n	800290a <DMA_CheckFifoParam+0xb6>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d003      	beq.n	8002910 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002908:	e018      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
      break;
 800290e:	e015      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      break;
 8002920:	e00b      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;
 8002922:	bf00      	nop
 8002924:	e00a      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
 8002928:	e008      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800292a:	bf00      	nop
 800292c:	e006      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800292e:	bf00      	nop
 8002930:	e004      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;   
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
    }
  } 
  
  return status; 
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e16b      	b.n	8002c40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	f040 815a 	bne.w	8002c3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d005      	beq.n	800299e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299a:	2b02      	cmp	r3, #2
 800299c:	d130      	bne.n	8002a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	2203      	movs	r2, #3
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 0201 	and.w	r2, r3, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d017      	beq.n	8002a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d123      	bne.n	8002a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	08da      	lsrs	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3208      	adds	r2, #8
 8002a8a:	69b9      	ldr	r1, [r7, #24]
 8002a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0203 	and.w	r2, r3, #3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80b4 	beq.w	8002c3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b60      	ldr	r3, [pc, #384]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a5f      	ldr	r2, [pc, #380]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aee:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <HAL_GPIO_Init+0x310>)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_GPIO_Init+0x314>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02b      	beq.n	8002b72 <HAL_GPIO_Init+0x226>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a51      	ldr	r2, [pc, #324]	; (8002c64 <HAL_GPIO_Init+0x318>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d025      	beq.n	8002b6e <HAL_GPIO_Init+0x222>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_GPIO_Init+0x31c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01f      	beq.n	8002b6a <HAL_GPIO_Init+0x21e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4f      	ldr	r2, [pc, #316]	; (8002c6c <HAL_GPIO_Init+0x320>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d019      	beq.n	8002b66 <HAL_GPIO_Init+0x21a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4e      	ldr	r2, [pc, #312]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_GPIO_Init+0x216>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4d      	ldr	r2, [pc, #308]	; (8002c74 <HAL_GPIO_Init+0x328>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00d      	beq.n	8002b5e <HAL_GPIO_Init+0x212>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4c      	ldr	r2, [pc, #304]	; (8002c78 <HAL_GPIO_Init+0x32c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <HAL_GPIO_Init+0x20e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4b      	ldr	r2, [pc, #300]	; (8002c7c <HAL_GPIO_Init+0x330>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_GPIO_Init+0x20a>
 8002b52:	2307      	movs	r3, #7
 8002b54:	e00e      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e00c      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	e00a      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b72:	2300      	movs	r3, #0
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x310>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b92:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb6:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bbc:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be0:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c34:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	f67f ae90 	bls.w	8002968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40021400 	.word	0x40021400
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	40021c00 	.word	0x40021c00
 8002c80:	40013c00 	.word	0x40013c00

08002c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
 8002c90:	4613      	mov	r3, r2
 8002c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ca0:	e003      	b.n	8002caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ca2:	887b      	ldrh	r3, [r7, #2]
 8002ca4:	041a      	lsls	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	619a      	str	r2, [r3, #24]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e267      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d075      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd6:	4b88      	ldr	r3, [pc, #544]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d00c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce2:	4b85      	ldr	r3, [pc, #532]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d112      	bne.n	8002d14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cee:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfa:	d10b      	bne.n	8002d14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d05b      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x108>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d157      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e242      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCC_OscConfig+0x74>
 8002d1e:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a75      	ldr	r2, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e01d      	b.n	8002d68 <HAL_RCC_OscConfig+0xb0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x98>
 8002d36:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6f      	ldr	r2, [pc, #444]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4b6d      	ldr	r3, [pc, #436]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6c      	ldr	r2, [pc, #432]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0xb0>
 8002d50:	4b69      	ldr	r3, [pc, #420]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a68      	ldr	r2, [pc, #416]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a65      	ldr	r2, [pc, #404]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7ff f8cc 	bl	8001f0c <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d78:	f7ff f8c8 	bl	8001f0c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e207      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0xc0>
 8002d96:	e014      	b.n	8002dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff f8b8 	bl	8001f0c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da0:	f7ff f8b4 	bl	8001f0c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1f3      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db2:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0xe8>
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d063      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d11c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de6:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d116      	bne.n	8002e20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_RCC_OscConfig+0x152>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d001      	beq.n	8002e0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e1c7      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4937      	ldr	r1, [pc, #220]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1e:	e03a      	b.n	8002e96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e28:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_OscConfig+0x244>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7ff f86d 	bl	8001f0c <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e36:	f7ff f869 	bl	8001f0c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e1a8      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4925      	ldr	r1, [pc, #148]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]
 8002e68:	e015      	b.n	8002e96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_OscConfig+0x244>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7ff f84c 	bl	8001f0c <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e78:	f7ff f848 	bl	8001f0c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e187      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d036      	beq.n	8002f10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d016      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_RCC_OscConfig+0x248>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7ff f82c 	bl	8001f0c <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7ff f828 	bl	8001f0c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e167      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x200>
 8002ed6:	e01b      	b.n	8002f10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_OscConfig+0x248>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ede:	f7ff f815 	bl	8001f0c <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee4:	e00e      	b.n	8002f04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7ff f811 	bl	8001f0c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d907      	bls.n	8002f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e150      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	42470000 	.word	0x42470000
 8002f00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f04:	4b88      	ldr	r3, [pc, #544]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ea      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8097 	beq.w	800304c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f22:	4b81      	ldr	r3, [pc, #516]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10f      	bne.n	8002f4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4b7d      	ldr	r3, [pc, #500]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a7c      	ldr	r2, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b7a      	ldr	r3, [pc, #488]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4e:	4b77      	ldr	r3, [pc, #476]	; (800312c <HAL_RCC_OscConfig+0x474>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d118      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5a:	4b74      	ldr	r3, [pc, #464]	; (800312c <HAL_RCC_OscConfig+0x474>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a73      	ldr	r2, [pc, #460]	; (800312c <HAL_RCC_OscConfig+0x474>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f66:	f7fe ffd1 	bl	8001f0c <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6e:	f7fe ffcd 	bl	8001f0c <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e10c      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b6a      	ldr	r3, [pc, #424]	; (800312c <HAL_RCC_OscConfig+0x474>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x2ea>
 8002f94:	4b64      	ldr	r3, [pc, #400]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a63      	ldr	r2, [pc, #396]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	e01c      	b.n	8002fdc <HAL_RCC_OscConfig+0x324>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x30c>
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a5e      	ldr	r2, [pc, #376]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb6:	4b5c      	ldr	r3, [pc, #368]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a5b      	ldr	r2, [pc, #364]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCC_OscConfig+0x324>
 8002fc4:	4b58      	ldr	r3, [pc, #352]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd0:	4b55      	ldr	r3, [pc, #340]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a54      	ldr	r2, [pc, #336]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f023 0304 	bic.w	r3, r3, #4
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d015      	beq.n	8003010 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fe ff92 	bl	8001f0c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fe ff8e 	bl	8001f0c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0cb      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	4b49      	ldr	r3, [pc, #292]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0ee      	beq.n	8002fec <HAL_RCC_OscConfig+0x334>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe ff7c 	bl	8001f0c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	e00a      	b.n	800302e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f7fe ff78 	bl	8001f0c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	; 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e0b5      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302e:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ee      	bne.n	8003018 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	4a38      	ldr	r2, [pc, #224]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a1 	beq.w	8003198 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b08      	cmp	r3, #8
 8003060:	d05c      	beq.n	800311c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d141      	bne.n	80030ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_RCC_OscConfig+0x478>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe ff4c 	bl	8001f0c <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003078:	f7fe ff48 	bl	8001f0c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e087      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	019b      	lsls	r3, r3, #6
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	3b01      	subs	r3, #1
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	491b      	ldr	r1, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x478>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe ff21 	bl	8001f0c <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fe ff1d 	bl	8001f0c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e05c      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x416>
 80030ec:	e054      	b.n	8003198 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_RCC_OscConfig+0x478>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe ff0a 	bl	8001f0c <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe ff06 	bl	8001f0c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e045      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x470>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x444>
 800311a:	e03d      	b.n	8003198 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d107      	bne.n	8003134 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e038      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000
 8003130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x4ec>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d028      	beq.n	8003194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d121      	bne.n	8003194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d11a      	bne.n	8003194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003164:	4013      	ands	r3, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800316a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800316c:	4293      	cmp	r3, r2
 800316e:	d111      	bne.n	8003194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d107      	bne.n	8003194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0cc      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031bc:	4b68      	ldr	r3, [pc, #416]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d90c      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b65      	ldr	r3, [pc, #404]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b63      	ldr	r3, [pc, #396]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0b8      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031fc:	4b59      	ldr	r3, [pc, #356]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a58      	ldr	r2, [pc, #352]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003214:	4b53      	ldr	r3, [pc, #332]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a52      	ldr	r2, [pc, #328]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800321e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b50      	ldr	r3, [pc, #320]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	494d      	ldr	r1, [pc, #308]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d044      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d119      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e07f      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d003      	beq.n	8003266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003262:	2b03      	cmp	r3, #3
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003266:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e06f      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003276:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e067      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f023 0203 	bic.w	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4934      	ldr	r1, [pc, #208]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003298:	f7fe fe38 	bl	8001f0c <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a0:	f7fe fe34 	bl	8001f0c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e04f      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 020c 	and.w	r2, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1eb      	bne.n	80032a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d20c      	bcs.n	80032f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e032      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4916      	ldr	r1, [pc, #88]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	490e      	ldr	r1, [pc, #56]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800332e:	f000 f821 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003332:	4602      	mov	r2, r0
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	490a      	ldr	r1, [pc, #40]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	5ccb      	ldrb	r3, [r1, r3]
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fd98 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023c00 	.word	0x40023c00
 8003364:	40023800 	.word	0x40023800
 8003368:	0800ac40 	.word	0x0800ac40
 800336c:	20000000 	.word	0x20000000
 8003370:	20000004 	.word	0x20000004

08003374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003378:	b094      	sub	sp, #80	; 0x50
 800337a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	647b      	str	r3, [r7, #68]	; 0x44
 8003380:	2300      	movs	r3, #0
 8003382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003384:	2300      	movs	r3, #0
 8003386:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800338c:	4b79      	ldr	r3, [pc, #484]	; (8003574 <HAL_RCC_GetSysClockFreq+0x200>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b08      	cmp	r3, #8
 8003396:	d00d      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003398:	2b08      	cmp	r3, #8
 800339a:	f200 80e1 	bhi.w	8003560 <HAL_RCC_GetSysClockFreq+0x1ec>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x34>
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d003      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x3a>
 80033a6:	e0db      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033a8:	4b73      	ldr	r3, [pc, #460]	; (8003578 <HAL_RCC_GetSysClockFreq+0x204>)
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033ac:	e0db      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ae:	4b72      	ldr	r3, [pc, #456]	; (8003578 <HAL_RCC_GetSysClockFreq+0x204>)
 80033b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033b2:	e0d8      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b4:	4b6f      	ldr	r3, [pc, #444]	; (8003574 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033be:	4b6d      	ldr	r3, [pc, #436]	; (8003574 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d063      	beq.n	8003492 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ca:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <HAL_RCC_GetSysClockFreq+0x200>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	099b      	lsrs	r3, r3, #6
 80033d0:	2200      	movs	r2, #0
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
 80033de:	2300      	movs	r3, #0
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
 80033e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	f04f 0000 	mov.w	r0, #0
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	0159      	lsls	r1, r3, #5
 80033f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f8:	0150      	lsls	r0, r2, #5
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4621      	mov	r1, r4
 8003400:	1a51      	subs	r1, r2, r1
 8003402:	6139      	str	r1, [r7, #16]
 8003404:	4629      	mov	r1, r5
 8003406:	eb63 0301 	sbc.w	r3, r3, r1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003418:	4659      	mov	r1, fp
 800341a:	018b      	lsls	r3, r1, #6
 800341c:	4651      	mov	r1, sl
 800341e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003422:	4651      	mov	r1, sl
 8003424:	018a      	lsls	r2, r1, #6
 8003426:	4651      	mov	r1, sl
 8003428:	ebb2 0801 	subs.w	r8, r2, r1
 800342c:	4659      	mov	r1, fp
 800342e:	eb63 0901 	sbc.w	r9, r3, r1
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800343e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003446:	4690      	mov	r8, r2
 8003448:	4699      	mov	r9, r3
 800344a:	4623      	mov	r3, r4
 800344c:	eb18 0303 	adds.w	r3, r8, r3
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	462b      	mov	r3, r5
 8003454:	eb49 0303 	adc.w	r3, r9, r3
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003466:	4629      	mov	r1, r5
 8003468:	028b      	lsls	r3, r1, #10
 800346a:	4621      	mov	r1, r4
 800346c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003470:	4621      	mov	r1, r4
 8003472:	028a      	lsls	r2, r1, #10
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347a:	2200      	movs	r2, #0
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
 800347e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003480:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003484:	f7fd fc00 	bl	8000c88 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4613      	mov	r3, r2
 800348e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003490:	e058      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003492:	4b38      	ldr	r3, [pc, #224]	; (8003574 <HAL_RCC_GetSysClockFreq+0x200>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	099b      	lsrs	r3, r3, #6
 8003498:	2200      	movs	r2, #0
 800349a:	4618      	mov	r0, r3
 800349c:	4611      	mov	r1, r2
 800349e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
 80034a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034ac:	4642      	mov	r2, r8
 80034ae:	464b      	mov	r3, r9
 80034b0:	f04f 0000 	mov.w	r0, #0
 80034b4:	f04f 0100 	mov.w	r1, #0
 80034b8:	0159      	lsls	r1, r3, #5
 80034ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034be:	0150      	lsls	r0, r2, #5
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4641      	mov	r1, r8
 80034c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ca:	4649      	mov	r1, r9
 80034cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034e4:	ebb2 040a 	subs.w	r4, r2, sl
 80034e8:	eb63 050b 	sbc.w	r5, r3, fp
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	00eb      	lsls	r3, r5, #3
 80034f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fa:	00e2      	lsls	r2, r4, #3
 80034fc:	4614      	mov	r4, r2
 80034fe:	461d      	mov	r5, r3
 8003500:	4643      	mov	r3, r8
 8003502:	18e3      	adds	r3, r4, r3
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	464b      	mov	r3, r9
 8003508:	eb45 0303 	adc.w	r3, r5, r3
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351a:	4629      	mov	r1, r5
 800351c:	028b      	lsls	r3, r1, #10
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003524:	4621      	mov	r1, r4
 8003526:	028a      	lsls	r2, r1, #10
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352e:	2200      	movs	r2, #0
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	61fa      	str	r2, [r7, #28]
 8003534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003538:	f7fd fba6 	bl	8000c88 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_GetSysClockFreq+0x200>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	3301      	adds	r3, #1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetSysClockFreq+0x204>)
 8003562:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003568:	4618      	mov	r0, r3
 800356a:	3750      	adds	r7, #80	; 0x50
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	00f42400 	.word	0x00f42400

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_RCC_GetHCLKFreq+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000000 	.word	0x20000000

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003598:	f7ff fff0 	bl	800357c <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0a9b      	lsrs	r3, r3, #10
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	0800ac50 	.word	0x0800ac50

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c0:	f7ff ffdc 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0b5b      	lsrs	r3, r3, #13
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	0800ac50 	.word	0x0800ac50

080035e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003608:	2b00      	cmp	r3, #0
 800360a:	d035      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800360c:	4b62      	ldr	r3, [pc, #392]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003612:	f7fe fc7b 	bl	8001f0c <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800361a:	f7fe fc77 	bl	8001f0c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e0b0      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800362c:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	019a      	lsls	r2, r3, #6
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	071b      	lsls	r3, r3, #28
 8003644:	4955      	ldr	r1, [pc, #340]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800364c:	4b52      	ldr	r3, [pc, #328]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003652:	f7fe fc5b 	bl	8001f0c <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800365a:	f7fe fc57 	bl	8001f0c <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e090      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800366c:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8083 	beq.w	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a43      	ldr	r2, [pc, #268]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	; 0x40
 8003696:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036a2:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a3e      	ldr	r2, [pc, #248]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ae:	f7fe fc2d 	bl	8001f0c <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7fe fc29 	bl	8001f0c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e062      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036d4:	4b31      	ldr	r3, [pc, #196]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d02f      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d028      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f2:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036fc:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003702:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003708:	4a24      	ldr	r2, [pc, #144]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800370e:	4b23      	ldr	r3, [pc, #140]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d114      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe fbf7 	bl	8001f0c <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fe fbf3 	bl	8001f0c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e02a      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	4b18      	ldr	r3, [pc, #96]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ee      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003750:	d10d      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003766:	490d      	ldr	r1, [pc, #52]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]
 800376c:	e005      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003774:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003778:	6093      	str	r3, [r2, #8]
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800377c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003786:	4905      	ldr	r1, [pc, #20]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003788:	4313      	orrs	r3, r2
 800378a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	42470068 	.word	0x42470068
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000
 80037a4:	42470e40 	.word	0x42470e40

080037a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e066      	b.n	800388c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7f5b      	ldrb	r3, [r3, #29]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fe f840 	bl	8001854 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	22ca      	movs	r2, #202	; 0xca
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2253      	movs	r2, #83	; 0x53
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f87a 	bl	80038e4 <RTC_EnterInitMode>
 80037f0:	4603      	mov	r3, r0
 80037f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d12c      	bne.n	8003854 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68d2      	ldr	r2, [r2, #12]
 8003834:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6919      	ldr	r1, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	041a      	lsls	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f881 	bl	8003952 <RTC_ExitInitMode>
 8003850:	4603      	mov	r3, r0
 8003852:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d113      	bne.n	8003882 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699a      	ldr	r2, [r3, #24]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	22ff      	movs	r2, #255	; 0xff
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b0:	f7fe fb2c 	bl	8001f0c <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038b6:	e009      	b.n	80038cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038b8:	f7fe fb28 	bl	8001f0c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038c6:	d901      	bls.n	80038cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e007      	b.n	80038dc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0ee      	beq.n	80038b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d122      	bne.n	8003948 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003910:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003912:	f7fe fafb 	bl	8001f0c <HAL_GetTick>
 8003916:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003918:	e00c      	b.n	8003934 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800391a:	f7fe faf7 	bl	8001f0c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003928:	d904      	bls.n	8003934 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2204      	movs	r2, #4
 800392e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <RTC_EnterInitMode+0x64>
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d1e8      	bne.n	800391a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800396c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff89 	bl	8003894 <HAL_RTC_WaitForSynchro>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d004      	beq.n	8003992 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2204      	movs	r2, #4
 800398c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e041      	b.n	8003a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd ffb8 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f000 fdae 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d001      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e04e      	b.n	8003af2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d022      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d01d      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d018      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1c      	ldr	r2, [pc, #112]	; (8003b0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x80>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d010      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	e007      	b.n	8003af0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40010400 	.word	0x40010400
 8003b14:	40014000 	.word	0x40014000
 8003b18:	40001800 	.word	0x40001800

08003b1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e041      	b.n	8003bb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f839 	bl	8003bba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f000 fcee 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <HAL_TIM_PWM_Start+0x24>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e022      	b.n	8003c3a <HAL_TIM_PWM_Start+0x6a>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d109      	bne.n	8003c0e <HAL_TIM_PWM_Start+0x3e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	bf14      	ite	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	2300      	moveq	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e015      	b.n	8003c3a <HAL_TIM_PWM_Start+0x6a>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d109      	bne.n	8003c28 <HAL_TIM_PWM_Start+0x58>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e008      	b.n	8003c3a <HAL_TIM_PWM_Start+0x6a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07c      	b.n	8003d3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_PWM_Start+0x82>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c50:	e013      	b.n	8003c7a <HAL_TIM_PWM_Start+0xaa>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x92>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c60:	e00b      	b.n	8003c7a <HAL_TIM_PWM_Start+0xaa>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0xa2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	e003      	b.n	8003c7a <HAL_TIM_PWM_Start+0xaa>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff44 	bl	8004b10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2d      	ldr	r2, [pc, #180]	; (8003d44 <HAL_TIM_PWM_Start+0x174>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_PWM_Start+0xcc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <HAL_TIM_PWM_Start+0x178>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIM_PWM_Start+0xd0>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <HAL_TIM_PWM_Start+0xd2>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <HAL_TIM_PWM_Start+0x174>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d01d      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <HAL_TIM_PWM_Start+0x17c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_TIM_PWM_Start+0x180>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <HAL_TIM_PWM_Start+0x184>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <HAL_TIM_PWM_Start+0x178>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <HAL_TIM_PWM_Start+0x188>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_TIM_PWM_Start+0x136>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a16      	ldr	r2, [pc, #88]	; (8003d5c <HAL_TIM_PWM_Start+0x18c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d111      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d010      	beq.n	8003d3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	e007      	b.n	8003d3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40010400 	.word	0x40010400
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40001800 	.word	0x40001800

08003d60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e097      	b.n	8003ea4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fd fd8d 	bl	80018a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da4:	f023 0307 	bic.w	r3, r3, #7
 8003da8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f000 fbc1 	bl	800453c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	4313      	orrs	r3, r2
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e00:	f023 030c 	bic.w	r3, r3, #12
 8003e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	011a      	lsls	r2, r3, #4
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	031b      	lsls	r3, r3, #12
 8003e30:	4313      	orrs	r3, r2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	4313      	orrs	r3, r2
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ebc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ec4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ecc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ed4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d110      	bne.n	8003efe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d102      	bne.n	8003ee8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ee2:	7b7b      	ldrb	r3, [r7, #13]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d001      	beq.n	8003eec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e069      	b.n	8003fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003efc:	e031      	b.n	8003f62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d110      	bne.n	8003f26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f04:	7bbb      	ldrb	r3, [r7, #14]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d102      	bne.n	8003f10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f0a:	7b3b      	ldrb	r3, [r7, #12]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d001      	beq.n	8003f14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e055      	b.n	8003fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f24:	e01d      	b.n	8003f62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d108      	bne.n	8003f3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f2c:	7bbb      	ldrb	r3, [r7, #14]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f32:	7b7b      	ldrb	r3, [r7, #13]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d102      	bne.n	8003f3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f38:	7b3b      	ldrb	r3, [r7, #12]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d001      	beq.n	8003f42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e03e      	b.n	8003fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_TIM_Encoder_Start+0xc4>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d008      	beq.n	8003f80 <HAL_TIM_Encoder_Start+0xd4>
 8003f6e:	e00f      	b.n	8003f90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fdc9 	bl	8004b10 <TIM_CCxChannelCmd>
      break;
 8003f7e:	e016      	b.n	8003fae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2201      	movs	r2, #1
 8003f86:	2104      	movs	r1, #4
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fdc1 	bl	8004b10 <TIM_CCxChannelCmd>
      break;
 8003f8e:	e00e      	b.n	8003fae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2201      	movs	r2, #1
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fdb9 	bl	8004b10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2104      	movs	r1, #4
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fdb2 	bl	8004b10 <TIM_CCxChannelCmd>
      break;
 8003fac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0201 	orr.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d122      	bne.n	8004024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d11b      	bne.n	8004024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0202 	mvn.w	r2, #2
 8003ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa77 	bl	80044fe <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa69 	bl	80044ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fa7a 	bl	8004512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b04      	cmp	r3, #4
 8004030:	d122      	bne.n	8004078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b04      	cmp	r3, #4
 800403e:	d11b      	bne.n	8004078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0204 	mvn.w	r2, #4
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fa4d 	bl	80044fe <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fa3f 	bl	80044ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fa50 	bl	8004512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d122      	bne.n	80040cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b08      	cmp	r3, #8
 8004092:	d11b      	bne.n	80040cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0208 	mvn.w	r2, #8
 800409c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2204      	movs	r2, #4
 80040a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa23 	bl	80044fe <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fa15 	bl	80044ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fa26 	bl	8004512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d122      	bne.n	8004120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d11b      	bne.n	8004120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0210 	mvn.w	r2, #16
 80040f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2208      	movs	r2, #8
 80040f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f9f9 	bl	80044fe <HAL_TIM_IC_CaptureCallback>
 800410c:	e005      	b.n	800411a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f9eb 	bl	80044ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f9fc 	bl	8004512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d10e      	bne.n	800414c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b01      	cmp	r3, #1
 800413a:	d107      	bne.n	800414c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0201 	mvn.w	r2, #1
 8004144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fad6 	bl	80016f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b80      	cmp	r3, #128	; 0x80
 8004158:	d10e      	bne.n	8004178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d107      	bne.n	8004178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fd78 	bl	8004c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d10e      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d107      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800419c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9c1 	bl	8004526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d10e      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d107      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0220 	mvn.w	r2, #32
 80041c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fd42 	bl	8004c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e0ae      	b.n	8004354 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	f200 809f 	bhi.w	8004344 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004241 	.word	0x08004241
 8004210:	08004345 	.word	0x08004345
 8004214:	08004345 	.word	0x08004345
 8004218:	08004345 	.word	0x08004345
 800421c:	08004281 	.word	0x08004281
 8004220:	08004345 	.word	0x08004345
 8004224:	08004345 	.word	0x08004345
 8004228:	08004345 	.word	0x08004345
 800422c:	080042c3 	.word	0x080042c3
 8004230:	08004345 	.word	0x08004345
 8004234:	08004345 	.word	0x08004345
 8004238:	08004345 	.word	0x08004345
 800423c:	08004303 	.word	0x08004303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fa18 	bl	800467c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0208 	orr.w	r2, r2, #8
 800425a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0204 	bic.w	r2, r2, #4
 800426a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6999      	ldr	r1, [r3, #24]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	619a      	str	r2, [r3, #24]
      break;
 800427e:	e064      	b.n	800434a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fa68 	bl	800475c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800429a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6999      	ldr	r1, [r3, #24]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	021a      	lsls	r2, r3, #8
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	619a      	str	r2, [r3, #24]
      break;
 80042c0:	e043      	b.n	800434a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fabd 	bl	8004848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0208 	orr.w	r2, r2, #8
 80042dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0204 	bic.w	r2, r2, #4
 80042ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69d9      	ldr	r1, [r3, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	61da      	str	r2, [r3, #28]
      break;
 8004300:	e023      	b.n	800434a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fb11 	bl	8004930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69d9      	ldr	r1, [r3, #28]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	021a      	lsls	r2, r3, #8
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	61da      	str	r2, [r3, #28]
      break;
 8004342:	e002      	b.n	800434a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
      break;
 8004348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_TIM_ConfigClockSource+0x1c>
 8004374:	2302      	movs	r3, #2
 8004376:	e0b4      	b.n	80044e2 <HAL_TIM_ConfigClockSource+0x186>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800439e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b0:	d03e      	beq.n	8004430 <HAL_TIM_ConfigClockSource+0xd4>
 80043b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b6:	f200 8087 	bhi.w	80044c8 <HAL_TIM_ConfigClockSource+0x16c>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043be:	f000 8086 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x172>
 80043c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c6:	d87f      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b70      	cmp	r3, #112	; 0x70
 80043ca:	d01a      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0xa6>
 80043cc:	2b70      	cmp	r3, #112	; 0x70
 80043ce:	d87b      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b60      	cmp	r3, #96	; 0x60
 80043d2:	d050      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x11a>
 80043d4:	2b60      	cmp	r3, #96	; 0x60
 80043d6:	d877      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b50      	cmp	r3, #80	; 0x50
 80043da:	d03c      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0xfa>
 80043dc:	2b50      	cmp	r3, #80	; 0x50
 80043de:	d873      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d058      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x13a>
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d86f      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x16c>
 80043e8:	2b30      	cmp	r3, #48	; 0x30
 80043ea:	d064      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x15a>
 80043ec:	2b30      	cmp	r3, #48	; 0x30
 80043ee:	d86b      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d060      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x15a>
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d867      	bhi.n	80044c8 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d05c      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x15a>
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d05a      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004400:	e062      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6899      	ldr	r1, [r3, #8]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f000 fb5d 	bl	8004ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	609a      	str	r2, [r3, #8]
      break;
 800442e:	e04f      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6899      	ldr	r1, [r3, #8]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f000 fb46 	bl	8004ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004452:	609a      	str	r2, [r3, #8]
      break;
 8004454:	e03c      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	461a      	mov	r2, r3
 8004464:	f000 faba 	bl	80049dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2150      	movs	r1, #80	; 0x50
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fb13 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 8004474:	e02c      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	461a      	mov	r2, r3
 8004484:	f000 fad9 	bl	8004a3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2160      	movs	r1, #96	; 0x60
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fb03 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 8004494:	e01c      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f000 fa9a 	bl	80049dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2140      	movs	r1, #64	; 0x40
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 faf3 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 80044b4:	e00c      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f000 faea 	bl	8004a9a <TIM_ITRx_SetConfig>
      break;
 80044c6:	e003      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      break;
 80044cc:	e000      	b.n	80044d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a40      	ldr	r2, [pc, #256]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d00f      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3d      	ldr	r2, [pc, #244]	; (8004654 <TIM_Base_SetConfig+0x118>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3c      	ldr	r2, [pc, #240]	; (8004658 <TIM_Base_SetConfig+0x11c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a3b      	ldr	r2, [pc, #236]	; (800465c <TIM_Base_SetConfig+0x120>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3a      	ldr	r2, [pc, #232]	; (8004660 <TIM_Base_SetConfig+0x124>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d108      	bne.n	800458e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2f      	ldr	r2, [pc, #188]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d02b      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d027      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <TIM_Base_SetConfig+0x118>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d023      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <TIM_Base_SetConfig+0x11c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01f      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2a      	ldr	r2, [pc, #168]	; (800465c <TIM_Base_SetConfig+0x120>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01b      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a29      	ldr	r2, [pc, #164]	; (8004660 <TIM_Base_SetConfig+0x124>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d017      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a28      	ldr	r2, [pc, #160]	; (8004664 <TIM_Base_SetConfig+0x128>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a27      	ldr	r2, [pc, #156]	; (8004668 <TIM_Base_SetConfig+0x12c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00f      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a26      	ldr	r2, [pc, #152]	; (800466c <TIM_Base_SetConfig+0x130>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a25      	ldr	r2, [pc, #148]	; (8004670 <TIM_Base_SetConfig+0x134>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a24      	ldr	r2, [pc, #144]	; (8004674 <TIM_Base_SetConfig+0x138>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a23      	ldr	r2, [pc, #140]	; (8004678 <TIM_Base_SetConfig+0x13c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d108      	bne.n	8004600 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0xf8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <TIM_Base_SetConfig+0x124>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d103      	bne.n	800463c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	615a      	str	r2, [r3, #20]
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40010400 	.word	0x40010400
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800
 8004670:	40001800 	.word	0x40001800
 8004674:	40001c00 	.word	0x40001c00
 8004678:	40002000 	.word	0x40002000

0800467c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 0302 	bic.w	r3, r3, #2
 80046c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a20      	ldr	r2, [pc, #128]	; (8004754 <TIM_OC1_SetConfig+0xd8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_OC1_SetConfig+0x64>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <TIM_OC1_SetConfig+0xdc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10c      	bne.n	80046fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0308 	bic.w	r3, r3, #8
 80046e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <TIM_OC1_SetConfig+0xd8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_OC1_SetConfig+0x8e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <TIM_OC1_SetConfig+0xdc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d111      	bne.n	800472e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	621a      	str	r2, [r3, #32]
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40010000 	.word	0x40010000
 8004758:	40010400 	.word	0x40010400

0800475c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f023 0210 	bic.w	r2, r3, #16
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f023 0320 	bic.w	r3, r3, #32
 80047a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a22      	ldr	r2, [pc, #136]	; (8004840 <TIM_OC2_SetConfig+0xe4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_OC2_SetConfig+0x68>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a21      	ldr	r2, [pc, #132]	; (8004844 <TIM_OC2_SetConfig+0xe8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d10d      	bne.n	80047e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a17      	ldr	r2, [pc, #92]	; (8004840 <TIM_OC2_SetConfig+0xe4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_OC2_SetConfig+0x94>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a16      	ldr	r2, [pc, #88]	; (8004844 <TIM_OC2_SetConfig+0xe8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d113      	bne.n	8004818 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000
 8004844:	40010400 	.word	0x40010400

08004848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0303 	bic.w	r3, r3, #3
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a21      	ldr	r2, [pc, #132]	; (8004928 <TIM_OC3_SetConfig+0xe0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_OC3_SetConfig+0x66>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a20      	ldr	r2, [pc, #128]	; (800492c <TIM_OC3_SetConfig+0xe4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10d      	bne.n	80048ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a16      	ldr	r2, [pc, #88]	; (8004928 <TIM_OC3_SetConfig+0xe0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_OC3_SetConfig+0x92>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a15      	ldr	r2, [pc, #84]	; (800492c <TIM_OC3_SetConfig+0xe4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d113      	bne.n	8004902 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	621a      	str	r2, [r3, #32]
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	40010000 	.word	0x40010000
 800492c:	40010400 	.word	0x40010400

08004930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800497a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	031b      	lsls	r3, r3, #12
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a12      	ldr	r2, [pc, #72]	; (80049d4 <TIM_OC4_SetConfig+0xa4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC4_SetConfig+0x68>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <TIM_OC4_SetConfig+0xa8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d109      	bne.n	80049ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800499e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	019b      	lsls	r3, r3, #6
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40010400 	.word	0x40010400

080049dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0201 	bic.w	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f023 030a 	bic.w	r3, r3, #10
 8004a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	621a      	str	r2, [r3, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b087      	sub	sp, #28
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0210 	bic.w	r2, r3, #16
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	031b      	lsls	r3, r3, #12
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f043 0307 	orr.w	r3, r3, #7
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2201      	movs	r2, #1
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1a      	ldr	r2, [r3, #32]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	43db      	mvns	r3, r3
 8004b32:	401a      	ands	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	fa01 f303 	lsl.w	r3, r1, r3
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	621a      	str	r2, [r3, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e05a      	b.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a21      	ldr	r2, [pc, #132]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d022      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d01d      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d018      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10c      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40010400 	.word	0x40010400
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40001800 	.word	0x40001800

08004c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e03f      	b.n	8004d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc fec0 	bl	8001a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	; 0x24
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 f84d 	bl	8005d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b08a      	sub	sp, #40	; 0x28
 8004d1a:	af02      	add	r7, sp, #8
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d17c      	bne.n	8004e30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_UART_Transmit+0x2c>
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e075      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Transmit+0x3e>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e06e      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2221      	movs	r2, #33	; 0x21
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d6a:	f7fd f8cf 	bl	8001f0c <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d84:	d108      	bne.n	8004d98 <HAL_UART_Transmit+0x82>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	e003      	b.n	8004da0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004da8:	e02a      	b.n	8004e00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fd04 	bl	80057c2 <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e036      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3302      	adds	r3, #2
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	e007      	b.n	8004df2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	3301      	adds	r3, #1
 8004df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1cf      	bne.n	8004daa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2140      	movs	r1, #64	; 0x40
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fcd4 	bl	80057c2 <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e006      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e000      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
  }
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d165      	bne.n	8004f22 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_UART_Transmit_DMA+0x26>
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e05e      	b.n	8004f24 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_UART_Transmit_DMA+0x38>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e057      	b.n	8004f24 <HAL_UART_Transmit_DMA+0xe8>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2221      	movs	r2, #33	; 0x21
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <HAL_UART_Transmit_DMA+0xf0>)
 8004ea2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea8:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <HAL_UART_Transmit_DMA+0xf4>)
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb0:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <HAL_UART_Transmit_DMA+0xf8>)
 8004eb2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	2200      	movs	r2, #0
 8004eba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004ebc:	f107 0308 	add.w	r3, r7, #8
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	6819      	ldr	r1, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	f7fd f9e6 	bl	80022a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ee0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3314      	adds	r3, #20
 8004ef0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3314      	adds	r3, #20
 8004f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f0a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f0c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6a39      	ldr	r1, [r7, #32]
 8004f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e5      	bne.n	8004eea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e000      	b.n	8004f24 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004f22:	2302      	movs	r3, #2
  }
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3730      	adds	r7, #48	; 0x30
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	0800551d 	.word	0x0800551d
 8004f30:	080055b7 	.word	0x080055b7
 8004f34:	0800572f 	.word	0x0800572f

08004f38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	4613      	mov	r3, r2
 8004f44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d11d      	bne.n	8004f8e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_UART_Receive_DMA+0x26>
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e016      	b.n	8004f90 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Receive_DMA+0x38>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e00f      	b.n	8004f90 <HAL_UART_Receive_DMA+0x58>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	461a      	mov	r2, r3
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fc8b 	bl	80058a0 <UART_Start_Receive_DMA>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	e000      	b.n	8004f90 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f8e:	2302      	movs	r3, #2
  }
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b0ba      	sub	sp, #232	; 0xe8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_UART_IRQHandler+0x66>
 8004fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fdf7 	bl	8005bea <UART_Receive_IT>
      return;
 8004ffc:	e256      	b.n	80054ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80de 	beq.w	80051c4 <HAL_UART_IRQHandler+0x22c>
 8005008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005018:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80d1 	beq.w	80051c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <HAL_UART_IRQHandler+0xae>
 800502e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f043 0201 	orr.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0xd2>
 8005052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f043 0202 	orr.w	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_UART_IRQHandler+0xf6>
 8005076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f043 0204 	orr.w	r2, r3, #4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800508e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d011      	beq.n	80050be <HAL_UART_IRQHandler+0x126>
 800509a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f043 0208 	orr.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 81ed 	beq.w	80054a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_UART_IRQHandler+0x14e>
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fd82 	bl	8005bea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_UART_IRQHandler+0x17a>
 800510a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04f      	beq.n	80051b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fc8a 	bl	8005a2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d141      	bne.n	80051aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3314      	adds	r3, #20
 800512c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800513c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005152:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800515e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800516a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1d9      	bne.n	8005126 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	2b00      	cmp	r3, #0
 8005178:	d013      	beq.n	80051a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	4a7d      	ldr	r2, [pc, #500]	; (8005374 <HAL_UART_IRQHandler+0x3dc>)
 8005180:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	4618      	mov	r0, r3
 8005188:	f7fd f954 	bl	8002434 <HAL_DMA_Abort_IT>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d016      	beq.n	80051c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800519c:	4610      	mov	r0, r2
 800519e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	e00e      	b.n	80051c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f9a4 	bl	80054f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	e00a      	b.n	80051c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f9a0 	bl	80054f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b0:	e006      	b.n	80051c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f99c 	bl	80054f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051be:	e170      	b.n	80054a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c0:	bf00      	nop
    return;
 80051c2:	e16e      	b.n	80054a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f040 814a 	bne.w	8005462 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8143 	beq.w	8005462 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 813c 	beq.w	8005462 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	f040 80b4 	bne.w	8005378 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800521c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8140 	beq.w	80054a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800522a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800522e:	429a      	cmp	r2, r3
 8005230:	f080 8139 	bcs.w	80054a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800523a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005246:	f000 8088 	beq.w	800535a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005276:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800527a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005282:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800528e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1d9      	bne.n	800524a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3314      	adds	r3, #20
 80052b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e1      	bne.n	8005296 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3314      	adds	r3, #20
 80052d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3314      	adds	r3, #20
 80052f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e3      	bne.n	80052d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532a:	f023 0310 	bic.w	r3, r3, #16
 800532e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800533c:	65ba      	str	r2, [r7, #88]	; 0x58
 800533e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800534a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e3      	bne.n	8005318 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	4618      	mov	r0, r3
 8005356:	f7fc fffd 	bl	8002354 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005362:	b29b      	uxth	r3, r3
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	b29b      	uxth	r3, r3
 8005368:	4619      	mov	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f8ca 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005370:	e099      	b.n	80054a6 <HAL_UART_IRQHandler+0x50e>
 8005372:	bf00      	nop
 8005374:	08005af3 	.word	0x08005af3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005380:	b29b      	uxth	r3, r3
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 808b 	beq.w	80054aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8086 	beq.w	80054aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053c2:	647a      	str	r2, [r7, #68]	; 0x44
 80053c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e3      	bne.n	800539e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3314      	adds	r3, #20
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	623b      	str	r3, [r7, #32]
   return(result);
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3314      	adds	r3, #20
 80053f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053fa:	633a      	str	r2, [r7, #48]	; 0x30
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e3      	bne.n	80053d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	60fb      	str	r3, [r7, #12]
   return(result);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0310 	bic.w	r3, r3, #16
 8005432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005440:	61fa      	str	r2, [r7, #28]
 8005442:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	69b9      	ldr	r1, [r7, #24]
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	617b      	str	r3, [r7, #20]
   return(result);
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e3      	bne.n	800541c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f852 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005460:	e023      	b.n	80054aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_UART_IRQHandler+0x4ea>
 800546e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fb4d 	bl	8005b1a <UART_Transmit_IT>
    return;
 8005480:	e014      	b.n	80054ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00e      	beq.n	80054ac <HAL_UART_IRQHandler+0x514>
 800548e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fb8d 	bl	8005bba <UART_EndTransmit_IT>
    return;
 80054a0:	e004      	b.n	80054ac <HAL_UART_IRQHandler+0x514>
    return;
 80054a2:	bf00      	nop
 80054a4:	e002      	b.n	80054ac <HAL_UART_IRQHandler+0x514>
      return;
 80054a6:	bf00      	nop
 80054a8:	e000      	b.n	80054ac <HAL_UART_IRQHandler+0x514>
      return;
 80054aa:	bf00      	nop
  }
}
 80054ac:	37e8      	adds	r7, #232	; 0xe8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop

080054b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b090      	sub	sp, #64	; 0x40
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d137      	bne.n	80055a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553a:	2200      	movs	r2, #0
 800553c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800553e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	623b      	str	r3, [r7, #32]
   return(result);
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005554:	63bb      	str	r3, [r7, #56]	; 0x38
 8005556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800555e:	633a      	str	r2, [r7, #48]	; 0x30
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	60fb      	str	r3, [r7, #12]
   return(result);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
 800558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005592:	61fa      	str	r2, [r7, #28]
 8005594:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	69b9      	ldr	r1, [r7, #24]
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	617b      	str	r3, [r7, #20]
   return(result);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055a6:	e002      	b.n	80055ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80055a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80055aa:	f7ff ff83 	bl	80054b4 <HAL_UART_TxCpltCallback>
}
 80055ae:	bf00      	nop
 80055b0:	3740      	adds	r7, #64	; 0x40
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff ff7f 	bl	80054c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b09c      	sub	sp, #112	; 0x70
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d172      	bne.n	80056d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80055ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f0:	2200      	movs	r2, #0
 80055f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	e853 3f00 	ldrex	r3, [r3]
 8005602:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800560a:	66bb      	str	r3, [r7, #104]	; 0x68
 800560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005614:	65ba      	str	r2, [r7, #88]	; 0x58
 8005616:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800561a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e5      	bne.n	80055f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	667b      	str	r3, [r7, #100]	; 0x64
 8005640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3314      	adds	r3, #20
 8005646:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005648:	647a      	str	r2, [r7, #68]	; 0x44
 800564a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800564e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	623b      	str	r3, [r7, #32]
   return(result);
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005672:	663b      	str	r3, [r7, #96]	; 0x60
 8005674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3314      	adds	r3, #20
 800567a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800567c:	633a      	str	r2, [r7, #48]	; 0x30
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	2b01      	cmp	r3, #1
 800569e:	d119      	bne.n	80056d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0310 	bic.w	r3, r3, #16
 80056b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056c0:	61fa      	str	r2, [r7, #28]
 80056c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	69b9      	ldr	r1, [r7, #24]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	617b      	str	r3, [r7, #20]
   return(result);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e5      	bne.n	80056a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d106      	bne.n	80056ea <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056e0:	4619      	mov	r1, r3
 80056e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80056e4:	f7ff ff0e 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056e8:	e002      	b.n	80056f0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80056ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80056ec:	f7fb ff96 	bl	800161c <HAL_UART_RxCpltCallback>
}
 80056f0:	bf00      	nop
 80056f2:	3770      	adds	r7, #112	; 0x70
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570a:	2b01      	cmp	r3, #1
 800570c:	d108      	bne.n	8005720 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	b29b      	uxth	r3, r3
 8005716:	4619      	mov	r1, r3
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff fef3 	bl	8005504 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800571e:	e002      	b.n	8005726 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff fedb 	bl	80054dc <HAL_UART_RxHalfCpltCallback>
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b21      	cmp	r3, #33	; 0x21
 8005760:	d108      	bne.n	8005774 <UART_DMAError+0x46>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800576e:	68b8      	ldr	r0, [r7, #8]
 8005770:	f000 f934 	bl	80059dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	bf0c      	ite	eq
 8005782:	2301      	moveq	r3, #1
 8005784:	2300      	movne	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b22      	cmp	r3, #34	; 0x22
 8005794:	d108      	bne.n	80057a8 <UART_DMAError+0x7a>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80057a2:	68b8      	ldr	r0, [r7, #8]
 80057a4:	f000 f942 	bl	8005a2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f043 0210 	orr.w	r2, r3, #16
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057b4:	68b8      	ldr	r0, [r7, #8]
 80057b6:	f7ff fe9b 	bl	80054f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ba:	bf00      	nop
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b090      	sub	sp, #64	; 0x40
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	603b      	str	r3, [r7, #0]
 80057ce:	4613      	mov	r3, r2
 80057d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d2:	e050      	b.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057da:	d04c      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80057e2:	f7fc fb93 	bl	8001f0c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d241      	bcs.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	330c      	adds	r3, #12
 8005810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005812:	637a      	str	r2, [r7, #52]	; 0x34
 8005814:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e5      	bne.n	80057f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	613b      	str	r3, [r7, #16]
   return(result);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3314      	adds	r3, #20
 8005844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005846:	623a      	str	r2, [r7, #32]
 8005848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	69f9      	ldr	r1, [r7, #28]
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	61bb      	str	r3, [r7, #24]
   return(result);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e5      	bne.n	8005826 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e00f      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	bf0c      	ite	eq
 8005886:	2301      	moveq	r3, #1
 8005888:	2300      	movne	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	429a      	cmp	r2, r3
 8005892:	d09f      	beq.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3740      	adds	r7, #64	; 0x40
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b098      	sub	sp, #96	; 0x60
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2222      	movs	r2, #34	; 0x22
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	4a40      	ldr	r2, [pc, #256]	; (80059d0 <UART_Start_Receive_DMA+0x130>)
 80058ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	4a3f      	ldr	r2, [pc, #252]	; (80059d4 <UART_Start_Receive_DMA+0x134>)
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	4a3e      	ldr	r2, [pc, #248]	; (80059d8 <UART_Start_Receive_DMA+0x138>)
 80058de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	2200      	movs	r2, #0
 80058e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80058e8:	f107 0308 	add.w	r3, r7, #8
 80058ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4619      	mov	r1, r3
 80058fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	f7fc fcd0 	bl	80022a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d019      	beq.n	800595e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800593a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005940:	65bb      	str	r3, [r7, #88]	; 0x58
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800594a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800594c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e5      	bne.n	800592a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	657b      	str	r3, [r7, #84]	; 0x54
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3314      	adds	r3, #20
 800597c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800597e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e5      	bne.n	800595e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	617b      	str	r3, [r7, #20]
   return(result);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a8:	653b      	str	r3, [r7, #80]	; 0x50
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3314      	adds	r3, #20
 80059b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059b2:	627a      	str	r2, [r7, #36]	; 0x24
 80059b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	6a39      	ldr	r1, [r7, #32]
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	61fb      	str	r3, [r7, #28]
   return(result);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e5      	bne.n	8005992 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3760      	adds	r7, #96	; 0x60
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	080055d3 	.word	0x080055d3
 80059d4:	080056f9 	.word	0x080056f9
 80059d8:	0800572f 	.word	0x0800572f

080059dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059dc:	b480      	push	{r7}
 80059de:	b089      	sub	sp, #36	; 0x24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	61ba      	str	r2, [r7, #24]
 8005a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6979      	ldr	r1, [r7, #20]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	613b      	str	r3, [r7, #16]
   return(result);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e5      	bne.n	80059e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005a20:	bf00      	nop
 8005a22:	3724      	adds	r7, #36	; 0x24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b095      	sub	sp, #84	; 0x54
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a54:	643a      	str	r2, [r7, #64]	; 0x40
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3314      	adds	r3, #20
 8005a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d119      	bne.n	8005ad8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f023 0310 	bic.w	r3, r3, #16
 8005aba:	647b      	str	r3, [r7, #68]	; 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac4:	61ba      	str	r2, [r7, #24]
 8005ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6979      	ldr	r1, [r7, #20]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ae6:	bf00      	nop
 8005ae8:	3754      	adds	r7, #84	; 0x54
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff fcef 	bl	80054f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b21      	cmp	r3, #33	; 0x21
 8005b2c:	d13e      	bne.n	8005bac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b36:	d114      	bne.n	8005b62 <UART_Transmit_IT+0x48>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d110      	bne.n	8005b62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	1c9a      	adds	r2, r3, #2
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	621a      	str	r2, [r3, #32]
 8005b60:	e008      	b.n	8005b74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6211      	str	r1, [r2, #32]
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4619      	mov	r1, r3
 8005b82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10f      	bne.n	8005ba8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ba6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e000      	b.n	8005bae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bac:	2302      	movs	r3, #2
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fc6a 	bl	80054b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b08c      	sub	sp, #48	; 0x30
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b22      	cmp	r3, #34	; 0x22
 8005bfc:	f040 80ab 	bne.w	8005d56 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c08:	d117      	bne.n	8005c3a <UART_Receive_IT+0x50>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d113      	bne.n	8005c3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	1c9a      	adds	r2, r3, #2
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28
 8005c38:	e026      	b.n	8005c88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4c:	d007      	beq.n	8005c5e <UART_Receive_IT+0x74>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <UART_Receive_IT+0x82>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e008      	b.n	8005c7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4619      	mov	r1, r3
 8005c96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d15a      	bne.n	8005d52 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0220 	bic.w	r2, r2, #32
 8005caa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d135      	bne.n	8005d48 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	330c      	adds	r3, #12
 8005ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f023 0310 	bic.w	r3, r3, #16
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d02:	623a      	str	r2, [r7, #32]
 8005d04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	69f9      	ldr	r1, [r7, #28]
 8005d08:	6a3a      	ldr	r2, [r7, #32]
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d10a      	bne.n	8005d3a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff fbdf 	bl	8005504 <HAL_UARTEx_RxEventCallback>
 8005d46:	e002      	b.n	8005d4e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7fb fc67 	bl	800161c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e002      	b.n	8005d58 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e000      	b.n	8005d58 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
  }
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3730      	adds	r7, #48	; 0x30
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d64:	b0c0      	sub	sp, #256	; 0x100
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7c:	68d9      	ldr	r1, [r3, #12]
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	ea40 0301 	orr.w	r3, r0, r1
 8005d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005db8:	f021 010c 	bic.w	r1, r1, #12
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dda:	6999      	ldr	r1, [r3, #24]
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	ea40 0301 	orr.w	r3, r0, r1
 8005de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b8f      	ldr	r3, [pc, #572]	; (800602c <UART_SetConfig+0x2cc>)
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d005      	beq.n	8005e00 <UART_SetConfig+0xa0>
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b8d      	ldr	r3, [pc, #564]	; (8006030 <UART_SetConfig+0x2d0>)
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d104      	bne.n	8005e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e00:	f7fd fbdc 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8005e04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e08:	e003      	b.n	8005e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e0a:	f7fd fbc3 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8005e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e1c:	f040 810c 	bne.w	8006038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e32:	4622      	mov	r2, r4
 8005e34:	462b      	mov	r3, r5
 8005e36:	1891      	adds	r1, r2, r2
 8005e38:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e3a:	415b      	adcs	r3, r3
 8005e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e42:	4621      	mov	r1, r4
 8005e44:	eb12 0801 	adds.w	r8, r2, r1
 8005e48:	4629      	mov	r1, r5
 8005e4a:	eb43 0901 	adc.w	r9, r3, r1
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e62:	4690      	mov	r8, r2
 8005e64:	4699      	mov	r9, r3
 8005e66:	4623      	mov	r3, r4
 8005e68:	eb18 0303 	adds.w	r3, r8, r3
 8005e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e70:	462b      	mov	r3, r5
 8005e72:	eb49 0303 	adc.w	r3, r9, r3
 8005e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e8e:	460b      	mov	r3, r1
 8005e90:	18db      	adds	r3, r3, r3
 8005e92:	653b      	str	r3, [r7, #80]	; 0x50
 8005e94:	4613      	mov	r3, r2
 8005e96:	eb42 0303 	adc.w	r3, r2, r3
 8005e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ea4:	f7fa fef0 	bl	8000c88 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4b61      	ldr	r3, [pc, #388]	; (8006034 <UART_SetConfig+0x2d4>)
 8005eae:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	011c      	lsls	r4, r3, #4
 8005eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	1891      	adds	r1, r2, r2
 8005ece:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ed0:	415b      	adcs	r3, r3
 8005ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ed8:	4641      	mov	r1, r8
 8005eda:	eb12 0a01 	adds.w	sl, r2, r1
 8005ede:	4649      	mov	r1, r9
 8005ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef8:	4692      	mov	sl, r2
 8005efa:	469b      	mov	fp, r3
 8005efc:	4643      	mov	r3, r8
 8005efe:	eb1a 0303 	adds.w	r3, sl, r3
 8005f02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f06:	464b      	mov	r3, r9
 8005f08:	eb4b 0303 	adc.w	r3, fp, r3
 8005f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f24:	460b      	mov	r3, r1
 8005f26:	18db      	adds	r3, r3, r3
 8005f28:	643b      	str	r3, [r7, #64]	; 0x40
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	eb42 0303 	adc.w	r3, r2, r3
 8005f30:	647b      	str	r3, [r7, #68]	; 0x44
 8005f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f3a:	f7fa fea5 	bl	8000c88 <__aeabi_uldivmod>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	4b3b      	ldr	r3, [pc, #236]	; (8006034 <UART_SetConfig+0x2d4>)
 8005f46:	fba3 2301 	umull	r2, r3, r3, r1
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	2264      	movs	r2, #100	; 0x64
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	1acb      	subs	r3, r1, r3
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f5a:	4b36      	ldr	r3, [pc, #216]	; (8006034 <UART_SetConfig+0x2d4>)
 8005f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f68:	441c      	add	r4, r3
 8005f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	1891      	adds	r1, r2, r2
 8005f82:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f84:	415b      	adcs	r3, r3
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	1851      	adds	r1, r2, r1
 8005f90:	6339      	str	r1, [r7, #48]	; 0x30
 8005f92:	4649      	mov	r1, r9
 8005f94:	414b      	adcs	r3, r1
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fa4:	4659      	mov	r1, fp
 8005fa6:	00cb      	lsls	r3, r1, #3
 8005fa8:	4651      	mov	r1, sl
 8005faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fae:	4651      	mov	r1, sl
 8005fb0:	00ca      	lsls	r2, r1, #3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4642      	mov	r2, r8
 8005fba:	189b      	adds	r3, r3, r2
 8005fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fc0:	464b      	mov	r3, r9
 8005fc2:	460a      	mov	r2, r1
 8005fc4:	eb42 0303 	adc.w	r3, r2, r3
 8005fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	18db      	adds	r3, r3, r3
 8005fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	eb42 0303 	adc.w	r3, r2, r3
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ff6:	f7fa fe47 	bl	8000c88 <__aeabi_uldivmod>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <UART_SetConfig+0x2d4>)
 8006000:	fba3 1302 	umull	r1, r3, r3, r2
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	2164      	movs	r1, #100	; 0x64
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	3332      	adds	r3, #50	; 0x32
 8006012:	4a08      	ldr	r2, [pc, #32]	; (8006034 <UART_SetConfig+0x2d4>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f003 0207 	and.w	r2, r3, #7
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4422      	add	r2, r4
 8006026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006028:	e106      	b.n	8006238 <UART_SetConfig+0x4d8>
 800602a:	bf00      	nop
 800602c:	40011000 	.word	0x40011000
 8006030:	40011400 	.word	0x40011400
 8006034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800603c:	2200      	movs	r2, #0
 800603e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006042:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800604a:	4642      	mov	r2, r8
 800604c:	464b      	mov	r3, r9
 800604e:	1891      	adds	r1, r2, r2
 8006050:	6239      	str	r1, [r7, #32]
 8006052:	415b      	adcs	r3, r3
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
 8006056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800605a:	4641      	mov	r1, r8
 800605c:	1854      	adds	r4, r2, r1
 800605e:	4649      	mov	r1, r9
 8006060:	eb43 0501 	adc.w	r5, r3, r1
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	00eb      	lsls	r3, r5, #3
 800606e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006072:	00e2      	lsls	r2, r4, #3
 8006074:	4614      	mov	r4, r2
 8006076:	461d      	mov	r5, r3
 8006078:	4643      	mov	r3, r8
 800607a:	18e3      	adds	r3, r4, r3
 800607c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006080:	464b      	mov	r3, r9
 8006082:	eb45 0303 	adc.w	r3, r5, r3
 8006086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800608a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006096:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060a6:	4629      	mov	r1, r5
 80060a8:	008b      	lsls	r3, r1, #2
 80060aa:	4621      	mov	r1, r4
 80060ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b0:	4621      	mov	r1, r4
 80060b2:	008a      	lsls	r2, r1, #2
 80060b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060b8:	f7fa fde6 	bl	8000c88 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4b60      	ldr	r3, [pc, #384]	; (8006244 <UART_SetConfig+0x4e4>)
 80060c2:	fba3 2302 	umull	r2, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	011c      	lsls	r4, r3, #4
 80060ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	1891      	adds	r1, r2, r2
 80060e2:	61b9      	str	r1, [r7, #24]
 80060e4:	415b      	adcs	r3, r3
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ec:	4641      	mov	r1, r8
 80060ee:	1851      	adds	r1, r2, r1
 80060f0:	6139      	str	r1, [r7, #16]
 80060f2:	4649      	mov	r1, r9
 80060f4:	414b      	adcs	r3, r1
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006104:	4659      	mov	r1, fp
 8006106:	00cb      	lsls	r3, r1, #3
 8006108:	4651      	mov	r1, sl
 800610a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800610e:	4651      	mov	r1, sl
 8006110:	00ca      	lsls	r2, r1, #3
 8006112:	4610      	mov	r0, r2
 8006114:	4619      	mov	r1, r3
 8006116:	4603      	mov	r3, r0
 8006118:	4642      	mov	r2, r8
 800611a:	189b      	adds	r3, r3, r2
 800611c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006120:	464b      	mov	r3, r9
 8006122:	460a      	mov	r2, r1
 8006124:	eb42 0303 	adc.w	r3, r2, r3
 8006128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	67bb      	str	r3, [r7, #120]	; 0x78
 8006136:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006144:	4649      	mov	r1, r9
 8006146:	008b      	lsls	r3, r1, #2
 8006148:	4641      	mov	r1, r8
 800614a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800614e:	4641      	mov	r1, r8
 8006150:	008a      	lsls	r2, r1, #2
 8006152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006156:	f7fa fd97 	bl	8000c88 <__aeabi_uldivmod>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4611      	mov	r1, r2
 8006160:	4b38      	ldr	r3, [pc, #224]	; (8006244 <UART_SetConfig+0x4e4>)
 8006162:	fba3 2301 	umull	r2, r3, r3, r1
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	2264      	movs	r2, #100	; 0x64
 800616a:	fb02 f303 	mul.w	r3, r2, r3
 800616e:	1acb      	subs	r3, r1, r3
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	3332      	adds	r3, #50	; 0x32
 8006174:	4a33      	ldr	r2, [pc, #204]	; (8006244 <UART_SetConfig+0x4e4>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006180:	441c      	add	r4, r3
 8006182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006186:	2200      	movs	r2, #0
 8006188:	673b      	str	r3, [r7, #112]	; 0x70
 800618a:	677a      	str	r2, [r7, #116]	; 0x74
 800618c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	1891      	adds	r1, r2, r2
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	415b      	adcs	r3, r3
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061a0:	4641      	mov	r1, r8
 80061a2:	1851      	adds	r1, r2, r1
 80061a4:	6039      	str	r1, [r7, #0]
 80061a6:	4649      	mov	r1, r9
 80061a8:	414b      	adcs	r3, r1
 80061aa:	607b      	str	r3, [r7, #4]
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061b8:	4659      	mov	r1, fp
 80061ba:	00cb      	lsls	r3, r1, #3
 80061bc:	4651      	mov	r1, sl
 80061be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c2:	4651      	mov	r1, sl
 80061c4:	00ca      	lsls	r2, r1, #3
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	4642      	mov	r2, r8
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061d2:	464b      	mov	r3, r9
 80061d4:	460a      	mov	r2, r1
 80061d6:	eb42 0303 	adc.w	r3, r2, r3
 80061da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	663b      	str	r3, [r7, #96]	; 0x60
 80061e6:	667a      	str	r2, [r7, #100]	; 0x64
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061f4:	4649      	mov	r1, r9
 80061f6:	008b      	lsls	r3, r1, #2
 80061f8:	4641      	mov	r1, r8
 80061fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061fe:	4641      	mov	r1, r8
 8006200:	008a      	lsls	r2, r1, #2
 8006202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006206:	f7fa fd3f 	bl	8000c88 <__aeabi_uldivmod>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <UART_SetConfig+0x4e4>)
 8006210:	fba3 1302 	umull	r1, r3, r3, r2
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	2164      	movs	r1, #100	; 0x64
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	3332      	adds	r3, #50	; 0x32
 8006222:	4a08      	ldr	r2, [pc, #32]	; (8006244 <UART_SetConfig+0x4e4>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4422      	add	r2, r4
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	bf00      	nop
 800623a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800623e:	46bd      	mov	sp, r7
 8006240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006244:	51eb851f 	.word	0x51eb851f

08006248 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800624c:	4904      	ldr	r1, [pc, #16]	; (8006260 <MX_FATFS_Init+0x18>)
 800624e:	4805      	ldr	r0, [pc, #20]	; (8006264 <MX_FATFS_Init+0x1c>)
 8006250:	f000 f8b0 	bl	80063b4 <FATFS_LinkDriver>
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <MX_FATFS_Init+0x20>)
 800625a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800625c:	bf00      	nop
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20000474 	.word	0x20000474
 8006264:	2000000c 	.word	0x2000000c
 8006268:	20000470 	.word	0x20000470

0800626c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006276:	4b06      	ldr	r3, [pc, #24]	; (8006290 <USER_initialize+0x24>)
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800627c:	4b04      	ldr	r3, [pc, #16]	; (8006290 <USER_initialize+0x24>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000009 	.word	0x20000009

08006294 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <USER_status+0x24>)
 80062a0:	2201      	movs	r2, #1
 80062a2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80062a4:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <USER_status+0x24>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	20000009 	.word	0x20000009

080062bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80062cc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80062ea:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	603a      	str	r2, [r7, #0]
 8006302:	71fb      	strb	r3, [r7, #7]
 8006304:	460b      	mov	r3, r1
 8006306:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
    return res;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006332:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <FATFS_LinkDriverEx+0x94>)
 8006334:	7a5b      	ldrb	r3, [r3, #9]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d131      	bne.n	80063a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800633c:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <FATFS_LinkDriverEx+0x94>)
 800633e:	7a5b      	ldrb	r3, [r3, #9]
 8006340:	b2db      	uxtb	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <FATFS_LinkDriverEx+0x94>)
 8006346:	2100      	movs	r1, #0
 8006348:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800634a:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <FATFS_LinkDriverEx+0x94>)
 800634c:	7a5b      	ldrb	r3, [r3, #9]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <FATFS_LinkDriverEx+0x94>)
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800635a:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <FATFS_LinkDriverEx+0x94>)
 800635c:	7a5b      	ldrb	r3, [r3, #9]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <FATFS_LinkDriverEx+0x94>)
 8006364:	4413      	add	r3, r2
 8006366:	79fa      	ldrb	r2, [r7, #7]
 8006368:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800636a:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <FATFS_LinkDriverEx+0x94>)
 800636c:	7a5b      	ldrb	r3, [r3, #9]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	b2d1      	uxtb	r1, r2
 8006374:	4a0e      	ldr	r2, [pc, #56]	; (80063b0 <FATFS_LinkDriverEx+0x94>)
 8006376:	7251      	strb	r1, [r2, #9]
 8006378:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800637a:	7dbb      	ldrb	r3, [r7, #22]
 800637c:	3330      	adds	r3, #48	; 0x30
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	3301      	adds	r3, #1
 8006388:	223a      	movs	r2, #58	; 0x3a
 800638a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	3302      	adds	r3, #2
 8006390:	222f      	movs	r2, #47	; 0x2f
 8006392:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	3303      	adds	r3, #3
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	20000478 	.word	0x20000478

080063b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80063be:	2200      	movs	r2, #0
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ffaa 	bl	800631c <FATFS_LinkDriverEx>
 80063c8:	4603      	mov	r3, r0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <atoi>:
 80063d2:	220a      	movs	r2, #10
 80063d4:	2100      	movs	r1, #0
 80063d6:	f000 b885 	b.w	80064e4 <strtol>
	...

080063dc <_strtol_l.constprop.0>:
 80063dc:	2b01      	cmp	r3, #1
 80063de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e2:	d001      	beq.n	80063e8 <_strtol_l.constprop.0+0xc>
 80063e4:	2b24      	cmp	r3, #36	; 0x24
 80063e6:	d906      	bls.n	80063f6 <_strtol_l.constprop.0+0x1a>
 80063e8:	f001 f874 	bl	80074d4 <__errno>
 80063ec:	2316      	movs	r3, #22
 80063ee:	6003      	str	r3, [r0, #0]
 80063f0:	2000      	movs	r0, #0
 80063f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80064dc <_strtol_l.constprop.0+0x100>
 80063fa:	460d      	mov	r5, r1
 80063fc:	462e      	mov	r6, r5
 80063fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006402:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006406:	f017 0708 	ands.w	r7, r7, #8
 800640a:	d1f7      	bne.n	80063fc <_strtol_l.constprop.0+0x20>
 800640c:	2c2d      	cmp	r4, #45	; 0x2d
 800640e:	d132      	bne.n	8006476 <_strtol_l.constprop.0+0x9a>
 8006410:	782c      	ldrb	r4, [r5, #0]
 8006412:	2701      	movs	r7, #1
 8006414:	1cb5      	adds	r5, r6, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d05b      	beq.n	80064d2 <_strtol_l.constprop.0+0xf6>
 800641a:	2b10      	cmp	r3, #16
 800641c:	d109      	bne.n	8006432 <_strtol_l.constprop.0+0x56>
 800641e:	2c30      	cmp	r4, #48	; 0x30
 8006420:	d107      	bne.n	8006432 <_strtol_l.constprop.0+0x56>
 8006422:	782c      	ldrb	r4, [r5, #0]
 8006424:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006428:	2c58      	cmp	r4, #88	; 0x58
 800642a:	d14d      	bne.n	80064c8 <_strtol_l.constprop.0+0xec>
 800642c:	786c      	ldrb	r4, [r5, #1]
 800642e:	2310      	movs	r3, #16
 8006430:	3502      	adds	r5, #2
 8006432:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006436:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800643a:	f04f 0e00 	mov.w	lr, #0
 800643e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006442:	4676      	mov	r6, lr
 8006444:	fb03 8a19 	mls	sl, r3, r9, r8
 8006448:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800644c:	f1bc 0f09 	cmp.w	ip, #9
 8006450:	d816      	bhi.n	8006480 <_strtol_l.constprop.0+0xa4>
 8006452:	4664      	mov	r4, ip
 8006454:	42a3      	cmp	r3, r4
 8006456:	dd24      	ble.n	80064a2 <_strtol_l.constprop.0+0xc6>
 8006458:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800645c:	d008      	beq.n	8006470 <_strtol_l.constprop.0+0x94>
 800645e:	45b1      	cmp	r9, r6
 8006460:	d31c      	bcc.n	800649c <_strtol_l.constprop.0+0xc0>
 8006462:	d101      	bne.n	8006468 <_strtol_l.constprop.0+0x8c>
 8006464:	45a2      	cmp	sl, r4
 8006466:	db19      	blt.n	800649c <_strtol_l.constprop.0+0xc0>
 8006468:	fb06 4603 	mla	r6, r6, r3, r4
 800646c:	f04f 0e01 	mov.w	lr, #1
 8006470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006474:	e7e8      	b.n	8006448 <_strtol_l.constprop.0+0x6c>
 8006476:	2c2b      	cmp	r4, #43	; 0x2b
 8006478:	bf04      	itt	eq
 800647a:	782c      	ldrbeq	r4, [r5, #0]
 800647c:	1cb5      	addeq	r5, r6, #2
 800647e:	e7ca      	b.n	8006416 <_strtol_l.constprop.0+0x3a>
 8006480:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006484:	f1bc 0f19 	cmp.w	ip, #25
 8006488:	d801      	bhi.n	800648e <_strtol_l.constprop.0+0xb2>
 800648a:	3c37      	subs	r4, #55	; 0x37
 800648c:	e7e2      	b.n	8006454 <_strtol_l.constprop.0+0x78>
 800648e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006492:	f1bc 0f19 	cmp.w	ip, #25
 8006496:	d804      	bhi.n	80064a2 <_strtol_l.constprop.0+0xc6>
 8006498:	3c57      	subs	r4, #87	; 0x57
 800649a:	e7db      	b.n	8006454 <_strtol_l.constprop.0+0x78>
 800649c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80064a0:	e7e6      	b.n	8006470 <_strtol_l.constprop.0+0x94>
 80064a2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80064a6:	d105      	bne.n	80064b4 <_strtol_l.constprop.0+0xd8>
 80064a8:	2322      	movs	r3, #34	; 0x22
 80064aa:	6003      	str	r3, [r0, #0]
 80064ac:	4646      	mov	r6, r8
 80064ae:	b942      	cbnz	r2, 80064c2 <_strtol_l.constprop.0+0xe6>
 80064b0:	4630      	mov	r0, r6
 80064b2:	e79e      	b.n	80063f2 <_strtol_l.constprop.0+0x16>
 80064b4:	b107      	cbz	r7, 80064b8 <_strtol_l.constprop.0+0xdc>
 80064b6:	4276      	negs	r6, r6
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	d0f9      	beq.n	80064b0 <_strtol_l.constprop.0+0xd4>
 80064bc:	f1be 0f00 	cmp.w	lr, #0
 80064c0:	d000      	beq.n	80064c4 <_strtol_l.constprop.0+0xe8>
 80064c2:	1e69      	subs	r1, r5, #1
 80064c4:	6011      	str	r1, [r2, #0]
 80064c6:	e7f3      	b.n	80064b0 <_strtol_l.constprop.0+0xd4>
 80064c8:	2430      	movs	r4, #48	; 0x30
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1b1      	bne.n	8006432 <_strtol_l.constprop.0+0x56>
 80064ce:	2308      	movs	r3, #8
 80064d0:	e7af      	b.n	8006432 <_strtol_l.constprop.0+0x56>
 80064d2:	2c30      	cmp	r4, #48	; 0x30
 80064d4:	d0a5      	beq.n	8006422 <_strtol_l.constprop.0+0x46>
 80064d6:	230a      	movs	r3, #10
 80064d8:	e7ab      	b.n	8006432 <_strtol_l.constprop.0+0x56>
 80064da:	bf00      	nop
 80064dc:	0800ac61 	.word	0x0800ac61

080064e0 <_strtol_r>:
 80064e0:	f7ff bf7c 	b.w	80063dc <_strtol_l.constprop.0>

080064e4 <strtol>:
 80064e4:	4613      	mov	r3, r2
 80064e6:	460a      	mov	r2, r1
 80064e8:	4601      	mov	r1, r0
 80064ea:	4802      	ldr	r0, [pc, #8]	; (80064f4 <strtol+0x10>)
 80064ec:	6800      	ldr	r0, [r0, #0]
 80064ee:	f7ff bf75 	b.w	80063dc <_strtol_l.constprop.0>
 80064f2:	bf00      	nop
 80064f4:	20000078 	.word	0x20000078

080064f8 <__cvt>:
 80064f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064fc:	ec55 4b10 	vmov	r4, r5, d0
 8006500:	2d00      	cmp	r5, #0
 8006502:	460e      	mov	r6, r1
 8006504:	4619      	mov	r1, r3
 8006506:	462b      	mov	r3, r5
 8006508:	bfbb      	ittet	lt
 800650a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800650e:	461d      	movlt	r5, r3
 8006510:	2300      	movge	r3, #0
 8006512:	232d      	movlt	r3, #45	; 0x2d
 8006514:	700b      	strb	r3, [r1, #0]
 8006516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006518:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800651c:	4691      	mov	r9, r2
 800651e:	f023 0820 	bic.w	r8, r3, #32
 8006522:	bfbc      	itt	lt
 8006524:	4622      	movlt	r2, r4
 8006526:	4614      	movlt	r4, r2
 8006528:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800652c:	d005      	beq.n	800653a <__cvt+0x42>
 800652e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006532:	d100      	bne.n	8006536 <__cvt+0x3e>
 8006534:	3601      	adds	r6, #1
 8006536:	2102      	movs	r1, #2
 8006538:	e000      	b.n	800653c <__cvt+0x44>
 800653a:	2103      	movs	r1, #3
 800653c:	ab03      	add	r3, sp, #12
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	ab02      	add	r3, sp, #8
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	ec45 4b10 	vmov	d0, r4, r5
 8006548:	4653      	mov	r3, sl
 800654a:	4632      	mov	r2, r6
 800654c:	f001 f880 	bl	8007650 <_dtoa_r>
 8006550:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006554:	4607      	mov	r7, r0
 8006556:	d102      	bne.n	800655e <__cvt+0x66>
 8006558:	f019 0f01 	tst.w	r9, #1
 800655c:	d022      	beq.n	80065a4 <__cvt+0xac>
 800655e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006562:	eb07 0906 	add.w	r9, r7, r6
 8006566:	d110      	bne.n	800658a <__cvt+0x92>
 8006568:	783b      	ldrb	r3, [r7, #0]
 800656a:	2b30      	cmp	r3, #48	; 0x30
 800656c:	d10a      	bne.n	8006584 <__cvt+0x8c>
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	4620      	mov	r0, r4
 8006574:	4629      	mov	r1, r5
 8006576:	f7fa faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800657a:	b918      	cbnz	r0, 8006584 <__cvt+0x8c>
 800657c:	f1c6 0601 	rsb	r6, r6, #1
 8006580:	f8ca 6000 	str.w	r6, [sl]
 8006584:	f8da 3000 	ldr.w	r3, [sl]
 8006588:	4499      	add	r9, r3
 800658a:	2200      	movs	r2, #0
 800658c:	2300      	movs	r3, #0
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	f7fa fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 8006596:	b108      	cbz	r0, 800659c <__cvt+0xa4>
 8006598:	f8cd 900c 	str.w	r9, [sp, #12]
 800659c:	2230      	movs	r2, #48	; 0x30
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	454b      	cmp	r3, r9
 80065a2:	d307      	bcc.n	80065b4 <__cvt+0xbc>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065a8:	1bdb      	subs	r3, r3, r7
 80065aa:	4638      	mov	r0, r7
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	b004      	add	sp, #16
 80065b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b4:	1c59      	adds	r1, r3, #1
 80065b6:	9103      	str	r1, [sp, #12]
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e7f0      	b.n	800659e <__cvt+0xa6>

080065bc <__exponent>:
 80065bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065be:	4603      	mov	r3, r0
 80065c0:	2900      	cmp	r1, #0
 80065c2:	bfb8      	it	lt
 80065c4:	4249      	neglt	r1, r1
 80065c6:	f803 2b02 	strb.w	r2, [r3], #2
 80065ca:	bfb4      	ite	lt
 80065cc:	222d      	movlt	r2, #45	; 0x2d
 80065ce:	222b      	movge	r2, #43	; 0x2b
 80065d0:	2909      	cmp	r1, #9
 80065d2:	7042      	strb	r2, [r0, #1]
 80065d4:	dd2a      	ble.n	800662c <__exponent+0x70>
 80065d6:	f10d 0207 	add.w	r2, sp, #7
 80065da:	4617      	mov	r7, r2
 80065dc:	260a      	movs	r6, #10
 80065de:	4694      	mov	ip, r2
 80065e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80065e4:	fb06 1415 	mls	r4, r6, r5, r1
 80065e8:	3430      	adds	r4, #48	; 0x30
 80065ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80065ee:	460c      	mov	r4, r1
 80065f0:	2c63      	cmp	r4, #99	; 0x63
 80065f2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80065f6:	4629      	mov	r1, r5
 80065f8:	dcf1      	bgt.n	80065de <__exponent+0x22>
 80065fa:	3130      	adds	r1, #48	; 0x30
 80065fc:	f1ac 0402 	sub.w	r4, ip, #2
 8006600:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006604:	1c41      	adds	r1, r0, #1
 8006606:	4622      	mov	r2, r4
 8006608:	42ba      	cmp	r2, r7
 800660a:	d30a      	bcc.n	8006622 <__exponent+0x66>
 800660c:	f10d 0209 	add.w	r2, sp, #9
 8006610:	eba2 020c 	sub.w	r2, r2, ip
 8006614:	42bc      	cmp	r4, r7
 8006616:	bf88      	it	hi
 8006618:	2200      	movhi	r2, #0
 800661a:	4413      	add	r3, r2
 800661c:	1a18      	subs	r0, r3, r0
 800661e:	b003      	add	sp, #12
 8006620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006622:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006626:	f801 5f01 	strb.w	r5, [r1, #1]!
 800662a:	e7ed      	b.n	8006608 <__exponent+0x4c>
 800662c:	2330      	movs	r3, #48	; 0x30
 800662e:	3130      	adds	r1, #48	; 0x30
 8006630:	7083      	strb	r3, [r0, #2]
 8006632:	70c1      	strb	r1, [r0, #3]
 8006634:	1d03      	adds	r3, r0, #4
 8006636:	e7f1      	b.n	800661c <__exponent+0x60>

08006638 <_printf_float>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	ed2d 8b02 	vpush	{d8}
 8006640:	b08d      	sub	sp, #52	; 0x34
 8006642:	460c      	mov	r4, r1
 8006644:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006648:	4616      	mov	r6, r2
 800664a:	461f      	mov	r7, r3
 800664c:	4605      	mov	r5, r0
 800664e:	f000 fef7 	bl	8007440 <_localeconv_r>
 8006652:	f8d0 a000 	ldr.w	sl, [r0]
 8006656:	4650      	mov	r0, sl
 8006658:	f7f9 fe0a 	bl	8000270 <strlen>
 800665c:	2300      	movs	r3, #0
 800665e:	930a      	str	r3, [sp, #40]	; 0x28
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	9305      	str	r3, [sp, #20]
 8006664:	f8d8 3000 	ldr.w	r3, [r8]
 8006668:	f894 b018 	ldrb.w	fp, [r4, #24]
 800666c:	3307      	adds	r3, #7
 800666e:	f023 0307 	bic.w	r3, r3, #7
 8006672:	f103 0208 	add.w	r2, r3, #8
 8006676:	f8c8 2000 	str.w	r2, [r8]
 800667a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800667e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006682:	9307      	str	r3, [sp, #28]
 8006684:	f8cd 8018 	str.w	r8, [sp, #24]
 8006688:	ee08 0a10 	vmov	s16, r0
 800668c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006694:	4b9e      	ldr	r3, [pc, #632]	; (8006910 <_printf_float+0x2d8>)
 8006696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800669a:	f7fa fa47 	bl	8000b2c <__aeabi_dcmpun>
 800669e:	bb88      	cbnz	r0, 8006704 <_printf_float+0xcc>
 80066a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066a4:	4b9a      	ldr	r3, [pc, #616]	; (8006910 <_printf_float+0x2d8>)
 80066a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066aa:	f7fa fa21 	bl	8000af0 <__aeabi_dcmple>
 80066ae:	bb48      	cbnz	r0, 8006704 <_printf_float+0xcc>
 80066b0:	2200      	movs	r2, #0
 80066b2:	2300      	movs	r3, #0
 80066b4:	4640      	mov	r0, r8
 80066b6:	4649      	mov	r1, r9
 80066b8:	f7fa fa10 	bl	8000adc <__aeabi_dcmplt>
 80066bc:	b110      	cbz	r0, 80066c4 <_printf_float+0x8c>
 80066be:	232d      	movs	r3, #45	; 0x2d
 80066c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c4:	4a93      	ldr	r2, [pc, #588]	; (8006914 <_printf_float+0x2dc>)
 80066c6:	4b94      	ldr	r3, [pc, #592]	; (8006918 <_printf_float+0x2e0>)
 80066c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066cc:	bf94      	ite	ls
 80066ce:	4690      	movls	r8, r2
 80066d0:	4698      	movhi	r8, r3
 80066d2:	2303      	movs	r3, #3
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	9b05      	ldr	r3, [sp, #20]
 80066d8:	f023 0304 	bic.w	r3, r3, #4
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	f04f 0900 	mov.w	r9, #0
 80066e2:	9700      	str	r7, [sp, #0]
 80066e4:	4633      	mov	r3, r6
 80066e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80066e8:	4621      	mov	r1, r4
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 f9da 	bl	8006aa4 <_printf_common>
 80066f0:	3001      	adds	r0, #1
 80066f2:	f040 8090 	bne.w	8006816 <_printf_float+0x1de>
 80066f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066fa:	b00d      	add	sp, #52	; 0x34
 80066fc:	ecbd 8b02 	vpop	{d8}
 8006700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006704:	4642      	mov	r2, r8
 8006706:	464b      	mov	r3, r9
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	f7fa fa0e 	bl	8000b2c <__aeabi_dcmpun>
 8006710:	b140      	cbz	r0, 8006724 <_printf_float+0xec>
 8006712:	464b      	mov	r3, r9
 8006714:	2b00      	cmp	r3, #0
 8006716:	bfbc      	itt	lt
 8006718:	232d      	movlt	r3, #45	; 0x2d
 800671a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800671e:	4a7f      	ldr	r2, [pc, #508]	; (800691c <_printf_float+0x2e4>)
 8006720:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <_printf_float+0x2e8>)
 8006722:	e7d1      	b.n	80066c8 <_printf_float+0x90>
 8006724:	6863      	ldr	r3, [r4, #4]
 8006726:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800672a:	9206      	str	r2, [sp, #24]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	d13f      	bne.n	80067b0 <_printf_float+0x178>
 8006730:	2306      	movs	r3, #6
 8006732:	6063      	str	r3, [r4, #4]
 8006734:	9b05      	ldr	r3, [sp, #20]
 8006736:	6861      	ldr	r1, [r4, #4]
 8006738:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800673c:	2300      	movs	r3, #0
 800673e:	9303      	str	r3, [sp, #12]
 8006740:	ab0a      	add	r3, sp, #40	; 0x28
 8006742:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006746:	ab09      	add	r3, sp, #36	; 0x24
 8006748:	ec49 8b10 	vmov	d0, r8, r9
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	6022      	str	r2, [r4, #0]
 8006750:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006754:	4628      	mov	r0, r5
 8006756:	f7ff fecf 	bl	80064f8 <__cvt>
 800675a:	9b06      	ldr	r3, [sp, #24]
 800675c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800675e:	2b47      	cmp	r3, #71	; 0x47
 8006760:	4680      	mov	r8, r0
 8006762:	d108      	bne.n	8006776 <_printf_float+0x13e>
 8006764:	1cc8      	adds	r0, r1, #3
 8006766:	db02      	blt.n	800676e <_printf_float+0x136>
 8006768:	6863      	ldr	r3, [r4, #4]
 800676a:	4299      	cmp	r1, r3
 800676c:	dd41      	ble.n	80067f2 <_printf_float+0x1ba>
 800676e:	f1ab 0302 	sub.w	r3, fp, #2
 8006772:	fa5f fb83 	uxtb.w	fp, r3
 8006776:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800677a:	d820      	bhi.n	80067be <_printf_float+0x186>
 800677c:	3901      	subs	r1, #1
 800677e:	465a      	mov	r2, fp
 8006780:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006784:	9109      	str	r1, [sp, #36]	; 0x24
 8006786:	f7ff ff19 	bl	80065bc <__exponent>
 800678a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800678c:	1813      	adds	r3, r2, r0
 800678e:	2a01      	cmp	r2, #1
 8006790:	4681      	mov	r9, r0
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	dc02      	bgt.n	800679c <_printf_float+0x164>
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	07d2      	lsls	r2, r2, #31
 800679a:	d501      	bpl.n	80067a0 <_printf_float+0x168>
 800679c:	3301      	adds	r3, #1
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d09c      	beq.n	80066e2 <_printf_float+0xaa>
 80067a8:	232d      	movs	r3, #45	; 0x2d
 80067aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ae:	e798      	b.n	80066e2 <_printf_float+0xaa>
 80067b0:	9a06      	ldr	r2, [sp, #24]
 80067b2:	2a47      	cmp	r2, #71	; 0x47
 80067b4:	d1be      	bne.n	8006734 <_printf_float+0xfc>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1bc      	bne.n	8006734 <_printf_float+0xfc>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e7b9      	b.n	8006732 <_printf_float+0xfa>
 80067be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067c2:	d118      	bne.n	80067f6 <_printf_float+0x1be>
 80067c4:	2900      	cmp	r1, #0
 80067c6:	6863      	ldr	r3, [r4, #4]
 80067c8:	dd0b      	ble.n	80067e2 <_printf_float+0x1aa>
 80067ca:	6121      	str	r1, [r4, #16]
 80067cc:	b913      	cbnz	r3, 80067d4 <_printf_float+0x19c>
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	07d0      	lsls	r0, r2, #31
 80067d2:	d502      	bpl.n	80067da <_printf_float+0x1a2>
 80067d4:	3301      	adds	r3, #1
 80067d6:	440b      	add	r3, r1
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	65a1      	str	r1, [r4, #88]	; 0x58
 80067dc:	f04f 0900 	mov.w	r9, #0
 80067e0:	e7de      	b.n	80067a0 <_printf_float+0x168>
 80067e2:	b913      	cbnz	r3, 80067ea <_printf_float+0x1b2>
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	07d2      	lsls	r2, r2, #31
 80067e8:	d501      	bpl.n	80067ee <_printf_float+0x1b6>
 80067ea:	3302      	adds	r3, #2
 80067ec:	e7f4      	b.n	80067d8 <_printf_float+0x1a0>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e7f2      	b.n	80067d8 <_printf_float+0x1a0>
 80067f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f8:	4299      	cmp	r1, r3
 80067fa:	db05      	blt.n	8006808 <_printf_float+0x1d0>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	6121      	str	r1, [r4, #16]
 8006800:	07d8      	lsls	r0, r3, #31
 8006802:	d5ea      	bpl.n	80067da <_printf_float+0x1a2>
 8006804:	1c4b      	adds	r3, r1, #1
 8006806:	e7e7      	b.n	80067d8 <_printf_float+0x1a0>
 8006808:	2900      	cmp	r1, #0
 800680a:	bfd4      	ite	le
 800680c:	f1c1 0202 	rsble	r2, r1, #2
 8006810:	2201      	movgt	r2, #1
 8006812:	4413      	add	r3, r2
 8006814:	e7e0      	b.n	80067d8 <_printf_float+0x1a0>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	055a      	lsls	r2, r3, #21
 800681a:	d407      	bmi.n	800682c <_printf_float+0x1f4>
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	4642      	mov	r2, r8
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	d12c      	bne.n	8006884 <_printf_float+0x24c>
 800682a:	e764      	b.n	80066f6 <_printf_float+0xbe>
 800682c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006830:	f240 80e0 	bls.w	80069f4 <_printf_float+0x3bc>
 8006834:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006838:	2200      	movs	r2, #0
 800683a:	2300      	movs	r3, #0
 800683c:	f7fa f944 	bl	8000ac8 <__aeabi_dcmpeq>
 8006840:	2800      	cmp	r0, #0
 8006842:	d034      	beq.n	80068ae <_printf_float+0x276>
 8006844:	4a37      	ldr	r2, [pc, #220]	; (8006924 <_printf_float+0x2ec>)
 8006846:	2301      	movs	r3, #1
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	f43f af51 	beq.w	80066f6 <_printf_float+0xbe>
 8006854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006858:	429a      	cmp	r2, r3
 800685a:	db02      	blt.n	8006862 <_printf_float+0x22a>
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	07d8      	lsls	r0, r3, #31
 8006860:	d510      	bpl.n	8006884 <_printf_float+0x24c>
 8006862:	ee18 3a10 	vmov	r3, s16
 8006866:	4652      	mov	r2, sl
 8006868:	4631      	mov	r1, r6
 800686a:	4628      	mov	r0, r5
 800686c:	47b8      	blx	r7
 800686e:	3001      	adds	r0, #1
 8006870:	f43f af41 	beq.w	80066f6 <_printf_float+0xbe>
 8006874:	f04f 0800 	mov.w	r8, #0
 8006878:	f104 091a 	add.w	r9, r4, #26
 800687c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687e:	3b01      	subs	r3, #1
 8006880:	4543      	cmp	r3, r8
 8006882:	dc09      	bgt.n	8006898 <_printf_float+0x260>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	079b      	lsls	r3, r3, #30
 8006888:	f100 8107 	bmi.w	8006a9a <_printf_float+0x462>
 800688c:	68e0      	ldr	r0, [r4, #12]
 800688e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006890:	4298      	cmp	r0, r3
 8006892:	bfb8      	it	lt
 8006894:	4618      	movlt	r0, r3
 8006896:	e730      	b.n	80066fa <_printf_float+0xc2>
 8006898:	2301      	movs	r3, #1
 800689a:	464a      	mov	r2, r9
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	f43f af27 	beq.w	80066f6 <_printf_float+0xbe>
 80068a8:	f108 0801 	add.w	r8, r8, #1
 80068ac:	e7e6      	b.n	800687c <_printf_float+0x244>
 80068ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dc39      	bgt.n	8006928 <_printf_float+0x2f0>
 80068b4:	4a1b      	ldr	r2, [pc, #108]	; (8006924 <_printf_float+0x2ec>)
 80068b6:	2301      	movs	r3, #1
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f af19 	beq.w	80066f6 <_printf_float+0xbe>
 80068c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d102      	bne.n	80068d2 <_printf_float+0x29a>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	07d9      	lsls	r1, r3, #31
 80068d0:	d5d8      	bpl.n	8006884 <_printf_float+0x24c>
 80068d2:	ee18 3a10 	vmov	r3, s16
 80068d6:	4652      	mov	r2, sl
 80068d8:	4631      	mov	r1, r6
 80068da:	4628      	mov	r0, r5
 80068dc:	47b8      	blx	r7
 80068de:	3001      	adds	r0, #1
 80068e0:	f43f af09 	beq.w	80066f6 <_printf_float+0xbe>
 80068e4:	f04f 0900 	mov.w	r9, #0
 80068e8:	f104 0a1a 	add.w	sl, r4, #26
 80068ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ee:	425b      	negs	r3, r3
 80068f0:	454b      	cmp	r3, r9
 80068f2:	dc01      	bgt.n	80068f8 <_printf_float+0x2c0>
 80068f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f6:	e792      	b.n	800681e <_printf_float+0x1e6>
 80068f8:	2301      	movs	r3, #1
 80068fa:	4652      	mov	r2, sl
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f aef7 	beq.w	80066f6 <_printf_float+0xbe>
 8006908:	f109 0901 	add.w	r9, r9, #1
 800690c:	e7ee      	b.n	80068ec <_printf_float+0x2b4>
 800690e:	bf00      	nop
 8006910:	7fefffff 	.word	0x7fefffff
 8006914:	0800ad61 	.word	0x0800ad61
 8006918:	0800ad65 	.word	0x0800ad65
 800691c:	0800ad69 	.word	0x0800ad69
 8006920:	0800ad6d 	.word	0x0800ad6d
 8006924:	0800ad71 	.word	0x0800ad71
 8006928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800692a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800692c:	429a      	cmp	r2, r3
 800692e:	bfa8      	it	ge
 8006930:	461a      	movge	r2, r3
 8006932:	2a00      	cmp	r2, #0
 8006934:	4691      	mov	r9, r2
 8006936:	dc37      	bgt.n	80069a8 <_printf_float+0x370>
 8006938:	f04f 0b00 	mov.w	fp, #0
 800693c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006940:	f104 021a 	add.w	r2, r4, #26
 8006944:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006946:	9305      	str	r3, [sp, #20]
 8006948:	eba3 0309 	sub.w	r3, r3, r9
 800694c:	455b      	cmp	r3, fp
 800694e:	dc33      	bgt.n	80069b8 <_printf_float+0x380>
 8006950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006954:	429a      	cmp	r2, r3
 8006956:	db3b      	blt.n	80069d0 <_printf_float+0x398>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	07da      	lsls	r2, r3, #31
 800695c:	d438      	bmi.n	80069d0 <_printf_float+0x398>
 800695e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006962:	eba2 0903 	sub.w	r9, r2, r3
 8006966:	9b05      	ldr	r3, [sp, #20]
 8006968:	1ad2      	subs	r2, r2, r3
 800696a:	4591      	cmp	r9, r2
 800696c:	bfa8      	it	ge
 800696e:	4691      	movge	r9, r2
 8006970:	f1b9 0f00 	cmp.w	r9, #0
 8006974:	dc35      	bgt.n	80069e2 <_printf_float+0x3aa>
 8006976:	f04f 0800 	mov.w	r8, #0
 800697a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800697e:	f104 0a1a 	add.w	sl, r4, #26
 8006982:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	eba3 0309 	sub.w	r3, r3, r9
 800698c:	4543      	cmp	r3, r8
 800698e:	f77f af79 	ble.w	8006884 <_printf_float+0x24c>
 8006992:	2301      	movs	r3, #1
 8006994:	4652      	mov	r2, sl
 8006996:	4631      	mov	r1, r6
 8006998:	4628      	mov	r0, r5
 800699a:	47b8      	blx	r7
 800699c:	3001      	adds	r0, #1
 800699e:	f43f aeaa 	beq.w	80066f6 <_printf_float+0xbe>
 80069a2:	f108 0801 	add.w	r8, r8, #1
 80069a6:	e7ec      	b.n	8006982 <_printf_float+0x34a>
 80069a8:	4613      	mov	r3, r2
 80069aa:	4631      	mov	r1, r6
 80069ac:	4642      	mov	r2, r8
 80069ae:	4628      	mov	r0, r5
 80069b0:	47b8      	blx	r7
 80069b2:	3001      	adds	r0, #1
 80069b4:	d1c0      	bne.n	8006938 <_printf_float+0x300>
 80069b6:	e69e      	b.n	80066f6 <_printf_float+0xbe>
 80069b8:	2301      	movs	r3, #1
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	9205      	str	r2, [sp, #20]
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f ae97 	beq.w	80066f6 <_printf_float+0xbe>
 80069c8:	9a05      	ldr	r2, [sp, #20]
 80069ca:	f10b 0b01 	add.w	fp, fp, #1
 80069ce:	e7b9      	b.n	8006944 <_printf_float+0x30c>
 80069d0:	ee18 3a10 	vmov	r3, s16
 80069d4:	4652      	mov	r2, sl
 80069d6:	4631      	mov	r1, r6
 80069d8:	4628      	mov	r0, r5
 80069da:	47b8      	blx	r7
 80069dc:	3001      	adds	r0, #1
 80069de:	d1be      	bne.n	800695e <_printf_float+0x326>
 80069e0:	e689      	b.n	80066f6 <_printf_float+0xbe>
 80069e2:	9a05      	ldr	r2, [sp, #20]
 80069e4:	464b      	mov	r3, r9
 80069e6:	4442      	add	r2, r8
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	d1c1      	bne.n	8006976 <_printf_float+0x33e>
 80069f2:	e680      	b.n	80066f6 <_printf_float+0xbe>
 80069f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	dc01      	bgt.n	80069fe <_printf_float+0x3c6>
 80069fa:	07db      	lsls	r3, r3, #31
 80069fc:	d53a      	bpl.n	8006a74 <_printf_float+0x43c>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4642      	mov	r2, r8
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f ae74 	beq.w	80066f6 <_printf_float+0xbe>
 8006a0e:	ee18 3a10 	vmov	r3, s16
 8006a12:	4652      	mov	r2, sl
 8006a14:	4631      	mov	r1, r6
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	f43f ae6b 	beq.w	80066f6 <_printf_float+0xbe>
 8006a20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a24:	2200      	movs	r2, #0
 8006a26:	2300      	movs	r3, #0
 8006a28:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006a2c:	f7fa f84c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a30:	b9d8      	cbnz	r0, 8006a6a <_printf_float+0x432>
 8006a32:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006a36:	f108 0201 	add.w	r2, r8, #1
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	d10e      	bne.n	8006a62 <_printf_float+0x42a>
 8006a44:	e657      	b.n	80066f6 <_printf_float+0xbe>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4652      	mov	r2, sl
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	f43f ae50 	beq.w	80066f6 <_printf_float+0xbe>
 8006a56:	f108 0801 	add.w	r8, r8, #1
 8006a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4543      	cmp	r3, r8
 8006a60:	dcf1      	bgt.n	8006a46 <_printf_float+0x40e>
 8006a62:	464b      	mov	r3, r9
 8006a64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a68:	e6da      	b.n	8006820 <_printf_float+0x1e8>
 8006a6a:	f04f 0800 	mov.w	r8, #0
 8006a6e:	f104 0a1a 	add.w	sl, r4, #26
 8006a72:	e7f2      	b.n	8006a5a <_printf_float+0x422>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4642      	mov	r2, r8
 8006a78:	e7df      	b.n	8006a3a <_printf_float+0x402>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	464a      	mov	r2, r9
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b8      	blx	r7
 8006a84:	3001      	adds	r0, #1
 8006a86:	f43f ae36 	beq.w	80066f6 <_printf_float+0xbe>
 8006a8a:	f108 0801 	add.w	r8, r8, #1
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a92:	1a5b      	subs	r3, r3, r1
 8006a94:	4543      	cmp	r3, r8
 8006a96:	dcf0      	bgt.n	8006a7a <_printf_float+0x442>
 8006a98:	e6f8      	b.n	800688c <_printf_float+0x254>
 8006a9a:	f04f 0800 	mov.w	r8, #0
 8006a9e:	f104 0919 	add.w	r9, r4, #25
 8006aa2:	e7f4      	b.n	8006a8e <_printf_float+0x456>

08006aa4 <_printf_common>:
 8006aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	4699      	mov	r9, r3
 8006aac:	688a      	ldr	r2, [r1, #8]
 8006aae:	690b      	ldr	r3, [r1, #16]
 8006ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	bfb8      	it	lt
 8006ab8:	4613      	movlt	r3, r2
 8006aba:	6033      	str	r3, [r6, #0]
 8006abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	b10a      	cbz	r2, 8006aca <_printf_common+0x26>
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	0699      	lsls	r1, r3, #26
 8006ace:	bf42      	ittt	mi
 8006ad0:	6833      	ldrmi	r3, [r6, #0]
 8006ad2:	3302      	addmi	r3, #2
 8006ad4:	6033      	strmi	r3, [r6, #0]
 8006ad6:	6825      	ldr	r5, [r4, #0]
 8006ad8:	f015 0506 	ands.w	r5, r5, #6
 8006adc:	d106      	bne.n	8006aec <_printf_common+0x48>
 8006ade:	f104 0a19 	add.w	sl, r4, #25
 8006ae2:	68e3      	ldr	r3, [r4, #12]
 8006ae4:	6832      	ldr	r2, [r6, #0]
 8006ae6:	1a9b      	subs	r3, r3, r2
 8006ae8:	42ab      	cmp	r3, r5
 8006aea:	dc26      	bgt.n	8006b3a <_printf_common+0x96>
 8006aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006af0:	1e13      	subs	r3, r2, #0
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	bf18      	it	ne
 8006af6:	2301      	movne	r3, #1
 8006af8:	0692      	lsls	r2, r2, #26
 8006afa:	d42b      	bmi.n	8006b54 <_printf_common+0xb0>
 8006afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b00:	4649      	mov	r1, r9
 8006b02:	4638      	mov	r0, r7
 8006b04:	47c0      	blx	r8
 8006b06:	3001      	adds	r0, #1
 8006b08:	d01e      	beq.n	8006b48 <_printf_common+0xa4>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	6922      	ldr	r2, [r4, #16]
 8006b0e:	f003 0306 	and.w	r3, r3, #6
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	bf02      	ittt	eq
 8006b16:	68e5      	ldreq	r5, [r4, #12]
 8006b18:	6833      	ldreq	r3, [r6, #0]
 8006b1a:	1aed      	subeq	r5, r5, r3
 8006b1c:	68a3      	ldr	r3, [r4, #8]
 8006b1e:	bf0c      	ite	eq
 8006b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b24:	2500      	movne	r5, #0
 8006b26:	4293      	cmp	r3, r2
 8006b28:	bfc4      	itt	gt
 8006b2a:	1a9b      	subgt	r3, r3, r2
 8006b2c:	18ed      	addgt	r5, r5, r3
 8006b2e:	2600      	movs	r6, #0
 8006b30:	341a      	adds	r4, #26
 8006b32:	42b5      	cmp	r5, r6
 8006b34:	d11a      	bne.n	8006b6c <_printf_common+0xc8>
 8006b36:	2000      	movs	r0, #0
 8006b38:	e008      	b.n	8006b4c <_printf_common+0xa8>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4652      	mov	r2, sl
 8006b3e:	4649      	mov	r1, r9
 8006b40:	4638      	mov	r0, r7
 8006b42:	47c0      	blx	r8
 8006b44:	3001      	adds	r0, #1
 8006b46:	d103      	bne.n	8006b50 <_printf_common+0xac>
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b50:	3501      	adds	r5, #1
 8006b52:	e7c6      	b.n	8006ae2 <_printf_common+0x3e>
 8006b54:	18e1      	adds	r1, r4, r3
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	2030      	movs	r0, #48	; 0x30
 8006b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b5e:	4422      	add	r2, r4
 8006b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b68:	3302      	adds	r3, #2
 8006b6a:	e7c7      	b.n	8006afc <_printf_common+0x58>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4622      	mov	r2, r4
 8006b70:	4649      	mov	r1, r9
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c0      	blx	r8
 8006b76:	3001      	adds	r0, #1
 8006b78:	d0e6      	beq.n	8006b48 <_printf_common+0xa4>
 8006b7a:	3601      	adds	r6, #1
 8006b7c:	e7d9      	b.n	8006b32 <_printf_common+0x8e>
	...

08006b80 <_printf_i>:
 8006b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	7e0f      	ldrb	r7, [r1, #24]
 8006b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b88:	2f78      	cmp	r7, #120	; 0x78
 8006b8a:	4691      	mov	r9, r2
 8006b8c:	4680      	mov	r8, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	469a      	mov	sl, r3
 8006b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b96:	d807      	bhi.n	8006ba8 <_printf_i+0x28>
 8006b98:	2f62      	cmp	r7, #98	; 0x62
 8006b9a:	d80a      	bhi.n	8006bb2 <_printf_i+0x32>
 8006b9c:	2f00      	cmp	r7, #0
 8006b9e:	f000 80d4 	beq.w	8006d4a <_printf_i+0x1ca>
 8006ba2:	2f58      	cmp	r7, #88	; 0x58
 8006ba4:	f000 80c0 	beq.w	8006d28 <_printf_i+0x1a8>
 8006ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bb0:	e03a      	b.n	8006c28 <_printf_i+0xa8>
 8006bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bb6:	2b15      	cmp	r3, #21
 8006bb8:	d8f6      	bhi.n	8006ba8 <_printf_i+0x28>
 8006bba:	a101      	add	r1, pc, #4	; (adr r1, 8006bc0 <_printf_i+0x40>)
 8006bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc0:	08006c19 	.word	0x08006c19
 8006bc4:	08006c2d 	.word	0x08006c2d
 8006bc8:	08006ba9 	.word	0x08006ba9
 8006bcc:	08006ba9 	.word	0x08006ba9
 8006bd0:	08006ba9 	.word	0x08006ba9
 8006bd4:	08006ba9 	.word	0x08006ba9
 8006bd8:	08006c2d 	.word	0x08006c2d
 8006bdc:	08006ba9 	.word	0x08006ba9
 8006be0:	08006ba9 	.word	0x08006ba9
 8006be4:	08006ba9 	.word	0x08006ba9
 8006be8:	08006ba9 	.word	0x08006ba9
 8006bec:	08006d31 	.word	0x08006d31
 8006bf0:	08006c59 	.word	0x08006c59
 8006bf4:	08006ceb 	.word	0x08006ceb
 8006bf8:	08006ba9 	.word	0x08006ba9
 8006bfc:	08006ba9 	.word	0x08006ba9
 8006c00:	08006d53 	.word	0x08006d53
 8006c04:	08006ba9 	.word	0x08006ba9
 8006c08:	08006c59 	.word	0x08006c59
 8006c0c:	08006ba9 	.word	0x08006ba9
 8006c10:	08006ba9 	.word	0x08006ba9
 8006c14:	08006cf3 	.word	0x08006cf3
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	1d1a      	adds	r2, r3, #4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	602a      	str	r2, [r5, #0]
 8006c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e09f      	b.n	8006d6c <_printf_i+0x1ec>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	0607      	lsls	r7, r0, #24
 8006c32:	f103 0104 	add.w	r1, r3, #4
 8006c36:	6029      	str	r1, [r5, #0]
 8006c38:	d501      	bpl.n	8006c3e <_printf_i+0xbe>
 8006c3a:	681e      	ldr	r6, [r3, #0]
 8006c3c:	e003      	b.n	8006c46 <_printf_i+0xc6>
 8006c3e:	0646      	lsls	r6, r0, #25
 8006c40:	d5fb      	bpl.n	8006c3a <_printf_i+0xba>
 8006c42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c46:	2e00      	cmp	r6, #0
 8006c48:	da03      	bge.n	8006c52 <_printf_i+0xd2>
 8006c4a:	232d      	movs	r3, #45	; 0x2d
 8006c4c:	4276      	negs	r6, r6
 8006c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c52:	485a      	ldr	r0, [pc, #360]	; (8006dbc <_printf_i+0x23c>)
 8006c54:	230a      	movs	r3, #10
 8006c56:	e012      	b.n	8006c7e <_printf_i+0xfe>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	6820      	ldr	r0, [r4, #0]
 8006c5c:	1d19      	adds	r1, r3, #4
 8006c5e:	6029      	str	r1, [r5, #0]
 8006c60:	0605      	lsls	r5, r0, #24
 8006c62:	d501      	bpl.n	8006c68 <_printf_i+0xe8>
 8006c64:	681e      	ldr	r6, [r3, #0]
 8006c66:	e002      	b.n	8006c6e <_printf_i+0xee>
 8006c68:	0641      	lsls	r1, r0, #25
 8006c6a:	d5fb      	bpl.n	8006c64 <_printf_i+0xe4>
 8006c6c:	881e      	ldrh	r6, [r3, #0]
 8006c6e:	4853      	ldr	r0, [pc, #332]	; (8006dbc <_printf_i+0x23c>)
 8006c70:	2f6f      	cmp	r7, #111	; 0x6f
 8006c72:	bf0c      	ite	eq
 8006c74:	2308      	moveq	r3, #8
 8006c76:	230a      	movne	r3, #10
 8006c78:	2100      	movs	r1, #0
 8006c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c7e:	6865      	ldr	r5, [r4, #4]
 8006c80:	60a5      	str	r5, [r4, #8]
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	bfa2      	ittt	ge
 8006c86:	6821      	ldrge	r1, [r4, #0]
 8006c88:	f021 0104 	bicge.w	r1, r1, #4
 8006c8c:	6021      	strge	r1, [r4, #0]
 8006c8e:	b90e      	cbnz	r6, 8006c94 <_printf_i+0x114>
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	d04b      	beq.n	8006d2c <_printf_i+0x1ac>
 8006c94:	4615      	mov	r5, r2
 8006c96:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c9a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c9e:	5dc7      	ldrb	r7, [r0, r7]
 8006ca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ca4:	4637      	mov	r7, r6
 8006ca6:	42bb      	cmp	r3, r7
 8006ca8:	460e      	mov	r6, r1
 8006caa:	d9f4      	bls.n	8006c96 <_printf_i+0x116>
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d10b      	bne.n	8006cc8 <_printf_i+0x148>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	07de      	lsls	r6, r3, #31
 8006cb4:	d508      	bpl.n	8006cc8 <_printf_i+0x148>
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	6861      	ldr	r1, [r4, #4]
 8006cba:	4299      	cmp	r1, r3
 8006cbc:	bfde      	ittt	le
 8006cbe:	2330      	movle	r3, #48	; 0x30
 8006cc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cc4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006cc8:	1b52      	subs	r2, r2, r5
 8006cca:	6122      	str	r2, [r4, #16]
 8006ccc:	f8cd a000 	str.w	sl, [sp]
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	aa03      	add	r2, sp, #12
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	f7ff fee4 	bl	8006aa4 <_printf_common>
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d14a      	bne.n	8006d76 <_printf_i+0x1f6>
 8006ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce4:	b004      	add	sp, #16
 8006ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	f043 0320 	orr.w	r3, r3, #32
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	4833      	ldr	r0, [pc, #204]	; (8006dc0 <_printf_i+0x240>)
 8006cf4:	2778      	movs	r7, #120	; 0x78
 8006cf6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	061f      	lsls	r7, r3, #24
 8006d00:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d04:	d402      	bmi.n	8006d0c <_printf_i+0x18c>
 8006d06:	065f      	lsls	r7, r3, #25
 8006d08:	bf48      	it	mi
 8006d0a:	b2b6      	uxthmi	r6, r6
 8006d0c:	07df      	lsls	r7, r3, #31
 8006d0e:	bf48      	it	mi
 8006d10:	f043 0320 	orrmi.w	r3, r3, #32
 8006d14:	6029      	str	r1, [r5, #0]
 8006d16:	bf48      	it	mi
 8006d18:	6023      	strmi	r3, [r4, #0]
 8006d1a:	b91e      	cbnz	r6, 8006d24 <_printf_i+0x1a4>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	f023 0320 	bic.w	r3, r3, #32
 8006d22:	6023      	str	r3, [r4, #0]
 8006d24:	2310      	movs	r3, #16
 8006d26:	e7a7      	b.n	8006c78 <_printf_i+0xf8>
 8006d28:	4824      	ldr	r0, [pc, #144]	; (8006dbc <_printf_i+0x23c>)
 8006d2a:	e7e4      	b.n	8006cf6 <_printf_i+0x176>
 8006d2c:	4615      	mov	r5, r2
 8006d2e:	e7bd      	b.n	8006cac <_printf_i+0x12c>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	6826      	ldr	r6, [r4, #0]
 8006d34:	6961      	ldr	r1, [r4, #20]
 8006d36:	1d18      	adds	r0, r3, #4
 8006d38:	6028      	str	r0, [r5, #0]
 8006d3a:	0635      	lsls	r5, r6, #24
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	d501      	bpl.n	8006d44 <_printf_i+0x1c4>
 8006d40:	6019      	str	r1, [r3, #0]
 8006d42:	e002      	b.n	8006d4a <_printf_i+0x1ca>
 8006d44:	0670      	lsls	r0, r6, #25
 8006d46:	d5fb      	bpl.n	8006d40 <_printf_i+0x1c0>
 8006d48:	8019      	strh	r1, [r3, #0]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	6123      	str	r3, [r4, #16]
 8006d4e:	4615      	mov	r5, r2
 8006d50:	e7bc      	b.n	8006ccc <_printf_i+0x14c>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	1d1a      	adds	r2, r3, #4
 8006d56:	602a      	str	r2, [r5, #0]
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	6862      	ldr	r2, [r4, #4]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f7f9 fa36 	bl	80001d0 <memchr>
 8006d64:	b108      	cbz	r0, 8006d6a <_printf_i+0x1ea>
 8006d66:	1b40      	subs	r0, r0, r5
 8006d68:	6060      	str	r0, [r4, #4]
 8006d6a:	6863      	ldr	r3, [r4, #4]
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d74:	e7aa      	b.n	8006ccc <_printf_i+0x14c>
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	462a      	mov	r2, r5
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	47d0      	blx	sl
 8006d80:	3001      	adds	r0, #1
 8006d82:	d0ad      	beq.n	8006ce0 <_printf_i+0x160>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	079b      	lsls	r3, r3, #30
 8006d88:	d413      	bmi.n	8006db2 <_printf_i+0x232>
 8006d8a:	68e0      	ldr	r0, [r4, #12]
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	4298      	cmp	r0, r3
 8006d90:	bfb8      	it	lt
 8006d92:	4618      	movlt	r0, r3
 8006d94:	e7a6      	b.n	8006ce4 <_printf_i+0x164>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4632      	mov	r2, r6
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	47d0      	blx	sl
 8006da0:	3001      	adds	r0, #1
 8006da2:	d09d      	beq.n	8006ce0 <_printf_i+0x160>
 8006da4:	3501      	adds	r5, #1
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	9903      	ldr	r1, [sp, #12]
 8006daa:	1a5b      	subs	r3, r3, r1
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	dcf2      	bgt.n	8006d96 <_printf_i+0x216>
 8006db0:	e7eb      	b.n	8006d8a <_printf_i+0x20a>
 8006db2:	2500      	movs	r5, #0
 8006db4:	f104 0619 	add.w	r6, r4, #25
 8006db8:	e7f5      	b.n	8006da6 <_printf_i+0x226>
 8006dba:	bf00      	nop
 8006dbc:	0800ad73 	.word	0x0800ad73
 8006dc0:	0800ad84 	.word	0x0800ad84

08006dc4 <_scanf_float>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	b087      	sub	sp, #28
 8006dca:	4617      	mov	r7, r2
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	688b      	ldr	r3, [r1, #8]
 8006dd0:	1e5a      	subs	r2, r3, #1
 8006dd2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006dd6:	bf83      	ittte	hi
 8006dd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ddc:	195b      	addhi	r3, r3, r5
 8006dde:	9302      	strhi	r3, [sp, #8]
 8006de0:	2300      	movls	r3, #0
 8006de2:	bf86      	itte	hi
 8006de4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006de8:	608b      	strhi	r3, [r1, #8]
 8006dea:	9302      	strls	r3, [sp, #8]
 8006dec:	680b      	ldr	r3, [r1, #0]
 8006dee:	468b      	mov	fp, r1
 8006df0:	2500      	movs	r5, #0
 8006df2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006df6:	f84b 3b1c 	str.w	r3, [fp], #28
 8006dfa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006dfe:	4680      	mov	r8, r0
 8006e00:	460c      	mov	r4, r1
 8006e02:	465e      	mov	r6, fp
 8006e04:	46aa      	mov	sl, r5
 8006e06:	46a9      	mov	r9, r5
 8006e08:	9501      	str	r5, [sp, #4]
 8006e0a:	68a2      	ldr	r2, [r4, #8]
 8006e0c:	b152      	cbz	r2, 8006e24 <_scanf_float+0x60>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b4e      	cmp	r3, #78	; 0x4e
 8006e14:	d864      	bhi.n	8006ee0 <_scanf_float+0x11c>
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d83c      	bhi.n	8006e94 <_scanf_float+0xd0>
 8006e1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e1e:	b2c8      	uxtb	r0, r1
 8006e20:	280e      	cmp	r0, #14
 8006e22:	d93a      	bls.n	8006e9a <_scanf_float+0xd6>
 8006e24:	f1b9 0f00 	cmp.w	r9, #0
 8006e28:	d003      	beq.n	8006e32 <_scanf_float+0x6e>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006e36:	f1ba 0f01 	cmp.w	sl, #1
 8006e3a:	f200 8113 	bhi.w	8007064 <_scanf_float+0x2a0>
 8006e3e:	455e      	cmp	r6, fp
 8006e40:	f200 8105 	bhi.w	800704e <_scanf_float+0x28a>
 8006e44:	2501      	movs	r5, #1
 8006e46:	4628      	mov	r0, r5
 8006e48:	b007      	add	sp, #28
 8006e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e52:	2a0d      	cmp	r2, #13
 8006e54:	d8e6      	bhi.n	8006e24 <_scanf_float+0x60>
 8006e56:	a101      	add	r1, pc, #4	; (adr r1, 8006e5c <_scanf_float+0x98>)
 8006e58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e5c:	08006f9b 	.word	0x08006f9b
 8006e60:	08006e25 	.word	0x08006e25
 8006e64:	08006e25 	.word	0x08006e25
 8006e68:	08006e25 	.word	0x08006e25
 8006e6c:	08006ffb 	.word	0x08006ffb
 8006e70:	08006fd3 	.word	0x08006fd3
 8006e74:	08006e25 	.word	0x08006e25
 8006e78:	08006e25 	.word	0x08006e25
 8006e7c:	08006fa9 	.word	0x08006fa9
 8006e80:	08006e25 	.word	0x08006e25
 8006e84:	08006e25 	.word	0x08006e25
 8006e88:	08006e25 	.word	0x08006e25
 8006e8c:	08006e25 	.word	0x08006e25
 8006e90:	08006f61 	.word	0x08006f61
 8006e94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006e98:	e7db      	b.n	8006e52 <_scanf_float+0x8e>
 8006e9a:	290e      	cmp	r1, #14
 8006e9c:	d8c2      	bhi.n	8006e24 <_scanf_float+0x60>
 8006e9e:	a001      	add	r0, pc, #4	; (adr r0, 8006ea4 <_scanf_float+0xe0>)
 8006ea0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ea4:	08006f53 	.word	0x08006f53
 8006ea8:	08006e25 	.word	0x08006e25
 8006eac:	08006f53 	.word	0x08006f53
 8006eb0:	08006fe7 	.word	0x08006fe7
 8006eb4:	08006e25 	.word	0x08006e25
 8006eb8:	08006f01 	.word	0x08006f01
 8006ebc:	08006f3d 	.word	0x08006f3d
 8006ec0:	08006f3d 	.word	0x08006f3d
 8006ec4:	08006f3d 	.word	0x08006f3d
 8006ec8:	08006f3d 	.word	0x08006f3d
 8006ecc:	08006f3d 	.word	0x08006f3d
 8006ed0:	08006f3d 	.word	0x08006f3d
 8006ed4:	08006f3d 	.word	0x08006f3d
 8006ed8:	08006f3d 	.word	0x08006f3d
 8006edc:	08006f3d 	.word	0x08006f3d
 8006ee0:	2b6e      	cmp	r3, #110	; 0x6e
 8006ee2:	d809      	bhi.n	8006ef8 <_scanf_float+0x134>
 8006ee4:	2b60      	cmp	r3, #96	; 0x60
 8006ee6:	d8b2      	bhi.n	8006e4e <_scanf_float+0x8a>
 8006ee8:	2b54      	cmp	r3, #84	; 0x54
 8006eea:	d077      	beq.n	8006fdc <_scanf_float+0x218>
 8006eec:	2b59      	cmp	r3, #89	; 0x59
 8006eee:	d199      	bne.n	8006e24 <_scanf_float+0x60>
 8006ef0:	2d07      	cmp	r5, #7
 8006ef2:	d197      	bne.n	8006e24 <_scanf_float+0x60>
 8006ef4:	2508      	movs	r5, #8
 8006ef6:	e029      	b.n	8006f4c <_scanf_float+0x188>
 8006ef8:	2b74      	cmp	r3, #116	; 0x74
 8006efa:	d06f      	beq.n	8006fdc <_scanf_float+0x218>
 8006efc:	2b79      	cmp	r3, #121	; 0x79
 8006efe:	e7f6      	b.n	8006eee <_scanf_float+0x12a>
 8006f00:	6821      	ldr	r1, [r4, #0]
 8006f02:	05c8      	lsls	r0, r1, #23
 8006f04:	d51a      	bpl.n	8006f3c <_scanf_float+0x178>
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f0c:	6021      	str	r1, [r4, #0]
 8006f0e:	f109 0901 	add.w	r9, r9, #1
 8006f12:	b11b      	cbz	r3, 8006f1c <_scanf_float+0x158>
 8006f14:	3b01      	subs	r3, #1
 8006f16:	3201      	adds	r2, #1
 8006f18:	9302      	str	r3, [sp, #8]
 8006f1a:	60a2      	str	r2, [r4, #8]
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	60a3      	str	r3, [r4, #8]
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	3301      	adds	r3, #1
 8006f26:	6123      	str	r3, [r4, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	607b      	str	r3, [r7, #4]
 8006f30:	f340 8084 	ble.w	800703c <_scanf_float+0x278>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	3301      	adds	r3, #1
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	e766      	b.n	8006e0a <_scanf_float+0x46>
 8006f3c:	eb1a 0f05 	cmn.w	sl, r5
 8006f40:	f47f af70 	bne.w	8006e24 <_scanf_float+0x60>
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f4a:	6022      	str	r2, [r4, #0]
 8006f4c:	f806 3b01 	strb.w	r3, [r6], #1
 8006f50:	e7e4      	b.n	8006f1c <_scanf_float+0x158>
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	0610      	lsls	r0, r2, #24
 8006f56:	f57f af65 	bpl.w	8006e24 <_scanf_float+0x60>
 8006f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f5e:	e7f4      	b.n	8006f4a <_scanf_float+0x186>
 8006f60:	f1ba 0f00 	cmp.w	sl, #0
 8006f64:	d10e      	bne.n	8006f84 <_scanf_float+0x1c0>
 8006f66:	f1b9 0f00 	cmp.w	r9, #0
 8006f6a:	d10e      	bne.n	8006f8a <_scanf_float+0x1c6>
 8006f6c:	6822      	ldr	r2, [r4, #0]
 8006f6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f76:	d108      	bne.n	8006f8a <_scanf_float+0x1c6>
 8006f78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f7c:	6022      	str	r2, [r4, #0]
 8006f7e:	f04f 0a01 	mov.w	sl, #1
 8006f82:	e7e3      	b.n	8006f4c <_scanf_float+0x188>
 8006f84:	f1ba 0f02 	cmp.w	sl, #2
 8006f88:	d055      	beq.n	8007036 <_scanf_float+0x272>
 8006f8a:	2d01      	cmp	r5, #1
 8006f8c:	d002      	beq.n	8006f94 <_scanf_float+0x1d0>
 8006f8e:	2d04      	cmp	r5, #4
 8006f90:	f47f af48 	bne.w	8006e24 <_scanf_float+0x60>
 8006f94:	3501      	adds	r5, #1
 8006f96:	b2ed      	uxtb	r5, r5
 8006f98:	e7d8      	b.n	8006f4c <_scanf_float+0x188>
 8006f9a:	f1ba 0f01 	cmp.w	sl, #1
 8006f9e:	f47f af41 	bne.w	8006e24 <_scanf_float+0x60>
 8006fa2:	f04f 0a02 	mov.w	sl, #2
 8006fa6:	e7d1      	b.n	8006f4c <_scanf_float+0x188>
 8006fa8:	b97d      	cbnz	r5, 8006fca <_scanf_float+0x206>
 8006faa:	f1b9 0f00 	cmp.w	r9, #0
 8006fae:	f47f af3c 	bne.w	8006e2a <_scanf_float+0x66>
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fbc:	f47f af39 	bne.w	8006e32 <_scanf_float+0x6e>
 8006fc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fc4:	6022      	str	r2, [r4, #0]
 8006fc6:	2501      	movs	r5, #1
 8006fc8:	e7c0      	b.n	8006f4c <_scanf_float+0x188>
 8006fca:	2d03      	cmp	r5, #3
 8006fcc:	d0e2      	beq.n	8006f94 <_scanf_float+0x1d0>
 8006fce:	2d05      	cmp	r5, #5
 8006fd0:	e7de      	b.n	8006f90 <_scanf_float+0x1cc>
 8006fd2:	2d02      	cmp	r5, #2
 8006fd4:	f47f af26 	bne.w	8006e24 <_scanf_float+0x60>
 8006fd8:	2503      	movs	r5, #3
 8006fda:	e7b7      	b.n	8006f4c <_scanf_float+0x188>
 8006fdc:	2d06      	cmp	r5, #6
 8006fde:	f47f af21 	bne.w	8006e24 <_scanf_float+0x60>
 8006fe2:	2507      	movs	r5, #7
 8006fe4:	e7b2      	b.n	8006f4c <_scanf_float+0x188>
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	0591      	lsls	r1, r2, #22
 8006fea:	f57f af1b 	bpl.w	8006e24 <_scanf_float+0x60>
 8006fee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006ff2:	6022      	str	r2, [r4, #0]
 8006ff4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ff8:	e7a8      	b.n	8006f4c <_scanf_float+0x188>
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007000:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007004:	d006      	beq.n	8007014 <_scanf_float+0x250>
 8007006:	0550      	lsls	r0, r2, #21
 8007008:	f57f af0c 	bpl.w	8006e24 <_scanf_float+0x60>
 800700c:	f1b9 0f00 	cmp.w	r9, #0
 8007010:	f43f af0f 	beq.w	8006e32 <_scanf_float+0x6e>
 8007014:	0591      	lsls	r1, r2, #22
 8007016:	bf58      	it	pl
 8007018:	9901      	ldrpl	r1, [sp, #4]
 800701a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800701e:	bf58      	it	pl
 8007020:	eba9 0101 	subpl.w	r1, r9, r1
 8007024:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007028:	bf58      	it	pl
 800702a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800702e:	6022      	str	r2, [r4, #0]
 8007030:	f04f 0900 	mov.w	r9, #0
 8007034:	e78a      	b.n	8006f4c <_scanf_float+0x188>
 8007036:	f04f 0a03 	mov.w	sl, #3
 800703a:	e787      	b.n	8006f4c <_scanf_float+0x188>
 800703c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007040:	4639      	mov	r1, r7
 8007042:	4640      	mov	r0, r8
 8007044:	4798      	blx	r3
 8007046:	2800      	cmp	r0, #0
 8007048:	f43f aedf 	beq.w	8006e0a <_scanf_float+0x46>
 800704c:	e6ea      	b.n	8006e24 <_scanf_float+0x60>
 800704e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007052:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007056:	463a      	mov	r2, r7
 8007058:	4640      	mov	r0, r8
 800705a:	4798      	blx	r3
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	3b01      	subs	r3, #1
 8007060:	6123      	str	r3, [r4, #16]
 8007062:	e6ec      	b.n	8006e3e <_scanf_float+0x7a>
 8007064:	1e6b      	subs	r3, r5, #1
 8007066:	2b06      	cmp	r3, #6
 8007068:	d825      	bhi.n	80070b6 <_scanf_float+0x2f2>
 800706a:	2d02      	cmp	r5, #2
 800706c:	d836      	bhi.n	80070dc <_scanf_float+0x318>
 800706e:	455e      	cmp	r6, fp
 8007070:	f67f aee8 	bls.w	8006e44 <_scanf_float+0x80>
 8007074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007078:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800707c:	463a      	mov	r2, r7
 800707e:	4640      	mov	r0, r8
 8007080:	4798      	blx	r3
 8007082:	6923      	ldr	r3, [r4, #16]
 8007084:	3b01      	subs	r3, #1
 8007086:	6123      	str	r3, [r4, #16]
 8007088:	e7f1      	b.n	800706e <_scanf_float+0x2aa>
 800708a:	9802      	ldr	r0, [sp, #8]
 800708c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007090:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007094:	9002      	str	r0, [sp, #8]
 8007096:	463a      	mov	r2, r7
 8007098:	4640      	mov	r0, r8
 800709a:	4798      	blx	r3
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	3b01      	subs	r3, #1
 80070a0:	6123      	str	r3, [r4, #16]
 80070a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070a6:	fa5f fa8a 	uxtb.w	sl, sl
 80070aa:	f1ba 0f02 	cmp.w	sl, #2
 80070ae:	d1ec      	bne.n	800708a <_scanf_float+0x2c6>
 80070b0:	3d03      	subs	r5, #3
 80070b2:	b2ed      	uxtb	r5, r5
 80070b4:	1b76      	subs	r6, r6, r5
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	05da      	lsls	r2, r3, #23
 80070ba:	d52f      	bpl.n	800711c <_scanf_float+0x358>
 80070bc:	055b      	lsls	r3, r3, #21
 80070be:	d510      	bpl.n	80070e2 <_scanf_float+0x31e>
 80070c0:	455e      	cmp	r6, fp
 80070c2:	f67f aebf 	bls.w	8006e44 <_scanf_float+0x80>
 80070c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070ce:	463a      	mov	r2, r7
 80070d0:	4640      	mov	r0, r8
 80070d2:	4798      	blx	r3
 80070d4:	6923      	ldr	r3, [r4, #16]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	6123      	str	r3, [r4, #16]
 80070da:	e7f1      	b.n	80070c0 <_scanf_float+0x2fc>
 80070dc:	46aa      	mov	sl, r5
 80070de:	9602      	str	r6, [sp, #8]
 80070e0:	e7df      	b.n	80070a2 <_scanf_float+0x2de>
 80070e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80070e6:	6923      	ldr	r3, [r4, #16]
 80070e8:	2965      	cmp	r1, #101	; 0x65
 80070ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80070ee:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80070f2:	6123      	str	r3, [r4, #16]
 80070f4:	d00c      	beq.n	8007110 <_scanf_float+0x34c>
 80070f6:	2945      	cmp	r1, #69	; 0x45
 80070f8:	d00a      	beq.n	8007110 <_scanf_float+0x34c>
 80070fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070fe:	463a      	mov	r2, r7
 8007100:	4640      	mov	r0, r8
 8007102:	4798      	blx	r3
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800710a:	3b01      	subs	r3, #1
 800710c:	1eb5      	subs	r5, r6, #2
 800710e:	6123      	str	r3, [r4, #16]
 8007110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007114:	463a      	mov	r2, r7
 8007116:	4640      	mov	r0, r8
 8007118:	4798      	blx	r3
 800711a:	462e      	mov	r6, r5
 800711c:	6825      	ldr	r5, [r4, #0]
 800711e:	f015 0510 	ands.w	r5, r5, #16
 8007122:	d158      	bne.n	80071d6 <_scanf_float+0x412>
 8007124:	7035      	strb	r5, [r6, #0]
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800712c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007130:	d11c      	bne.n	800716c <_scanf_float+0x3a8>
 8007132:	9b01      	ldr	r3, [sp, #4]
 8007134:	454b      	cmp	r3, r9
 8007136:	eba3 0209 	sub.w	r2, r3, r9
 800713a:	d124      	bne.n	8007186 <_scanf_float+0x3c2>
 800713c:	2200      	movs	r2, #0
 800713e:	4659      	mov	r1, fp
 8007140:	4640      	mov	r0, r8
 8007142:	f002 fc31 	bl	80099a8 <_strtod_r>
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	6821      	ldr	r1, [r4, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f011 0f02 	tst.w	r1, #2
 8007150:	ec57 6b10 	vmov	r6, r7, d0
 8007154:	f103 0204 	add.w	r2, r3, #4
 8007158:	d020      	beq.n	800719c <_scanf_float+0x3d8>
 800715a:	9903      	ldr	r1, [sp, #12]
 800715c:	600a      	str	r2, [r1, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	e9c3 6700 	strd	r6, r7, [r3]
 8007164:	68e3      	ldr	r3, [r4, #12]
 8007166:	3301      	adds	r3, #1
 8007168:	60e3      	str	r3, [r4, #12]
 800716a:	e66c      	b.n	8006e46 <_scanf_float+0x82>
 800716c:	9b04      	ldr	r3, [sp, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0e4      	beq.n	800713c <_scanf_float+0x378>
 8007172:	9905      	ldr	r1, [sp, #20]
 8007174:	230a      	movs	r3, #10
 8007176:	462a      	mov	r2, r5
 8007178:	3101      	adds	r1, #1
 800717a:	4640      	mov	r0, r8
 800717c:	f7ff f9b0 	bl	80064e0 <_strtol_r>
 8007180:	9b04      	ldr	r3, [sp, #16]
 8007182:	9e05      	ldr	r6, [sp, #20]
 8007184:	1ac2      	subs	r2, r0, r3
 8007186:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800718a:	429e      	cmp	r6, r3
 800718c:	bf28      	it	cs
 800718e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007192:	4912      	ldr	r1, [pc, #72]	; (80071dc <_scanf_float+0x418>)
 8007194:	4630      	mov	r0, r6
 8007196:	f000 f8e7 	bl	8007368 <siprintf>
 800719a:	e7cf      	b.n	800713c <_scanf_float+0x378>
 800719c:	f011 0f04 	tst.w	r1, #4
 80071a0:	9903      	ldr	r1, [sp, #12]
 80071a2:	600a      	str	r2, [r1, #0]
 80071a4:	d1db      	bne.n	800715e <_scanf_float+0x39a>
 80071a6:	f8d3 8000 	ldr.w	r8, [r3]
 80071aa:	ee10 2a10 	vmov	r2, s0
 80071ae:	ee10 0a10 	vmov	r0, s0
 80071b2:	463b      	mov	r3, r7
 80071b4:	4639      	mov	r1, r7
 80071b6:	f7f9 fcb9 	bl	8000b2c <__aeabi_dcmpun>
 80071ba:	b128      	cbz	r0, 80071c8 <_scanf_float+0x404>
 80071bc:	4808      	ldr	r0, [pc, #32]	; (80071e0 <_scanf_float+0x41c>)
 80071be:	f000 f9b7 	bl	8007530 <nanf>
 80071c2:	ed88 0a00 	vstr	s0, [r8]
 80071c6:	e7cd      	b.n	8007164 <_scanf_float+0x3a0>
 80071c8:	4630      	mov	r0, r6
 80071ca:	4639      	mov	r1, r7
 80071cc:	f7f9 fd0c 	bl	8000be8 <__aeabi_d2f>
 80071d0:	f8c8 0000 	str.w	r0, [r8]
 80071d4:	e7c6      	b.n	8007164 <_scanf_float+0x3a0>
 80071d6:	2500      	movs	r5, #0
 80071d8:	e635      	b.n	8006e46 <_scanf_float+0x82>
 80071da:	bf00      	nop
 80071dc:	0800ad95 	.word	0x0800ad95
 80071e0:	0800b024 	.word	0x0800b024

080071e4 <std>:
 80071e4:	2300      	movs	r3, #0
 80071e6:	b510      	push	{r4, lr}
 80071e8:	4604      	mov	r4, r0
 80071ea:	e9c0 3300 	strd	r3, r3, [r0]
 80071ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071f2:	6083      	str	r3, [r0, #8]
 80071f4:	8181      	strh	r1, [r0, #12]
 80071f6:	6643      	str	r3, [r0, #100]	; 0x64
 80071f8:	81c2      	strh	r2, [r0, #14]
 80071fa:	6183      	str	r3, [r0, #24]
 80071fc:	4619      	mov	r1, r3
 80071fe:	2208      	movs	r2, #8
 8007200:	305c      	adds	r0, #92	; 0x5c
 8007202:	f000 f914 	bl	800742e <memset>
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <std+0x58>)
 8007208:	6263      	str	r3, [r4, #36]	; 0x24
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <std+0x5c>)
 800720c:	62a3      	str	r3, [r4, #40]	; 0x28
 800720e:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <std+0x60>)
 8007210:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <std+0x64>)
 8007214:	6323      	str	r3, [r4, #48]	; 0x30
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <std+0x68>)
 8007218:	6224      	str	r4, [r4, #32]
 800721a:	429c      	cmp	r4, r3
 800721c:	d006      	beq.n	800722c <std+0x48>
 800721e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007222:	4294      	cmp	r4, r2
 8007224:	d002      	beq.n	800722c <std+0x48>
 8007226:	33d0      	adds	r3, #208	; 0xd0
 8007228:	429c      	cmp	r4, r3
 800722a:	d105      	bne.n	8007238 <std+0x54>
 800722c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007234:	f000 b978 	b.w	8007528 <__retarget_lock_init_recursive>
 8007238:	bd10      	pop	{r4, pc}
 800723a:	bf00      	nop
 800723c:	080073a9 	.word	0x080073a9
 8007240:	080073cb 	.word	0x080073cb
 8007244:	08007403 	.word	0x08007403
 8007248:	08007427 	.word	0x08007427
 800724c:	20000484 	.word	0x20000484

08007250 <stdio_exit_handler>:
 8007250:	4a02      	ldr	r2, [pc, #8]	; (800725c <stdio_exit_handler+0xc>)
 8007252:	4903      	ldr	r1, [pc, #12]	; (8007260 <stdio_exit_handler+0x10>)
 8007254:	4803      	ldr	r0, [pc, #12]	; (8007264 <stdio_exit_handler+0x14>)
 8007256:	f000 b869 	b.w	800732c <_fwalk_sglue>
 800725a:	bf00      	nop
 800725c:	20000020 	.word	0x20000020
 8007260:	08009d71 	.word	0x08009d71
 8007264:	2000002c 	.word	0x2000002c

08007268 <cleanup_stdio>:
 8007268:	6841      	ldr	r1, [r0, #4]
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <cleanup_stdio+0x34>)
 800726c:	4299      	cmp	r1, r3
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	d001      	beq.n	8007278 <cleanup_stdio+0x10>
 8007274:	f002 fd7c 	bl	8009d70 <_fflush_r>
 8007278:	68a1      	ldr	r1, [r4, #8]
 800727a:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <cleanup_stdio+0x38>)
 800727c:	4299      	cmp	r1, r3
 800727e:	d002      	beq.n	8007286 <cleanup_stdio+0x1e>
 8007280:	4620      	mov	r0, r4
 8007282:	f002 fd75 	bl	8009d70 <_fflush_r>
 8007286:	68e1      	ldr	r1, [r4, #12]
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <cleanup_stdio+0x3c>)
 800728a:	4299      	cmp	r1, r3
 800728c:	d004      	beq.n	8007298 <cleanup_stdio+0x30>
 800728e:	4620      	mov	r0, r4
 8007290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007294:	f002 bd6c 	b.w	8009d70 <_fflush_r>
 8007298:	bd10      	pop	{r4, pc}
 800729a:	bf00      	nop
 800729c:	20000484 	.word	0x20000484
 80072a0:	200004ec 	.word	0x200004ec
 80072a4:	20000554 	.word	0x20000554

080072a8 <global_stdio_init.part.0>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <global_stdio_init.part.0+0x30>)
 80072ac:	4c0b      	ldr	r4, [pc, #44]	; (80072dc <global_stdio_init.part.0+0x34>)
 80072ae:	4a0c      	ldr	r2, [pc, #48]	; (80072e0 <global_stdio_init.part.0+0x38>)
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	4620      	mov	r0, r4
 80072b4:	2200      	movs	r2, #0
 80072b6:	2104      	movs	r1, #4
 80072b8:	f7ff ff94 	bl	80071e4 <std>
 80072bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072c0:	2201      	movs	r2, #1
 80072c2:	2109      	movs	r1, #9
 80072c4:	f7ff ff8e 	bl	80071e4 <std>
 80072c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072cc:	2202      	movs	r2, #2
 80072ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d2:	2112      	movs	r1, #18
 80072d4:	f7ff bf86 	b.w	80071e4 <std>
 80072d8:	200005bc 	.word	0x200005bc
 80072dc:	20000484 	.word	0x20000484
 80072e0:	08007251 	.word	0x08007251

080072e4 <__sfp_lock_acquire>:
 80072e4:	4801      	ldr	r0, [pc, #4]	; (80072ec <__sfp_lock_acquire+0x8>)
 80072e6:	f000 b920 	b.w	800752a <__retarget_lock_acquire_recursive>
 80072ea:	bf00      	nop
 80072ec:	200005c5 	.word	0x200005c5

080072f0 <__sfp_lock_release>:
 80072f0:	4801      	ldr	r0, [pc, #4]	; (80072f8 <__sfp_lock_release+0x8>)
 80072f2:	f000 b91b 	b.w	800752c <__retarget_lock_release_recursive>
 80072f6:	bf00      	nop
 80072f8:	200005c5 	.word	0x200005c5

080072fc <__sinit>:
 80072fc:	b510      	push	{r4, lr}
 80072fe:	4604      	mov	r4, r0
 8007300:	f7ff fff0 	bl	80072e4 <__sfp_lock_acquire>
 8007304:	6a23      	ldr	r3, [r4, #32]
 8007306:	b11b      	cbz	r3, 8007310 <__sinit+0x14>
 8007308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800730c:	f7ff bff0 	b.w	80072f0 <__sfp_lock_release>
 8007310:	4b04      	ldr	r3, [pc, #16]	; (8007324 <__sinit+0x28>)
 8007312:	6223      	str	r3, [r4, #32]
 8007314:	4b04      	ldr	r3, [pc, #16]	; (8007328 <__sinit+0x2c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f5      	bne.n	8007308 <__sinit+0xc>
 800731c:	f7ff ffc4 	bl	80072a8 <global_stdio_init.part.0>
 8007320:	e7f2      	b.n	8007308 <__sinit+0xc>
 8007322:	bf00      	nop
 8007324:	08007269 	.word	0x08007269
 8007328:	200005bc 	.word	0x200005bc

0800732c <_fwalk_sglue>:
 800732c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007330:	4607      	mov	r7, r0
 8007332:	4688      	mov	r8, r1
 8007334:	4614      	mov	r4, r2
 8007336:	2600      	movs	r6, #0
 8007338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800733c:	f1b9 0901 	subs.w	r9, r9, #1
 8007340:	d505      	bpl.n	800734e <_fwalk_sglue+0x22>
 8007342:	6824      	ldr	r4, [r4, #0]
 8007344:	2c00      	cmp	r4, #0
 8007346:	d1f7      	bne.n	8007338 <_fwalk_sglue+0xc>
 8007348:	4630      	mov	r0, r6
 800734a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d907      	bls.n	8007364 <_fwalk_sglue+0x38>
 8007354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007358:	3301      	adds	r3, #1
 800735a:	d003      	beq.n	8007364 <_fwalk_sglue+0x38>
 800735c:	4629      	mov	r1, r5
 800735e:	4638      	mov	r0, r7
 8007360:	47c0      	blx	r8
 8007362:	4306      	orrs	r6, r0
 8007364:	3568      	adds	r5, #104	; 0x68
 8007366:	e7e9      	b.n	800733c <_fwalk_sglue+0x10>

08007368 <siprintf>:
 8007368:	b40e      	push	{r1, r2, r3}
 800736a:	b500      	push	{lr}
 800736c:	b09c      	sub	sp, #112	; 0x70
 800736e:	ab1d      	add	r3, sp, #116	; 0x74
 8007370:	9002      	str	r0, [sp, #8]
 8007372:	9006      	str	r0, [sp, #24]
 8007374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007378:	4809      	ldr	r0, [pc, #36]	; (80073a0 <siprintf+0x38>)
 800737a:	9107      	str	r1, [sp, #28]
 800737c:	9104      	str	r1, [sp, #16]
 800737e:	4909      	ldr	r1, [pc, #36]	; (80073a4 <siprintf+0x3c>)
 8007380:	f853 2b04 	ldr.w	r2, [r3], #4
 8007384:	9105      	str	r1, [sp, #20]
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	a902      	add	r1, sp, #8
 800738c:	f002 fb6c 	bl	8009a68 <_svfiprintf_r>
 8007390:	9b02      	ldr	r3, [sp, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	b01c      	add	sp, #112	; 0x70
 8007398:	f85d eb04 	ldr.w	lr, [sp], #4
 800739c:	b003      	add	sp, #12
 800739e:	4770      	bx	lr
 80073a0:	20000078 	.word	0x20000078
 80073a4:	ffff0208 	.word	0xffff0208

080073a8 <__sread>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	460c      	mov	r4, r1
 80073ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b0:	f000 f86c 	bl	800748c <_read_r>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	bfab      	itete	ge
 80073b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ba:	89a3      	ldrhlt	r3, [r4, #12]
 80073bc:	181b      	addge	r3, r3, r0
 80073be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073c2:	bfac      	ite	ge
 80073c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80073c6:	81a3      	strhlt	r3, [r4, #12]
 80073c8:	bd10      	pop	{r4, pc}

080073ca <__swrite>:
 80073ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ce:	461f      	mov	r7, r3
 80073d0:	898b      	ldrh	r3, [r1, #12]
 80073d2:	05db      	lsls	r3, r3, #23
 80073d4:	4605      	mov	r5, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	4616      	mov	r6, r2
 80073da:	d505      	bpl.n	80073e8 <__swrite+0x1e>
 80073dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e0:	2302      	movs	r3, #2
 80073e2:	2200      	movs	r2, #0
 80073e4:	f000 f840 	bl	8007468 <_lseek_r>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	4632      	mov	r2, r6
 80073f6:	463b      	mov	r3, r7
 80073f8:	4628      	mov	r0, r5
 80073fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	f000 b857 	b.w	80074b0 <_write_r>

08007402 <__sseek>:
 8007402:	b510      	push	{r4, lr}
 8007404:	460c      	mov	r4, r1
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 f82d 	bl	8007468 <_lseek_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	bf15      	itete	ne
 8007414:	6560      	strne	r0, [r4, #84]	; 0x54
 8007416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800741a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800741e:	81a3      	strheq	r3, [r4, #12]
 8007420:	bf18      	it	ne
 8007422:	81a3      	strhne	r3, [r4, #12]
 8007424:	bd10      	pop	{r4, pc}

08007426 <__sclose>:
 8007426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742a:	f000 b80d 	b.w	8007448 <_close_r>

0800742e <memset>:
 800742e:	4402      	add	r2, r0
 8007430:	4603      	mov	r3, r0
 8007432:	4293      	cmp	r3, r2
 8007434:	d100      	bne.n	8007438 <memset+0xa>
 8007436:	4770      	bx	lr
 8007438:	f803 1b01 	strb.w	r1, [r3], #1
 800743c:	e7f9      	b.n	8007432 <memset+0x4>
	...

08007440 <_localeconv_r>:
 8007440:	4800      	ldr	r0, [pc, #0]	; (8007444 <_localeconv_r+0x4>)
 8007442:	4770      	bx	lr
 8007444:	2000016c 	.word	0x2000016c

08007448 <_close_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4d06      	ldr	r5, [pc, #24]	; (8007464 <_close_r+0x1c>)
 800744c:	2300      	movs	r3, #0
 800744e:	4604      	mov	r4, r0
 8007450:	4608      	mov	r0, r1
 8007452:	602b      	str	r3, [r5, #0]
 8007454:	f7fa fc4d 	bl	8001cf2 <_close>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_close_r+0x1a>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_close_r+0x1a>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	200005c0 	.word	0x200005c0

08007468 <_lseek_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d07      	ldr	r5, [pc, #28]	; (8007488 <_lseek_r+0x20>)
 800746c:	4604      	mov	r4, r0
 800746e:	4608      	mov	r0, r1
 8007470:	4611      	mov	r1, r2
 8007472:	2200      	movs	r2, #0
 8007474:	602a      	str	r2, [r5, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	f7fa fc62 	bl	8001d40 <_lseek>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_lseek_r+0x1e>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	b103      	cbz	r3, 8007486 <_lseek_r+0x1e>
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	200005c0 	.word	0x200005c0

0800748c <_read_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d07      	ldr	r5, [pc, #28]	; (80074ac <_read_r+0x20>)
 8007490:	4604      	mov	r4, r0
 8007492:	4608      	mov	r0, r1
 8007494:	4611      	mov	r1, r2
 8007496:	2200      	movs	r2, #0
 8007498:	602a      	str	r2, [r5, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	f7fa fbf0 	bl	8001c80 <_read>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_read_r+0x1e>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_read_r+0x1e>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	200005c0 	.word	0x200005c0

080074b0 <_write_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	; (80074d0 <_write_r+0x20>)
 80074b4:	4604      	mov	r4, r0
 80074b6:	4608      	mov	r0, r1
 80074b8:	4611      	mov	r1, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7fa fbfb 	bl	8001cba <_write>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_write_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_write_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	200005c0 	.word	0x200005c0

080074d4 <__errno>:
 80074d4:	4b01      	ldr	r3, [pc, #4]	; (80074dc <__errno+0x8>)
 80074d6:	6818      	ldr	r0, [r3, #0]
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20000078 	.word	0x20000078

080074e0 <__libc_init_array>:
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	4d0d      	ldr	r5, [pc, #52]	; (8007518 <__libc_init_array+0x38>)
 80074e4:	4c0d      	ldr	r4, [pc, #52]	; (800751c <__libc_init_array+0x3c>)
 80074e6:	1b64      	subs	r4, r4, r5
 80074e8:	10a4      	asrs	r4, r4, #2
 80074ea:	2600      	movs	r6, #0
 80074ec:	42a6      	cmp	r6, r4
 80074ee:	d109      	bne.n	8007504 <__libc_init_array+0x24>
 80074f0:	4d0b      	ldr	r5, [pc, #44]	; (8007520 <__libc_init_array+0x40>)
 80074f2:	4c0c      	ldr	r4, [pc, #48]	; (8007524 <__libc_init_array+0x44>)
 80074f4:	f003 fb54 	bl	800aba0 <_init>
 80074f8:	1b64      	subs	r4, r4, r5
 80074fa:	10a4      	asrs	r4, r4, #2
 80074fc:	2600      	movs	r6, #0
 80074fe:	42a6      	cmp	r6, r4
 8007500:	d105      	bne.n	800750e <__libc_init_array+0x2e>
 8007502:	bd70      	pop	{r4, r5, r6, pc}
 8007504:	f855 3b04 	ldr.w	r3, [r5], #4
 8007508:	4798      	blx	r3
 800750a:	3601      	adds	r6, #1
 800750c:	e7ee      	b.n	80074ec <__libc_init_array+0xc>
 800750e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007512:	4798      	blx	r3
 8007514:	3601      	adds	r6, #1
 8007516:	e7f2      	b.n	80074fe <__libc_init_array+0x1e>
 8007518:	0800b090 	.word	0x0800b090
 800751c:	0800b090 	.word	0x0800b090
 8007520:	0800b090 	.word	0x0800b090
 8007524:	0800b094 	.word	0x0800b094

08007528 <__retarget_lock_init_recursive>:
 8007528:	4770      	bx	lr

0800752a <__retarget_lock_acquire_recursive>:
 800752a:	4770      	bx	lr

0800752c <__retarget_lock_release_recursive>:
 800752c:	4770      	bx	lr
	...

08007530 <nanf>:
 8007530:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007538 <nanf+0x8>
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	7fc00000 	.word	0x7fc00000

0800753c <quorem>:
 800753c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	6903      	ldr	r3, [r0, #16]
 8007542:	690c      	ldr	r4, [r1, #16]
 8007544:	42a3      	cmp	r3, r4
 8007546:	4607      	mov	r7, r0
 8007548:	db7e      	blt.n	8007648 <quorem+0x10c>
 800754a:	3c01      	subs	r4, #1
 800754c:	f101 0814 	add.w	r8, r1, #20
 8007550:	f100 0514 	add.w	r5, r0, #20
 8007554:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800755e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007562:	3301      	adds	r3, #1
 8007564:	429a      	cmp	r2, r3
 8007566:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800756a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800756e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007572:	d331      	bcc.n	80075d8 <quorem+0x9c>
 8007574:	f04f 0e00 	mov.w	lr, #0
 8007578:	4640      	mov	r0, r8
 800757a:	46ac      	mov	ip, r5
 800757c:	46f2      	mov	sl, lr
 800757e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007582:	b293      	uxth	r3, r2
 8007584:	fb06 e303 	mla	r3, r6, r3, lr
 8007588:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800758c:	0c1a      	lsrs	r2, r3, #16
 800758e:	b29b      	uxth	r3, r3
 8007590:	ebaa 0303 	sub.w	r3, sl, r3
 8007594:	f8dc a000 	ldr.w	sl, [ip]
 8007598:	fa13 f38a 	uxtah	r3, r3, sl
 800759c:	fb06 220e 	mla	r2, r6, lr, r2
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075a8:	b292      	uxth	r2, r2
 80075aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80075b6:	4581      	cmp	r9, r0
 80075b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075bc:	f84c 3b04 	str.w	r3, [ip], #4
 80075c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075c4:	d2db      	bcs.n	800757e <quorem+0x42>
 80075c6:	f855 300b 	ldr.w	r3, [r5, fp]
 80075ca:	b92b      	cbnz	r3, 80075d8 <quorem+0x9c>
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	3b04      	subs	r3, #4
 80075d0:	429d      	cmp	r5, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	d32c      	bcc.n	8007630 <quorem+0xf4>
 80075d6:	613c      	str	r4, [r7, #16]
 80075d8:	4638      	mov	r0, r7
 80075da:	f001 f9f1 	bl	80089c0 <__mcmp>
 80075de:	2800      	cmp	r0, #0
 80075e0:	db22      	blt.n	8007628 <quorem+0xec>
 80075e2:	3601      	adds	r6, #1
 80075e4:	4629      	mov	r1, r5
 80075e6:	2000      	movs	r0, #0
 80075e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80075ec:	f8d1 c000 	ldr.w	ip, [r1]
 80075f0:	b293      	uxth	r3, r2
 80075f2:	1ac3      	subs	r3, r0, r3
 80075f4:	0c12      	lsrs	r2, r2, #16
 80075f6:	fa13 f38c 	uxtah	r3, r3, ip
 80075fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80075fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007602:	b29b      	uxth	r3, r3
 8007604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007608:	45c1      	cmp	r9, r8
 800760a:	f841 3b04 	str.w	r3, [r1], #4
 800760e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007612:	d2e9      	bcs.n	80075e8 <quorem+0xac>
 8007614:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007618:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800761c:	b922      	cbnz	r2, 8007628 <quorem+0xec>
 800761e:	3b04      	subs	r3, #4
 8007620:	429d      	cmp	r5, r3
 8007622:	461a      	mov	r2, r3
 8007624:	d30a      	bcc.n	800763c <quorem+0x100>
 8007626:	613c      	str	r4, [r7, #16]
 8007628:	4630      	mov	r0, r6
 800762a:	b003      	add	sp, #12
 800762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007630:	6812      	ldr	r2, [r2, #0]
 8007632:	3b04      	subs	r3, #4
 8007634:	2a00      	cmp	r2, #0
 8007636:	d1ce      	bne.n	80075d6 <quorem+0x9a>
 8007638:	3c01      	subs	r4, #1
 800763a:	e7c9      	b.n	80075d0 <quorem+0x94>
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	3b04      	subs	r3, #4
 8007640:	2a00      	cmp	r2, #0
 8007642:	d1f0      	bne.n	8007626 <quorem+0xea>
 8007644:	3c01      	subs	r4, #1
 8007646:	e7eb      	b.n	8007620 <quorem+0xe4>
 8007648:	2000      	movs	r0, #0
 800764a:	e7ee      	b.n	800762a <quorem+0xee>
 800764c:	0000      	movs	r0, r0
	...

08007650 <_dtoa_r>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	ed2d 8b04 	vpush	{d8-d9}
 8007658:	69c5      	ldr	r5, [r0, #28]
 800765a:	b093      	sub	sp, #76	; 0x4c
 800765c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007660:	ec57 6b10 	vmov	r6, r7, d0
 8007664:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007668:	9107      	str	r1, [sp, #28]
 800766a:	4604      	mov	r4, r0
 800766c:	920a      	str	r2, [sp, #40]	; 0x28
 800766e:	930d      	str	r3, [sp, #52]	; 0x34
 8007670:	b975      	cbnz	r5, 8007690 <_dtoa_r+0x40>
 8007672:	2010      	movs	r0, #16
 8007674:	f000 fe2a 	bl	80082cc <malloc>
 8007678:	4602      	mov	r2, r0
 800767a:	61e0      	str	r0, [r4, #28]
 800767c:	b920      	cbnz	r0, 8007688 <_dtoa_r+0x38>
 800767e:	4bae      	ldr	r3, [pc, #696]	; (8007938 <_dtoa_r+0x2e8>)
 8007680:	21ef      	movs	r1, #239	; 0xef
 8007682:	48ae      	ldr	r0, [pc, #696]	; (800793c <_dtoa_r+0x2ec>)
 8007684:	f002 fbf0 	bl	8009e68 <__assert_func>
 8007688:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800768c:	6005      	str	r5, [r0, #0]
 800768e:	60c5      	str	r5, [r0, #12]
 8007690:	69e3      	ldr	r3, [r4, #28]
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	b151      	cbz	r1, 80076ac <_dtoa_r+0x5c>
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	604a      	str	r2, [r1, #4]
 800769a:	2301      	movs	r3, #1
 800769c:	4093      	lsls	r3, r2
 800769e:	608b      	str	r3, [r1, #8]
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 ff07 	bl	80084b4 <_Bfree>
 80076a6:	69e3      	ldr	r3, [r4, #28]
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	1e3b      	subs	r3, r7, #0
 80076ae:	bfbb      	ittet	lt
 80076b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076b4:	9303      	strlt	r3, [sp, #12]
 80076b6:	2300      	movge	r3, #0
 80076b8:	2201      	movlt	r2, #1
 80076ba:	bfac      	ite	ge
 80076bc:	f8c8 3000 	strge.w	r3, [r8]
 80076c0:	f8c8 2000 	strlt.w	r2, [r8]
 80076c4:	4b9e      	ldr	r3, [pc, #632]	; (8007940 <_dtoa_r+0x2f0>)
 80076c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80076ca:	ea33 0308 	bics.w	r3, r3, r8
 80076ce:	d11b      	bne.n	8007708 <_dtoa_r+0xb8>
 80076d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80076dc:	4333      	orrs	r3, r6
 80076de:	f000 8593 	beq.w	8008208 <_dtoa_r+0xbb8>
 80076e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076e4:	b963      	cbnz	r3, 8007700 <_dtoa_r+0xb0>
 80076e6:	4b97      	ldr	r3, [pc, #604]	; (8007944 <_dtoa_r+0x2f4>)
 80076e8:	e027      	b.n	800773a <_dtoa_r+0xea>
 80076ea:	4b97      	ldr	r3, [pc, #604]	; (8007948 <_dtoa_r+0x2f8>)
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	3308      	adds	r3, #8
 80076f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	9800      	ldr	r0, [sp, #0]
 80076f6:	b013      	add	sp, #76	; 0x4c
 80076f8:	ecbd 8b04 	vpop	{d8-d9}
 80076fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007700:	4b90      	ldr	r3, [pc, #576]	; (8007944 <_dtoa_r+0x2f4>)
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	3303      	adds	r3, #3
 8007706:	e7f3      	b.n	80076f0 <_dtoa_r+0xa0>
 8007708:	ed9d 7b02 	vldr	d7, [sp, #8]
 800770c:	2200      	movs	r2, #0
 800770e:	ec51 0b17 	vmov	r0, r1, d7
 8007712:	eeb0 8a47 	vmov.f32	s16, s14
 8007716:	eef0 8a67 	vmov.f32	s17, s15
 800771a:	2300      	movs	r3, #0
 800771c:	f7f9 f9d4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007720:	4681      	mov	r9, r0
 8007722:	b160      	cbz	r0, 800773e <_dtoa_r+0xee>
 8007724:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007726:	2301      	movs	r3, #1
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 8568 	beq.w	8008202 <_dtoa_r+0xbb2>
 8007732:	4b86      	ldr	r3, [pc, #536]	; (800794c <_dtoa_r+0x2fc>)
 8007734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	3b01      	subs	r3, #1
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	e7da      	b.n	80076f4 <_dtoa_r+0xa4>
 800773e:	aa10      	add	r2, sp, #64	; 0x40
 8007740:	a911      	add	r1, sp, #68	; 0x44
 8007742:	4620      	mov	r0, r4
 8007744:	eeb0 0a48 	vmov.f32	s0, s16
 8007748:	eef0 0a68 	vmov.f32	s1, s17
 800774c:	f001 fa4e 	bl	8008bec <__d2b>
 8007750:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007754:	4682      	mov	sl, r0
 8007756:	2d00      	cmp	r5, #0
 8007758:	d07f      	beq.n	800785a <_dtoa_r+0x20a>
 800775a:	ee18 3a90 	vmov	r3, s17
 800775e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007762:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007766:	ec51 0b18 	vmov	r0, r1, d8
 800776a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800776e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007772:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007776:	4619      	mov	r1, r3
 8007778:	2200      	movs	r2, #0
 800777a:	4b75      	ldr	r3, [pc, #468]	; (8007950 <_dtoa_r+0x300>)
 800777c:	f7f8 fd84 	bl	8000288 <__aeabi_dsub>
 8007780:	a367      	add	r3, pc, #412	; (adr r3, 8007920 <_dtoa_r+0x2d0>)
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	f7f8 ff37 	bl	80005f8 <__aeabi_dmul>
 800778a:	a367      	add	r3, pc, #412	; (adr r3, 8007928 <_dtoa_r+0x2d8>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f7f8 fd7c 	bl	800028c <__adddf3>
 8007794:	4606      	mov	r6, r0
 8007796:	4628      	mov	r0, r5
 8007798:	460f      	mov	r7, r1
 800779a:	f7f8 fec3 	bl	8000524 <__aeabi_i2d>
 800779e:	a364      	add	r3, pc, #400	; (adr r3, 8007930 <_dtoa_r+0x2e0>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f7f8 ff28 	bl	80005f8 <__aeabi_dmul>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4630      	mov	r0, r6
 80077ae:	4639      	mov	r1, r7
 80077b0:	f7f8 fd6c 	bl	800028c <__adddf3>
 80077b4:	4606      	mov	r6, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	f7f9 f9ce 	bl	8000b58 <__aeabi_d2iz>
 80077bc:	2200      	movs	r2, #0
 80077be:	4683      	mov	fp, r0
 80077c0:	2300      	movs	r3, #0
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f9 f989 	bl	8000adc <__aeabi_dcmplt>
 80077ca:	b148      	cbz	r0, 80077e0 <_dtoa_r+0x190>
 80077cc:	4658      	mov	r0, fp
 80077ce:	f7f8 fea9 	bl	8000524 <__aeabi_i2d>
 80077d2:	4632      	mov	r2, r6
 80077d4:	463b      	mov	r3, r7
 80077d6:	f7f9 f977 	bl	8000ac8 <__aeabi_dcmpeq>
 80077da:	b908      	cbnz	r0, 80077e0 <_dtoa_r+0x190>
 80077dc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80077e0:	f1bb 0f16 	cmp.w	fp, #22
 80077e4:	d857      	bhi.n	8007896 <_dtoa_r+0x246>
 80077e6:	4b5b      	ldr	r3, [pc, #364]	; (8007954 <_dtoa_r+0x304>)
 80077e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	ec51 0b18 	vmov	r0, r1, d8
 80077f4:	f7f9 f972 	bl	8000adc <__aeabi_dcmplt>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d04e      	beq.n	800789a <_dtoa_r+0x24a>
 80077fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007800:	2300      	movs	r3, #0
 8007802:	930c      	str	r3, [sp, #48]	; 0x30
 8007804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007806:	1b5b      	subs	r3, r3, r5
 8007808:	1e5a      	subs	r2, r3, #1
 800780a:	bf45      	ittet	mi
 800780c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007810:	9305      	strmi	r3, [sp, #20]
 8007812:	2300      	movpl	r3, #0
 8007814:	2300      	movmi	r3, #0
 8007816:	9206      	str	r2, [sp, #24]
 8007818:	bf54      	ite	pl
 800781a:	9305      	strpl	r3, [sp, #20]
 800781c:	9306      	strmi	r3, [sp, #24]
 800781e:	f1bb 0f00 	cmp.w	fp, #0
 8007822:	db3c      	blt.n	800789e <_dtoa_r+0x24e>
 8007824:	9b06      	ldr	r3, [sp, #24]
 8007826:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800782a:	445b      	add	r3, fp
 800782c:	9306      	str	r3, [sp, #24]
 800782e:	2300      	movs	r3, #0
 8007830:	9308      	str	r3, [sp, #32]
 8007832:	9b07      	ldr	r3, [sp, #28]
 8007834:	2b09      	cmp	r3, #9
 8007836:	d868      	bhi.n	800790a <_dtoa_r+0x2ba>
 8007838:	2b05      	cmp	r3, #5
 800783a:	bfc4      	itt	gt
 800783c:	3b04      	subgt	r3, #4
 800783e:	9307      	strgt	r3, [sp, #28]
 8007840:	9b07      	ldr	r3, [sp, #28]
 8007842:	f1a3 0302 	sub.w	r3, r3, #2
 8007846:	bfcc      	ite	gt
 8007848:	2500      	movgt	r5, #0
 800784a:	2501      	movle	r5, #1
 800784c:	2b03      	cmp	r3, #3
 800784e:	f200 8085 	bhi.w	800795c <_dtoa_r+0x30c>
 8007852:	e8df f003 	tbb	[pc, r3]
 8007856:	3b2e      	.short	0x3b2e
 8007858:	5839      	.short	0x5839
 800785a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800785e:	441d      	add	r5, r3
 8007860:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007864:	2b20      	cmp	r3, #32
 8007866:	bfc1      	itttt	gt
 8007868:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800786c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007870:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007874:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007878:	bfd6      	itet	le
 800787a:	f1c3 0320 	rsble	r3, r3, #32
 800787e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007882:	fa06 f003 	lslle.w	r0, r6, r3
 8007886:	f7f8 fe3d 	bl	8000504 <__aeabi_ui2d>
 800788a:	2201      	movs	r2, #1
 800788c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007890:	3d01      	subs	r5, #1
 8007892:	920e      	str	r2, [sp, #56]	; 0x38
 8007894:	e76f      	b.n	8007776 <_dtoa_r+0x126>
 8007896:	2301      	movs	r3, #1
 8007898:	e7b3      	b.n	8007802 <_dtoa_r+0x1b2>
 800789a:	900c      	str	r0, [sp, #48]	; 0x30
 800789c:	e7b2      	b.n	8007804 <_dtoa_r+0x1b4>
 800789e:	9b05      	ldr	r3, [sp, #20]
 80078a0:	eba3 030b 	sub.w	r3, r3, fp
 80078a4:	9305      	str	r3, [sp, #20]
 80078a6:	f1cb 0300 	rsb	r3, fp, #0
 80078aa:	9308      	str	r3, [sp, #32]
 80078ac:	2300      	movs	r3, #0
 80078ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b0:	e7bf      	b.n	8007832 <_dtoa_r+0x1e2>
 80078b2:	2300      	movs	r3, #0
 80078b4:	9309      	str	r3, [sp, #36]	; 0x24
 80078b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dc52      	bgt.n	8007962 <_dtoa_r+0x312>
 80078bc:	2301      	movs	r3, #1
 80078be:	9301      	str	r3, [sp, #4]
 80078c0:	9304      	str	r3, [sp, #16]
 80078c2:	461a      	mov	r2, r3
 80078c4:	920a      	str	r2, [sp, #40]	; 0x28
 80078c6:	e00b      	b.n	80078e0 <_dtoa_r+0x290>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e7f3      	b.n	80078b4 <_dtoa_r+0x264>
 80078cc:	2300      	movs	r3, #0
 80078ce:	9309      	str	r3, [sp, #36]	; 0x24
 80078d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d2:	445b      	add	r3, fp
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	3301      	adds	r3, #1
 80078d8:	2b01      	cmp	r3, #1
 80078da:	9304      	str	r3, [sp, #16]
 80078dc:	bfb8      	it	lt
 80078de:	2301      	movlt	r3, #1
 80078e0:	69e0      	ldr	r0, [r4, #28]
 80078e2:	2100      	movs	r1, #0
 80078e4:	2204      	movs	r2, #4
 80078e6:	f102 0614 	add.w	r6, r2, #20
 80078ea:	429e      	cmp	r6, r3
 80078ec:	d93d      	bls.n	800796a <_dtoa_r+0x31a>
 80078ee:	6041      	str	r1, [r0, #4]
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fd9f 	bl	8008434 <_Balloc>
 80078f6:	9000      	str	r0, [sp, #0]
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d139      	bne.n	8007970 <_dtoa_r+0x320>
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <_dtoa_r+0x308>)
 80078fe:	4602      	mov	r2, r0
 8007900:	f240 11af 	movw	r1, #431	; 0x1af
 8007904:	e6bd      	b.n	8007682 <_dtoa_r+0x32>
 8007906:	2301      	movs	r3, #1
 8007908:	e7e1      	b.n	80078ce <_dtoa_r+0x27e>
 800790a:	2501      	movs	r5, #1
 800790c:	2300      	movs	r3, #0
 800790e:	9307      	str	r3, [sp, #28]
 8007910:	9509      	str	r5, [sp, #36]	; 0x24
 8007912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	2200      	movs	r2, #0
 800791c:	2312      	movs	r3, #18
 800791e:	e7d1      	b.n	80078c4 <_dtoa_r+0x274>
 8007920:	636f4361 	.word	0x636f4361
 8007924:	3fd287a7 	.word	0x3fd287a7
 8007928:	8b60c8b3 	.word	0x8b60c8b3
 800792c:	3fc68a28 	.word	0x3fc68a28
 8007930:	509f79fb 	.word	0x509f79fb
 8007934:	3fd34413 	.word	0x3fd34413
 8007938:	0800ada7 	.word	0x0800ada7
 800793c:	0800adbe 	.word	0x0800adbe
 8007940:	7ff00000 	.word	0x7ff00000
 8007944:	0800ada3 	.word	0x0800ada3
 8007948:	0800ad9a 	.word	0x0800ad9a
 800794c:	0800ad72 	.word	0x0800ad72
 8007950:	3ff80000 	.word	0x3ff80000
 8007954:	0800aea8 	.word	0x0800aea8
 8007958:	0800ae16 	.word	0x0800ae16
 800795c:	2301      	movs	r3, #1
 800795e:	9309      	str	r3, [sp, #36]	; 0x24
 8007960:	e7d7      	b.n	8007912 <_dtoa_r+0x2c2>
 8007962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	9304      	str	r3, [sp, #16]
 8007968:	e7ba      	b.n	80078e0 <_dtoa_r+0x290>
 800796a:	3101      	adds	r1, #1
 800796c:	0052      	lsls	r2, r2, #1
 800796e:	e7ba      	b.n	80078e6 <_dtoa_r+0x296>
 8007970:	69e3      	ldr	r3, [r4, #28]
 8007972:	9a00      	ldr	r2, [sp, #0]
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	2b0e      	cmp	r3, #14
 800797a:	f200 80a8 	bhi.w	8007ace <_dtoa_r+0x47e>
 800797e:	2d00      	cmp	r5, #0
 8007980:	f000 80a5 	beq.w	8007ace <_dtoa_r+0x47e>
 8007984:	f1bb 0f00 	cmp.w	fp, #0
 8007988:	dd38      	ble.n	80079fc <_dtoa_r+0x3ac>
 800798a:	4bc0      	ldr	r3, [pc, #768]	; (8007c8c <_dtoa_r+0x63c>)
 800798c:	f00b 020f 	and.w	r2, fp, #15
 8007990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007994:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007998:	e9d3 6700 	ldrd	r6, r7, [r3]
 800799c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80079a0:	d019      	beq.n	80079d6 <_dtoa_r+0x386>
 80079a2:	4bbb      	ldr	r3, [pc, #748]	; (8007c90 <_dtoa_r+0x640>)
 80079a4:	ec51 0b18 	vmov	r0, r1, d8
 80079a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079ac:	f7f8 ff4e 	bl	800084c <__aeabi_ddiv>
 80079b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079b4:	f008 080f 	and.w	r8, r8, #15
 80079b8:	2503      	movs	r5, #3
 80079ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007c90 <_dtoa_r+0x640>
 80079be:	f1b8 0f00 	cmp.w	r8, #0
 80079c2:	d10a      	bne.n	80079da <_dtoa_r+0x38a>
 80079c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c8:	4632      	mov	r2, r6
 80079ca:	463b      	mov	r3, r7
 80079cc:	f7f8 ff3e 	bl	800084c <__aeabi_ddiv>
 80079d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d4:	e02b      	b.n	8007a2e <_dtoa_r+0x3de>
 80079d6:	2502      	movs	r5, #2
 80079d8:	e7ef      	b.n	80079ba <_dtoa_r+0x36a>
 80079da:	f018 0f01 	tst.w	r8, #1
 80079de:	d008      	beq.n	80079f2 <_dtoa_r+0x3a2>
 80079e0:	4630      	mov	r0, r6
 80079e2:	4639      	mov	r1, r7
 80079e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80079e8:	f7f8 fe06 	bl	80005f8 <__aeabi_dmul>
 80079ec:	3501      	adds	r5, #1
 80079ee:	4606      	mov	r6, r0
 80079f0:	460f      	mov	r7, r1
 80079f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079f6:	f109 0908 	add.w	r9, r9, #8
 80079fa:	e7e0      	b.n	80079be <_dtoa_r+0x36e>
 80079fc:	f000 809f 	beq.w	8007b3e <_dtoa_r+0x4ee>
 8007a00:	f1cb 0600 	rsb	r6, fp, #0
 8007a04:	4ba1      	ldr	r3, [pc, #644]	; (8007c8c <_dtoa_r+0x63c>)
 8007a06:	4fa2      	ldr	r7, [pc, #648]	; (8007c90 <_dtoa_r+0x640>)
 8007a08:	f006 020f 	and.w	r2, r6, #15
 8007a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	ec51 0b18 	vmov	r0, r1, d8
 8007a18:	f7f8 fdee 	bl	80005f8 <__aeabi_dmul>
 8007a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a20:	1136      	asrs	r6, r6, #4
 8007a22:	2300      	movs	r3, #0
 8007a24:	2502      	movs	r5, #2
 8007a26:	2e00      	cmp	r6, #0
 8007a28:	d17e      	bne.n	8007b28 <_dtoa_r+0x4d8>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1d0      	bne.n	80079d0 <_dtoa_r+0x380>
 8007a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8084 	beq.w	8007b42 <_dtoa_r+0x4f2>
 8007a3a:	4b96      	ldr	r3, [pc, #600]	; (8007c94 <_dtoa_r+0x644>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4640      	mov	r0, r8
 8007a40:	4649      	mov	r1, r9
 8007a42:	f7f9 f84b 	bl	8000adc <__aeabi_dcmplt>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d07b      	beq.n	8007b42 <_dtoa_r+0x4f2>
 8007a4a:	9b04      	ldr	r3, [sp, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d078      	beq.n	8007b42 <_dtoa_r+0x4f2>
 8007a50:	9b01      	ldr	r3, [sp, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dd39      	ble.n	8007aca <_dtoa_r+0x47a>
 8007a56:	4b90      	ldr	r3, [pc, #576]	; (8007c98 <_dtoa_r+0x648>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	f7f8 fdcb 	bl	80005f8 <__aeabi_dmul>
 8007a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a66:	9e01      	ldr	r6, [sp, #4]
 8007a68:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007a6c:	3501      	adds	r5, #1
 8007a6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a72:	4628      	mov	r0, r5
 8007a74:	f7f8 fd56 	bl	8000524 <__aeabi_i2d>
 8007a78:	4642      	mov	r2, r8
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	f7f8 fdbc 	bl	80005f8 <__aeabi_dmul>
 8007a80:	4b86      	ldr	r3, [pc, #536]	; (8007c9c <_dtoa_r+0x64c>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	f7f8 fc02 	bl	800028c <__adddf3>
 8007a88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a90:	9303      	str	r3, [sp, #12]
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	d158      	bne.n	8007b48 <_dtoa_r+0x4f8>
 8007a96:	4b82      	ldr	r3, [pc, #520]	; (8007ca0 <_dtoa_r+0x650>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	f7f8 fbf3 	bl	8000288 <__aeabi_dsub>
 8007aa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	4689      	mov	r9, r1
 8007aaa:	f7f9 f835 	bl	8000b18 <__aeabi_dcmpgt>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f040 8296 	bne.w	8007fe0 <_dtoa_r+0x990>
 8007ab4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ab8:	4640      	mov	r0, r8
 8007aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f7f9 f80c 	bl	8000adc <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f040 8289 	bne.w	8007fdc <_dtoa_r+0x98c>
 8007aca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f2c0 814e 	blt.w	8007d72 <_dtoa_r+0x722>
 8007ad6:	f1bb 0f0e 	cmp.w	fp, #14
 8007ada:	f300 814a 	bgt.w	8007d72 <_dtoa_r+0x722>
 8007ade:	4b6b      	ldr	r3, [pc, #428]	; (8007c8c <_dtoa_r+0x63c>)
 8007ae0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f280 80dc 	bge.w	8007ca8 <_dtoa_r+0x658>
 8007af0:	9b04      	ldr	r3, [sp, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f300 80d8 	bgt.w	8007ca8 <_dtoa_r+0x658>
 8007af8:	f040 826f 	bne.w	8007fda <_dtoa_r+0x98a>
 8007afc:	4b68      	ldr	r3, [pc, #416]	; (8007ca0 <_dtoa_r+0x650>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	4640      	mov	r0, r8
 8007b02:	4649      	mov	r1, r9
 8007b04:	f7f8 fd78 	bl	80005f8 <__aeabi_dmul>
 8007b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b0c:	f7f8 fffa 	bl	8000b04 <__aeabi_dcmpge>
 8007b10:	9e04      	ldr	r6, [sp, #16]
 8007b12:	4637      	mov	r7, r6
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f040 8245 	bne.w	8007fa4 <_dtoa_r+0x954>
 8007b1a:	9d00      	ldr	r5, [sp, #0]
 8007b1c:	2331      	movs	r3, #49	; 0x31
 8007b1e:	f805 3b01 	strb.w	r3, [r5], #1
 8007b22:	f10b 0b01 	add.w	fp, fp, #1
 8007b26:	e241      	b.n	8007fac <_dtoa_r+0x95c>
 8007b28:	07f2      	lsls	r2, r6, #31
 8007b2a:	d505      	bpl.n	8007b38 <_dtoa_r+0x4e8>
 8007b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b30:	f7f8 fd62 	bl	80005f8 <__aeabi_dmul>
 8007b34:	3501      	adds	r5, #1
 8007b36:	2301      	movs	r3, #1
 8007b38:	1076      	asrs	r6, r6, #1
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	e773      	b.n	8007a26 <_dtoa_r+0x3d6>
 8007b3e:	2502      	movs	r5, #2
 8007b40:	e775      	b.n	8007a2e <_dtoa_r+0x3de>
 8007b42:	9e04      	ldr	r6, [sp, #16]
 8007b44:	465f      	mov	r7, fp
 8007b46:	e792      	b.n	8007a6e <_dtoa_r+0x41e>
 8007b48:	9900      	ldr	r1, [sp, #0]
 8007b4a:	4b50      	ldr	r3, [pc, #320]	; (8007c8c <_dtoa_r+0x63c>)
 8007b4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b50:	4431      	add	r1, r6
 8007b52:	9102      	str	r1, [sp, #8]
 8007b54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b56:	eeb0 9a47 	vmov.f32	s18, s14
 8007b5a:	eef0 9a67 	vmov.f32	s19, s15
 8007b5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b66:	2900      	cmp	r1, #0
 8007b68:	d044      	beq.n	8007bf4 <_dtoa_r+0x5a4>
 8007b6a:	494e      	ldr	r1, [pc, #312]	; (8007ca4 <_dtoa_r+0x654>)
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	f7f8 fe6d 	bl	800084c <__aeabi_ddiv>
 8007b72:	ec53 2b19 	vmov	r2, r3, d9
 8007b76:	f7f8 fb87 	bl	8000288 <__aeabi_dsub>
 8007b7a:	9d00      	ldr	r5, [sp, #0]
 8007b7c:	ec41 0b19 	vmov	d9, r0, r1
 8007b80:	4649      	mov	r1, r9
 8007b82:	4640      	mov	r0, r8
 8007b84:	f7f8 ffe8 	bl	8000b58 <__aeabi_d2iz>
 8007b88:	4606      	mov	r6, r0
 8007b8a:	f7f8 fccb 	bl	8000524 <__aeabi_i2d>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4640      	mov	r0, r8
 8007b94:	4649      	mov	r1, r9
 8007b96:	f7f8 fb77 	bl	8000288 <__aeabi_dsub>
 8007b9a:	3630      	adds	r6, #48	; 0x30
 8007b9c:	f805 6b01 	strb.w	r6, [r5], #1
 8007ba0:	ec53 2b19 	vmov	r2, r3, d9
 8007ba4:	4680      	mov	r8, r0
 8007ba6:	4689      	mov	r9, r1
 8007ba8:	f7f8 ff98 	bl	8000adc <__aeabi_dcmplt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d164      	bne.n	8007c7a <_dtoa_r+0x62a>
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	4937      	ldr	r1, [pc, #220]	; (8007c94 <_dtoa_r+0x644>)
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	f7f8 fb66 	bl	8000288 <__aeabi_dsub>
 8007bbc:	ec53 2b19 	vmov	r2, r3, d9
 8007bc0:	f7f8 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 80b6 	bne.w	8007d36 <_dtoa_r+0x6e6>
 8007bca:	9b02      	ldr	r3, [sp, #8]
 8007bcc:	429d      	cmp	r5, r3
 8007bce:	f43f af7c 	beq.w	8007aca <_dtoa_r+0x47a>
 8007bd2:	4b31      	ldr	r3, [pc, #196]	; (8007c98 <_dtoa_r+0x648>)
 8007bd4:	ec51 0b19 	vmov	r0, r1, d9
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f7f8 fd0d 	bl	80005f8 <__aeabi_dmul>
 8007bde:	4b2e      	ldr	r3, [pc, #184]	; (8007c98 <_dtoa_r+0x648>)
 8007be0:	ec41 0b19 	vmov	d9, r0, r1
 8007be4:	2200      	movs	r2, #0
 8007be6:	4640      	mov	r0, r8
 8007be8:	4649      	mov	r1, r9
 8007bea:	f7f8 fd05 	bl	80005f8 <__aeabi_dmul>
 8007bee:	4680      	mov	r8, r0
 8007bf0:	4689      	mov	r9, r1
 8007bf2:	e7c5      	b.n	8007b80 <_dtoa_r+0x530>
 8007bf4:	ec51 0b17 	vmov	r0, r1, d7
 8007bf8:	f7f8 fcfe 	bl	80005f8 <__aeabi_dmul>
 8007bfc:	9b02      	ldr	r3, [sp, #8]
 8007bfe:	9d00      	ldr	r5, [sp, #0]
 8007c00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c02:	ec41 0b19 	vmov	d9, r0, r1
 8007c06:	4649      	mov	r1, r9
 8007c08:	4640      	mov	r0, r8
 8007c0a:	f7f8 ffa5 	bl	8000b58 <__aeabi_d2iz>
 8007c0e:	4606      	mov	r6, r0
 8007c10:	f7f8 fc88 	bl	8000524 <__aeabi_i2d>
 8007c14:	3630      	adds	r6, #48	; 0x30
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f8 fb33 	bl	8000288 <__aeabi_dsub>
 8007c22:	f805 6b01 	strb.w	r6, [r5], #1
 8007c26:	9b02      	ldr	r3, [sp, #8]
 8007c28:	429d      	cmp	r5, r3
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	4689      	mov	r9, r1
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	d124      	bne.n	8007c7e <_dtoa_r+0x62e>
 8007c34:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <_dtoa_r+0x654>)
 8007c36:	ec51 0b19 	vmov	r0, r1, d9
 8007c3a:	f7f8 fb27 	bl	800028c <__adddf3>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4640      	mov	r0, r8
 8007c44:	4649      	mov	r1, r9
 8007c46:	f7f8 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d173      	bne.n	8007d36 <_dtoa_r+0x6e6>
 8007c4e:	ec53 2b19 	vmov	r2, r3, d9
 8007c52:	4914      	ldr	r1, [pc, #80]	; (8007ca4 <_dtoa_r+0x654>)
 8007c54:	2000      	movs	r0, #0
 8007c56:	f7f8 fb17 	bl	8000288 <__aeabi_dsub>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4640      	mov	r0, r8
 8007c60:	4649      	mov	r1, r9
 8007c62:	f7f8 ff3b 	bl	8000adc <__aeabi_dcmplt>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	f43f af2f 	beq.w	8007aca <_dtoa_r+0x47a>
 8007c6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c6e:	1e6b      	subs	r3, r5, #1
 8007c70:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c76:	2b30      	cmp	r3, #48	; 0x30
 8007c78:	d0f8      	beq.n	8007c6c <_dtoa_r+0x61c>
 8007c7a:	46bb      	mov	fp, r7
 8007c7c:	e04a      	b.n	8007d14 <_dtoa_r+0x6c4>
 8007c7e:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <_dtoa_r+0x648>)
 8007c80:	f7f8 fcba 	bl	80005f8 <__aeabi_dmul>
 8007c84:	4680      	mov	r8, r0
 8007c86:	4689      	mov	r9, r1
 8007c88:	e7bd      	b.n	8007c06 <_dtoa_r+0x5b6>
 8007c8a:	bf00      	nop
 8007c8c:	0800aea8 	.word	0x0800aea8
 8007c90:	0800ae80 	.word	0x0800ae80
 8007c94:	3ff00000 	.word	0x3ff00000
 8007c98:	40240000 	.word	0x40240000
 8007c9c:	401c0000 	.word	0x401c0000
 8007ca0:	40140000 	.word	0x40140000
 8007ca4:	3fe00000 	.word	0x3fe00000
 8007ca8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007cac:	9d00      	ldr	r5, [sp, #0]
 8007cae:	4642      	mov	r2, r8
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	f7f8 fdc9 	bl	800084c <__aeabi_ddiv>
 8007cba:	f7f8 ff4d 	bl	8000b58 <__aeabi_d2iz>
 8007cbe:	9001      	str	r0, [sp, #4]
 8007cc0:	f7f8 fc30 	bl	8000524 <__aeabi_i2d>
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	f7f8 fc96 	bl	80005f8 <__aeabi_dmul>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	f7f8 fad8 	bl	8000288 <__aeabi_dsub>
 8007cd8:	9e01      	ldr	r6, [sp, #4]
 8007cda:	9f04      	ldr	r7, [sp, #16]
 8007cdc:	3630      	adds	r6, #48	; 0x30
 8007cde:	f805 6b01 	strb.w	r6, [r5], #1
 8007ce2:	9e00      	ldr	r6, [sp, #0]
 8007ce4:	1bae      	subs	r6, r5, r6
 8007ce6:	42b7      	cmp	r7, r6
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	d134      	bne.n	8007d58 <_dtoa_r+0x708>
 8007cee:	f7f8 facd 	bl	800028c <__adddf3>
 8007cf2:	4642      	mov	r2, r8
 8007cf4:	464b      	mov	r3, r9
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	f7f8 ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 8007cfe:	b9c8      	cbnz	r0, 8007d34 <_dtoa_r+0x6e4>
 8007d00:	4642      	mov	r2, r8
 8007d02:	464b      	mov	r3, r9
 8007d04:	4630      	mov	r0, r6
 8007d06:	4639      	mov	r1, r7
 8007d08:	f7f8 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d0c:	b110      	cbz	r0, 8007d14 <_dtoa_r+0x6c4>
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	07db      	lsls	r3, r3, #31
 8007d12:	d40f      	bmi.n	8007d34 <_dtoa_r+0x6e4>
 8007d14:	4651      	mov	r1, sl
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 fbcc 	bl	80084b4 <_Bfree>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d20:	702b      	strb	r3, [r5, #0]
 8007d22:	f10b 0301 	add.w	r3, fp, #1
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f43f ace2 	beq.w	80076f4 <_dtoa_r+0xa4>
 8007d30:	601d      	str	r5, [r3, #0]
 8007d32:	e4df      	b.n	80076f4 <_dtoa_r+0xa4>
 8007d34:	465f      	mov	r7, fp
 8007d36:	462b      	mov	r3, r5
 8007d38:	461d      	mov	r5, r3
 8007d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d3e:	2a39      	cmp	r2, #57	; 0x39
 8007d40:	d106      	bne.n	8007d50 <_dtoa_r+0x700>
 8007d42:	9a00      	ldr	r2, [sp, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d1f7      	bne.n	8007d38 <_dtoa_r+0x6e8>
 8007d48:	9900      	ldr	r1, [sp, #0]
 8007d4a:	2230      	movs	r2, #48	; 0x30
 8007d4c:	3701      	adds	r7, #1
 8007d4e:	700a      	strb	r2, [r1, #0]
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	3201      	adds	r2, #1
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e790      	b.n	8007c7a <_dtoa_r+0x62a>
 8007d58:	4ba3      	ldr	r3, [pc, #652]	; (8007fe8 <_dtoa_r+0x998>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f7f8 fc4c 	bl	80005f8 <__aeabi_dmul>
 8007d60:	2200      	movs	r2, #0
 8007d62:	2300      	movs	r3, #0
 8007d64:	4606      	mov	r6, r0
 8007d66:	460f      	mov	r7, r1
 8007d68:	f7f8 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d09e      	beq.n	8007cae <_dtoa_r+0x65e>
 8007d70:	e7d0      	b.n	8007d14 <_dtoa_r+0x6c4>
 8007d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	f000 80ca 	beq.w	8007f0e <_dtoa_r+0x8be>
 8007d7a:	9a07      	ldr	r2, [sp, #28]
 8007d7c:	2a01      	cmp	r2, #1
 8007d7e:	f300 80ad 	bgt.w	8007edc <_dtoa_r+0x88c>
 8007d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	f000 80a5 	beq.w	8007ed4 <_dtoa_r+0x884>
 8007d8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d8e:	9e08      	ldr	r6, [sp, #32]
 8007d90:	9d05      	ldr	r5, [sp, #20]
 8007d92:	9a05      	ldr	r2, [sp, #20]
 8007d94:	441a      	add	r2, r3
 8007d96:	9205      	str	r2, [sp, #20]
 8007d98:	9a06      	ldr	r2, [sp, #24]
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	441a      	add	r2, r3
 8007d9e:	4620      	mov	r0, r4
 8007da0:	9206      	str	r2, [sp, #24]
 8007da2:	f000 fc87 	bl	80086b4 <__i2b>
 8007da6:	4607      	mov	r7, r0
 8007da8:	b165      	cbz	r5, 8007dc4 <_dtoa_r+0x774>
 8007daa:	9b06      	ldr	r3, [sp, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dd09      	ble.n	8007dc4 <_dtoa_r+0x774>
 8007db0:	42ab      	cmp	r3, r5
 8007db2:	9a05      	ldr	r2, [sp, #20]
 8007db4:	bfa8      	it	ge
 8007db6:	462b      	movge	r3, r5
 8007db8:	1ad2      	subs	r2, r2, r3
 8007dba:	9205      	str	r2, [sp, #20]
 8007dbc:	9a06      	ldr	r2, [sp, #24]
 8007dbe:	1aed      	subs	r5, r5, r3
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	9306      	str	r3, [sp, #24]
 8007dc4:	9b08      	ldr	r3, [sp, #32]
 8007dc6:	b1f3      	cbz	r3, 8007e06 <_dtoa_r+0x7b6>
 8007dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80a3 	beq.w	8007f16 <_dtoa_r+0x8c6>
 8007dd0:	2e00      	cmp	r6, #0
 8007dd2:	dd10      	ble.n	8007df6 <_dtoa_r+0x7a6>
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 fd2b 	bl	8008834 <__pow5mult>
 8007dde:	4652      	mov	r2, sl
 8007de0:	4601      	mov	r1, r0
 8007de2:	4607      	mov	r7, r0
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fc7b 	bl	80086e0 <__multiply>
 8007dea:	4651      	mov	r1, sl
 8007dec:	4680      	mov	r8, r0
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 fb60 	bl	80084b4 <_Bfree>
 8007df4:	46c2      	mov	sl, r8
 8007df6:	9b08      	ldr	r3, [sp, #32]
 8007df8:	1b9a      	subs	r2, r3, r6
 8007dfa:	d004      	beq.n	8007e06 <_dtoa_r+0x7b6>
 8007dfc:	4651      	mov	r1, sl
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fd18 	bl	8008834 <__pow5mult>
 8007e04:	4682      	mov	sl, r0
 8007e06:	2101      	movs	r1, #1
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 fc53 	bl	80086b4 <__i2b>
 8007e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	4606      	mov	r6, r0
 8007e14:	f340 8081 	ble.w	8007f1a <_dtoa_r+0x8ca>
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 fd09 	bl	8008834 <__pow5mult>
 8007e22:	9b07      	ldr	r3, [sp, #28]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	4606      	mov	r6, r0
 8007e28:	dd7a      	ble.n	8007f20 <_dtoa_r+0x8d0>
 8007e2a:	f04f 0800 	mov.w	r8, #0
 8007e2e:	6933      	ldr	r3, [r6, #16]
 8007e30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e34:	6918      	ldr	r0, [r3, #16]
 8007e36:	f000 fbef 	bl	8008618 <__hi0bits>
 8007e3a:	f1c0 0020 	rsb	r0, r0, #32
 8007e3e:	9b06      	ldr	r3, [sp, #24]
 8007e40:	4418      	add	r0, r3
 8007e42:	f010 001f 	ands.w	r0, r0, #31
 8007e46:	f000 8094 	beq.w	8007f72 <_dtoa_r+0x922>
 8007e4a:	f1c0 0320 	rsb	r3, r0, #32
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	f340 8085 	ble.w	8007f5e <_dtoa_r+0x90e>
 8007e54:	9b05      	ldr	r3, [sp, #20]
 8007e56:	f1c0 001c 	rsb	r0, r0, #28
 8007e5a:	4403      	add	r3, r0
 8007e5c:	9305      	str	r3, [sp, #20]
 8007e5e:	9b06      	ldr	r3, [sp, #24]
 8007e60:	4403      	add	r3, r0
 8007e62:	4405      	add	r5, r0
 8007e64:	9306      	str	r3, [sp, #24]
 8007e66:	9b05      	ldr	r3, [sp, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	dd05      	ble.n	8007e78 <_dtoa_r+0x828>
 8007e6c:	4651      	mov	r1, sl
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fd39 	bl	80088e8 <__lshift>
 8007e76:	4682      	mov	sl, r0
 8007e78:	9b06      	ldr	r3, [sp, #24]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	dd05      	ble.n	8007e8a <_dtoa_r+0x83a>
 8007e7e:	4631      	mov	r1, r6
 8007e80:	461a      	mov	r2, r3
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 fd30 	bl	80088e8 <__lshift>
 8007e88:	4606      	mov	r6, r0
 8007e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d072      	beq.n	8007f76 <_dtoa_r+0x926>
 8007e90:	4631      	mov	r1, r6
 8007e92:	4650      	mov	r0, sl
 8007e94:	f000 fd94 	bl	80089c0 <__mcmp>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	da6c      	bge.n	8007f76 <_dtoa_r+0x926>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4651      	mov	r1, sl
 8007ea0:	220a      	movs	r2, #10
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 fb28 	bl	80084f8 <__multadd>
 8007ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007eae:	4682      	mov	sl, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 81b0 	beq.w	8008216 <_dtoa_r+0xbc6>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4639      	mov	r1, r7
 8007eba:	220a      	movs	r2, #10
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fb1b 	bl	80084f8 <__multadd>
 8007ec2:	9b01      	ldr	r3, [sp, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	4607      	mov	r7, r0
 8007ec8:	f300 8096 	bgt.w	8007ff8 <_dtoa_r+0x9a8>
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	dc59      	bgt.n	8007f86 <_dtoa_r+0x936>
 8007ed2:	e091      	b.n	8007ff8 <_dtoa_r+0x9a8>
 8007ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ed6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007eda:	e758      	b.n	8007d8e <_dtoa_r+0x73e>
 8007edc:	9b04      	ldr	r3, [sp, #16]
 8007ede:	1e5e      	subs	r6, r3, #1
 8007ee0:	9b08      	ldr	r3, [sp, #32]
 8007ee2:	42b3      	cmp	r3, r6
 8007ee4:	bfbf      	itttt	lt
 8007ee6:	9b08      	ldrlt	r3, [sp, #32]
 8007ee8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007eea:	9608      	strlt	r6, [sp, #32]
 8007eec:	1af3      	sublt	r3, r6, r3
 8007eee:	bfb4      	ite	lt
 8007ef0:	18d2      	addlt	r2, r2, r3
 8007ef2:	1b9e      	subge	r6, r3, r6
 8007ef4:	9b04      	ldr	r3, [sp, #16]
 8007ef6:	bfbc      	itt	lt
 8007ef8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007efa:	2600      	movlt	r6, #0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bfb7      	itett	lt
 8007f00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007f04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007f08:	1a9d      	sublt	r5, r3, r2
 8007f0a:	2300      	movlt	r3, #0
 8007f0c:	e741      	b.n	8007d92 <_dtoa_r+0x742>
 8007f0e:	9e08      	ldr	r6, [sp, #32]
 8007f10:	9d05      	ldr	r5, [sp, #20]
 8007f12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f14:	e748      	b.n	8007da8 <_dtoa_r+0x758>
 8007f16:	9a08      	ldr	r2, [sp, #32]
 8007f18:	e770      	b.n	8007dfc <_dtoa_r+0x7ac>
 8007f1a:	9b07      	ldr	r3, [sp, #28]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	dc19      	bgt.n	8007f54 <_dtoa_r+0x904>
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	b9bb      	cbnz	r3, 8007f54 <_dtoa_r+0x904>
 8007f24:	9b03      	ldr	r3, [sp, #12]
 8007f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f2a:	b99b      	cbnz	r3, 8007f54 <_dtoa_r+0x904>
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f32:	0d1b      	lsrs	r3, r3, #20
 8007f34:	051b      	lsls	r3, r3, #20
 8007f36:	b183      	cbz	r3, 8007f5a <_dtoa_r+0x90a>
 8007f38:	9b05      	ldr	r3, [sp, #20]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	9305      	str	r3, [sp, #20]
 8007f3e:	9b06      	ldr	r3, [sp, #24]
 8007f40:	3301      	adds	r3, #1
 8007f42:	9306      	str	r3, [sp, #24]
 8007f44:	f04f 0801 	mov.w	r8, #1
 8007f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f47f af6f 	bne.w	8007e2e <_dtoa_r+0x7de>
 8007f50:	2001      	movs	r0, #1
 8007f52:	e774      	b.n	8007e3e <_dtoa_r+0x7ee>
 8007f54:	f04f 0800 	mov.w	r8, #0
 8007f58:	e7f6      	b.n	8007f48 <_dtoa_r+0x8f8>
 8007f5a:	4698      	mov	r8, r3
 8007f5c:	e7f4      	b.n	8007f48 <_dtoa_r+0x8f8>
 8007f5e:	d082      	beq.n	8007e66 <_dtoa_r+0x816>
 8007f60:	9a05      	ldr	r2, [sp, #20]
 8007f62:	331c      	adds	r3, #28
 8007f64:	441a      	add	r2, r3
 8007f66:	9205      	str	r2, [sp, #20]
 8007f68:	9a06      	ldr	r2, [sp, #24]
 8007f6a:	441a      	add	r2, r3
 8007f6c:	441d      	add	r5, r3
 8007f6e:	9206      	str	r2, [sp, #24]
 8007f70:	e779      	b.n	8007e66 <_dtoa_r+0x816>
 8007f72:	4603      	mov	r3, r0
 8007f74:	e7f4      	b.n	8007f60 <_dtoa_r+0x910>
 8007f76:	9b04      	ldr	r3, [sp, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	dc37      	bgt.n	8007fec <_dtoa_r+0x99c>
 8007f7c:	9b07      	ldr	r3, [sp, #28]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	dd34      	ble.n	8007fec <_dtoa_r+0x99c>
 8007f82:	9b04      	ldr	r3, [sp, #16]
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	9b01      	ldr	r3, [sp, #4]
 8007f88:	b963      	cbnz	r3, 8007fa4 <_dtoa_r+0x954>
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	2205      	movs	r2, #5
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 fab2 	bl	80084f8 <__multadd>
 8007f94:	4601      	mov	r1, r0
 8007f96:	4606      	mov	r6, r0
 8007f98:	4650      	mov	r0, sl
 8007f9a:	f000 fd11 	bl	80089c0 <__mcmp>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f73f adbb 	bgt.w	8007b1a <_dtoa_r+0x4ca>
 8007fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa6:	9d00      	ldr	r5, [sp, #0]
 8007fa8:	ea6f 0b03 	mvn.w	fp, r3
 8007fac:	f04f 0800 	mov.w	r8, #0
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fa7e 	bl	80084b4 <_Bfree>
 8007fb8:	2f00      	cmp	r7, #0
 8007fba:	f43f aeab 	beq.w	8007d14 <_dtoa_r+0x6c4>
 8007fbe:	f1b8 0f00 	cmp.w	r8, #0
 8007fc2:	d005      	beq.n	8007fd0 <_dtoa_r+0x980>
 8007fc4:	45b8      	cmp	r8, r7
 8007fc6:	d003      	beq.n	8007fd0 <_dtoa_r+0x980>
 8007fc8:	4641      	mov	r1, r8
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 fa72 	bl	80084b4 <_Bfree>
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fa6e 	bl	80084b4 <_Bfree>
 8007fd8:	e69c      	b.n	8007d14 <_dtoa_r+0x6c4>
 8007fda:	2600      	movs	r6, #0
 8007fdc:	4637      	mov	r7, r6
 8007fde:	e7e1      	b.n	8007fa4 <_dtoa_r+0x954>
 8007fe0:	46bb      	mov	fp, r7
 8007fe2:	4637      	mov	r7, r6
 8007fe4:	e599      	b.n	8007b1a <_dtoa_r+0x4ca>
 8007fe6:	bf00      	nop
 8007fe8:	40240000 	.word	0x40240000
 8007fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 80c8 	beq.w	8008184 <_dtoa_r+0xb34>
 8007ff4:	9b04      	ldr	r3, [sp, #16]
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	2d00      	cmp	r5, #0
 8007ffa:	dd05      	ble.n	8008008 <_dtoa_r+0x9b8>
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	462a      	mov	r2, r5
 8008000:	4620      	mov	r0, r4
 8008002:	f000 fc71 	bl	80088e8 <__lshift>
 8008006:	4607      	mov	r7, r0
 8008008:	f1b8 0f00 	cmp.w	r8, #0
 800800c:	d05b      	beq.n	80080c6 <_dtoa_r+0xa76>
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	4620      	mov	r0, r4
 8008012:	f000 fa0f 	bl	8008434 <_Balloc>
 8008016:	4605      	mov	r5, r0
 8008018:	b928      	cbnz	r0, 8008026 <_dtoa_r+0x9d6>
 800801a:	4b83      	ldr	r3, [pc, #524]	; (8008228 <_dtoa_r+0xbd8>)
 800801c:	4602      	mov	r2, r0
 800801e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008022:	f7ff bb2e 	b.w	8007682 <_dtoa_r+0x32>
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	3202      	adds	r2, #2
 800802a:	0092      	lsls	r2, r2, #2
 800802c:	f107 010c 	add.w	r1, r7, #12
 8008030:	300c      	adds	r0, #12
 8008032:	f001 ff01 	bl	8009e38 <memcpy>
 8008036:	2201      	movs	r2, #1
 8008038:	4629      	mov	r1, r5
 800803a:	4620      	mov	r0, r4
 800803c:	f000 fc54 	bl	80088e8 <__lshift>
 8008040:	9b00      	ldr	r3, [sp, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800804a:	4413      	add	r3, r2
 800804c:	9308      	str	r3, [sp, #32]
 800804e:	9b02      	ldr	r3, [sp, #8]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	46b8      	mov	r8, r7
 8008056:	9306      	str	r3, [sp, #24]
 8008058:	4607      	mov	r7, r0
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	4631      	mov	r1, r6
 800805e:	3b01      	subs	r3, #1
 8008060:	4650      	mov	r0, sl
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	f7ff fa6a 	bl	800753c <quorem>
 8008068:	4641      	mov	r1, r8
 800806a:	9002      	str	r0, [sp, #8]
 800806c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008070:	4650      	mov	r0, sl
 8008072:	f000 fca5 	bl	80089c0 <__mcmp>
 8008076:	463a      	mov	r2, r7
 8008078:	9005      	str	r0, [sp, #20]
 800807a:	4631      	mov	r1, r6
 800807c:	4620      	mov	r0, r4
 800807e:	f000 fcbb 	bl	80089f8 <__mdiff>
 8008082:	68c2      	ldr	r2, [r0, #12]
 8008084:	4605      	mov	r5, r0
 8008086:	bb02      	cbnz	r2, 80080ca <_dtoa_r+0xa7a>
 8008088:	4601      	mov	r1, r0
 800808a:	4650      	mov	r0, sl
 800808c:	f000 fc98 	bl	80089c0 <__mcmp>
 8008090:	4602      	mov	r2, r0
 8008092:	4629      	mov	r1, r5
 8008094:	4620      	mov	r0, r4
 8008096:	9209      	str	r2, [sp, #36]	; 0x24
 8008098:	f000 fa0c 	bl	80084b4 <_Bfree>
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a0:	9d04      	ldr	r5, [sp, #16]
 80080a2:	ea43 0102 	orr.w	r1, r3, r2
 80080a6:	9b06      	ldr	r3, [sp, #24]
 80080a8:	4319      	orrs	r1, r3
 80080aa:	d110      	bne.n	80080ce <_dtoa_r+0xa7e>
 80080ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080b0:	d029      	beq.n	8008106 <_dtoa_r+0xab6>
 80080b2:	9b05      	ldr	r3, [sp, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dd02      	ble.n	80080be <_dtoa_r+0xa6e>
 80080b8:	9b02      	ldr	r3, [sp, #8]
 80080ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	f883 9000 	strb.w	r9, [r3]
 80080c4:	e774      	b.n	8007fb0 <_dtoa_r+0x960>
 80080c6:	4638      	mov	r0, r7
 80080c8:	e7ba      	b.n	8008040 <_dtoa_r+0x9f0>
 80080ca:	2201      	movs	r2, #1
 80080cc:	e7e1      	b.n	8008092 <_dtoa_r+0xa42>
 80080ce:	9b05      	ldr	r3, [sp, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	db04      	blt.n	80080de <_dtoa_r+0xa8e>
 80080d4:	9907      	ldr	r1, [sp, #28]
 80080d6:	430b      	orrs	r3, r1
 80080d8:	9906      	ldr	r1, [sp, #24]
 80080da:	430b      	orrs	r3, r1
 80080dc:	d120      	bne.n	8008120 <_dtoa_r+0xad0>
 80080de:	2a00      	cmp	r2, #0
 80080e0:	dded      	ble.n	80080be <_dtoa_r+0xa6e>
 80080e2:	4651      	mov	r1, sl
 80080e4:	2201      	movs	r2, #1
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 fbfe 	bl	80088e8 <__lshift>
 80080ec:	4631      	mov	r1, r6
 80080ee:	4682      	mov	sl, r0
 80080f0:	f000 fc66 	bl	80089c0 <__mcmp>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	dc03      	bgt.n	8008100 <_dtoa_r+0xab0>
 80080f8:	d1e1      	bne.n	80080be <_dtoa_r+0xa6e>
 80080fa:	f019 0f01 	tst.w	r9, #1
 80080fe:	d0de      	beq.n	80080be <_dtoa_r+0xa6e>
 8008100:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008104:	d1d8      	bne.n	80080b8 <_dtoa_r+0xa68>
 8008106:	9a01      	ldr	r2, [sp, #4]
 8008108:	2339      	movs	r3, #57	; 0x39
 800810a:	7013      	strb	r3, [r2, #0]
 800810c:	462b      	mov	r3, r5
 800810e:	461d      	mov	r5, r3
 8008110:	3b01      	subs	r3, #1
 8008112:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008116:	2a39      	cmp	r2, #57	; 0x39
 8008118:	d06c      	beq.n	80081f4 <_dtoa_r+0xba4>
 800811a:	3201      	adds	r2, #1
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	e747      	b.n	8007fb0 <_dtoa_r+0x960>
 8008120:	2a00      	cmp	r2, #0
 8008122:	dd07      	ble.n	8008134 <_dtoa_r+0xae4>
 8008124:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008128:	d0ed      	beq.n	8008106 <_dtoa_r+0xab6>
 800812a:	9a01      	ldr	r2, [sp, #4]
 800812c:	f109 0301 	add.w	r3, r9, #1
 8008130:	7013      	strb	r3, [r2, #0]
 8008132:	e73d      	b.n	8007fb0 <_dtoa_r+0x960>
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	9a08      	ldr	r2, [sp, #32]
 8008138:	f803 9c01 	strb.w	r9, [r3, #-1]
 800813c:	4293      	cmp	r3, r2
 800813e:	d043      	beq.n	80081c8 <_dtoa_r+0xb78>
 8008140:	4651      	mov	r1, sl
 8008142:	2300      	movs	r3, #0
 8008144:	220a      	movs	r2, #10
 8008146:	4620      	mov	r0, r4
 8008148:	f000 f9d6 	bl	80084f8 <__multadd>
 800814c:	45b8      	cmp	r8, r7
 800814e:	4682      	mov	sl, r0
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	f04f 020a 	mov.w	r2, #10
 8008158:	4641      	mov	r1, r8
 800815a:	4620      	mov	r0, r4
 800815c:	d107      	bne.n	800816e <_dtoa_r+0xb1e>
 800815e:	f000 f9cb 	bl	80084f8 <__multadd>
 8008162:	4680      	mov	r8, r0
 8008164:	4607      	mov	r7, r0
 8008166:	9b04      	ldr	r3, [sp, #16]
 8008168:	3301      	adds	r3, #1
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	e775      	b.n	800805a <_dtoa_r+0xa0a>
 800816e:	f000 f9c3 	bl	80084f8 <__multadd>
 8008172:	4639      	mov	r1, r7
 8008174:	4680      	mov	r8, r0
 8008176:	2300      	movs	r3, #0
 8008178:	220a      	movs	r2, #10
 800817a:	4620      	mov	r0, r4
 800817c:	f000 f9bc 	bl	80084f8 <__multadd>
 8008180:	4607      	mov	r7, r0
 8008182:	e7f0      	b.n	8008166 <_dtoa_r+0xb16>
 8008184:	9b04      	ldr	r3, [sp, #16]
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	9d00      	ldr	r5, [sp, #0]
 800818a:	4631      	mov	r1, r6
 800818c:	4650      	mov	r0, sl
 800818e:	f7ff f9d5 	bl	800753c <quorem>
 8008192:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008196:	9b00      	ldr	r3, [sp, #0]
 8008198:	f805 9b01 	strb.w	r9, [r5], #1
 800819c:	1aea      	subs	r2, r5, r3
 800819e:	9b01      	ldr	r3, [sp, #4]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	dd07      	ble.n	80081b4 <_dtoa_r+0xb64>
 80081a4:	4651      	mov	r1, sl
 80081a6:	2300      	movs	r3, #0
 80081a8:	220a      	movs	r2, #10
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 f9a4 	bl	80084f8 <__multadd>
 80081b0:	4682      	mov	sl, r0
 80081b2:	e7ea      	b.n	800818a <_dtoa_r+0xb3a>
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfc8      	it	gt
 80081ba:	461d      	movgt	r5, r3
 80081bc:	9b00      	ldr	r3, [sp, #0]
 80081be:	bfd8      	it	le
 80081c0:	2501      	movle	r5, #1
 80081c2:	441d      	add	r5, r3
 80081c4:	f04f 0800 	mov.w	r8, #0
 80081c8:	4651      	mov	r1, sl
 80081ca:	2201      	movs	r2, #1
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 fb8b 	bl	80088e8 <__lshift>
 80081d2:	4631      	mov	r1, r6
 80081d4:	4682      	mov	sl, r0
 80081d6:	f000 fbf3 	bl	80089c0 <__mcmp>
 80081da:	2800      	cmp	r0, #0
 80081dc:	dc96      	bgt.n	800810c <_dtoa_r+0xabc>
 80081de:	d102      	bne.n	80081e6 <_dtoa_r+0xb96>
 80081e0:	f019 0f01 	tst.w	r9, #1
 80081e4:	d192      	bne.n	800810c <_dtoa_r+0xabc>
 80081e6:	462b      	mov	r3, r5
 80081e8:	461d      	mov	r5, r3
 80081ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081ee:	2a30      	cmp	r2, #48	; 0x30
 80081f0:	d0fa      	beq.n	80081e8 <_dtoa_r+0xb98>
 80081f2:	e6dd      	b.n	8007fb0 <_dtoa_r+0x960>
 80081f4:	9a00      	ldr	r2, [sp, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d189      	bne.n	800810e <_dtoa_r+0xabe>
 80081fa:	f10b 0b01 	add.w	fp, fp, #1
 80081fe:	2331      	movs	r3, #49	; 0x31
 8008200:	e796      	b.n	8008130 <_dtoa_r+0xae0>
 8008202:	4b0a      	ldr	r3, [pc, #40]	; (800822c <_dtoa_r+0xbdc>)
 8008204:	f7ff ba99 	b.w	800773a <_dtoa_r+0xea>
 8008208:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800820a:	2b00      	cmp	r3, #0
 800820c:	f47f aa6d 	bne.w	80076ea <_dtoa_r+0x9a>
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <_dtoa_r+0xbe0>)
 8008212:	f7ff ba92 	b.w	800773a <_dtoa_r+0xea>
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	dcb5      	bgt.n	8008188 <_dtoa_r+0xb38>
 800821c:	9b07      	ldr	r3, [sp, #28]
 800821e:	2b02      	cmp	r3, #2
 8008220:	f73f aeb1 	bgt.w	8007f86 <_dtoa_r+0x936>
 8008224:	e7b0      	b.n	8008188 <_dtoa_r+0xb38>
 8008226:	bf00      	nop
 8008228:	0800ae16 	.word	0x0800ae16
 800822c:	0800ad71 	.word	0x0800ad71
 8008230:	0800ad9a 	.word	0x0800ad9a

08008234 <_free_r>:
 8008234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008236:	2900      	cmp	r1, #0
 8008238:	d044      	beq.n	80082c4 <_free_r+0x90>
 800823a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823e:	9001      	str	r0, [sp, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	f1a1 0404 	sub.w	r4, r1, #4
 8008246:	bfb8      	it	lt
 8008248:	18e4      	addlt	r4, r4, r3
 800824a:	f000 f8e7 	bl	800841c <__malloc_lock>
 800824e:	4a1e      	ldr	r2, [pc, #120]	; (80082c8 <_free_r+0x94>)
 8008250:	9801      	ldr	r0, [sp, #4]
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	b933      	cbnz	r3, 8008264 <_free_r+0x30>
 8008256:	6063      	str	r3, [r4, #4]
 8008258:	6014      	str	r4, [r2, #0]
 800825a:	b003      	add	sp, #12
 800825c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008260:	f000 b8e2 	b.w	8008428 <__malloc_unlock>
 8008264:	42a3      	cmp	r3, r4
 8008266:	d908      	bls.n	800827a <_free_r+0x46>
 8008268:	6825      	ldr	r5, [r4, #0]
 800826a:	1961      	adds	r1, r4, r5
 800826c:	428b      	cmp	r3, r1
 800826e:	bf01      	itttt	eq
 8008270:	6819      	ldreq	r1, [r3, #0]
 8008272:	685b      	ldreq	r3, [r3, #4]
 8008274:	1949      	addeq	r1, r1, r5
 8008276:	6021      	streq	r1, [r4, #0]
 8008278:	e7ed      	b.n	8008256 <_free_r+0x22>
 800827a:	461a      	mov	r2, r3
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	b10b      	cbz	r3, 8008284 <_free_r+0x50>
 8008280:	42a3      	cmp	r3, r4
 8008282:	d9fa      	bls.n	800827a <_free_r+0x46>
 8008284:	6811      	ldr	r1, [r2, #0]
 8008286:	1855      	adds	r5, r2, r1
 8008288:	42a5      	cmp	r5, r4
 800828a:	d10b      	bne.n	80082a4 <_free_r+0x70>
 800828c:	6824      	ldr	r4, [r4, #0]
 800828e:	4421      	add	r1, r4
 8008290:	1854      	adds	r4, r2, r1
 8008292:	42a3      	cmp	r3, r4
 8008294:	6011      	str	r1, [r2, #0]
 8008296:	d1e0      	bne.n	800825a <_free_r+0x26>
 8008298:	681c      	ldr	r4, [r3, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	6053      	str	r3, [r2, #4]
 800829e:	440c      	add	r4, r1
 80082a0:	6014      	str	r4, [r2, #0]
 80082a2:	e7da      	b.n	800825a <_free_r+0x26>
 80082a4:	d902      	bls.n	80082ac <_free_r+0x78>
 80082a6:	230c      	movs	r3, #12
 80082a8:	6003      	str	r3, [r0, #0]
 80082aa:	e7d6      	b.n	800825a <_free_r+0x26>
 80082ac:	6825      	ldr	r5, [r4, #0]
 80082ae:	1961      	adds	r1, r4, r5
 80082b0:	428b      	cmp	r3, r1
 80082b2:	bf04      	itt	eq
 80082b4:	6819      	ldreq	r1, [r3, #0]
 80082b6:	685b      	ldreq	r3, [r3, #4]
 80082b8:	6063      	str	r3, [r4, #4]
 80082ba:	bf04      	itt	eq
 80082bc:	1949      	addeq	r1, r1, r5
 80082be:	6021      	streq	r1, [r4, #0]
 80082c0:	6054      	str	r4, [r2, #4]
 80082c2:	e7ca      	b.n	800825a <_free_r+0x26>
 80082c4:	b003      	add	sp, #12
 80082c6:	bd30      	pop	{r4, r5, pc}
 80082c8:	200005c8 	.word	0x200005c8

080082cc <malloc>:
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <malloc+0xc>)
 80082ce:	4601      	mov	r1, r0
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f000 b823 	b.w	800831c <_malloc_r>
 80082d6:	bf00      	nop
 80082d8:	20000078 	.word	0x20000078

080082dc <sbrk_aligned>:
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	4e0e      	ldr	r6, [pc, #56]	; (8008318 <sbrk_aligned+0x3c>)
 80082e0:	460c      	mov	r4, r1
 80082e2:	6831      	ldr	r1, [r6, #0]
 80082e4:	4605      	mov	r5, r0
 80082e6:	b911      	cbnz	r1, 80082ee <sbrk_aligned+0x12>
 80082e8:	f001 fd96 	bl	8009e18 <_sbrk_r>
 80082ec:	6030      	str	r0, [r6, #0]
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	f001 fd91 	bl	8009e18 <_sbrk_r>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	d00a      	beq.n	8008310 <sbrk_aligned+0x34>
 80082fa:	1cc4      	adds	r4, r0, #3
 80082fc:	f024 0403 	bic.w	r4, r4, #3
 8008300:	42a0      	cmp	r0, r4
 8008302:	d007      	beq.n	8008314 <sbrk_aligned+0x38>
 8008304:	1a21      	subs	r1, r4, r0
 8008306:	4628      	mov	r0, r5
 8008308:	f001 fd86 	bl	8009e18 <_sbrk_r>
 800830c:	3001      	adds	r0, #1
 800830e:	d101      	bne.n	8008314 <sbrk_aligned+0x38>
 8008310:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008314:	4620      	mov	r0, r4
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	200005cc 	.word	0x200005cc

0800831c <_malloc_r>:
 800831c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008320:	1ccd      	adds	r5, r1, #3
 8008322:	f025 0503 	bic.w	r5, r5, #3
 8008326:	3508      	adds	r5, #8
 8008328:	2d0c      	cmp	r5, #12
 800832a:	bf38      	it	cc
 800832c:	250c      	movcc	r5, #12
 800832e:	2d00      	cmp	r5, #0
 8008330:	4607      	mov	r7, r0
 8008332:	db01      	blt.n	8008338 <_malloc_r+0x1c>
 8008334:	42a9      	cmp	r1, r5
 8008336:	d905      	bls.n	8008344 <_malloc_r+0x28>
 8008338:	230c      	movs	r3, #12
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	2600      	movs	r6, #0
 800833e:	4630      	mov	r0, r6
 8008340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008344:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008418 <_malloc_r+0xfc>
 8008348:	f000 f868 	bl	800841c <__malloc_lock>
 800834c:	f8d8 3000 	ldr.w	r3, [r8]
 8008350:	461c      	mov	r4, r3
 8008352:	bb5c      	cbnz	r4, 80083ac <_malloc_r+0x90>
 8008354:	4629      	mov	r1, r5
 8008356:	4638      	mov	r0, r7
 8008358:	f7ff ffc0 	bl	80082dc <sbrk_aligned>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	4604      	mov	r4, r0
 8008360:	d155      	bne.n	800840e <_malloc_r+0xf2>
 8008362:	f8d8 4000 	ldr.w	r4, [r8]
 8008366:	4626      	mov	r6, r4
 8008368:	2e00      	cmp	r6, #0
 800836a:	d145      	bne.n	80083f8 <_malloc_r+0xdc>
 800836c:	2c00      	cmp	r4, #0
 800836e:	d048      	beq.n	8008402 <_malloc_r+0xe6>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	4631      	mov	r1, r6
 8008374:	4638      	mov	r0, r7
 8008376:	eb04 0903 	add.w	r9, r4, r3
 800837a:	f001 fd4d 	bl	8009e18 <_sbrk_r>
 800837e:	4581      	cmp	r9, r0
 8008380:	d13f      	bne.n	8008402 <_malloc_r+0xe6>
 8008382:	6821      	ldr	r1, [r4, #0]
 8008384:	1a6d      	subs	r5, r5, r1
 8008386:	4629      	mov	r1, r5
 8008388:	4638      	mov	r0, r7
 800838a:	f7ff ffa7 	bl	80082dc <sbrk_aligned>
 800838e:	3001      	adds	r0, #1
 8008390:	d037      	beq.n	8008402 <_malloc_r+0xe6>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	442b      	add	r3, r5
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	f8d8 3000 	ldr.w	r3, [r8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d038      	beq.n	8008412 <_malloc_r+0xf6>
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	42a2      	cmp	r2, r4
 80083a4:	d12b      	bne.n	80083fe <_malloc_r+0xe2>
 80083a6:	2200      	movs	r2, #0
 80083a8:	605a      	str	r2, [r3, #4]
 80083aa:	e00f      	b.n	80083cc <_malloc_r+0xb0>
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	1b52      	subs	r2, r2, r5
 80083b0:	d41f      	bmi.n	80083f2 <_malloc_r+0xd6>
 80083b2:	2a0b      	cmp	r2, #11
 80083b4:	d917      	bls.n	80083e6 <_malloc_r+0xca>
 80083b6:	1961      	adds	r1, r4, r5
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	6025      	str	r5, [r4, #0]
 80083bc:	bf18      	it	ne
 80083be:	6059      	strne	r1, [r3, #4]
 80083c0:	6863      	ldr	r3, [r4, #4]
 80083c2:	bf08      	it	eq
 80083c4:	f8c8 1000 	streq.w	r1, [r8]
 80083c8:	5162      	str	r2, [r4, r5]
 80083ca:	604b      	str	r3, [r1, #4]
 80083cc:	4638      	mov	r0, r7
 80083ce:	f104 060b 	add.w	r6, r4, #11
 80083d2:	f000 f829 	bl	8008428 <__malloc_unlock>
 80083d6:	f026 0607 	bic.w	r6, r6, #7
 80083da:	1d23      	adds	r3, r4, #4
 80083dc:	1af2      	subs	r2, r6, r3
 80083de:	d0ae      	beq.n	800833e <_malloc_r+0x22>
 80083e0:	1b9b      	subs	r3, r3, r6
 80083e2:	50a3      	str	r3, [r4, r2]
 80083e4:	e7ab      	b.n	800833e <_malloc_r+0x22>
 80083e6:	42a3      	cmp	r3, r4
 80083e8:	6862      	ldr	r2, [r4, #4]
 80083ea:	d1dd      	bne.n	80083a8 <_malloc_r+0x8c>
 80083ec:	f8c8 2000 	str.w	r2, [r8]
 80083f0:	e7ec      	b.n	80083cc <_malloc_r+0xb0>
 80083f2:	4623      	mov	r3, r4
 80083f4:	6864      	ldr	r4, [r4, #4]
 80083f6:	e7ac      	b.n	8008352 <_malloc_r+0x36>
 80083f8:	4634      	mov	r4, r6
 80083fa:	6876      	ldr	r6, [r6, #4]
 80083fc:	e7b4      	b.n	8008368 <_malloc_r+0x4c>
 80083fe:	4613      	mov	r3, r2
 8008400:	e7cc      	b.n	800839c <_malloc_r+0x80>
 8008402:	230c      	movs	r3, #12
 8008404:	603b      	str	r3, [r7, #0]
 8008406:	4638      	mov	r0, r7
 8008408:	f000 f80e 	bl	8008428 <__malloc_unlock>
 800840c:	e797      	b.n	800833e <_malloc_r+0x22>
 800840e:	6025      	str	r5, [r4, #0]
 8008410:	e7dc      	b.n	80083cc <_malloc_r+0xb0>
 8008412:	605b      	str	r3, [r3, #4]
 8008414:	deff      	udf	#255	; 0xff
 8008416:	bf00      	nop
 8008418:	200005c8 	.word	0x200005c8

0800841c <__malloc_lock>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__malloc_lock+0x8>)
 800841e:	f7ff b884 	b.w	800752a <__retarget_lock_acquire_recursive>
 8008422:	bf00      	nop
 8008424:	200005c4 	.word	0x200005c4

08008428 <__malloc_unlock>:
 8008428:	4801      	ldr	r0, [pc, #4]	; (8008430 <__malloc_unlock+0x8>)
 800842a:	f7ff b87f 	b.w	800752c <__retarget_lock_release_recursive>
 800842e:	bf00      	nop
 8008430:	200005c4 	.word	0x200005c4

08008434 <_Balloc>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	69c6      	ldr	r6, [r0, #28]
 8008438:	4604      	mov	r4, r0
 800843a:	460d      	mov	r5, r1
 800843c:	b976      	cbnz	r6, 800845c <_Balloc+0x28>
 800843e:	2010      	movs	r0, #16
 8008440:	f7ff ff44 	bl	80082cc <malloc>
 8008444:	4602      	mov	r2, r0
 8008446:	61e0      	str	r0, [r4, #28]
 8008448:	b920      	cbnz	r0, 8008454 <_Balloc+0x20>
 800844a:	4b18      	ldr	r3, [pc, #96]	; (80084ac <_Balloc+0x78>)
 800844c:	4818      	ldr	r0, [pc, #96]	; (80084b0 <_Balloc+0x7c>)
 800844e:	216b      	movs	r1, #107	; 0x6b
 8008450:	f001 fd0a 	bl	8009e68 <__assert_func>
 8008454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008458:	6006      	str	r6, [r0, #0]
 800845a:	60c6      	str	r6, [r0, #12]
 800845c:	69e6      	ldr	r6, [r4, #28]
 800845e:	68f3      	ldr	r3, [r6, #12]
 8008460:	b183      	cbz	r3, 8008484 <_Balloc+0x50>
 8008462:	69e3      	ldr	r3, [r4, #28]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800846a:	b9b8      	cbnz	r0, 800849c <_Balloc+0x68>
 800846c:	2101      	movs	r1, #1
 800846e:	fa01 f605 	lsl.w	r6, r1, r5
 8008472:	1d72      	adds	r2, r6, #5
 8008474:	0092      	lsls	r2, r2, #2
 8008476:	4620      	mov	r0, r4
 8008478:	f001 fd14 	bl	8009ea4 <_calloc_r>
 800847c:	b160      	cbz	r0, 8008498 <_Balloc+0x64>
 800847e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008482:	e00e      	b.n	80084a2 <_Balloc+0x6e>
 8008484:	2221      	movs	r2, #33	; 0x21
 8008486:	2104      	movs	r1, #4
 8008488:	4620      	mov	r0, r4
 800848a:	f001 fd0b 	bl	8009ea4 <_calloc_r>
 800848e:	69e3      	ldr	r3, [r4, #28]
 8008490:	60f0      	str	r0, [r6, #12]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e4      	bne.n	8008462 <_Balloc+0x2e>
 8008498:	2000      	movs	r0, #0
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	6802      	ldr	r2, [r0, #0]
 800849e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084a2:	2300      	movs	r3, #0
 80084a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084a8:	e7f7      	b.n	800849a <_Balloc+0x66>
 80084aa:	bf00      	nop
 80084ac:	0800ada7 	.word	0x0800ada7
 80084b0:	0800ae27 	.word	0x0800ae27

080084b4 <_Bfree>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	69c6      	ldr	r6, [r0, #28]
 80084b8:	4605      	mov	r5, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	b976      	cbnz	r6, 80084dc <_Bfree+0x28>
 80084be:	2010      	movs	r0, #16
 80084c0:	f7ff ff04 	bl	80082cc <malloc>
 80084c4:	4602      	mov	r2, r0
 80084c6:	61e8      	str	r0, [r5, #28]
 80084c8:	b920      	cbnz	r0, 80084d4 <_Bfree+0x20>
 80084ca:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <_Bfree+0x3c>)
 80084cc:	4809      	ldr	r0, [pc, #36]	; (80084f4 <_Bfree+0x40>)
 80084ce:	218f      	movs	r1, #143	; 0x8f
 80084d0:	f001 fcca 	bl	8009e68 <__assert_func>
 80084d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084d8:	6006      	str	r6, [r0, #0]
 80084da:	60c6      	str	r6, [r0, #12]
 80084dc:	b13c      	cbz	r4, 80084ee <_Bfree+0x3a>
 80084de:	69eb      	ldr	r3, [r5, #28]
 80084e0:	6862      	ldr	r2, [r4, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084e8:	6021      	str	r1, [r4, #0]
 80084ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	0800ada7 	.word	0x0800ada7
 80084f4:	0800ae27 	.word	0x0800ae27

080084f8 <__multadd>:
 80084f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084fc:	690d      	ldr	r5, [r1, #16]
 80084fe:	4607      	mov	r7, r0
 8008500:	460c      	mov	r4, r1
 8008502:	461e      	mov	r6, r3
 8008504:	f101 0c14 	add.w	ip, r1, #20
 8008508:	2000      	movs	r0, #0
 800850a:	f8dc 3000 	ldr.w	r3, [ip]
 800850e:	b299      	uxth	r1, r3
 8008510:	fb02 6101 	mla	r1, r2, r1, r6
 8008514:	0c1e      	lsrs	r6, r3, #16
 8008516:	0c0b      	lsrs	r3, r1, #16
 8008518:	fb02 3306 	mla	r3, r2, r6, r3
 800851c:	b289      	uxth	r1, r1
 800851e:	3001      	adds	r0, #1
 8008520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008524:	4285      	cmp	r5, r0
 8008526:	f84c 1b04 	str.w	r1, [ip], #4
 800852a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800852e:	dcec      	bgt.n	800850a <__multadd+0x12>
 8008530:	b30e      	cbz	r6, 8008576 <__multadd+0x7e>
 8008532:	68a3      	ldr	r3, [r4, #8]
 8008534:	42ab      	cmp	r3, r5
 8008536:	dc19      	bgt.n	800856c <__multadd+0x74>
 8008538:	6861      	ldr	r1, [r4, #4]
 800853a:	4638      	mov	r0, r7
 800853c:	3101      	adds	r1, #1
 800853e:	f7ff ff79 	bl	8008434 <_Balloc>
 8008542:	4680      	mov	r8, r0
 8008544:	b928      	cbnz	r0, 8008552 <__multadd+0x5a>
 8008546:	4602      	mov	r2, r0
 8008548:	4b0c      	ldr	r3, [pc, #48]	; (800857c <__multadd+0x84>)
 800854a:	480d      	ldr	r0, [pc, #52]	; (8008580 <__multadd+0x88>)
 800854c:	21ba      	movs	r1, #186	; 0xba
 800854e:	f001 fc8b 	bl	8009e68 <__assert_func>
 8008552:	6922      	ldr	r2, [r4, #16]
 8008554:	3202      	adds	r2, #2
 8008556:	f104 010c 	add.w	r1, r4, #12
 800855a:	0092      	lsls	r2, r2, #2
 800855c:	300c      	adds	r0, #12
 800855e:	f001 fc6b 	bl	8009e38 <memcpy>
 8008562:	4621      	mov	r1, r4
 8008564:	4638      	mov	r0, r7
 8008566:	f7ff ffa5 	bl	80084b4 <_Bfree>
 800856a:	4644      	mov	r4, r8
 800856c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008570:	3501      	adds	r5, #1
 8008572:	615e      	str	r6, [r3, #20]
 8008574:	6125      	str	r5, [r4, #16]
 8008576:	4620      	mov	r0, r4
 8008578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857c:	0800ae16 	.word	0x0800ae16
 8008580:	0800ae27 	.word	0x0800ae27

08008584 <__s2b>:
 8008584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008588:	460c      	mov	r4, r1
 800858a:	4615      	mov	r5, r2
 800858c:	461f      	mov	r7, r3
 800858e:	2209      	movs	r2, #9
 8008590:	3308      	adds	r3, #8
 8008592:	4606      	mov	r6, r0
 8008594:	fb93 f3f2 	sdiv	r3, r3, r2
 8008598:	2100      	movs	r1, #0
 800859a:	2201      	movs	r2, #1
 800859c:	429a      	cmp	r2, r3
 800859e:	db09      	blt.n	80085b4 <__s2b+0x30>
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7ff ff47 	bl	8008434 <_Balloc>
 80085a6:	b940      	cbnz	r0, 80085ba <__s2b+0x36>
 80085a8:	4602      	mov	r2, r0
 80085aa:	4b19      	ldr	r3, [pc, #100]	; (8008610 <__s2b+0x8c>)
 80085ac:	4819      	ldr	r0, [pc, #100]	; (8008614 <__s2b+0x90>)
 80085ae:	21d3      	movs	r1, #211	; 0xd3
 80085b0:	f001 fc5a 	bl	8009e68 <__assert_func>
 80085b4:	0052      	lsls	r2, r2, #1
 80085b6:	3101      	adds	r1, #1
 80085b8:	e7f0      	b.n	800859c <__s2b+0x18>
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	6143      	str	r3, [r0, #20]
 80085be:	2d09      	cmp	r5, #9
 80085c0:	f04f 0301 	mov.w	r3, #1
 80085c4:	6103      	str	r3, [r0, #16]
 80085c6:	dd16      	ble.n	80085f6 <__s2b+0x72>
 80085c8:	f104 0909 	add.w	r9, r4, #9
 80085cc:	46c8      	mov	r8, r9
 80085ce:	442c      	add	r4, r5
 80085d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085d4:	4601      	mov	r1, r0
 80085d6:	3b30      	subs	r3, #48	; 0x30
 80085d8:	220a      	movs	r2, #10
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff ff8c 	bl	80084f8 <__multadd>
 80085e0:	45a0      	cmp	r8, r4
 80085e2:	d1f5      	bne.n	80085d0 <__s2b+0x4c>
 80085e4:	f1a5 0408 	sub.w	r4, r5, #8
 80085e8:	444c      	add	r4, r9
 80085ea:	1b2d      	subs	r5, r5, r4
 80085ec:	1963      	adds	r3, r4, r5
 80085ee:	42bb      	cmp	r3, r7
 80085f0:	db04      	blt.n	80085fc <__s2b+0x78>
 80085f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f6:	340a      	adds	r4, #10
 80085f8:	2509      	movs	r5, #9
 80085fa:	e7f6      	b.n	80085ea <__s2b+0x66>
 80085fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008600:	4601      	mov	r1, r0
 8008602:	3b30      	subs	r3, #48	; 0x30
 8008604:	220a      	movs	r2, #10
 8008606:	4630      	mov	r0, r6
 8008608:	f7ff ff76 	bl	80084f8 <__multadd>
 800860c:	e7ee      	b.n	80085ec <__s2b+0x68>
 800860e:	bf00      	nop
 8008610:	0800ae16 	.word	0x0800ae16
 8008614:	0800ae27 	.word	0x0800ae27

08008618 <__hi0bits>:
 8008618:	0c03      	lsrs	r3, r0, #16
 800861a:	041b      	lsls	r3, r3, #16
 800861c:	b9d3      	cbnz	r3, 8008654 <__hi0bits+0x3c>
 800861e:	0400      	lsls	r0, r0, #16
 8008620:	2310      	movs	r3, #16
 8008622:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008626:	bf04      	itt	eq
 8008628:	0200      	lsleq	r0, r0, #8
 800862a:	3308      	addeq	r3, #8
 800862c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008630:	bf04      	itt	eq
 8008632:	0100      	lsleq	r0, r0, #4
 8008634:	3304      	addeq	r3, #4
 8008636:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800863a:	bf04      	itt	eq
 800863c:	0080      	lsleq	r0, r0, #2
 800863e:	3302      	addeq	r3, #2
 8008640:	2800      	cmp	r0, #0
 8008642:	db05      	blt.n	8008650 <__hi0bits+0x38>
 8008644:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008648:	f103 0301 	add.w	r3, r3, #1
 800864c:	bf08      	it	eq
 800864e:	2320      	moveq	r3, #32
 8008650:	4618      	mov	r0, r3
 8008652:	4770      	bx	lr
 8008654:	2300      	movs	r3, #0
 8008656:	e7e4      	b.n	8008622 <__hi0bits+0xa>

08008658 <__lo0bits>:
 8008658:	6803      	ldr	r3, [r0, #0]
 800865a:	f013 0207 	ands.w	r2, r3, #7
 800865e:	d00c      	beq.n	800867a <__lo0bits+0x22>
 8008660:	07d9      	lsls	r1, r3, #31
 8008662:	d422      	bmi.n	80086aa <__lo0bits+0x52>
 8008664:	079a      	lsls	r2, r3, #30
 8008666:	bf49      	itett	mi
 8008668:	085b      	lsrmi	r3, r3, #1
 800866a:	089b      	lsrpl	r3, r3, #2
 800866c:	6003      	strmi	r3, [r0, #0]
 800866e:	2201      	movmi	r2, #1
 8008670:	bf5c      	itt	pl
 8008672:	6003      	strpl	r3, [r0, #0]
 8008674:	2202      	movpl	r2, #2
 8008676:	4610      	mov	r0, r2
 8008678:	4770      	bx	lr
 800867a:	b299      	uxth	r1, r3
 800867c:	b909      	cbnz	r1, 8008682 <__lo0bits+0x2a>
 800867e:	0c1b      	lsrs	r3, r3, #16
 8008680:	2210      	movs	r2, #16
 8008682:	b2d9      	uxtb	r1, r3
 8008684:	b909      	cbnz	r1, 800868a <__lo0bits+0x32>
 8008686:	3208      	adds	r2, #8
 8008688:	0a1b      	lsrs	r3, r3, #8
 800868a:	0719      	lsls	r1, r3, #28
 800868c:	bf04      	itt	eq
 800868e:	091b      	lsreq	r3, r3, #4
 8008690:	3204      	addeq	r2, #4
 8008692:	0799      	lsls	r1, r3, #30
 8008694:	bf04      	itt	eq
 8008696:	089b      	lsreq	r3, r3, #2
 8008698:	3202      	addeq	r2, #2
 800869a:	07d9      	lsls	r1, r3, #31
 800869c:	d403      	bmi.n	80086a6 <__lo0bits+0x4e>
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	f102 0201 	add.w	r2, r2, #1
 80086a4:	d003      	beq.n	80086ae <__lo0bits+0x56>
 80086a6:	6003      	str	r3, [r0, #0]
 80086a8:	e7e5      	b.n	8008676 <__lo0bits+0x1e>
 80086aa:	2200      	movs	r2, #0
 80086ac:	e7e3      	b.n	8008676 <__lo0bits+0x1e>
 80086ae:	2220      	movs	r2, #32
 80086b0:	e7e1      	b.n	8008676 <__lo0bits+0x1e>
	...

080086b4 <__i2b>:
 80086b4:	b510      	push	{r4, lr}
 80086b6:	460c      	mov	r4, r1
 80086b8:	2101      	movs	r1, #1
 80086ba:	f7ff febb 	bl	8008434 <_Balloc>
 80086be:	4602      	mov	r2, r0
 80086c0:	b928      	cbnz	r0, 80086ce <__i2b+0x1a>
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <__i2b+0x24>)
 80086c4:	4805      	ldr	r0, [pc, #20]	; (80086dc <__i2b+0x28>)
 80086c6:	f240 1145 	movw	r1, #325	; 0x145
 80086ca:	f001 fbcd 	bl	8009e68 <__assert_func>
 80086ce:	2301      	movs	r3, #1
 80086d0:	6144      	str	r4, [r0, #20]
 80086d2:	6103      	str	r3, [r0, #16]
 80086d4:	bd10      	pop	{r4, pc}
 80086d6:	bf00      	nop
 80086d8:	0800ae16 	.word	0x0800ae16
 80086dc:	0800ae27 	.word	0x0800ae27

080086e0 <__multiply>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	4691      	mov	r9, r2
 80086e6:	690a      	ldr	r2, [r1, #16]
 80086e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	bfb8      	it	lt
 80086f0:	460b      	movlt	r3, r1
 80086f2:	460c      	mov	r4, r1
 80086f4:	bfbc      	itt	lt
 80086f6:	464c      	movlt	r4, r9
 80086f8:	4699      	movlt	r9, r3
 80086fa:	6927      	ldr	r7, [r4, #16]
 80086fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	6861      	ldr	r1, [r4, #4]
 8008704:	eb07 060a 	add.w	r6, r7, sl
 8008708:	42b3      	cmp	r3, r6
 800870a:	b085      	sub	sp, #20
 800870c:	bfb8      	it	lt
 800870e:	3101      	addlt	r1, #1
 8008710:	f7ff fe90 	bl	8008434 <_Balloc>
 8008714:	b930      	cbnz	r0, 8008724 <__multiply+0x44>
 8008716:	4602      	mov	r2, r0
 8008718:	4b44      	ldr	r3, [pc, #272]	; (800882c <__multiply+0x14c>)
 800871a:	4845      	ldr	r0, [pc, #276]	; (8008830 <__multiply+0x150>)
 800871c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008720:	f001 fba2 	bl	8009e68 <__assert_func>
 8008724:	f100 0514 	add.w	r5, r0, #20
 8008728:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800872c:	462b      	mov	r3, r5
 800872e:	2200      	movs	r2, #0
 8008730:	4543      	cmp	r3, r8
 8008732:	d321      	bcc.n	8008778 <__multiply+0x98>
 8008734:	f104 0314 	add.w	r3, r4, #20
 8008738:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800873c:	f109 0314 	add.w	r3, r9, #20
 8008740:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008744:	9202      	str	r2, [sp, #8]
 8008746:	1b3a      	subs	r2, r7, r4
 8008748:	3a15      	subs	r2, #21
 800874a:	f022 0203 	bic.w	r2, r2, #3
 800874e:	3204      	adds	r2, #4
 8008750:	f104 0115 	add.w	r1, r4, #21
 8008754:	428f      	cmp	r7, r1
 8008756:	bf38      	it	cc
 8008758:	2204      	movcc	r2, #4
 800875a:	9201      	str	r2, [sp, #4]
 800875c:	9a02      	ldr	r2, [sp, #8]
 800875e:	9303      	str	r3, [sp, #12]
 8008760:	429a      	cmp	r2, r3
 8008762:	d80c      	bhi.n	800877e <__multiply+0x9e>
 8008764:	2e00      	cmp	r6, #0
 8008766:	dd03      	ble.n	8008770 <__multiply+0x90>
 8008768:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800876c:	2b00      	cmp	r3, #0
 800876e:	d05b      	beq.n	8008828 <__multiply+0x148>
 8008770:	6106      	str	r6, [r0, #16]
 8008772:	b005      	add	sp, #20
 8008774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008778:	f843 2b04 	str.w	r2, [r3], #4
 800877c:	e7d8      	b.n	8008730 <__multiply+0x50>
 800877e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008782:	f1ba 0f00 	cmp.w	sl, #0
 8008786:	d024      	beq.n	80087d2 <__multiply+0xf2>
 8008788:	f104 0e14 	add.w	lr, r4, #20
 800878c:	46a9      	mov	r9, r5
 800878e:	f04f 0c00 	mov.w	ip, #0
 8008792:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008796:	f8d9 1000 	ldr.w	r1, [r9]
 800879a:	fa1f fb82 	uxth.w	fp, r2
 800879e:	b289      	uxth	r1, r1
 80087a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80087a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087a8:	f8d9 2000 	ldr.w	r2, [r9]
 80087ac:	4461      	add	r1, ip
 80087ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80087b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087ba:	b289      	uxth	r1, r1
 80087bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087c0:	4577      	cmp	r7, lr
 80087c2:	f849 1b04 	str.w	r1, [r9], #4
 80087c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ca:	d8e2      	bhi.n	8008792 <__multiply+0xb2>
 80087cc:	9a01      	ldr	r2, [sp, #4]
 80087ce:	f845 c002 	str.w	ip, [r5, r2]
 80087d2:	9a03      	ldr	r2, [sp, #12]
 80087d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087d8:	3304      	adds	r3, #4
 80087da:	f1b9 0f00 	cmp.w	r9, #0
 80087de:	d021      	beq.n	8008824 <__multiply+0x144>
 80087e0:	6829      	ldr	r1, [r5, #0]
 80087e2:	f104 0c14 	add.w	ip, r4, #20
 80087e6:	46ae      	mov	lr, r5
 80087e8:	f04f 0a00 	mov.w	sl, #0
 80087ec:	f8bc b000 	ldrh.w	fp, [ip]
 80087f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087f4:	fb09 220b 	mla	r2, r9, fp, r2
 80087f8:	4452      	add	r2, sl
 80087fa:	b289      	uxth	r1, r1
 80087fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008800:	f84e 1b04 	str.w	r1, [lr], #4
 8008804:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008808:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800880c:	f8be 1000 	ldrh.w	r1, [lr]
 8008810:	fb09 110a 	mla	r1, r9, sl, r1
 8008814:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008818:	4567      	cmp	r7, ip
 800881a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800881e:	d8e5      	bhi.n	80087ec <__multiply+0x10c>
 8008820:	9a01      	ldr	r2, [sp, #4]
 8008822:	50a9      	str	r1, [r5, r2]
 8008824:	3504      	adds	r5, #4
 8008826:	e799      	b.n	800875c <__multiply+0x7c>
 8008828:	3e01      	subs	r6, #1
 800882a:	e79b      	b.n	8008764 <__multiply+0x84>
 800882c:	0800ae16 	.word	0x0800ae16
 8008830:	0800ae27 	.word	0x0800ae27

08008834 <__pow5mult>:
 8008834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008838:	4615      	mov	r5, r2
 800883a:	f012 0203 	ands.w	r2, r2, #3
 800883e:	4606      	mov	r6, r0
 8008840:	460f      	mov	r7, r1
 8008842:	d007      	beq.n	8008854 <__pow5mult+0x20>
 8008844:	4c25      	ldr	r4, [pc, #148]	; (80088dc <__pow5mult+0xa8>)
 8008846:	3a01      	subs	r2, #1
 8008848:	2300      	movs	r3, #0
 800884a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800884e:	f7ff fe53 	bl	80084f8 <__multadd>
 8008852:	4607      	mov	r7, r0
 8008854:	10ad      	asrs	r5, r5, #2
 8008856:	d03d      	beq.n	80088d4 <__pow5mult+0xa0>
 8008858:	69f4      	ldr	r4, [r6, #28]
 800885a:	b97c      	cbnz	r4, 800887c <__pow5mult+0x48>
 800885c:	2010      	movs	r0, #16
 800885e:	f7ff fd35 	bl	80082cc <malloc>
 8008862:	4602      	mov	r2, r0
 8008864:	61f0      	str	r0, [r6, #28]
 8008866:	b928      	cbnz	r0, 8008874 <__pow5mult+0x40>
 8008868:	4b1d      	ldr	r3, [pc, #116]	; (80088e0 <__pow5mult+0xac>)
 800886a:	481e      	ldr	r0, [pc, #120]	; (80088e4 <__pow5mult+0xb0>)
 800886c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008870:	f001 fafa 	bl	8009e68 <__assert_func>
 8008874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008878:	6004      	str	r4, [r0, #0]
 800887a:	60c4      	str	r4, [r0, #12]
 800887c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008884:	b94c      	cbnz	r4, 800889a <__pow5mult+0x66>
 8008886:	f240 2171 	movw	r1, #625	; 0x271
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ff12 	bl	80086b4 <__i2b>
 8008890:	2300      	movs	r3, #0
 8008892:	f8c8 0008 	str.w	r0, [r8, #8]
 8008896:	4604      	mov	r4, r0
 8008898:	6003      	str	r3, [r0, #0]
 800889a:	f04f 0900 	mov.w	r9, #0
 800889e:	07eb      	lsls	r3, r5, #31
 80088a0:	d50a      	bpl.n	80088b8 <__pow5mult+0x84>
 80088a2:	4639      	mov	r1, r7
 80088a4:	4622      	mov	r2, r4
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7ff ff1a 	bl	80086e0 <__multiply>
 80088ac:	4639      	mov	r1, r7
 80088ae:	4680      	mov	r8, r0
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7ff fdff 	bl	80084b4 <_Bfree>
 80088b6:	4647      	mov	r7, r8
 80088b8:	106d      	asrs	r5, r5, #1
 80088ba:	d00b      	beq.n	80088d4 <__pow5mult+0xa0>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	b938      	cbnz	r0, 80088d0 <__pow5mult+0x9c>
 80088c0:	4622      	mov	r2, r4
 80088c2:	4621      	mov	r1, r4
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7ff ff0b 	bl	80086e0 <__multiply>
 80088ca:	6020      	str	r0, [r4, #0]
 80088cc:	f8c0 9000 	str.w	r9, [r0]
 80088d0:	4604      	mov	r4, r0
 80088d2:	e7e4      	b.n	800889e <__pow5mult+0x6a>
 80088d4:	4638      	mov	r0, r7
 80088d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088da:	bf00      	nop
 80088dc:	0800af70 	.word	0x0800af70
 80088e0:	0800ada7 	.word	0x0800ada7
 80088e4:	0800ae27 	.word	0x0800ae27

080088e8 <__lshift>:
 80088e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ec:	460c      	mov	r4, r1
 80088ee:	6849      	ldr	r1, [r1, #4]
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	4607      	mov	r7, r0
 80088fa:	4691      	mov	r9, r2
 80088fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008900:	f108 0601 	add.w	r6, r8, #1
 8008904:	42b3      	cmp	r3, r6
 8008906:	db0b      	blt.n	8008920 <__lshift+0x38>
 8008908:	4638      	mov	r0, r7
 800890a:	f7ff fd93 	bl	8008434 <_Balloc>
 800890e:	4605      	mov	r5, r0
 8008910:	b948      	cbnz	r0, 8008926 <__lshift+0x3e>
 8008912:	4602      	mov	r2, r0
 8008914:	4b28      	ldr	r3, [pc, #160]	; (80089b8 <__lshift+0xd0>)
 8008916:	4829      	ldr	r0, [pc, #164]	; (80089bc <__lshift+0xd4>)
 8008918:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800891c:	f001 faa4 	bl	8009e68 <__assert_func>
 8008920:	3101      	adds	r1, #1
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	e7ee      	b.n	8008904 <__lshift+0x1c>
 8008926:	2300      	movs	r3, #0
 8008928:	f100 0114 	add.w	r1, r0, #20
 800892c:	f100 0210 	add.w	r2, r0, #16
 8008930:	4618      	mov	r0, r3
 8008932:	4553      	cmp	r3, sl
 8008934:	db33      	blt.n	800899e <__lshift+0xb6>
 8008936:	6920      	ldr	r0, [r4, #16]
 8008938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800893c:	f104 0314 	add.w	r3, r4, #20
 8008940:	f019 091f 	ands.w	r9, r9, #31
 8008944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008948:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800894c:	d02b      	beq.n	80089a6 <__lshift+0xbe>
 800894e:	f1c9 0e20 	rsb	lr, r9, #32
 8008952:	468a      	mov	sl, r1
 8008954:	2200      	movs	r2, #0
 8008956:	6818      	ldr	r0, [r3, #0]
 8008958:	fa00 f009 	lsl.w	r0, r0, r9
 800895c:	4310      	orrs	r0, r2
 800895e:	f84a 0b04 	str.w	r0, [sl], #4
 8008962:	f853 2b04 	ldr.w	r2, [r3], #4
 8008966:	459c      	cmp	ip, r3
 8008968:	fa22 f20e 	lsr.w	r2, r2, lr
 800896c:	d8f3      	bhi.n	8008956 <__lshift+0x6e>
 800896e:	ebac 0304 	sub.w	r3, ip, r4
 8008972:	3b15      	subs	r3, #21
 8008974:	f023 0303 	bic.w	r3, r3, #3
 8008978:	3304      	adds	r3, #4
 800897a:	f104 0015 	add.w	r0, r4, #21
 800897e:	4584      	cmp	ip, r0
 8008980:	bf38      	it	cc
 8008982:	2304      	movcc	r3, #4
 8008984:	50ca      	str	r2, [r1, r3]
 8008986:	b10a      	cbz	r2, 800898c <__lshift+0xa4>
 8008988:	f108 0602 	add.w	r6, r8, #2
 800898c:	3e01      	subs	r6, #1
 800898e:	4638      	mov	r0, r7
 8008990:	612e      	str	r6, [r5, #16]
 8008992:	4621      	mov	r1, r4
 8008994:	f7ff fd8e 	bl	80084b4 <_Bfree>
 8008998:	4628      	mov	r0, r5
 800899a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899e:	f842 0f04 	str.w	r0, [r2, #4]!
 80089a2:	3301      	adds	r3, #1
 80089a4:	e7c5      	b.n	8008932 <__lshift+0x4a>
 80089a6:	3904      	subs	r1, #4
 80089a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80089b0:	459c      	cmp	ip, r3
 80089b2:	d8f9      	bhi.n	80089a8 <__lshift+0xc0>
 80089b4:	e7ea      	b.n	800898c <__lshift+0xa4>
 80089b6:	bf00      	nop
 80089b8:	0800ae16 	.word	0x0800ae16
 80089bc:	0800ae27 	.word	0x0800ae27

080089c0 <__mcmp>:
 80089c0:	b530      	push	{r4, r5, lr}
 80089c2:	6902      	ldr	r2, [r0, #16]
 80089c4:	690c      	ldr	r4, [r1, #16]
 80089c6:	1b12      	subs	r2, r2, r4
 80089c8:	d10e      	bne.n	80089e8 <__mcmp+0x28>
 80089ca:	f100 0314 	add.w	r3, r0, #20
 80089ce:	3114      	adds	r1, #20
 80089d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089e0:	42a5      	cmp	r5, r4
 80089e2:	d003      	beq.n	80089ec <__mcmp+0x2c>
 80089e4:	d305      	bcc.n	80089f2 <__mcmp+0x32>
 80089e6:	2201      	movs	r2, #1
 80089e8:	4610      	mov	r0, r2
 80089ea:	bd30      	pop	{r4, r5, pc}
 80089ec:	4283      	cmp	r3, r0
 80089ee:	d3f3      	bcc.n	80089d8 <__mcmp+0x18>
 80089f0:	e7fa      	b.n	80089e8 <__mcmp+0x28>
 80089f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089f6:	e7f7      	b.n	80089e8 <__mcmp+0x28>

080089f8 <__mdiff>:
 80089f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	460c      	mov	r4, r1
 80089fe:	4606      	mov	r6, r0
 8008a00:	4611      	mov	r1, r2
 8008a02:	4620      	mov	r0, r4
 8008a04:	4690      	mov	r8, r2
 8008a06:	f7ff ffdb 	bl	80089c0 <__mcmp>
 8008a0a:	1e05      	subs	r5, r0, #0
 8008a0c:	d110      	bne.n	8008a30 <__mdiff+0x38>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff fd0f 	bl	8008434 <_Balloc>
 8008a16:	b930      	cbnz	r0, 8008a26 <__mdiff+0x2e>
 8008a18:	4b3a      	ldr	r3, [pc, #232]	; (8008b04 <__mdiff+0x10c>)
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	f240 2137 	movw	r1, #567	; 0x237
 8008a20:	4839      	ldr	r0, [pc, #228]	; (8008b08 <__mdiff+0x110>)
 8008a22:	f001 fa21 	bl	8009e68 <__assert_func>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	bfa4      	itt	ge
 8008a32:	4643      	movge	r3, r8
 8008a34:	46a0      	movge	r8, r4
 8008a36:	4630      	mov	r0, r6
 8008a38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a3c:	bfa6      	itte	ge
 8008a3e:	461c      	movge	r4, r3
 8008a40:	2500      	movge	r5, #0
 8008a42:	2501      	movlt	r5, #1
 8008a44:	f7ff fcf6 	bl	8008434 <_Balloc>
 8008a48:	b920      	cbnz	r0, 8008a54 <__mdiff+0x5c>
 8008a4a:	4b2e      	ldr	r3, [pc, #184]	; (8008b04 <__mdiff+0x10c>)
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	f240 2145 	movw	r1, #581	; 0x245
 8008a52:	e7e5      	b.n	8008a20 <__mdiff+0x28>
 8008a54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a58:	6926      	ldr	r6, [r4, #16]
 8008a5a:	60c5      	str	r5, [r0, #12]
 8008a5c:	f104 0914 	add.w	r9, r4, #20
 8008a60:	f108 0514 	add.w	r5, r8, #20
 8008a64:	f100 0e14 	add.w	lr, r0, #20
 8008a68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a70:	f108 0210 	add.w	r2, r8, #16
 8008a74:	46f2      	mov	sl, lr
 8008a76:	2100      	movs	r1, #0
 8008a78:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a80:	fa11 f88b 	uxtah	r8, r1, fp
 8008a84:	b299      	uxth	r1, r3
 8008a86:	0c1b      	lsrs	r3, r3, #16
 8008a88:	eba8 0801 	sub.w	r8, r8, r1
 8008a8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a94:	fa1f f888 	uxth.w	r8, r8
 8008a98:	1419      	asrs	r1, r3, #16
 8008a9a:	454e      	cmp	r6, r9
 8008a9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008aa0:	f84a 3b04 	str.w	r3, [sl], #4
 8008aa4:	d8e8      	bhi.n	8008a78 <__mdiff+0x80>
 8008aa6:	1b33      	subs	r3, r6, r4
 8008aa8:	3b15      	subs	r3, #21
 8008aaa:	f023 0303 	bic.w	r3, r3, #3
 8008aae:	3304      	adds	r3, #4
 8008ab0:	3415      	adds	r4, #21
 8008ab2:	42a6      	cmp	r6, r4
 8008ab4:	bf38      	it	cc
 8008ab6:	2304      	movcc	r3, #4
 8008ab8:	441d      	add	r5, r3
 8008aba:	4473      	add	r3, lr
 8008abc:	469e      	mov	lr, r3
 8008abe:	462e      	mov	r6, r5
 8008ac0:	4566      	cmp	r6, ip
 8008ac2:	d30e      	bcc.n	8008ae2 <__mdiff+0xea>
 8008ac4:	f10c 0203 	add.w	r2, ip, #3
 8008ac8:	1b52      	subs	r2, r2, r5
 8008aca:	f022 0203 	bic.w	r2, r2, #3
 8008ace:	3d03      	subs	r5, #3
 8008ad0:	45ac      	cmp	ip, r5
 8008ad2:	bf38      	it	cc
 8008ad4:	2200      	movcc	r2, #0
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008adc:	b17a      	cbz	r2, 8008afe <__mdiff+0x106>
 8008ade:	6107      	str	r7, [r0, #16]
 8008ae0:	e7a4      	b.n	8008a2c <__mdiff+0x34>
 8008ae2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ae6:	fa11 f288 	uxtah	r2, r1, r8
 8008aea:	1414      	asrs	r4, r2, #16
 8008aec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008af0:	b292      	uxth	r2, r2
 8008af2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008af6:	f84e 2b04 	str.w	r2, [lr], #4
 8008afa:	1421      	asrs	r1, r4, #16
 8008afc:	e7e0      	b.n	8008ac0 <__mdiff+0xc8>
 8008afe:	3f01      	subs	r7, #1
 8008b00:	e7ea      	b.n	8008ad8 <__mdiff+0xe0>
 8008b02:	bf00      	nop
 8008b04:	0800ae16 	.word	0x0800ae16
 8008b08:	0800ae27 	.word	0x0800ae27

08008b0c <__ulp>:
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	ed8d 0b00 	vstr	d0, [sp]
 8008b12:	9a01      	ldr	r2, [sp, #4]
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <__ulp+0x48>)
 8008b16:	4013      	ands	r3, r2
 8008b18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dc08      	bgt.n	8008b32 <__ulp+0x26>
 8008b20:	425b      	negs	r3, r3
 8008b22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008b26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b2a:	da04      	bge.n	8008b36 <__ulp+0x2a>
 8008b2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b30:	4113      	asrs	r3, r2
 8008b32:	2200      	movs	r2, #0
 8008b34:	e008      	b.n	8008b48 <__ulp+0x3c>
 8008b36:	f1a2 0314 	sub.w	r3, r2, #20
 8008b3a:	2b1e      	cmp	r3, #30
 8008b3c:	bfda      	itte	le
 8008b3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008b42:	40da      	lsrle	r2, r3
 8008b44:	2201      	movgt	r2, #1
 8008b46:	2300      	movs	r3, #0
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	ec41 0b10 	vmov	d0, r0, r1
 8008b50:	b002      	add	sp, #8
 8008b52:	4770      	bx	lr
 8008b54:	7ff00000 	.word	0x7ff00000

08008b58 <__b2d>:
 8008b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	6906      	ldr	r6, [r0, #16]
 8008b5e:	f100 0814 	add.w	r8, r0, #20
 8008b62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008b66:	1f37      	subs	r7, r6, #4
 8008b68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	f7ff fd53 	bl	8008618 <__hi0bits>
 8008b72:	f1c0 0320 	rsb	r3, r0, #32
 8008b76:	280a      	cmp	r0, #10
 8008b78:	600b      	str	r3, [r1, #0]
 8008b7a:	491b      	ldr	r1, [pc, #108]	; (8008be8 <__b2d+0x90>)
 8008b7c:	dc15      	bgt.n	8008baa <__b2d+0x52>
 8008b7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b82:	fa22 f30c 	lsr.w	r3, r2, ip
 8008b86:	45b8      	cmp	r8, r7
 8008b88:	ea43 0501 	orr.w	r5, r3, r1
 8008b8c:	bf34      	ite	cc
 8008b8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b92:	2300      	movcs	r3, #0
 8008b94:	3015      	adds	r0, #21
 8008b96:	fa02 f000 	lsl.w	r0, r2, r0
 8008b9a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008b9e:	4303      	orrs	r3, r0
 8008ba0:	461c      	mov	r4, r3
 8008ba2:	ec45 4b10 	vmov	d0, r4, r5
 8008ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008baa:	45b8      	cmp	r8, r7
 8008bac:	bf3a      	itte	cc
 8008bae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008bb2:	f1a6 0708 	subcc.w	r7, r6, #8
 8008bb6:	2300      	movcs	r3, #0
 8008bb8:	380b      	subs	r0, #11
 8008bba:	d012      	beq.n	8008be2 <__b2d+0x8a>
 8008bbc:	f1c0 0120 	rsb	r1, r0, #32
 8008bc0:	fa23 f401 	lsr.w	r4, r3, r1
 8008bc4:	4082      	lsls	r2, r0
 8008bc6:	4322      	orrs	r2, r4
 8008bc8:	4547      	cmp	r7, r8
 8008bca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008bce:	bf8c      	ite	hi
 8008bd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008bd4:	2200      	movls	r2, #0
 8008bd6:	4083      	lsls	r3, r0
 8008bd8:	40ca      	lsrs	r2, r1
 8008bda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008bde:	4313      	orrs	r3, r2
 8008be0:	e7de      	b.n	8008ba0 <__b2d+0x48>
 8008be2:	ea42 0501 	orr.w	r5, r2, r1
 8008be6:	e7db      	b.n	8008ba0 <__b2d+0x48>
 8008be8:	3ff00000 	.word	0x3ff00000

08008bec <__d2b>:
 8008bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bf0:	460f      	mov	r7, r1
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	ec59 8b10 	vmov	r8, r9, d0
 8008bf8:	4616      	mov	r6, r2
 8008bfa:	f7ff fc1b 	bl	8008434 <_Balloc>
 8008bfe:	4604      	mov	r4, r0
 8008c00:	b930      	cbnz	r0, 8008c10 <__d2b+0x24>
 8008c02:	4602      	mov	r2, r0
 8008c04:	4b24      	ldr	r3, [pc, #144]	; (8008c98 <__d2b+0xac>)
 8008c06:	4825      	ldr	r0, [pc, #148]	; (8008c9c <__d2b+0xb0>)
 8008c08:	f240 310f 	movw	r1, #783	; 0x30f
 8008c0c:	f001 f92c 	bl	8009e68 <__assert_func>
 8008c10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c18:	bb2d      	cbnz	r5, 8008c66 <__d2b+0x7a>
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	f1b8 0300 	subs.w	r3, r8, #0
 8008c20:	d026      	beq.n	8008c70 <__d2b+0x84>
 8008c22:	4668      	mov	r0, sp
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	f7ff fd17 	bl	8008658 <__lo0bits>
 8008c2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c2e:	b1e8      	cbz	r0, 8008c6c <__d2b+0x80>
 8008c30:	f1c0 0320 	rsb	r3, r0, #32
 8008c34:	fa02 f303 	lsl.w	r3, r2, r3
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	40c2      	lsrs	r2, r0
 8008c3c:	6163      	str	r3, [r4, #20]
 8008c3e:	9201      	str	r2, [sp, #4]
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	61a3      	str	r3, [r4, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	bf14      	ite	ne
 8008c48:	2202      	movne	r2, #2
 8008c4a:	2201      	moveq	r2, #1
 8008c4c:	6122      	str	r2, [r4, #16]
 8008c4e:	b1bd      	cbz	r5, 8008c80 <__d2b+0x94>
 8008c50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c54:	4405      	add	r5, r0
 8008c56:	603d      	str	r5, [r7, #0]
 8008c58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c5c:	6030      	str	r0, [r6, #0]
 8008c5e:	4620      	mov	r0, r4
 8008c60:	b003      	add	sp, #12
 8008c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c6a:	e7d6      	b.n	8008c1a <__d2b+0x2e>
 8008c6c:	6161      	str	r1, [r4, #20]
 8008c6e:	e7e7      	b.n	8008c40 <__d2b+0x54>
 8008c70:	a801      	add	r0, sp, #4
 8008c72:	f7ff fcf1 	bl	8008658 <__lo0bits>
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	6163      	str	r3, [r4, #20]
 8008c7a:	3020      	adds	r0, #32
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	e7e5      	b.n	8008c4c <__d2b+0x60>
 8008c80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c88:	6038      	str	r0, [r7, #0]
 8008c8a:	6918      	ldr	r0, [r3, #16]
 8008c8c:	f7ff fcc4 	bl	8008618 <__hi0bits>
 8008c90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c94:	e7e2      	b.n	8008c5c <__d2b+0x70>
 8008c96:	bf00      	nop
 8008c98:	0800ae16 	.word	0x0800ae16
 8008c9c:	0800ae27 	.word	0x0800ae27

08008ca0 <__ratio>:
 8008ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	4688      	mov	r8, r1
 8008ca6:	4669      	mov	r1, sp
 8008ca8:	4681      	mov	r9, r0
 8008caa:	f7ff ff55 	bl	8008b58 <__b2d>
 8008cae:	a901      	add	r1, sp, #4
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	ec55 4b10 	vmov	r4, r5, d0
 8008cb6:	f7ff ff4f 	bl	8008b58 <__b2d>
 8008cba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008cc2:	eba3 0c02 	sub.w	ip, r3, r2
 8008cc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008cd0:	ec51 0b10 	vmov	r0, r1, d0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bfd6      	itet	le
 8008cd8:	460a      	movle	r2, r1
 8008cda:	462a      	movgt	r2, r5
 8008cdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ce0:	468b      	mov	fp, r1
 8008ce2:	462f      	mov	r7, r5
 8008ce4:	bfd4      	ite	le
 8008ce6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008cea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008cee:	4620      	mov	r0, r4
 8008cf0:	ee10 2a10 	vmov	r2, s0
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	f7f7 fda8 	bl	800084c <__aeabi_ddiv>
 8008cfc:	ec41 0b10 	vmov	d0, r0, r1
 8008d00:	b003      	add	sp, #12
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d06 <__copybits>:
 8008d06:	3901      	subs	r1, #1
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	1149      	asrs	r1, r1, #5
 8008d0c:	6914      	ldr	r4, [r2, #16]
 8008d0e:	3101      	adds	r1, #1
 8008d10:	f102 0314 	add.w	r3, r2, #20
 8008d14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d1c:	1f05      	subs	r5, r0, #4
 8008d1e:	42a3      	cmp	r3, r4
 8008d20:	d30c      	bcc.n	8008d3c <__copybits+0x36>
 8008d22:	1aa3      	subs	r3, r4, r2
 8008d24:	3b11      	subs	r3, #17
 8008d26:	f023 0303 	bic.w	r3, r3, #3
 8008d2a:	3211      	adds	r2, #17
 8008d2c:	42a2      	cmp	r2, r4
 8008d2e:	bf88      	it	hi
 8008d30:	2300      	movhi	r3, #0
 8008d32:	4418      	add	r0, r3
 8008d34:	2300      	movs	r3, #0
 8008d36:	4288      	cmp	r0, r1
 8008d38:	d305      	bcc.n	8008d46 <__copybits+0x40>
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d40:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d44:	e7eb      	b.n	8008d1e <__copybits+0x18>
 8008d46:	f840 3b04 	str.w	r3, [r0], #4
 8008d4a:	e7f4      	b.n	8008d36 <__copybits+0x30>

08008d4c <__any_on>:
 8008d4c:	f100 0214 	add.w	r2, r0, #20
 8008d50:	6900      	ldr	r0, [r0, #16]
 8008d52:	114b      	asrs	r3, r1, #5
 8008d54:	4298      	cmp	r0, r3
 8008d56:	b510      	push	{r4, lr}
 8008d58:	db11      	blt.n	8008d7e <__any_on+0x32>
 8008d5a:	dd0a      	ble.n	8008d72 <__any_on+0x26>
 8008d5c:	f011 011f 	ands.w	r1, r1, #31
 8008d60:	d007      	beq.n	8008d72 <__any_on+0x26>
 8008d62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d66:	fa24 f001 	lsr.w	r0, r4, r1
 8008d6a:	fa00 f101 	lsl.w	r1, r0, r1
 8008d6e:	428c      	cmp	r4, r1
 8008d70:	d10b      	bne.n	8008d8a <__any_on+0x3e>
 8008d72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d803      	bhi.n	8008d82 <__any_on+0x36>
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	bd10      	pop	{r4, pc}
 8008d7e:	4603      	mov	r3, r0
 8008d80:	e7f7      	b.n	8008d72 <__any_on+0x26>
 8008d82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d86:	2900      	cmp	r1, #0
 8008d88:	d0f5      	beq.n	8008d76 <__any_on+0x2a>
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	e7f6      	b.n	8008d7c <__any_on+0x30>

08008d8e <sulp>:
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	4604      	mov	r4, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	ec45 4b10 	vmov	d0, r4, r5
 8008d98:	4616      	mov	r6, r2
 8008d9a:	f7ff feb7 	bl	8008b0c <__ulp>
 8008d9e:	ec51 0b10 	vmov	r0, r1, d0
 8008da2:	b17e      	cbz	r6, 8008dc4 <sulp+0x36>
 8008da4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008da8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dd09      	ble.n	8008dc4 <sulp+0x36>
 8008db0:	051b      	lsls	r3, r3, #20
 8008db2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008db6:	2400      	movs	r4, #0
 8008db8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	f7f7 fc1a 	bl	80005f8 <__aeabi_dmul>
 8008dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008dc8 <_strtod_l>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	ed2d 8b02 	vpush	{d8}
 8008dd0:	b09b      	sub	sp, #108	; 0x6c
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	9213      	str	r2, [sp, #76]	; 0x4c
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	9216      	str	r2, [sp, #88]	; 0x58
 8008dda:	460d      	mov	r5, r1
 8008ddc:	f04f 0800 	mov.w	r8, #0
 8008de0:	f04f 0900 	mov.w	r9, #0
 8008de4:	460a      	mov	r2, r1
 8008de6:	9215      	str	r2, [sp, #84]	; 0x54
 8008de8:	7811      	ldrb	r1, [r2, #0]
 8008dea:	292b      	cmp	r1, #43	; 0x2b
 8008dec:	d04c      	beq.n	8008e88 <_strtod_l+0xc0>
 8008dee:	d83a      	bhi.n	8008e66 <_strtod_l+0x9e>
 8008df0:	290d      	cmp	r1, #13
 8008df2:	d834      	bhi.n	8008e5e <_strtod_l+0x96>
 8008df4:	2908      	cmp	r1, #8
 8008df6:	d834      	bhi.n	8008e62 <_strtod_l+0x9a>
 8008df8:	2900      	cmp	r1, #0
 8008dfa:	d03d      	beq.n	8008e78 <_strtod_l+0xb0>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	920a      	str	r2, [sp, #40]	; 0x28
 8008e00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008e02:	7832      	ldrb	r2, [r6, #0]
 8008e04:	2a30      	cmp	r2, #48	; 0x30
 8008e06:	f040 80b4 	bne.w	8008f72 <_strtod_l+0x1aa>
 8008e0a:	7872      	ldrb	r2, [r6, #1]
 8008e0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008e10:	2a58      	cmp	r2, #88	; 0x58
 8008e12:	d170      	bne.n	8008ef6 <_strtod_l+0x12e>
 8008e14:	9302      	str	r3, [sp, #8]
 8008e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e18:	9301      	str	r3, [sp, #4]
 8008e1a:	ab16      	add	r3, sp, #88	; 0x58
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	4a8e      	ldr	r2, [pc, #568]	; (8009058 <_strtod_l+0x290>)
 8008e20:	ab17      	add	r3, sp, #92	; 0x5c
 8008e22:	a915      	add	r1, sp, #84	; 0x54
 8008e24:	4620      	mov	r0, r4
 8008e26:	f001 f8bb 	bl	8009fa0 <__gethex>
 8008e2a:	f010 070f 	ands.w	r7, r0, #15
 8008e2e:	4605      	mov	r5, r0
 8008e30:	d005      	beq.n	8008e3e <_strtod_l+0x76>
 8008e32:	2f06      	cmp	r7, #6
 8008e34:	d12a      	bne.n	8008e8c <_strtod_l+0xc4>
 8008e36:	3601      	adds	r6, #1
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9615      	str	r6, [sp, #84]	; 0x54
 8008e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f040 857f 	bne.w	8009944 <_strtod_l+0xb7c>
 8008e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e48:	b1db      	cbz	r3, 8008e82 <_strtod_l+0xba>
 8008e4a:	4642      	mov	r2, r8
 8008e4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e50:	ec43 2b10 	vmov	d0, r2, r3
 8008e54:	b01b      	add	sp, #108	; 0x6c
 8008e56:	ecbd 8b02 	vpop	{d8}
 8008e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5e:	2920      	cmp	r1, #32
 8008e60:	d1cc      	bne.n	8008dfc <_strtod_l+0x34>
 8008e62:	3201      	adds	r2, #1
 8008e64:	e7bf      	b.n	8008de6 <_strtod_l+0x1e>
 8008e66:	292d      	cmp	r1, #45	; 0x2d
 8008e68:	d1c8      	bne.n	8008dfc <_strtod_l+0x34>
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	910a      	str	r1, [sp, #40]	; 0x28
 8008e6e:	1c51      	adds	r1, r2, #1
 8008e70:	9115      	str	r1, [sp, #84]	; 0x54
 8008e72:	7852      	ldrb	r2, [r2, #1]
 8008e74:	2a00      	cmp	r2, #0
 8008e76:	d1c3      	bne.n	8008e00 <_strtod_l+0x38>
 8008e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e7a:	9515      	str	r5, [sp, #84]	; 0x54
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 855f 	bne.w	8009940 <_strtod_l+0xb78>
 8008e82:	4642      	mov	r2, r8
 8008e84:	464b      	mov	r3, r9
 8008e86:	e7e3      	b.n	8008e50 <_strtod_l+0x88>
 8008e88:	2100      	movs	r1, #0
 8008e8a:	e7ef      	b.n	8008e6c <_strtod_l+0xa4>
 8008e8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e8e:	b13a      	cbz	r2, 8008ea0 <_strtod_l+0xd8>
 8008e90:	2135      	movs	r1, #53	; 0x35
 8008e92:	a818      	add	r0, sp, #96	; 0x60
 8008e94:	f7ff ff37 	bl	8008d06 <__copybits>
 8008e98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f7ff fb0a 	bl	80084b4 <_Bfree>
 8008ea0:	3f01      	subs	r7, #1
 8008ea2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ea4:	2f04      	cmp	r7, #4
 8008ea6:	d806      	bhi.n	8008eb6 <_strtod_l+0xee>
 8008ea8:	e8df f007 	tbb	[pc, r7]
 8008eac:	201d0314 	.word	0x201d0314
 8008eb0:	14          	.byte	0x14
 8008eb1:	00          	.byte	0x00
 8008eb2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008eb6:	05e9      	lsls	r1, r5, #23
 8008eb8:	bf48      	it	mi
 8008eba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008ebe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ec2:	0d1b      	lsrs	r3, r3, #20
 8008ec4:	051b      	lsls	r3, r3, #20
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1b9      	bne.n	8008e3e <_strtod_l+0x76>
 8008eca:	f7fe fb03 	bl	80074d4 <__errno>
 8008ece:	2322      	movs	r3, #34	; 0x22
 8008ed0:	6003      	str	r3, [r0, #0]
 8008ed2:	e7b4      	b.n	8008e3e <_strtod_l+0x76>
 8008ed4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008ed8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008edc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ee0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008ee4:	e7e7      	b.n	8008eb6 <_strtod_l+0xee>
 8008ee6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009060 <_strtod_l+0x298>
 8008eea:	e7e4      	b.n	8008eb6 <_strtod_l+0xee>
 8008eec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ef0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008ef4:	e7df      	b.n	8008eb6 <_strtod_l+0xee>
 8008ef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	9215      	str	r2, [sp, #84]	; 0x54
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	2b30      	cmp	r3, #48	; 0x30
 8008f00:	d0f9      	beq.n	8008ef6 <_strtod_l+0x12e>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d09b      	beq.n	8008e3e <_strtod_l+0x76>
 8008f06:	2301      	movs	r3, #1
 8008f08:	f04f 0a00 	mov.w	sl, #0
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008f16:	46d3      	mov	fp, sl
 8008f18:	220a      	movs	r2, #10
 8008f1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008f1c:	7806      	ldrb	r6, [r0, #0]
 8008f1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008f22:	b2d9      	uxtb	r1, r3
 8008f24:	2909      	cmp	r1, #9
 8008f26:	d926      	bls.n	8008f76 <_strtod_l+0x1ae>
 8008f28:	494c      	ldr	r1, [pc, #304]	; (800905c <_strtod_l+0x294>)
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f000 ff62 	bl	8009df4 <strncmp>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d030      	beq.n	8008f96 <_strtod_l+0x1ce>
 8008f34:	2000      	movs	r0, #0
 8008f36:	4632      	mov	r2, r6
 8008f38:	9005      	str	r0, [sp, #20]
 8008f3a:	465e      	mov	r6, fp
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2a65      	cmp	r2, #101	; 0x65
 8008f40:	d001      	beq.n	8008f46 <_strtod_l+0x17e>
 8008f42:	2a45      	cmp	r2, #69	; 0x45
 8008f44:	d113      	bne.n	8008f6e <_strtod_l+0x1a6>
 8008f46:	b91e      	cbnz	r6, 8008f50 <_strtod_l+0x188>
 8008f48:	9a04      	ldr	r2, [sp, #16]
 8008f4a:	4302      	orrs	r2, r0
 8008f4c:	d094      	beq.n	8008e78 <_strtod_l+0xb0>
 8008f4e:	2600      	movs	r6, #0
 8008f50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008f52:	1c6a      	adds	r2, r5, #1
 8008f54:	9215      	str	r2, [sp, #84]	; 0x54
 8008f56:	786a      	ldrb	r2, [r5, #1]
 8008f58:	2a2b      	cmp	r2, #43	; 0x2b
 8008f5a:	d074      	beq.n	8009046 <_strtod_l+0x27e>
 8008f5c:	2a2d      	cmp	r2, #45	; 0x2d
 8008f5e:	d078      	beq.n	8009052 <_strtod_l+0x28a>
 8008f60:	f04f 0c00 	mov.w	ip, #0
 8008f64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008f68:	2909      	cmp	r1, #9
 8008f6a:	d97f      	bls.n	800906c <_strtod_l+0x2a4>
 8008f6c:	9515      	str	r5, [sp, #84]	; 0x54
 8008f6e:	2700      	movs	r7, #0
 8008f70:	e09e      	b.n	80090b0 <_strtod_l+0x2e8>
 8008f72:	2300      	movs	r3, #0
 8008f74:	e7c8      	b.n	8008f08 <_strtod_l+0x140>
 8008f76:	f1bb 0f08 	cmp.w	fp, #8
 8008f7a:	bfd8      	it	le
 8008f7c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008f7e:	f100 0001 	add.w	r0, r0, #1
 8008f82:	bfda      	itte	le
 8008f84:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f88:	9309      	strle	r3, [sp, #36]	; 0x24
 8008f8a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008f8e:	f10b 0b01 	add.w	fp, fp, #1
 8008f92:	9015      	str	r0, [sp, #84]	; 0x54
 8008f94:	e7c1      	b.n	8008f1a <_strtod_l+0x152>
 8008f96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	9215      	str	r2, [sp, #84]	; 0x54
 8008f9c:	785a      	ldrb	r2, [r3, #1]
 8008f9e:	f1bb 0f00 	cmp.w	fp, #0
 8008fa2:	d037      	beq.n	8009014 <_strtod_l+0x24c>
 8008fa4:	9005      	str	r0, [sp, #20]
 8008fa6:	465e      	mov	r6, fp
 8008fa8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008fac:	2b09      	cmp	r3, #9
 8008fae:	d912      	bls.n	8008fd6 <_strtod_l+0x20e>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e7c4      	b.n	8008f3e <_strtod_l+0x176>
 8008fb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	9215      	str	r2, [sp, #84]	; 0x54
 8008fba:	785a      	ldrb	r2, [r3, #1]
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	2a30      	cmp	r2, #48	; 0x30
 8008fc0:	d0f8      	beq.n	8008fb4 <_strtod_l+0x1ec>
 8008fc2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008fc6:	2b08      	cmp	r3, #8
 8008fc8:	f200 84c1 	bhi.w	800994e <_strtod_l+0xb86>
 8008fcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fce:	9005      	str	r0, [sp, #20]
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	3a30      	subs	r2, #48	; 0x30
 8008fd8:	f100 0301 	add.w	r3, r0, #1
 8008fdc:	d014      	beq.n	8009008 <_strtod_l+0x240>
 8008fde:	9905      	ldr	r1, [sp, #20]
 8008fe0:	4419      	add	r1, r3
 8008fe2:	9105      	str	r1, [sp, #20]
 8008fe4:	4633      	mov	r3, r6
 8008fe6:	eb00 0c06 	add.w	ip, r0, r6
 8008fea:	210a      	movs	r1, #10
 8008fec:	4563      	cmp	r3, ip
 8008fee:	d113      	bne.n	8009018 <_strtod_l+0x250>
 8008ff0:	1833      	adds	r3, r6, r0
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	f106 0601 	add.w	r6, r6, #1
 8008ff8:	4406      	add	r6, r0
 8008ffa:	dc1a      	bgt.n	8009032 <_strtod_l+0x26a>
 8008ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ffe:	230a      	movs	r3, #10
 8009000:	fb03 2301 	mla	r3, r3, r1, r2
 8009004:	9309      	str	r3, [sp, #36]	; 0x24
 8009006:	2300      	movs	r3, #0
 8009008:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800900a:	1c51      	adds	r1, r2, #1
 800900c:	9115      	str	r1, [sp, #84]	; 0x54
 800900e:	7852      	ldrb	r2, [r2, #1]
 8009010:	4618      	mov	r0, r3
 8009012:	e7c9      	b.n	8008fa8 <_strtod_l+0x1e0>
 8009014:	4658      	mov	r0, fp
 8009016:	e7d2      	b.n	8008fbe <_strtod_l+0x1f6>
 8009018:	2b08      	cmp	r3, #8
 800901a:	f103 0301 	add.w	r3, r3, #1
 800901e:	dc03      	bgt.n	8009028 <_strtod_l+0x260>
 8009020:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009022:	434f      	muls	r7, r1
 8009024:	9709      	str	r7, [sp, #36]	; 0x24
 8009026:	e7e1      	b.n	8008fec <_strtod_l+0x224>
 8009028:	2b10      	cmp	r3, #16
 800902a:	bfd8      	it	le
 800902c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009030:	e7dc      	b.n	8008fec <_strtod_l+0x224>
 8009032:	2e10      	cmp	r6, #16
 8009034:	bfdc      	itt	le
 8009036:	230a      	movle	r3, #10
 8009038:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800903c:	e7e3      	b.n	8009006 <_strtod_l+0x23e>
 800903e:	2300      	movs	r3, #0
 8009040:	9305      	str	r3, [sp, #20]
 8009042:	2301      	movs	r3, #1
 8009044:	e780      	b.n	8008f48 <_strtod_l+0x180>
 8009046:	f04f 0c00 	mov.w	ip, #0
 800904a:	1caa      	adds	r2, r5, #2
 800904c:	9215      	str	r2, [sp, #84]	; 0x54
 800904e:	78aa      	ldrb	r2, [r5, #2]
 8009050:	e788      	b.n	8008f64 <_strtod_l+0x19c>
 8009052:	f04f 0c01 	mov.w	ip, #1
 8009056:	e7f8      	b.n	800904a <_strtod_l+0x282>
 8009058:	0800af80 	.word	0x0800af80
 800905c:	0800af7c 	.word	0x0800af7c
 8009060:	7ff00000 	.word	0x7ff00000
 8009064:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009066:	1c51      	adds	r1, r2, #1
 8009068:	9115      	str	r1, [sp, #84]	; 0x54
 800906a:	7852      	ldrb	r2, [r2, #1]
 800906c:	2a30      	cmp	r2, #48	; 0x30
 800906e:	d0f9      	beq.n	8009064 <_strtod_l+0x29c>
 8009070:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009074:	2908      	cmp	r1, #8
 8009076:	f63f af7a 	bhi.w	8008f6e <_strtod_l+0x1a6>
 800907a:	3a30      	subs	r2, #48	; 0x30
 800907c:	9208      	str	r2, [sp, #32]
 800907e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009080:	920c      	str	r2, [sp, #48]	; 0x30
 8009082:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009084:	1c57      	adds	r7, r2, #1
 8009086:	9715      	str	r7, [sp, #84]	; 0x54
 8009088:	7852      	ldrb	r2, [r2, #1]
 800908a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800908e:	f1be 0f09 	cmp.w	lr, #9
 8009092:	d938      	bls.n	8009106 <_strtod_l+0x33e>
 8009094:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009096:	1a7f      	subs	r7, r7, r1
 8009098:	2f08      	cmp	r7, #8
 800909a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800909e:	dc03      	bgt.n	80090a8 <_strtod_l+0x2e0>
 80090a0:	9908      	ldr	r1, [sp, #32]
 80090a2:	428f      	cmp	r7, r1
 80090a4:	bfa8      	it	ge
 80090a6:	460f      	movge	r7, r1
 80090a8:	f1bc 0f00 	cmp.w	ip, #0
 80090ac:	d000      	beq.n	80090b0 <_strtod_l+0x2e8>
 80090ae:	427f      	negs	r7, r7
 80090b0:	2e00      	cmp	r6, #0
 80090b2:	d14f      	bne.n	8009154 <_strtod_l+0x38c>
 80090b4:	9904      	ldr	r1, [sp, #16]
 80090b6:	4301      	orrs	r1, r0
 80090b8:	f47f aec1 	bne.w	8008e3e <_strtod_l+0x76>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f47f aedb 	bne.w	8008e78 <_strtod_l+0xb0>
 80090c2:	2a69      	cmp	r2, #105	; 0x69
 80090c4:	d029      	beq.n	800911a <_strtod_l+0x352>
 80090c6:	dc26      	bgt.n	8009116 <_strtod_l+0x34e>
 80090c8:	2a49      	cmp	r2, #73	; 0x49
 80090ca:	d026      	beq.n	800911a <_strtod_l+0x352>
 80090cc:	2a4e      	cmp	r2, #78	; 0x4e
 80090ce:	f47f aed3 	bne.w	8008e78 <_strtod_l+0xb0>
 80090d2:	499b      	ldr	r1, [pc, #620]	; (8009340 <_strtod_l+0x578>)
 80090d4:	a815      	add	r0, sp, #84	; 0x54
 80090d6:	f001 f9a3 	bl	800a420 <__match>
 80090da:	2800      	cmp	r0, #0
 80090dc:	f43f aecc 	beq.w	8008e78 <_strtod_l+0xb0>
 80090e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b28      	cmp	r3, #40	; 0x28
 80090e6:	d12f      	bne.n	8009148 <_strtod_l+0x380>
 80090e8:	4996      	ldr	r1, [pc, #600]	; (8009344 <_strtod_l+0x57c>)
 80090ea:	aa18      	add	r2, sp, #96	; 0x60
 80090ec:	a815      	add	r0, sp, #84	; 0x54
 80090ee:	f001 f9ab 	bl	800a448 <__hexnan>
 80090f2:	2805      	cmp	r0, #5
 80090f4:	d128      	bne.n	8009148 <_strtod_l+0x380>
 80090f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009100:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009104:	e69b      	b.n	8008e3e <_strtod_l+0x76>
 8009106:	9f08      	ldr	r7, [sp, #32]
 8009108:	210a      	movs	r1, #10
 800910a:	fb01 2107 	mla	r1, r1, r7, r2
 800910e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009112:	9208      	str	r2, [sp, #32]
 8009114:	e7b5      	b.n	8009082 <_strtod_l+0x2ba>
 8009116:	2a6e      	cmp	r2, #110	; 0x6e
 8009118:	e7d9      	b.n	80090ce <_strtod_l+0x306>
 800911a:	498b      	ldr	r1, [pc, #556]	; (8009348 <_strtod_l+0x580>)
 800911c:	a815      	add	r0, sp, #84	; 0x54
 800911e:	f001 f97f 	bl	800a420 <__match>
 8009122:	2800      	cmp	r0, #0
 8009124:	f43f aea8 	beq.w	8008e78 <_strtod_l+0xb0>
 8009128:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800912a:	4988      	ldr	r1, [pc, #544]	; (800934c <_strtod_l+0x584>)
 800912c:	3b01      	subs	r3, #1
 800912e:	a815      	add	r0, sp, #84	; 0x54
 8009130:	9315      	str	r3, [sp, #84]	; 0x54
 8009132:	f001 f975 	bl	800a420 <__match>
 8009136:	b910      	cbnz	r0, 800913e <_strtod_l+0x376>
 8009138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913a:	3301      	adds	r3, #1
 800913c:	9315      	str	r3, [sp, #84]	; 0x54
 800913e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800935c <_strtod_l+0x594>
 8009142:	f04f 0800 	mov.w	r8, #0
 8009146:	e67a      	b.n	8008e3e <_strtod_l+0x76>
 8009148:	4881      	ldr	r0, [pc, #516]	; (8009350 <_strtod_l+0x588>)
 800914a:	f000 fe85 	bl	8009e58 <nan>
 800914e:	ec59 8b10 	vmov	r8, r9, d0
 8009152:	e674      	b.n	8008e3e <_strtod_l+0x76>
 8009154:	9b05      	ldr	r3, [sp, #20]
 8009156:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009158:	1afb      	subs	r3, r7, r3
 800915a:	f1bb 0f00 	cmp.w	fp, #0
 800915e:	bf08      	it	eq
 8009160:	46b3      	moveq	fp, r6
 8009162:	2e10      	cmp	r6, #16
 8009164:	9308      	str	r3, [sp, #32]
 8009166:	4635      	mov	r5, r6
 8009168:	bfa8      	it	ge
 800916a:	2510      	movge	r5, #16
 800916c:	f7f7 f9ca 	bl	8000504 <__aeabi_ui2d>
 8009170:	2e09      	cmp	r6, #9
 8009172:	4680      	mov	r8, r0
 8009174:	4689      	mov	r9, r1
 8009176:	dd13      	ble.n	80091a0 <_strtod_l+0x3d8>
 8009178:	4b76      	ldr	r3, [pc, #472]	; (8009354 <_strtod_l+0x58c>)
 800917a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800917e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009182:	f7f7 fa39 	bl	80005f8 <__aeabi_dmul>
 8009186:	4680      	mov	r8, r0
 8009188:	4650      	mov	r0, sl
 800918a:	4689      	mov	r9, r1
 800918c:	f7f7 f9ba 	bl	8000504 <__aeabi_ui2d>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4640      	mov	r0, r8
 8009196:	4649      	mov	r1, r9
 8009198:	f7f7 f878 	bl	800028c <__adddf3>
 800919c:	4680      	mov	r8, r0
 800919e:	4689      	mov	r9, r1
 80091a0:	2e0f      	cmp	r6, #15
 80091a2:	dc38      	bgt.n	8009216 <_strtod_l+0x44e>
 80091a4:	9b08      	ldr	r3, [sp, #32]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f43f ae49 	beq.w	8008e3e <_strtod_l+0x76>
 80091ac:	dd24      	ble.n	80091f8 <_strtod_l+0x430>
 80091ae:	2b16      	cmp	r3, #22
 80091b0:	dc0b      	bgt.n	80091ca <_strtod_l+0x402>
 80091b2:	4968      	ldr	r1, [pc, #416]	; (8009354 <_strtod_l+0x58c>)
 80091b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091bc:	4642      	mov	r2, r8
 80091be:	464b      	mov	r3, r9
 80091c0:	f7f7 fa1a 	bl	80005f8 <__aeabi_dmul>
 80091c4:	4680      	mov	r8, r0
 80091c6:	4689      	mov	r9, r1
 80091c8:	e639      	b.n	8008e3e <_strtod_l+0x76>
 80091ca:	9a08      	ldr	r2, [sp, #32]
 80091cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80091d0:	4293      	cmp	r3, r2
 80091d2:	db20      	blt.n	8009216 <_strtod_l+0x44e>
 80091d4:	4c5f      	ldr	r4, [pc, #380]	; (8009354 <_strtod_l+0x58c>)
 80091d6:	f1c6 060f 	rsb	r6, r6, #15
 80091da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80091de:	4642      	mov	r2, r8
 80091e0:	464b      	mov	r3, r9
 80091e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091e6:	f7f7 fa07 	bl	80005f8 <__aeabi_dmul>
 80091ea:	9b08      	ldr	r3, [sp, #32]
 80091ec:	1b9e      	subs	r6, r3, r6
 80091ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80091f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091f6:	e7e3      	b.n	80091c0 <_strtod_l+0x3f8>
 80091f8:	9b08      	ldr	r3, [sp, #32]
 80091fa:	3316      	adds	r3, #22
 80091fc:	db0b      	blt.n	8009216 <_strtod_l+0x44e>
 80091fe:	9b05      	ldr	r3, [sp, #20]
 8009200:	1bdf      	subs	r7, r3, r7
 8009202:	4b54      	ldr	r3, [pc, #336]	; (8009354 <_strtod_l+0x58c>)
 8009204:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800920c:	4640      	mov	r0, r8
 800920e:	4649      	mov	r1, r9
 8009210:	f7f7 fb1c 	bl	800084c <__aeabi_ddiv>
 8009214:	e7d6      	b.n	80091c4 <_strtod_l+0x3fc>
 8009216:	9b08      	ldr	r3, [sp, #32]
 8009218:	1b75      	subs	r5, r6, r5
 800921a:	441d      	add	r5, r3
 800921c:	2d00      	cmp	r5, #0
 800921e:	dd70      	ble.n	8009302 <_strtod_l+0x53a>
 8009220:	f015 030f 	ands.w	r3, r5, #15
 8009224:	d00a      	beq.n	800923c <_strtod_l+0x474>
 8009226:	494b      	ldr	r1, [pc, #300]	; (8009354 <_strtod_l+0x58c>)
 8009228:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800922c:	4642      	mov	r2, r8
 800922e:	464b      	mov	r3, r9
 8009230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009234:	f7f7 f9e0 	bl	80005f8 <__aeabi_dmul>
 8009238:	4680      	mov	r8, r0
 800923a:	4689      	mov	r9, r1
 800923c:	f035 050f 	bics.w	r5, r5, #15
 8009240:	d04d      	beq.n	80092de <_strtod_l+0x516>
 8009242:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009246:	dd22      	ble.n	800928e <_strtod_l+0x4c6>
 8009248:	2500      	movs	r5, #0
 800924a:	46ab      	mov	fp, r5
 800924c:	9509      	str	r5, [sp, #36]	; 0x24
 800924e:	9505      	str	r5, [sp, #20]
 8009250:	2322      	movs	r3, #34	; 0x22
 8009252:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800935c <_strtod_l+0x594>
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	f04f 0800 	mov.w	r8, #0
 800925c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	f43f aded 	beq.w	8008e3e <_strtod_l+0x76>
 8009264:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009266:	4620      	mov	r0, r4
 8009268:	f7ff f924 	bl	80084b4 <_Bfree>
 800926c:	9905      	ldr	r1, [sp, #20]
 800926e:	4620      	mov	r0, r4
 8009270:	f7ff f920 	bl	80084b4 <_Bfree>
 8009274:	4659      	mov	r1, fp
 8009276:	4620      	mov	r0, r4
 8009278:	f7ff f91c 	bl	80084b4 <_Bfree>
 800927c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800927e:	4620      	mov	r0, r4
 8009280:	f7ff f918 	bl	80084b4 <_Bfree>
 8009284:	4629      	mov	r1, r5
 8009286:	4620      	mov	r0, r4
 8009288:	f7ff f914 	bl	80084b4 <_Bfree>
 800928c:	e5d7      	b.n	8008e3e <_strtod_l+0x76>
 800928e:	4b32      	ldr	r3, [pc, #200]	; (8009358 <_strtod_l+0x590>)
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	2300      	movs	r3, #0
 8009294:	112d      	asrs	r5, r5, #4
 8009296:	4640      	mov	r0, r8
 8009298:	4649      	mov	r1, r9
 800929a:	469a      	mov	sl, r3
 800929c:	2d01      	cmp	r5, #1
 800929e:	dc21      	bgt.n	80092e4 <_strtod_l+0x51c>
 80092a0:	b10b      	cbz	r3, 80092a6 <_strtod_l+0x4de>
 80092a2:	4680      	mov	r8, r0
 80092a4:	4689      	mov	r9, r1
 80092a6:	492c      	ldr	r1, [pc, #176]	; (8009358 <_strtod_l+0x590>)
 80092a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80092ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80092b0:	4642      	mov	r2, r8
 80092b2:	464b      	mov	r3, r9
 80092b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092b8:	f7f7 f99e 	bl	80005f8 <__aeabi_dmul>
 80092bc:	4b27      	ldr	r3, [pc, #156]	; (800935c <_strtod_l+0x594>)
 80092be:	460a      	mov	r2, r1
 80092c0:	400b      	ands	r3, r1
 80092c2:	4927      	ldr	r1, [pc, #156]	; (8009360 <_strtod_l+0x598>)
 80092c4:	428b      	cmp	r3, r1
 80092c6:	4680      	mov	r8, r0
 80092c8:	d8be      	bhi.n	8009248 <_strtod_l+0x480>
 80092ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80092ce:	428b      	cmp	r3, r1
 80092d0:	bf86      	itte	hi
 80092d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009364 <_strtod_l+0x59c>
 80092d6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80092da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80092de:	2300      	movs	r3, #0
 80092e0:	9304      	str	r3, [sp, #16]
 80092e2:	e07b      	b.n	80093dc <_strtod_l+0x614>
 80092e4:	07ea      	lsls	r2, r5, #31
 80092e6:	d505      	bpl.n	80092f4 <_strtod_l+0x52c>
 80092e8:	9b04      	ldr	r3, [sp, #16]
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f7f7 f983 	bl	80005f8 <__aeabi_dmul>
 80092f2:	2301      	movs	r3, #1
 80092f4:	9a04      	ldr	r2, [sp, #16]
 80092f6:	3208      	adds	r2, #8
 80092f8:	f10a 0a01 	add.w	sl, sl, #1
 80092fc:	106d      	asrs	r5, r5, #1
 80092fe:	9204      	str	r2, [sp, #16]
 8009300:	e7cc      	b.n	800929c <_strtod_l+0x4d4>
 8009302:	d0ec      	beq.n	80092de <_strtod_l+0x516>
 8009304:	426d      	negs	r5, r5
 8009306:	f015 020f 	ands.w	r2, r5, #15
 800930a:	d00a      	beq.n	8009322 <_strtod_l+0x55a>
 800930c:	4b11      	ldr	r3, [pc, #68]	; (8009354 <_strtod_l+0x58c>)
 800930e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009312:	4640      	mov	r0, r8
 8009314:	4649      	mov	r1, r9
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f7f7 fa97 	bl	800084c <__aeabi_ddiv>
 800931e:	4680      	mov	r8, r0
 8009320:	4689      	mov	r9, r1
 8009322:	112d      	asrs	r5, r5, #4
 8009324:	d0db      	beq.n	80092de <_strtod_l+0x516>
 8009326:	2d1f      	cmp	r5, #31
 8009328:	dd1e      	ble.n	8009368 <_strtod_l+0x5a0>
 800932a:	2500      	movs	r5, #0
 800932c:	46ab      	mov	fp, r5
 800932e:	9509      	str	r5, [sp, #36]	; 0x24
 8009330:	9505      	str	r5, [sp, #20]
 8009332:	2322      	movs	r3, #34	; 0x22
 8009334:	f04f 0800 	mov.w	r8, #0
 8009338:	f04f 0900 	mov.w	r9, #0
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	e78d      	b.n	800925c <_strtod_l+0x494>
 8009340:	0800ad6e 	.word	0x0800ad6e
 8009344:	0800af94 	.word	0x0800af94
 8009348:	0800ad66 	.word	0x0800ad66
 800934c:	0800ad9d 	.word	0x0800ad9d
 8009350:	0800b024 	.word	0x0800b024
 8009354:	0800aea8 	.word	0x0800aea8
 8009358:	0800ae80 	.word	0x0800ae80
 800935c:	7ff00000 	.word	0x7ff00000
 8009360:	7ca00000 	.word	0x7ca00000
 8009364:	7fefffff 	.word	0x7fefffff
 8009368:	f015 0310 	ands.w	r3, r5, #16
 800936c:	bf18      	it	ne
 800936e:	236a      	movne	r3, #106	; 0x6a
 8009370:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009714 <_strtod_l+0x94c>
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	4640      	mov	r0, r8
 8009378:	4649      	mov	r1, r9
 800937a:	2300      	movs	r3, #0
 800937c:	07ea      	lsls	r2, r5, #31
 800937e:	d504      	bpl.n	800938a <_strtod_l+0x5c2>
 8009380:	e9da 2300 	ldrd	r2, r3, [sl]
 8009384:	f7f7 f938 	bl	80005f8 <__aeabi_dmul>
 8009388:	2301      	movs	r3, #1
 800938a:	106d      	asrs	r5, r5, #1
 800938c:	f10a 0a08 	add.w	sl, sl, #8
 8009390:	d1f4      	bne.n	800937c <_strtod_l+0x5b4>
 8009392:	b10b      	cbz	r3, 8009398 <_strtod_l+0x5d0>
 8009394:	4680      	mov	r8, r0
 8009396:	4689      	mov	r9, r1
 8009398:	9b04      	ldr	r3, [sp, #16]
 800939a:	b1bb      	cbz	r3, 80093cc <_strtod_l+0x604>
 800939c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80093a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	4649      	mov	r1, r9
 80093a8:	dd10      	ble.n	80093cc <_strtod_l+0x604>
 80093aa:	2b1f      	cmp	r3, #31
 80093ac:	f340 811e 	ble.w	80095ec <_strtod_l+0x824>
 80093b0:	2b34      	cmp	r3, #52	; 0x34
 80093b2:	bfde      	ittt	le
 80093b4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80093b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80093bc:	4093      	lslle	r3, r2
 80093be:	f04f 0800 	mov.w	r8, #0
 80093c2:	bfcc      	ite	gt
 80093c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80093c8:	ea03 0901 	andle.w	r9, r3, r1
 80093cc:	2200      	movs	r2, #0
 80093ce:	2300      	movs	r3, #0
 80093d0:	4640      	mov	r0, r8
 80093d2:	4649      	mov	r1, r9
 80093d4:	f7f7 fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d1a6      	bne.n	800932a <_strtod_l+0x562>
 80093dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093e2:	4633      	mov	r3, r6
 80093e4:	465a      	mov	r2, fp
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7ff f8cc 	bl	8008584 <__s2b>
 80093ec:	9009      	str	r0, [sp, #36]	; 0x24
 80093ee:	2800      	cmp	r0, #0
 80093f0:	f43f af2a 	beq.w	8009248 <_strtod_l+0x480>
 80093f4:	9a08      	ldr	r2, [sp, #32]
 80093f6:	9b05      	ldr	r3, [sp, #20]
 80093f8:	2a00      	cmp	r2, #0
 80093fa:	eba3 0307 	sub.w	r3, r3, r7
 80093fe:	bfa8      	it	ge
 8009400:	2300      	movge	r3, #0
 8009402:	930c      	str	r3, [sp, #48]	; 0x30
 8009404:	2500      	movs	r5, #0
 8009406:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800940a:	9312      	str	r3, [sp, #72]	; 0x48
 800940c:	46ab      	mov	fp, r5
 800940e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009410:	4620      	mov	r0, r4
 8009412:	6859      	ldr	r1, [r3, #4]
 8009414:	f7ff f80e 	bl	8008434 <_Balloc>
 8009418:	9005      	str	r0, [sp, #20]
 800941a:	2800      	cmp	r0, #0
 800941c:	f43f af18 	beq.w	8009250 <_strtod_l+0x488>
 8009420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009422:	691a      	ldr	r2, [r3, #16]
 8009424:	3202      	adds	r2, #2
 8009426:	f103 010c 	add.w	r1, r3, #12
 800942a:	0092      	lsls	r2, r2, #2
 800942c:	300c      	adds	r0, #12
 800942e:	f000 fd03 	bl	8009e38 <memcpy>
 8009432:	ec49 8b10 	vmov	d0, r8, r9
 8009436:	aa18      	add	r2, sp, #96	; 0x60
 8009438:	a917      	add	r1, sp, #92	; 0x5c
 800943a:	4620      	mov	r0, r4
 800943c:	f7ff fbd6 	bl	8008bec <__d2b>
 8009440:	ec49 8b18 	vmov	d8, r8, r9
 8009444:	9016      	str	r0, [sp, #88]	; 0x58
 8009446:	2800      	cmp	r0, #0
 8009448:	f43f af02 	beq.w	8009250 <_strtod_l+0x488>
 800944c:	2101      	movs	r1, #1
 800944e:	4620      	mov	r0, r4
 8009450:	f7ff f930 	bl	80086b4 <__i2b>
 8009454:	4683      	mov	fp, r0
 8009456:	2800      	cmp	r0, #0
 8009458:	f43f aefa 	beq.w	8009250 <_strtod_l+0x488>
 800945c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800945e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009460:	2e00      	cmp	r6, #0
 8009462:	bfab      	itete	ge
 8009464:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009466:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009468:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800946a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800946e:	bfac      	ite	ge
 8009470:	eb06 0a03 	addge.w	sl, r6, r3
 8009474:	1b9f      	sublt	r7, r3, r6
 8009476:	9b04      	ldr	r3, [sp, #16]
 8009478:	1af6      	subs	r6, r6, r3
 800947a:	4416      	add	r6, r2
 800947c:	4ba0      	ldr	r3, [pc, #640]	; (8009700 <_strtod_l+0x938>)
 800947e:	3e01      	subs	r6, #1
 8009480:	429e      	cmp	r6, r3
 8009482:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009486:	f280 80c4 	bge.w	8009612 <_strtod_l+0x84a>
 800948a:	1b9b      	subs	r3, r3, r6
 800948c:	2b1f      	cmp	r3, #31
 800948e:	eba2 0203 	sub.w	r2, r2, r3
 8009492:	f04f 0101 	mov.w	r1, #1
 8009496:	f300 80b0 	bgt.w	80095fa <_strtod_l+0x832>
 800949a:	fa01 f303 	lsl.w	r3, r1, r3
 800949e:	930e      	str	r3, [sp, #56]	; 0x38
 80094a0:	2300      	movs	r3, #0
 80094a2:	930d      	str	r3, [sp, #52]	; 0x34
 80094a4:	eb0a 0602 	add.w	r6, sl, r2
 80094a8:	9b04      	ldr	r3, [sp, #16]
 80094aa:	45b2      	cmp	sl, r6
 80094ac:	4417      	add	r7, r2
 80094ae:	441f      	add	r7, r3
 80094b0:	4653      	mov	r3, sl
 80094b2:	bfa8      	it	ge
 80094b4:	4633      	movge	r3, r6
 80094b6:	42bb      	cmp	r3, r7
 80094b8:	bfa8      	it	ge
 80094ba:	463b      	movge	r3, r7
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bfc2      	ittt	gt
 80094c0:	1af6      	subgt	r6, r6, r3
 80094c2:	1aff      	subgt	r7, r7, r3
 80094c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80094c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	dd17      	ble.n	80094fe <_strtod_l+0x736>
 80094ce:	4659      	mov	r1, fp
 80094d0:	461a      	mov	r2, r3
 80094d2:	4620      	mov	r0, r4
 80094d4:	f7ff f9ae 	bl	8008834 <__pow5mult>
 80094d8:	4683      	mov	fp, r0
 80094da:	2800      	cmp	r0, #0
 80094dc:	f43f aeb8 	beq.w	8009250 <_strtod_l+0x488>
 80094e0:	4601      	mov	r1, r0
 80094e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094e4:	4620      	mov	r0, r4
 80094e6:	f7ff f8fb 	bl	80086e0 <__multiply>
 80094ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f43f aeaf 	beq.w	8009250 <_strtod_l+0x488>
 80094f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80094f4:	4620      	mov	r0, r4
 80094f6:	f7fe ffdd 	bl	80084b4 <_Bfree>
 80094fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094fc:	9316      	str	r3, [sp, #88]	; 0x58
 80094fe:	2e00      	cmp	r6, #0
 8009500:	f300 808c 	bgt.w	800961c <_strtod_l+0x854>
 8009504:	9b08      	ldr	r3, [sp, #32]
 8009506:	2b00      	cmp	r3, #0
 8009508:	dd08      	ble.n	800951c <_strtod_l+0x754>
 800950a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800950c:	9905      	ldr	r1, [sp, #20]
 800950e:	4620      	mov	r0, r4
 8009510:	f7ff f990 	bl	8008834 <__pow5mult>
 8009514:	9005      	str	r0, [sp, #20]
 8009516:	2800      	cmp	r0, #0
 8009518:	f43f ae9a 	beq.w	8009250 <_strtod_l+0x488>
 800951c:	2f00      	cmp	r7, #0
 800951e:	dd08      	ble.n	8009532 <_strtod_l+0x76a>
 8009520:	9905      	ldr	r1, [sp, #20]
 8009522:	463a      	mov	r2, r7
 8009524:	4620      	mov	r0, r4
 8009526:	f7ff f9df 	bl	80088e8 <__lshift>
 800952a:	9005      	str	r0, [sp, #20]
 800952c:	2800      	cmp	r0, #0
 800952e:	f43f ae8f 	beq.w	8009250 <_strtod_l+0x488>
 8009532:	f1ba 0f00 	cmp.w	sl, #0
 8009536:	dd08      	ble.n	800954a <_strtod_l+0x782>
 8009538:	4659      	mov	r1, fp
 800953a:	4652      	mov	r2, sl
 800953c:	4620      	mov	r0, r4
 800953e:	f7ff f9d3 	bl	80088e8 <__lshift>
 8009542:	4683      	mov	fp, r0
 8009544:	2800      	cmp	r0, #0
 8009546:	f43f ae83 	beq.w	8009250 <_strtod_l+0x488>
 800954a:	9a05      	ldr	r2, [sp, #20]
 800954c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800954e:	4620      	mov	r0, r4
 8009550:	f7ff fa52 	bl	80089f8 <__mdiff>
 8009554:	4605      	mov	r5, r0
 8009556:	2800      	cmp	r0, #0
 8009558:	f43f ae7a 	beq.w	8009250 <_strtod_l+0x488>
 800955c:	68c3      	ldr	r3, [r0, #12]
 800955e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009560:	2300      	movs	r3, #0
 8009562:	60c3      	str	r3, [r0, #12]
 8009564:	4659      	mov	r1, fp
 8009566:	f7ff fa2b 	bl	80089c0 <__mcmp>
 800956a:	2800      	cmp	r0, #0
 800956c:	da60      	bge.n	8009630 <_strtod_l+0x868>
 800956e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009570:	ea53 0308 	orrs.w	r3, r3, r8
 8009574:	f040 8084 	bne.w	8009680 <_strtod_l+0x8b8>
 8009578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800957c:	2b00      	cmp	r3, #0
 800957e:	d17f      	bne.n	8009680 <_strtod_l+0x8b8>
 8009580:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009584:	0d1b      	lsrs	r3, r3, #20
 8009586:	051b      	lsls	r3, r3, #20
 8009588:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800958c:	d978      	bls.n	8009680 <_strtod_l+0x8b8>
 800958e:	696b      	ldr	r3, [r5, #20]
 8009590:	b913      	cbnz	r3, 8009598 <_strtod_l+0x7d0>
 8009592:	692b      	ldr	r3, [r5, #16]
 8009594:	2b01      	cmp	r3, #1
 8009596:	dd73      	ble.n	8009680 <_strtod_l+0x8b8>
 8009598:	4629      	mov	r1, r5
 800959a:	2201      	movs	r2, #1
 800959c:	4620      	mov	r0, r4
 800959e:	f7ff f9a3 	bl	80088e8 <__lshift>
 80095a2:	4659      	mov	r1, fp
 80095a4:	4605      	mov	r5, r0
 80095a6:	f7ff fa0b 	bl	80089c0 <__mcmp>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	dd68      	ble.n	8009680 <_strtod_l+0x8b8>
 80095ae:	9904      	ldr	r1, [sp, #16]
 80095b0:	4a54      	ldr	r2, [pc, #336]	; (8009704 <_strtod_l+0x93c>)
 80095b2:	464b      	mov	r3, r9
 80095b4:	2900      	cmp	r1, #0
 80095b6:	f000 8084 	beq.w	80096c2 <_strtod_l+0x8fa>
 80095ba:	ea02 0109 	and.w	r1, r2, r9
 80095be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80095c2:	dc7e      	bgt.n	80096c2 <_strtod_l+0x8fa>
 80095c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80095c8:	f77f aeb3 	ble.w	8009332 <_strtod_l+0x56a>
 80095cc:	4b4e      	ldr	r3, [pc, #312]	; (8009708 <_strtod_l+0x940>)
 80095ce:	4640      	mov	r0, r8
 80095d0:	4649      	mov	r1, r9
 80095d2:	2200      	movs	r2, #0
 80095d4:	f7f7 f810 	bl	80005f8 <__aeabi_dmul>
 80095d8:	4b4a      	ldr	r3, [pc, #296]	; (8009704 <_strtod_l+0x93c>)
 80095da:	400b      	ands	r3, r1
 80095dc:	4680      	mov	r8, r0
 80095de:	4689      	mov	r9, r1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f47f ae3f 	bne.w	8009264 <_strtod_l+0x49c>
 80095e6:	2322      	movs	r3, #34	; 0x22
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	e63b      	b.n	8009264 <_strtod_l+0x49c>
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095f0:	fa02 f303 	lsl.w	r3, r2, r3
 80095f4:	ea03 0808 	and.w	r8, r3, r8
 80095f8:	e6e8      	b.n	80093cc <_strtod_l+0x604>
 80095fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80095fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009602:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009606:	36e2      	adds	r6, #226	; 0xe2
 8009608:	fa01 f306 	lsl.w	r3, r1, r6
 800960c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009610:	e748      	b.n	80094a4 <_strtod_l+0x6dc>
 8009612:	2100      	movs	r1, #0
 8009614:	2301      	movs	r3, #1
 8009616:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800961a:	e743      	b.n	80094a4 <_strtod_l+0x6dc>
 800961c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800961e:	4632      	mov	r2, r6
 8009620:	4620      	mov	r0, r4
 8009622:	f7ff f961 	bl	80088e8 <__lshift>
 8009626:	9016      	str	r0, [sp, #88]	; 0x58
 8009628:	2800      	cmp	r0, #0
 800962a:	f47f af6b 	bne.w	8009504 <_strtod_l+0x73c>
 800962e:	e60f      	b.n	8009250 <_strtod_l+0x488>
 8009630:	46ca      	mov	sl, r9
 8009632:	d171      	bne.n	8009718 <_strtod_l+0x950>
 8009634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009636:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800963a:	b352      	cbz	r2, 8009692 <_strtod_l+0x8ca>
 800963c:	4a33      	ldr	r2, [pc, #204]	; (800970c <_strtod_l+0x944>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d12a      	bne.n	8009698 <_strtod_l+0x8d0>
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	4641      	mov	r1, r8
 8009646:	b1fb      	cbz	r3, 8009688 <_strtod_l+0x8c0>
 8009648:	4b2e      	ldr	r3, [pc, #184]	; (8009704 <_strtod_l+0x93c>)
 800964a:	ea09 0303 	and.w	r3, r9, r3
 800964e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009656:	d81a      	bhi.n	800968e <_strtod_l+0x8c6>
 8009658:	0d1b      	lsrs	r3, r3, #20
 800965a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800965e:	fa02 f303 	lsl.w	r3, r2, r3
 8009662:	4299      	cmp	r1, r3
 8009664:	d118      	bne.n	8009698 <_strtod_l+0x8d0>
 8009666:	4b2a      	ldr	r3, [pc, #168]	; (8009710 <_strtod_l+0x948>)
 8009668:	459a      	cmp	sl, r3
 800966a:	d102      	bne.n	8009672 <_strtod_l+0x8aa>
 800966c:	3101      	adds	r1, #1
 800966e:	f43f adef 	beq.w	8009250 <_strtod_l+0x488>
 8009672:	4b24      	ldr	r3, [pc, #144]	; (8009704 <_strtod_l+0x93c>)
 8009674:	ea0a 0303 	and.w	r3, sl, r3
 8009678:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800967c:	f04f 0800 	mov.w	r8, #0
 8009680:	9b04      	ldr	r3, [sp, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1a2      	bne.n	80095cc <_strtod_l+0x804>
 8009686:	e5ed      	b.n	8009264 <_strtod_l+0x49c>
 8009688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800968c:	e7e9      	b.n	8009662 <_strtod_l+0x89a>
 800968e:	4613      	mov	r3, r2
 8009690:	e7e7      	b.n	8009662 <_strtod_l+0x89a>
 8009692:	ea53 0308 	orrs.w	r3, r3, r8
 8009696:	d08a      	beq.n	80095ae <_strtod_l+0x7e6>
 8009698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800969a:	b1e3      	cbz	r3, 80096d6 <_strtod_l+0x90e>
 800969c:	ea13 0f0a 	tst.w	r3, sl
 80096a0:	d0ee      	beq.n	8009680 <_strtod_l+0x8b8>
 80096a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a4:	9a04      	ldr	r2, [sp, #16]
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	b1c3      	cbz	r3, 80096de <_strtod_l+0x916>
 80096ac:	f7ff fb6f 	bl	8008d8e <sulp>
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	ec51 0b18 	vmov	r0, r1, d8
 80096b8:	f7f6 fde8 	bl	800028c <__adddf3>
 80096bc:	4680      	mov	r8, r0
 80096be:	4689      	mov	r9, r1
 80096c0:	e7de      	b.n	8009680 <_strtod_l+0x8b8>
 80096c2:	4013      	ands	r3, r2
 80096c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80096cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80096d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80096d4:	e7d4      	b.n	8009680 <_strtod_l+0x8b8>
 80096d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096d8:	ea13 0f08 	tst.w	r3, r8
 80096dc:	e7e0      	b.n	80096a0 <_strtod_l+0x8d8>
 80096de:	f7ff fb56 	bl	8008d8e <sulp>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	ec51 0b18 	vmov	r0, r1, d8
 80096ea:	f7f6 fdcd 	bl	8000288 <__aeabi_dsub>
 80096ee:	2200      	movs	r2, #0
 80096f0:	2300      	movs	r3, #0
 80096f2:	4680      	mov	r8, r0
 80096f4:	4689      	mov	r9, r1
 80096f6:	f7f7 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d0c0      	beq.n	8009680 <_strtod_l+0x8b8>
 80096fe:	e618      	b.n	8009332 <_strtod_l+0x56a>
 8009700:	fffffc02 	.word	0xfffffc02
 8009704:	7ff00000 	.word	0x7ff00000
 8009708:	39500000 	.word	0x39500000
 800970c:	000fffff 	.word	0x000fffff
 8009710:	7fefffff 	.word	0x7fefffff
 8009714:	0800afa8 	.word	0x0800afa8
 8009718:	4659      	mov	r1, fp
 800971a:	4628      	mov	r0, r5
 800971c:	f7ff fac0 	bl	8008ca0 <__ratio>
 8009720:	ec57 6b10 	vmov	r6, r7, d0
 8009724:	ee10 0a10 	vmov	r0, s0
 8009728:	2200      	movs	r2, #0
 800972a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800972e:	4639      	mov	r1, r7
 8009730:	f7f7 f9de 	bl	8000af0 <__aeabi_dcmple>
 8009734:	2800      	cmp	r0, #0
 8009736:	d071      	beq.n	800981c <_strtod_l+0xa54>
 8009738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d17c      	bne.n	8009838 <_strtod_l+0xa70>
 800973e:	f1b8 0f00 	cmp.w	r8, #0
 8009742:	d15a      	bne.n	80097fa <_strtod_l+0xa32>
 8009744:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009748:	2b00      	cmp	r3, #0
 800974a:	d15d      	bne.n	8009808 <_strtod_l+0xa40>
 800974c:	4b90      	ldr	r3, [pc, #576]	; (8009990 <_strtod_l+0xbc8>)
 800974e:	2200      	movs	r2, #0
 8009750:	4630      	mov	r0, r6
 8009752:	4639      	mov	r1, r7
 8009754:	f7f7 f9c2 	bl	8000adc <__aeabi_dcmplt>
 8009758:	2800      	cmp	r0, #0
 800975a:	d15c      	bne.n	8009816 <_strtod_l+0xa4e>
 800975c:	4630      	mov	r0, r6
 800975e:	4639      	mov	r1, r7
 8009760:	4b8c      	ldr	r3, [pc, #560]	; (8009994 <_strtod_l+0xbcc>)
 8009762:	2200      	movs	r2, #0
 8009764:	f7f6 ff48 	bl	80005f8 <__aeabi_dmul>
 8009768:	4606      	mov	r6, r0
 800976a:	460f      	mov	r7, r1
 800976c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009770:	9606      	str	r6, [sp, #24]
 8009772:	9307      	str	r3, [sp, #28]
 8009774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009778:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800977c:	4b86      	ldr	r3, [pc, #536]	; (8009998 <_strtod_l+0xbd0>)
 800977e:	ea0a 0303 	and.w	r3, sl, r3
 8009782:	930d      	str	r3, [sp, #52]	; 0x34
 8009784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009786:	4b85      	ldr	r3, [pc, #532]	; (800999c <_strtod_l+0xbd4>)
 8009788:	429a      	cmp	r2, r3
 800978a:	f040 8090 	bne.w	80098ae <_strtod_l+0xae6>
 800978e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009792:	ec49 8b10 	vmov	d0, r8, r9
 8009796:	f7ff f9b9 	bl	8008b0c <__ulp>
 800979a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800979e:	ec51 0b10 	vmov	r0, r1, d0
 80097a2:	f7f6 ff29 	bl	80005f8 <__aeabi_dmul>
 80097a6:	4642      	mov	r2, r8
 80097a8:	464b      	mov	r3, r9
 80097aa:	f7f6 fd6f 	bl	800028c <__adddf3>
 80097ae:	460b      	mov	r3, r1
 80097b0:	4979      	ldr	r1, [pc, #484]	; (8009998 <_strtod_l+0xbd0>)
 80097b2:	4a7b      	ldr	r2, [pc, #492]	; (80099a0 <_strtod_l+0xbd8>)
 80097b4:	4019      	ands	r1, r3
 80097b6:	4291      	cmp	r1, r2
 80097b8:	4680      	mov	r8, r0
 80097ba:	d944      	bls.n	8009846 <_strtod_l+0xa7e>
 80097bc:	ee18 2a90 	vmov	r2, s17
 80097c0:	4b78      	ldr	r3, [pc, #480]	; (80099a4 <_strtod_l+0xbdc>)
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d104      	bne.n	80097d0 <_strtod_l+0xa08>
 80097c6:	ee18 3a10 	vmov	r3, s16
 80097ca:	3301      	adds	r3, #1
 80097cc:	f43f ad40 	beq.w	8009250 <_strtod_l+0x488>
 80097d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80099a4 <_strtod_l+0xbdc>
 80097d4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80097d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80097da:	4620      	mov	r0, r4
 80097dc:	f7fe fe6a 	bl	80084b4 <_Bfree>
 80097e0:	9905      	ldr	r1, [sp, #20]
 80097e2:	4620      	mov	r0, r4
 80097e4:	f7fe fe66 	bl	80084b4 <_Bfree>
 80097e8:	4659      	mov	r1, fp
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7fe fe62 	bl	80084b4 <_Bfree>
 80097f0:	4629      	mov	r1, r5
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7fe fe5e 	bl	80084b4 <_Bfree>
 80097f8:	e609      	b.n	800940e <_strtod_l+0x646>
 80097fa:	f1b8 0f01 	cmp.w	r8, #1
 80097fe:	d103      	bne.n	8009808 <_strtod_l+0xa40>
 8009800:	f1b9 0f00 	cmp.w	r9, #0
 8009804:	f43f ad95 	beq.w	8009332 <_strtod_l+0x56a>
 8009808:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009960 <_strtod_l+0xb98>
 800980c:	4f60      	ldr	r7, [pc, #384]	; (8009990 <_strtod_l+0xbc8>)
 800980e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009812:	2600      	movs	r6, #0
 8009814:	e7ae      	b.n	8009774 <_strtod_l+0x9ac>
 8009816:	4f5f      	ldr	r7, [pc, #380]	; (8009994 <_strtod_l+0xbcc>)
 8009818:	2600      	movs	r6, #0
 800981a:	e7a7      	b.n	800976c <_strtod_l+0x9a4>
 800981c:	4b5d      	ldr	r3, [pc, #372]	; (8009994 <_strtod_l+0xbcc>)
 800981e:	4630      	mov	r0, r6
 8009820:	4639      	mov	r1, r7
 8009822:	2200      	movs	r2, #0
 8009824:	f7f6 fee8 	bl	80005f8 <__aeabi_dmul>
 8009828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800982a:	4606      	mov	r6, r0
 800982c:	460f      	mov	r7, r1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d09c      	beq.n	800976c <_strtod_l+0x9a4>
 8009832:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009836:	e79d      	b.n	8009774 <_strtod_l+0x9ac>
 8009838:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009968 <_strtod_l+0xba0>
 800983c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009840:	ec57 6b17 	vmov	r6, r7, d7
 8009844:	e796      	b.n	8009774 <_strtod_l+0x9ac>
 8009846:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800984a:	9b04      	ldr	r3, [sp, #16]
 800984c:	46ca      	mov	sl, r9
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1c2      	bne.n	80097d8 <_strtod_l+0xa10>
 8009852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009858:	0d1b      	lsrs	r3, r3, #20
 800985a:	051b      	lsls	r3, r3, #20
 800985c:	429a      	cmp	r2, r3
 800985e:	d1bb      	bne.n	80097d8 <_strtod_l+0xa10>
 8009860:	4630      	mov	r0, r6
 8009862:	4639      	mov	r1, r7
 8009864:	f7f7 fa28 	bl	8000cb8 <__aeabi_d2lz>
 8009868:	f7f6 fe98 	bl	800059c <__aeabi_l2d>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	4630      	mov	r0, r6
 8009872:	4639      	mov	r1, r7
 8009874:	f7f6 fd08 	bl	8000288 <__aeabi_dsub>
 8009878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800987a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800987e:	ea43 0308 	orr.w	r3, r3, r8
 8009882:	4313      	orrs	r3, r2
 8009884:	4606      	mov	r6, r0
 8009886:	460f      	mov	r7, r1
 8009888:	d054      	beq.n	8009934 <_strtod_l+0xb6c>
 800988a:	a339      	add	r3, pc, #228	; (adr r3, 8009970 <_strtod_l+0xba8>)
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f7f7 f924 	bl	8000adc <__aeabi_dcmplt>
 8009894:	2800      	cmp	r0, #0
 8009896:	f47f ace5 	bne.w	8009264 <_strtod_l+0x49c>
 800989a:	a337      	add	r3, pc, #220	; (adr r3, 8009978 <_strtod_l+0xbb0>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	4630      	mov	r0, r6
 80098a2:	4639      	mov	r1, r7
 80098a4:	f7f7 f938 	bl	8000b18 <__aeabi_dcmpgt>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d095      	beq.n	80097d8 <_strtod_l+0xa10>
 80098ac:	e4da      	b.n	8009264 <_strtod_l+0x49c>
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	b333      	cbz	r3, 8009900 <_strtod_l+0xb38>
 80098b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098b8:	d822      	bhi.n	8009900 <_strtod_l+0xb38>
 80098ba:	a331      	add	r3, pc, #196	; (adr r3, 8009980 <_strtod_l+0xbb8>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	4630      	mov	r0, r6
 80098c2:	4639      	mov	r1, r7
 80098c4:	f7f7 f914 	bl	8000af0 <__aeabi_dcmple>
 80098c8:	b1a0      	cbz	r0, 80098f4 <_strtod_l+0xb2c>
 80098ca:	4639      	mov	r1, r7
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7f7 f96b 	bl	8000ba8 <__aeabi_d2uiz>
 80098d2:	2801      	cmp	r0, #1
 80098d4:	bf38      	it	cc
 80098d6:	2001      	movcc	r0, #1
 80098d8:	f7f6 fe14 	bl	8000504 <__aeabi_ui2d>
 80098dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098de:	4606      	mov	r6, r0
 80098e0:	460f      	mov	r7, r1
 80098e2:	bb23      	cbnz	r3, 800992e <_strtod_l+0xb66>
 80098e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098e8:	9010      	str	r0, [sp, #64]	; 0x40
 80098ea:	9311      	str	r3, [sp, #68]	; 0x44
 80098ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80098f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80098fc:	1a9b      	subs	r3, r3, r2
 80098fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009900:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009904:	eeb0 0a48 	vmov.f32	s0, s16
 8009908:	eef0 0a68 	vmov.f32	s1, s17
 800990c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009910:	f7ff f8fc 	bl	8008b0c <__ulp>
 8009914:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009918:	ec53 2b10 	vmov	r2, r3, d0
 800991c:	f7f6 fe6c 	bl	80005f8 <__aeabi_dmul>
 8009920:	ec53 2b18 	vmov	r2, r3, d8
 8009924:	f7f6 fcb2 	bl	800028c <__adddf3>
 8009928:	4680      	mov	r8, r0
 800992a:	4689      	mov	r9, r1
 800992c:	e78d      	b.n	800984a <_strtod_l+0xa82>
 800992e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009932:	e7db      	b.n	80098ec <_strtod_l+0xb24>
 8009934:	a314      	add	r3, pc, #80	; (adr r3, 8009988 <_strtod_l+0xbc0>)
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	f7f7 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800993e:	e7b3      	b.n	80098a8 <_strtod_l+0xae0>
 8009940:	2300      	movs	r3, #0
 8009942:	930a      	str	r3, [sp, #40]	; 0x28
 8009944:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	f7ff ba7c 	b.w	8008e46 <_strtod_l+0x7e>
 800994e:	2a65      	cmp	r2, #101	; 0x65
 8009950:	f43f ab75 	beq.w	800903e <_strtod_l+0x276>
 8009954:	2a45      	cmp	r2, #69	; 0x45
 8009956:	f43f ab72 	beq.w	800903e <_strtod_l+0x276>
 800995a:	2301      	movs	r3, #1
 800995c:	f7ff bbaa 	b.w	80090b4 <_strtod_l+0x2ec>
 8009960:	00000000 	.word	0x00000000
 8009964:	bff00000 	.word	0xbff00000
 8009968:	00000000 	.word	0x00000000
 800996c:	3ff00000 	.word	0x3ff00000
 8009970:	94a03595 	.word	0x94a03595
 8009974:	3fdfffff 	.word	0x3fdfffff
 8009978:	35afe535 	.word	0x35afe535
 800997c:	3fe00000 	.word	0x3fe00000
 8009980:	ffc00000 	.word	0xffc00000
 8009984:	41dfffff 	.word	0x41dfffff
 8009988:	94a03595 	.word	0x94a03595
 800998c:	3fcfffff 	.word	0x3fcfffff
 8009990:	3ff00000 	.word	0x3ff00000
 8009994:	3fe00000 	.word	0x3fe00000
 8009998:	7ff00000 	.word	0x7ff00000
 800999c:	7fe00000 	.word	0x7fe00000
 80099a0:	7c9fffff 	.word	0x7c9fffff
 80099a4:	7fefffff 	.word	0x7fefffff

080099a8 <_strtod_r>:
 80099a8:	4b01      	ldr	r3, [pc, #4]	; (80099b0 <_strtod_r+0x8>)
 80099aa:	f7ff ba0d 	b.w	8008dc8 <_strtod_l>
 80099ae:	bf00      	nop
 80099b0:	2000007c 	.word	0x2000007c

080099b4 <__ssputs_r>:
 80099b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	688e      	ldr	r6, [r1, #8]
 80099ba:	461f      	mov	r7, r3
 80099bc:	42be      	cmp	r6, r7
 80099be:	680b      	ldr	r3, [r1, #0]
 80099c0:	4682      	mov	sl, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	4690      	mov	r8, r2
 80099c6:	d82c      	bhi.n	8009a22 <__ssputs_r+0x6e>
 80099c8:	898a      	ldrh	r2, [r1, #12]
 80099ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099ce:	d026      	beq.n	8009a1e <__ssputs_r+0x6a>
 80099d0:	6965      	ldr	r5, [r4, #20]
 80099d2:	6909      	ldr	r1, [r1, #16]
 80099d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099d8:	eba3 0901 	sub.w	r9, r3, r1
 80099dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e0:	1c7b      	adds	r3, r7, #1
 80099e2:	444b      	add	r3, r9
 80099e4:	106d      	asrs	r5, r5, #1
 80099e6:	429d      	cmp	r5, r3
 80099e8:	bf38      	it	cc
 80099ea:	461d      	movcc	r5, r3
 80099ec:	0553      	lsls	r3, r2, #21
 80099ee:	d527      	bpl.n	8009a40 <__ssputs_r+0x8c>
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7fe fc93 	bl	800831c <_malloc_r>
 80099f6:	4606      	mov	r6, r0
 80099f8:	b360      	cbz	r0, 8009a54 <__ssputs_r+0xa0>
 80099fa:	6921      	ldr	r1, [r4, #16]
 80099fc:	464a      	mov	r2, r9
 80099fe:	f000 fa1b 	bl	8009e38 <memcpy>
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	6126      	str	r6, [r4, #16]
 8009a10:	6165      	str	r5, [r4, #20]
 8009a12:	444e      	add	r6, r9
 8009a14:	eba5 0509 	sub.w	r5, r5, r9
 8009a18:	6026      	str	r6, [r4, #0]
 8009a1a:	60a5      	str	r5, [r4, #8]
 8009a1c:	463e      	mov	r6, r7
 8009a1e:	42be      	cmp	r6, r7
 8009a20:	d900      	bls.n	8009a24 <__ssputs_r+0x70>
 8009a22:	463e      	mov	r6, r7
 8009a24:	6820      	ldr	r0, [r4, #0]
 8009a26:	4632      	mov	r2, r6
 8009a28:	4641      	mov	r1, r8
 8009a2a:	f000 f9c9 	bl	8009dc0 <memmove>
 8009a2e:	68a3      	ldr	r3, [r4, #8]
 8009a30:	1b9b      	subs	r3, r3, r6
 8009a32:	60a3      	str	r3, [r4, #8]
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	4433      	add	r3, r6
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a40:	462a      	mov	r2, r5
 8009a42:	f000 fdae 	bl	800a5a2 <_realloc_r>
 8009a46:	4606      	mov	r6, r0
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d1e0      	bne.n	8009a0e <__ssputs_r+0x5a>
 8009a4c:	6921      	ldr	r1, [r4, #16]
 8009a4e:	4650      	mov	r0, sl
 8009a50:	f7fe fbf0 	bl	8008234 <_free_r>
 8009a54:	230c      	movs	r3, #12
 8009a56:	f8ca 3000 	str.w	r3, [sl]
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a60:	81a3      	strh	r3, [r4, #12]
 8009a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a66:	e7e9      	b.n	8009a3c <__ssputs_r+0x88>

08009a68 <_svfiprintf_r>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	4698      	mov	r8, r3
 8009a6e:	898b      	ldrh	r3, [r1, #12]
 8009a70:	061b      	lsls	r3, r3, #24
 8009a72:	b09d      	sub	sp, #116	; 0x74
 8009a74:	4607      	mov	r7, r0
 8009a76:	460d      	mov	r5, r1
 8009a78:	4614      	mov	r4, r2
 8009a7a:	d50e      	bpl.n	8009a9a <_svfiprintf_r+0x32>
 8009a7c:	690b      	ldr	r3, [r1, #16]
 8009a7e:	b963      	cbnz	r3, 8009a9a <_svfiprintf_r+0x32>
 8009a80:	2140      	movs	r1, #64	; 0x40
 8009a82:	f7fe fc4b 	bl	800831c <_malloc_r>
 8009a86:	6028      	str	r0, [r5, #0]
 8009a88:	6128      	str	r0, [r5, #16]
 8009a8a:	b920      	cbnz	r0, 8009a96 <_svfiprintf_r+0x2e>
 8009a8c:	230c      	movs	r3, #12
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a94:	e0d0      	b.n	8009c38 <_svfiprintf_r+0x1d0>
 8009a96:	2340      	movs	r3, #64	; 0x40
 8009a98:	616b      	str	r3, [r5, #20]
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9e:	2320      	movs	r3, #32
 8009aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aa8:	2330      	movs	r3, #48	; 0x30
 8009aaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c50 <_svfiprintf_r+0x1e8>
 8009aae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ab2:	f04f 0901 	mov.w	r9, #1
 8009ab6:	4623      	mov	r3, r4
 8009ab8:	469a      	mov	sl, r3
 8009aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009abe:	b10a      	cbz	r2, 8009ac4 <_svfiprintf_r+0x5c>
 8009ac0:	2a25      	cmp	r2, #37	; 0x25
 8009ac2:	d1f9      	bne.n	8009ab8 <_svfiprintf_r+0x50>
 8009ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ac8:	d00b      	beq.n	8009ae2 <_svfiprintf_r+0x7a>
 8009aca:	465b      	mov	r3, fp
 8009acc:	4622      	mov	r2, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff ff6f 	bl	80099b4 <__ssputs_r>
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	f000 80a9 	beq.w	8009c2e <_svfiprintf_r+0x1c6>
 8009adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ade:	445a      	add	r2, fp
 8009ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 80a1 	beq.w	8009c2e <_svfiprintf_r+0x1c6>
 8009aec:	2300      	movs	r3, #0
 8009aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af6:	f10a 0a01 	add.w	sl, sl, #1
 8009afa:	9304      	str	r3, [sp, #16]
 8009afc:	9307      	str	r3, [sp, #28]
 8009afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b02:	931a      	str	r3, [sp, #104]	; 0x68
 8009b04:	4654      	mov	r4, sl
 8009b06:	2205      	movs	r2, #5
 8009b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0c:	4850      	ldr	r0, [pc, #320]	; (8009c50 <_svfiprintf_r+0x1e8>)
 8009b0e:	f7f6 fb5f 	bl	80001d0 <memchr>
 8009b12:	9a04      	ldr	r2, [sp, #16]
 8009b14:	b9d8      	cbnz	r0, 8009b4e <_svfiprintf_r+0xe6>
 8009b16:	06d0      	lsls	r0, r2, #27
 8009b18:	bf44      	itt	mi
 8009b1a:	2320      	movmi	r3, #32
 8009b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b20:	0711      	lsls	r1, r2, #28
 8009b22:	bf44      	itt	mi
 8009b24:	232b      	movmi	r3, #43	; 0x2b
 8009b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b30:	d015      	beq.n	8009b5e <_svfiprintf_r+0xf6>
 8009b32:	9a07      	ldr	r2, [sp, #28]
 8009b34:	4654      	mov	r4, sl
 8009b36:	2000      	movs	r0, #0
 8009b38:	f04f 0c0a 	mov.w	ip, #10
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b42:	3b30      	subs	r3, #48	; 0x30
 8009b44:	2b09      	cmp	r3, #9
 8009b46:	d94d      	bls.n	8009be4 <_svfiprintf_r+0x17c>
 8009b48:	b1b0      	cbz	r0, 8009b78 <_svfiprintf_r+0x110>
 8009b4a:	9207      	str	r2, [sp, #28]
 8009b4c:	e014      	b.n	8009b78 <_svfiprintf_r+0x110>
 8009b4e:	eba0 0308 	sub.w	r3, r0, r8
 8009b52:	fa09 f303 	lsl.w	r3, r9, r3
 8009b56:	4313      	orrs	r3, r2
 8009b58:	9304      	str	r3, [sp, #16]
 8009b5a:	46a2      	mov	sl, r4
 8009b5c:	e7d2      	b.n	8009b04 <_svfiprintf_r+0x9c>
 8009b5e:	9b03      	ldr	r3, [sp, #12]
 8009b60:	1d19      	adds	r1, r3, #4
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	9103      	str	r1, [sp, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfbb      	ittet	lt
 8009b6a:	425b      	neglt	r3, r3
 8009b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b70:	9307      	strge	r3, [sp, #28]
 8009b72:	9307      	strlt	r3, [sp, #28]
 8009b74:	bfb8      	it	lt
 8009b76:	9204      	strlt	r2, [sp, #16]
 8009b78:	7823      	ldrb	r3, [r4, #0]
 8009b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b7c:	d10c      	bne.n	8009b98 <_svfiprintf_r+0x130>
 8009b7e:	7863      	ldrb	r3, [r4, #1]
 8009b80:	2b2a      	cmp	r3, #42	; 0x2a
 8009b82:	d134      	bne.n	8009bee <_svfiprintf_r+0x186>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	9203      	str	r2, [sp, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfb8      	it	lt
 8009b90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b94:	3402      	adds	r4, #2
 8009b96:	9305      	str	r3, [sp, #20]
 8009b98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009c60 <_svfiprintf_r+0x1f8>
 8009b9c:	7821      	ldrb	r1, [r4, #0]
 8009b9e:	2203      	movs	r2, #3
 8009ba0:	4650      	mov	r0, sl
 8009ba2:	f7f6 fb15 	bl	80001d0 <memchr>
 8009ba6:	b138      	cbz	r0, 8009bb8 <_svfiprintf_r+0x150>
 8009ba8:	9b04      	ldr	r3, [sp, #16]
 8009baa:	eba0 000a 	sub.w	r0, r0, sl
 8009bae:	2240      	movs	r2, #64	; 0x40
 8009bb0:	4082      	lsls	r2, r0
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	3401      	adds	r4, #1
 8009bb6:	9304      	str	r3, [sp, #16]
 8009bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbc:	4825      	ldr	r0, [pc, #148]	; (8009c54 <_svfiprintf_r+0x1ec>)
 8009bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bc2:	2206      	movs	r2, #6
 8009bc4:	f7f6 fb04 	bl	80001d0 <memchr>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d038      	beq.n	8009c3e <_svfiprintf_r+0x1d6>
 8009bcc:	4b22      	ldr	r3, [pc, #136]	; (8009c58 <_svfiprintf_r+0x1f0>)
 8009bce:	bb1b      	cbnz	r3, 8009c18 <_svfiprintf_r+0x1b0>
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	3307      	adds	r3, #7
 8009bd4:	f023 0307 	bic.w	r3, r3, #7
 8009bd8:	3308      	adds	r3, #8
 8009bda:	9303      	str	r3, [sp, #12]
 8009bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bde:	4433      	add	r3, r6
 8009be0:	9309      	str	r3, [sp, #36]	; 0x24
 8009be2:	e768      	b.n	8009ab6 <_svfiprintf_r+0x4e>
 8009be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009be8:	460c      	mov	r4, r1
 8009bea:	2001      	movs	r0, #1
 8009bec:	e7a6      	b.n	8009b3c <_svfiprintf_r+0xd4>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	3401      	adds	r4, #1
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f04f 0c0a 	mov.w	ip, #10
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c00:	3a30      	subs	r2, #48	; 0x30
 8009c02:	2a09      	cmp	r2, #9
 8009c04:	d903      	bls.n	8009c0e <_svfiprintf_r+0x1a6>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0c6      	beq.n	8009b98 <_svfiprintf_r+0x130>
 8009c0a:	9105      	str	r1, [sp, #20]
 8009c0c:	e7c4      	b.n	8009b98 <_svfiprintf_r+0x130>
 8009c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c12:	4604      	mov	r4, r0
 8009c14:	2301      	movs	r3, #1
 8009c16:	e7f0      	b.n	8009bfa <_svfiprintf_r+0x192>
 8009c18:	ab03      	add	r3, sp, #12
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	462a      	mov	r2, r5
 8009c1e:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <_svfiprintf_r+0x1f4>)
 8009c20:	a904      	add	r1, sp, #16
 8009c22:	4638      	mov	r0, r7
 8009c24:	f7fc fd08 	bl	8006638 <_printf_float>
 8009c28:	1c42      	adds	r2, r0, #1
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	d1d6      	bne.n	8009bdc <_svfiprintf_r+0x174>
 8009c2e:	89ab      	ldrh	r3, [r5, #12]
 8009c30:	065b      	lsls	r3, r3, #25
 8009c32:	f53f af2d 	bmi.w	8009a90 <_svfiprintf_r+0x28>
 8009c36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c38:	b01d      	add	sp, #116	; 0x74
 8009c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3e:	ab03      	add	r3, sp, #12
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	462a      	mov	r2, r5
 8009c44:	4b05      	ldr	r3, [pc, #20]	; (8009c5c <_svfiprintf_r+0x1f4>)
 8009c46:	a904      	add	r1, sp, #16
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f7fc ff99 	bl	8006b80 <_printf_i>
 8009c4e:	e7eb      	b.n	8009c28 <_svfiprintf_r+0x1c0>
 8009c50:	0800afd0 	.word	0x0800afd0
 8009c54:	0800afda 	.word	0x0800afda
 8009c58:	08006639 	.word	0x08006639
 8009c5c:	080099b5 	.word	0x080099b5
 8009c60:	0800afd6 	.word	0x0800afd6

08009c64 <__sflush_r>:
 8009c64:	898a      	ldrh	r2, [r1, #12]
 8009c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	0710      	lsls	r0, r2, #28
 8009c6e:	460c      	mov	r4, r1
 8009c70:	d458      	bmi.n	8009d24 <__sflush_r+0xc0>
 8009c72:	684b      	ldr	r3, [r1, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dc05      	bgt.n	8009c84 <__sflush_r+0x20>
 8009c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dc02      	bgt.n	8009c84 <__sflush_r+0x20>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c86:	2e00      	cmp	r6, #0
 8009c88:	d0f9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c90:	682f      	ldr	r7, [r5, #0]
 8009c92:	6a21      	ldr	r1, [r4, #32]
 8009c94:	602b      	str	r3, [r5, #0]
 8009c96:	d032      	beq.n	8009cfe <__sflush_r+0x9a>
 8009c98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	075a      	lsls	r2, r3, #29
 8009c9e:	d505      	bpl.n	8009cac <__sflush_r+0x48>
 8009ca0:	6863      	ldr	r3, [r4, #4]
 8009ca2:	1ac0      	subs	r0, r0, r3
 8009ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca6:	b10b      	cbz	r3, 8009cac <__sflush_r+0x48>
 8009ca8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009caa:	1ac0      	subs	r0, r0, r3
 8009cac:	2300      	movs	r3, #0
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cb2:	6a21      	ldr	r1, [r4, #32]
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	47b0      	blx	r6
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	d106      	bne.n	8009ccc <__sflush_r+0x68>
 8009cbe:	6829      	ldr	r1, [r5, #0]
 8009cc0:	291d      	cmp	r1, #29
 8009cc2:	d82b      	bhi.n	8009d1c <__sflush_r+0xb8>
 8009cc4:	4a29      	ldr	r2, [pc, #164]	; (8009d6c <__sflush_r+0x108>)
 8009cc6:	410a      	asrs	r2, r1
 8009cc8:	07d6      	lsls	r6, r2, #31
 8009cca:	d427      	bmi.n	8009d1c <__sflush_r+0xb8>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	6062      	str	r2, [r4, #4]
 8009cd0:	04d9      	lsls	r1, r3, #19
 8009cd2:	6922      	ldr	r2, [r4, #16]
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	d504      	bpl.n	8009ce2 <__sflush_r+0x7e>
 8009cd8:	1c42      	adds	r2, r0, #1
 8009cda:	d101      	bne.n	8009ce0 <__sflush_r+0x7c>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b903      	cbnz	r3, 8009ce2 <__sflush_r+0x7e>
 8009ce0:	6560      	str	r0, [r4, #84]	; 0x54
 8009ce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce4:	602f      	str	r7, [r5, #0]
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d0c9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009cea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	d002      	beq.n	8009cf8 <__sflush_r+0x94>
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f7fe fa9e 	bl	8008234 <_free_r>
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	6360      	str	r0, [r4, #52]	; 0x34
 8009cfc:	e7c0      	b.n	8009c80 <__sflush_r+0x1c>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b0      	blx	r6
 8009d04:	1c41      	adds	r1, r0, #1
 8009d06:	d1c8      	bne.n	8009c9a <__sflush_r+0x36>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0c5      	beq.n	8009c9a <__sflush_r+0x36>
 8009d0e:	2b1d      	cmp	r3, #29
 8009d10:	d001      	beq.n	8009d16 <__sflush_r+0xb2>
 8009d12:	2b16      	cmp	r3, #22
 8009d14:	d101      	bne.n	8009d1a <__sflush_r+0xb6>
 8009d16:	602f      	str	r7, [r5, #0]
 8009d18:	e7b1      	b.n	8009c7e <__sflush_r+0x1a>
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	e7ad      	b.n	8009c80 <__sflush_r+0x1c>
 8009d24:	690f      	ldr	r7, [r1, #16]
 8009d26:	2f00      	cmp	r7, #0
 8009d28:	d0a9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009d2a:	0793      	lsls	r3, r2, #30
 8009d2c:	680e      	ldr	r6, [r1, #0]
 8009d2e:	bf08      	it	eq
 8009d30:	694b      	ldreq	r3, [r1, #20]
 8009d32:	600f      	str	r7, [r1, #0]
 8009d34:	bf18      	it	ne
 8009d36:	2300      	movne	r3, #0
 8009d38:	eba6 0807 	sub.w	r8, r6, r7
 8009d3c:	608b      	str	r3, [r1, #8]
 8009d3e:	f1b8 0f00 	cmp.w	r8, #0
 8009d42:	dd9c      	ble.n	8009c7e <__sflush_r+0x1a>
 8009d44:	6a21      	ldr	r1, [r4, #32]
 8009d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d48:	4643      	mov	r3, r8
 8009d4a:	463a      	mov	r2, r7
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b0      	blx	r6
 8009d50:	2800      	cmp	r0, #0
 8009d52:	dc06      	bgt.n	8009d62 <__sflush_r+0xfe>
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d60:	e78e      	b.n	8009c80 <__sflush_r+0x1c>
 8009d62:	4407      	add	r7, r0
 8009d64:	eba8 0800 	sub.w	r8, r8, r0
 8009d68:	e7e9      	b.n	8009d3e <__sflush_r+0xda>
 8009d6a:	bf00      	nop
 8009d6c:	dfbffffe 	.word	0xdfbffffe

08009d70 <_fflush_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	690b      	ldr	r3, [r1, #16]
 8009d74:	4605      	mov	r5, r0
 8009d76:	460c      	mov	r4, r1
 8009d78:	b913      	cbnz	r3, 8009d80 <_fflush_r+0x10>
 8009d7a:	2500      	movs	r5, #0
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	b118      	cbz	r0, 8009d8a <_fflush_r+0x1a>
 8009d82:	6a03      	ldr	r3, [r0, #32]
 8009d84:	b90b      	cbnz	r3, 8009d8a <_fflush_r+0x1a>
 8009d86:	f7fd fab9 	bl	80072fc <__sinit>
 8009d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0f3      	beq.n	8009d7a <_fflush_r+0xa>
 8009d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d94:	07d0      	lsls	r0, r2, #31
 8009d96:	d404      	bmi.n	8009da2 <_fflush_r+0x32>
 8009d98:	0599      	lsls	r1, r3, #22
 8009d9a:	d402      	bmi.n	8009da2 <_fflush_r+0x32>
 8009d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d9e:	f7fd fbc4 	bl	800752a <__retarget_lock_acquire_recursive>
 8009da2:	4628      	mov	r0, r5
 8009da4:	4621      	mov	r1, r4
 8009da6:	f7ff ff5d 	bl	8009c64 <__sflush_r>
 8009daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dac:	07da      	lsls	r2, r3, #31
 8009dae:	4605      	mov	r5, r0
 8009db0:	d4e4      	bmi.n	8009d7c <_fflush_r+0xc>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	059b      	lsls	r3, r3, #22
 8009db6:	d4e1      	bmi.n	8009d7c <_fflush_r+0xc>
 8009db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dba:	f7fd fbb7 	bl	800752c <__retarget_lock_release_recursive>
 8009dbe:	e7dd      	b.n	8009d7c <_fflush_r+0xc>

08009dc0 <memmove>:
 8009dc0:	4288      	cmp	r0, r1
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	eb01 0402 	add.w	r4, r1, r2
 8009dc8:	d902      	bls.n	8009dd0 <memmove+0x10>
 8009dca:	4284      	cmp	r4, r0
 8009dcc:	4623      	mov	r3, r4
 8009dce:	d807      	bhi.n	8009de0 <memmove+0x20>
 8009dd0:	1e43      	subs	r3, r0, #1
 8009dd2:	42a1      	cmp	r1, r4
 8009dd4:	d008      	beq.n	8009de8 <memmove+0x28>
 8009dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dde:	e7f8      	b.n	8009dd2 <memmove+0x12>
 8009de0:	4402      	add	r2, r0
 8009de2:	4601      	mov	r1, r0
 8009de4:	428a      	cmp	r2, r1
 8009de6:	d100      	bne.n	8009dea <memmove+0x2a>
 8009de8:	bd10      	pop	{r4, pc}
 8009dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009df2:	e7f7      	b.n	8009de4 <memmove+0x24>

08009df4 <strncmp>:
 8009df4:	b510      	push	{r4, lr}
 8009df6:	b16a      	cbz	r2, 8009e14 <strncmp+0x20>
 8009df8:	3901      	subs	r1, #1
 8009dfa:	1884      	adds	r4, r0, r2
 8009dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d103      	bne.n	8009e10 <strncmp+0x1c>
 8009e08:	42a0      	cmp	r0, r4
 8009e0a:	d001      	beq.n	8009e10 <strncmp+0x1c>
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	d1f5      	bne.n	8009dfc <strncmp+0x8>
 8009e10:	1ad0      	subs	r0, r2, r3
 8009e12:	bd10      	pop	{r4, pc}
 8009e14:	4610      	mov	r0, r2
 8009e16:	e7fc      	b.n	8009e12 <strncmp+0x1e>

08009e18 <_sbrk_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d06      	ldr	r5, [pc, #24]	; (8009e34 <_sbrk_r+0x1c>)
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4608      	mov	r0, r1
 8009e22:	602b      	str	r3, [r5, #0]
 8009e24:	f7f7 ff9a 	bl	8001d5c <_sbrk>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d102      	bne.n	8009e32 <_sbrk_r+0x1a>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	b103      	cbz	r3, 8009e32 <_sbrk_r+0x1a>
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	bd38      	pop	{r3, r4, r5, pc}
 8009e34:	200005c0 	.word	0x200005c0

08009e38 <memcpy>:
 8009e38:	440a      	add	r2, r1
 8009e3a:	4291      	cmp	r1, r2
 8009e3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009e40:	d100      	bne.n	8009e44 <memcpy+0xc>
 8009e42:	4770      	bx	lr
 8009e44:	b510      	push	{r4, lr}
 8009e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e4e:	4291      	cmp	r1, r2
 8009e50:	d1f9      	bne.n	8009e46 <memcpy+0xe>
 8009e52:	bd10      	pop	{r4, pc}
 8009e54:	0000      	movs	r0, r0
	...

08009e58 <nan>:
 8009e58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e60 <nan+0x8>
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	00000000 	.word	0x00000000
 8009e64:	7ff80000 	.word	0x7ff80000

08009e68 <__assert_func>:
 8009e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e6a:	4614      	mov	r4, r2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <__assert_func+0x2c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4605      	mov	r5, r0
 8009e74:	68d8      	ldr	r0, [r3, #12]
 8009e76:	b14c      	cbz	r4, 8009e8c <__assert_func+0x24>
 8009e78:	4b07      	ldr	r3, [pc, #28]	; (8009e98 <__assert_func+0x30>)
 8009e7a:	9100      	str	r1, [sp, #0]
 8009e7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e80:	4906      	ldr	r1, [pc, #24]	; (8009e9c <__assert_func+0x34>)
 8009e82:	462b      	mov	r3, r5
 8009e84:	f000 fbca 	bl	800a61c <fiprintf>
 8009e88:	f000 fbda 	bl	800a640 <abort>
 8009e8c:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <__assert_func+0x38>)
 8009e8e:	461c      	mov	r4, r3
 8009e90:	e7f3      	b.n	8009e7a <__assert_func+0x12>
 8009e92:	bf00      	nop
 8009e94:	20000078 	.word	0x20000078
 8009e98:	0800afe9 	.word	0x0800afe9
 8009e9c:	0800aff6 	.word	0x0800aff6
 8009ea0:	0800b024 	.word	0x0800b024

08009ea4 <_calloc_r>:
 8009ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ea6:	fba1 2402 	umull	r2, r4, r1, r2
 8009eaa:	b94c      	cbnz	r4, 8009ec0 <_calloc_r+0x1c>
 8009eac:	4611      	mov	r1, r2
 8009eae:	9201      	str	r2, [sp, #4]
 8009eb0:	f7fe fa34 	bl	800831c <_malloc_r>
 8009eb4:	9a01      	ldr	r2, [sp, #4]
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	b930      	cbnz	r0, 8009ec8 <_calloc_r+0x24>
 8009eba:	4628      	mov	r0, r5
 8009ebc:	b003      	add	sp, #12
 8009ebe:	bd30      	pop	{r4, r5, pc}
 8009ec0:	220c      	movs	r2, #12
 8009ec2:	6002      	str	r2, [r0, #0]
 8009ec4:	2500      	movs	r5, #0
 8009ec6:	e7f8      	b.n	8009eba <_calloc_r+0x16>
 8009ec8:	4621      	mov	r1, r4
 8009eca:	f7fd fab0 	bl	800742e <memset>
 8009ece:	e7f4      	b.n	8009eba <_calloc_r+0x16>

08009ed0 <rshift>:
 8009ed0:	6903      	ldr	r3, [r0, #16]
 8009ed2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ed6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009eda:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ede:	f100 0414 	add.w	r4, r0, #20
 8009ee2:	dd45      	ble.n	8009f70 <rshift+0xa0>
 8009ee4:	f011 011f 	ands.w	r1, r1, #31
 8009ee8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009eec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ef0:	d10c      	bne.n	8009f0c <rshift+0x3c>
 8009ef2:	f100 0710 	add.w	r7, r0, #16
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	42b1      	cmp	r1, r6
 8009efa:	d334      	bcc.n	8009f66 <rshift+0x96>
 8009efc:	1a9b      	subs	r3, r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	1eea      	subs	r2, r5, #3
 8009f02:	4296      	cmp	r6, r2
 8009f04:	bf38      	it	cc
 8009f06:	2300      	movcc	r3, #0
 8009f08:	4423      	add	r3, r4
 8009f0a:	e015      	b.n	8009f38 <rshift+0x68>
 8009f0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f10:	f1c1 0820 	rsb	r8, r1, #32
 8009f14:	40cf      	lsrs	r7, r1
 8009f16:	f105 0e04 	add.w	lr, r5, #4
 8009f1a:	46a1      	mov	r9, r4
 8009f1c:	4576      	cmp	r6, lr
 8009f1e:	46f4      	mov	ip, lr
 8009f20:	d815      	bhi.n	8009f4e <rshift+0x7e>
 8009f22:	1a9a      	subs	r2, r3, r2
 8009f24:	0092      	lsls	r2, r2, #2
 8009f26:	3a04      	subs	r2, #4
 8009f28:	3501      	adds	r5, #1
 8009f2a:	42ae      	cmp	r6, r5
 8009f2c:	bf38      	it	cc
 8009f2e:	2200      	movcc	r2, #0
 8009f30:	18a3      	adds	r3, r4, r2
 8009f32:	50a7      	str	r7, [r4, r2]
 8009f34:	b107      	cbz	r7, 8009f38 <rshift+0x68>
 8009f36:	3304      	adds	r3, #4
 8009f38:	1b1a      	subs	r2, r3, r4
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f40:	bf08      	it	eq
 8009f42:	2300      	moveq	r3, #0
 8009f44:	6102      	str	r2, [r0, #16]
 8009f46:	bf08      	it	eq
 8009f48:	6143      	streq	r3, [r0, #20]
 8009f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f4e:	f8dc c000 	ldr.w	ip, [ip]
 8009f52:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f56:	ea4c 0707 	orr.w	r7, ip, r7
 8009f5a:	f849 7b04 	str.w	r7, [r9], #4
 8009f5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f62:	40cf      	lsrs	r7, r1
 8009f64:	e7da      	b.n	8009f1c <rshift+0x4c>
 8009f66:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f6e:	e7c3      	b.n	8009ef8 <rshift+0x28>
 8009f70:	4623      	mov	r3, r4
 8009f72:	e7e1      	b.n	8009f38 <rshift+0x68>

08009f74 <__hexdig_fun>:
 8009f74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f78:	2b09      	cmp	r3, #9
 8009f7a:	d802      	bhi.n	8009f82 <__hexdig_fun+0xe>
 8009f7c:	3820      	subs	r0, #32
 8009f7e:	b2c0      	uxtb	r0, r0
 8009f80:	4770      	bx	lr
 8009f82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f86:	2b05      	cmp	r3, #5
 8009f88:	d801      	bhi.n	8009f8e <__hexdig_fun+0x1a>
 8009f8a:	3847      	subs	r0, #71	; 0x47
 8009f8c:	e7f7      	b.n	8009f7e <__hexdig_fun+0xa>
 8009f8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f92:	2b05      	cmp	r3, #5
 8009f94:	d801      	bhi.n	8009f9a <__hexdig_fun+0x26>
 8009f96:	3827      	subs	r0, #39	; 0x27
 8009f98:	e7f1      	b.n	8009f7e <__hexdig_fun+0xa>
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	4770      	bx	lr
	...

08009fa0 <__gethex>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	4617      	mov	r7, r2
 8009fa6:	680a      	ldr	r2, [r1, #0]
 8009fa8:	b085      	sub	sp, #20
 8009faa:	f102 0b02 	add.w	fp, r2, #2
 8009fae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009fb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009fb6:	4681      	mov	r9, r0
 8009fb8:	468a      	mov	sl, r1
 8009fba:	9302      	str	r3, [sp, #8]
 8009fbc:	32fe      	adds	r2, #254	; 0xfe
 8009fbe:	eb02 030b 	add.w	r3, r2, fp
 8009fc2:	46d8      	mov	r8, fp
 8009fc4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	2830      	cmp	r0, #48	; 0x30
 8009fcc:	d0f7      	beq.n	8009fbe <__gethex+0x1e>
 8009fce:	f7ff ffd1 	bl	8009f74 <__hexdig_fun>
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d138      	bne.n	800a04a <__gethex+0xaa>
 8009fd8:	49a7      	ldr	r1, [pc, #668]	; (800a278 <__gethex+0x2d8>)
 8009fda:	2201      	movs	r2, #1
 8009fdc:	4640      	mov	r0, r8
 8009fde:	f7ff ff09 	bl	8009df4 <strncmp>
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d169      	bne.n	800a0bc <__gethex+0x11c>
 8009fe8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009fec:	465d      	mov	r5, fp
 8009fee:	f7ff ffc1 	bl	8009f74 <__hexdig_fun>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d064      	beq.n	800a0c0 <__gethex+0x120>
 8009ff6:	465a      	mov	r2, fp
 8009ff8:	7810      	ldrb	r0, [r2, #0]
 8009ffa:	2830      	cmp	r0, #48	; 0x30
 8009ffc:	4690      	mov	r8, r2
 8009ffe:	f102 0201 	add.w	r2, r2, #1
 800a002:	d0f9      	beq.n	8009ff8 <__gethex+0x58>
 800a004:	f7ff ffb6 	bl	8009f74 <__hexdig_fun>
 800a008:	2301      	movs	r3, #1
 800a00a:	fab0 f480 	clz	r4, r0
 800a00e:	0964      	lsrs	r4, r4, #5
 800a010:	465e      	mov	r6, fp
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	4642      	mov	r2, r8
 800a016:	4615      	mov	r5, r2
 800a018:	3201      	adds	r2, #1
 800a01a:	7828      	ldrb	r0, [r5, #0]
 800a01c:	f7ff ffaa 	bl	8009f74 <__hexdig_fun>
 800a020:	2800      	cmp	r0, #0
 800a022:	d1f8      	bne.n	800a016 <__gethex+0x76>
 800a024:	4994      	ldr	r1, [pc, #592]	; (800a278 <__gethex+0x2d8>)
 800a026:	2201      	movs	r2, #1
 800a028:	4628      	mov	r0, r5
 800a02a:	f7ff fee3 	bl	8009df4 <strncmp>
 800a02e:	b978      	cbnz	r0, 800a050 <__gethex+0xb0>
 800a030:	b946      	cbnz	r6, 800a044 <__gethex+0xa4>
 800a032:	1c6e      	adds	r6, r5, #1
 800a034:	4632      	mov	r2, r6
 800a036:	4615      	mov	r5, r2
 800a038:	3201      	adds	r2, #1
 800a03a:	7828      	ldrb	r0, [r5, #0]
 800a03c:	f7ff ff9a 	bl	8009f74 <__hexdig_fun>
 800a040:	2800      	cmp	r0, #0
 800a042:	d1f8      	bne.n	800a036 <__gethex+0x96>
 800a044:	1b73      	subs	r3, r6, r5
 800a046:	009e      	lsls	r6, r3, #2
 800a048:	e004      	b.n	800a054 <__gethex+0xb4>
 800a04a:	2400      	movs	r4, #0
 800a04c:	4626      	mov	r6, r4
 800a04e:	e7e1      	b.n	800a014 <__gethex+0x74>
 800a050:	2e00      	cmp	r6, #0
 800a052:	d1f7      	bne.n	800a044 <__gethex+0xa4>
 800a054:	782b      	ldrb	r3, [r5, #0]
 800a056:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a05a:	2b50      	cmp	r3, #80	; 0x50
 800a05c:	d13d      	bne.n	800a0da <__gethex+0x13a>
 800a05e:	786b      	ldrb	r3, [r5, #1]
 800a060:	2b2b      	cmp	r3, #43	; 0x2b
 800a062:	d02f      	beq.n	800a0c4 <__gethex+0x124>
 800a064:	2b2d      	cmp	r3, #45	; 0x2d
 800a066:	d031      	beq.n	800a0cc <__gethex+0x12c>
 800a068:	1c69      	adds	r1, r5, #1
 800a06a:	f04f 0b00 	mov.w	fp, #0
 800a06e:	7808      	ldrb	r0, [r1, #0]
 800a070:	f7ff ff80 	bl	8009f74 <__hexdig_fun>
 800a074:	1e42      	subs	r2, r0, #1
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	2a18      	cmp	r2, #24
 800a07a:	d82e      	bhi.n	800a0da <__gethex+0x13a>
 800a07c:	f1a0 0210 	sub.w	r2, r0, #16
 800a080:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a084:	f7ff ff76 	bl	8009f74 <__hexdig_fun>
 800a088:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800a08c:	fa5f fc8c 	uxtb.w	ip, ip
 800a090:	f1bc 0f18 	cmp.w	ip, #24
 800a094:	d91d      	bls.n	800a0d2 <__gethex+0x132>
 800a096:	f1bb 0f00 	cmp.w	fp, #0
 800a09a:	d000      	beq.n	800a09e <__gethex+0xfe>
 800a09c:	4252      	negs	r2, r2
 800a09e:	4416      	add	r6, r2
 800a0a0:	f8ca 1000 	str.w	r1, [sl]
 800a0a4:	b1dc      	cbz	r4, 800a0de <__gethex+0x13e>
 800a0a6:	9b01      	ldr	r3, [sp, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	bf14      	ite	ne
 800a0ac:	f04f 0800 	movne.w	r8, #0
 800a0b0:	f04f 0806 	moveq.w	r8, #6
 800a0b4:	4640      	mov	r0, r8
 800a0b6:	b005      	add	sp, #20
 800a0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0bc:	4645      	mov	r5, r8
 800a0be:	4626      	mov	r6, r4
 800a0c0:	2401      	movs	r4, #1
 800a0c2:	e7c7      	b.n	800a054 <__gethex+0xb4>
 800a0c4:	f04f 0b00 	mov.w	fp, #0
 800a0c8:	1ca9      	adds	r1, r5, #2
 800a0ca:	e7d0      	b.n	800a06e <__gethex+0xce>
 800a0cc:	f04f 0b01 	mov.w	fp, #1
 800a0d0:	e7fa      	b.n	800a0c8 <__gethex+0x128>
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	fb03 0002 	mla	r0, r3, r2, r0
 800a0d8:	e7d0      	b.n	800a07c <__gethex+0xdc>
 800a0da:	4629      	mov	r1, r5
 800a0dc:	e7e0      	b.n	800a0a0 <__gethex+0x100>
 800a0de:	eba5 0308 	sub.w	r3, r5, r8
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	2b07      	cmp	r3, #7
 800a0e8:	dc0a      	bgt.n	800a100 <__gethex+0x160>
 800a0ea:	4648      	mov	r0, r9
 800a0ec:	f7fe f9a2 	bl	8008434 <_Balloc>
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	b940      	cbnz	r0, 800a106 <__gethex+0x166>
 800a0f4:	4b61      	ldr	r3, [pc, #388]	; (800a27c <__gethex+0x2dc>)
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	21e4      	movs	r1, #228	; 0xe4
 800a0fa:	4861      	ldr	r0, [pc, #388]	; (800a280 <__gethex+0x2e0>)
 800a0fc:	f7ff feb4 	bl	8009e68 <__assert_func>
 800a100:	3101      	adds	r1, #1
 800a102:	105b      	asrs	r3, r3, #1
 800a104:	e7ef      	b.n	800a0e6 <__gethex+0x146>
 800a106:	f100 0a14 	add.w	sl, r0, #20
 800a10a:	2300      	movs	r3, #0
 800a10c:	495a      	ldr	r1, [pc, #360]	; (800a278 <__gethex+0x2d8>)
 800a10e:	f8cd a004 	str.w	sl, [sp, #4]
 800a112:	469b      	mov	fp, r3
 800a114:	45a8      	cmp	r8, r5
 800a116:	d342      	bcc.n	800a19e <__gethex+0x1fe>
 800a118:	9801      	ldr	r0, [sp, #4]
 800a11a:	f840 bb04 	str.w	fp, [r0], #4
 800a11e:	eba0 000a 	sub.w	r0, r0, sl
 800a122:	1080      	asrs	r0, r0, #2
 800a124:	6120      	str	r0, [r4, #16]
 800a126:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a12a:	4658      	mov	r0, fp
 800a12c:	f7fe fa74 	bl	8008618 <__hi0bits>
 800a130:	683d      	ldr	r5, [r7, #0]
 800a132:	eba8 0000 	sub.w	r0, r8, r0
 800a136:	42a8      	cmp	r0, r5
 800a138:	dd59      	ble.n	800a1ee <__gethex+0x24e>
 800a13a:	eba0 0805 	sub.w	r8, r0, r5
 800a13e:	4641      	mov	r1, r8
 800a140:	4620      	mov	r0, r4
 800a142:	f7fe fe03 	bl	8008d4c <__any_on>
 800a146:	4683      	mov	fp, r0
 800a148:	b1b8      	cbz	r0, 800a17a <__gethex+0x1da>
 800a14a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800a14e:	1159      	asrs	r1, r3, #5
 800a150:	f003 021f 	and.w	r2, r3, #31
 800a154:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a158:	f04f 0b01 	mov.w	fp, #1
 800a15c:	fa0b f202 	lsl.w	r2, fp, r2
 800a160:	420a      	tst	r2, r1
 800a162:	d00a      	beq.n	800a17a <__gethex+0x1da>
 800a164:	455b      	cmp	r3, fp
 800a166:	dd06      	ble.n	800a176 <__gethex+0x1d6>
 800a168:	f1a8 0102 	sub.w	r1, r8, #2
 800a16c:	4620      	mov	r0, r4
 800a16e:	f7fe fded 	bl	8008d4c <__any_on>
 800a172:	2800      	cmp	r0, #0
 800a174:	d138      	bne.n	800a1e8 <__gethex+0x248>
 800a176:	f04f 0b02 	mov.w	fp, #2
 800a17a:	4641      	mov	r1, r8
 800a17c:	4620      	mov	r0, r4
 800a17e:	f7ff fea7 	bl	8009ed0 <rshift>
 800a182:	4446      	add	r6, r8
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	42b3      	cmp	r3, r6
 800a188:	da41      	bge.n	800a20e <__gethex+0x26e>
 800a18a:	4621      	mov	r1, r4
 800a18c:	4648      	mov	r0, r9
 800a18e:	f7fe f991 	bl	80084b4 <_Bfree>
 800a192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a194:	2300      	movs	r3, #0
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a19c:	e78a      	b.n	800a0b4 <__gethex+0x114>
 800a19e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a1a2:	2a2e      	cmp	r2, #46	; 0x2e
 800a1a4:	d014      	beq.n	800a1d0 <__gethex+0x230>
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d106      	bne.n	800a1b8 <__gethex+0x218>
 800a1aa:	9b01      	ldr	r3, [sp, #4]
 800a1ac:	f843 bb04 	str.w	fp, [r3], #4
 800a1b0:	f04f 0b00 	mov.w	fp, #0
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	465b      	mov	r3, fp
 800a1b8:	7828      	ldrb	r0, [r5, #0]
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	f7ff feda 	bl	8009f74 <__hexdig_fun>
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	f000 000f 	and.w	r0, r0, #15
 800a1c6:	4098      	lsls	r0, r3
 800a1c8:	ea4b 0b00 	orr.w	fp, fp, r0
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	e7a1      	b.n	800a114 <__gethex+0x174>
 800a1d0:	45a8      	cmp	r8, r5
 800a1d2:	d8e8      	bhi.n	800a1a6 <__gethex+0x206>
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	9303      	str	r3, [sp, #12]
 800a1da:	f7ff fe0b 	bl	8009df4 <strncmp>
 800a1de:	4926      	ldr	r1, [pc, #152]	; (800a278 <__gethex+0x2d8>)
 800a1e0:	9b03      	ldr	r3, [sp, #12]
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d1df      	bne.n	800a1a6 <__gethex+0x206>
 800a1e6:	e795      	b.n	800a114 <__gethex+0x174>
 800a1e8:	f04f 0b03 	mov.w	fp, #3
 800a1ec:	e7c5      	b.n	800a17a <__gethex+0x1da>
 800a1ee:	da0b      	bge.n	800a208 <__gethex+0x268>
 800a1f0:	eba5 0800 	sub.w	r8, r5, r0
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4642      	mov	r2, r8
 800a1f8:	4648      	mov	r0, r9
 800a1fa:	f7fe fb75 	bl	80088e8 <__lshift>
 800a1fe:	eba6 0608 	sub.w	r6, r6, r8
 800a202:	4604      	mov	r4, r0
 800a204:	f100 0a14 	add.w	sl, r0, #20
 800a208:	f04f 0b00 	mov.w	fp, #0
 800a20c:	e7ba      	b.n	800a184 <__gethex+0x1e4>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	42b3      	cmp	r3, r6
 800a212:	dd73      	ble.n	800a2fc <__gethex+0x35c>
 800a214:	1b9e      	subs	r6, r3, r6
 800a216:	42b5      	cmp	r5, r6
 800a218:	dc34      	bgt.n	800a284 <__gethex+0x2e4>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d023      	beq.n	800a268 <__gethex+0x2c8>
 800a220:	2b03      	cmp	r3, #3
 800a222:	d025      	beq.n	800a270 <__gethex+0x2d0>
 800a224:	2b01      	cmp	r3, #1
 800a226:	d115      	bne.n	800a254 <__gethex+0x2b4>
 800a228:	42b5      	cmp	r5, r6
 800a22a:	d113      	bne.n	800a254 <__gethex+0x2b4>
 800a22c:	2d01      	cmp	r5, #1
 800a22e:	d10b      	bne.n	800a248 <__gethex+0x2a8>
 800a230:	9a02      	ldr	r2, [sp, #8]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	2301      	movs	r3, #1
 800a238:	6123      	str	r3, [r4, #16]
 800a23a:	f8ca 3000 	str.w	r3, [sl]
 800a23e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a240:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a244:	601c      	str	r4, [r3, #0]
 800a246:	e735      	b.n	800a0b4 <__gethex+0x114>
 800a248:	1e69      	subs	r1, r5, #1
 800a24a:	4620      	mov	r0, r4
 800a24c:	f7fe fd7e 	bl	8008d4c <__any_on>
 800a250:	2800      	cmp	r0, #0
 800a252:	d1ed      	bne.n	800a230 <__gethex+0x290>
 800a254:	4621      	mov	r1, r4
 800a256:	4648      	mov	r0, r9
 800a258:	f7fe f92c 	bl	80084b4 <_Bfree>
 800a25c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a25e:	2300      	movs	r3, #0
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a266:	e725      	b.n	800a0b4 <__gethex+0x114>
 800a268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1f2      	bne.n	800a254 <__gethex+0x2b4>
 800a26e:	e7df      	b.n	800a230 <__gethex+0x290>
 800a270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1dc      	bne.n	800a230 <__gethex+0x290>
 800a276:	e7ed      	b.n	800a254 <__gethex+0x2b4>
 800a278:	0800af7c 	.word	0x0800af7c
 800a27c:	0800ae16 	.word	0x0800ae16
 800a280:	0800b025 	.word	0x0800b025
 800a284:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800a288:	f1bb 0f00 	cmp.w	fp, #0
 800a28c:	d133      	bne.n	800a2f6 <__gethex+0x356>
 800a28e:	f1b8 0f00 	cmp.w	r8, #0
 800a292:	d004      	beq.n	800a29e <__gethex+0x2fe>
 800a294:	4641      	mov	r1, r8
 800a296:	4620      	mov	r0, r4
 800a298:	f7fe fd58 	bl	8008d4c <__any_on>
 800a29c:	4683      	mov	fp, r0
 800a29e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a2a8:	f008 081f 	and.w	r8, r8, #31
 800a2ac:	fa03 f308 	lsl.w	r3, r3, r8
 800a2b0:	4213      	tst	r3, r2
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	bf18      	it	ne
 800a2b8:	f04b 0b02 	orrne.w	fp, fp, #2
 800a2bc:	1bad      	subs	r5, r5, r6
 800a2be:	f7ff fe07 	bl	8009ed0 <rshift>
 800a2c2:	687e      	ldr	r6, [r7, #4]
 800a2c4:	f04f 0802 	mov.w	r8, #2
 800a2c8:	f1bb 0f00 	cmp.w	fp, #0
 800a2cc:	d04a      	beq.n	800a364 <__gethex+0x3c4>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d016      	beq.n	800a302 <__gethex+0x362>
 800a2d4:	2b03      	cmp	r3, #3
 800a2d6:	d018      	beq.n	800a30a <__gethex+0x36a>
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d109      	bne.n	800a2f0 <__gethex+0x350>
 800a2dc:	f01b 0f02 	tst.w	fp, #2
 800a2e0:	d006      	beq.n	800a2f0 <__gethex+0x350>
 800a2e2:	f8da 3000 	ldr.w	r3, [sl]
 800a2e6:	ea4b 0b03 	orr.w	fp, fp, r3
 800a2ea:	f01b 0f01 	tst.w	fp, #1
 800a2ee:	d10f      	bne.n	800a310 <__gethex+0x370>
 800a2f0:	f048 0810 	orr.w	r8, r8, #16
 800a2f4:	e036      	b.n	800a364 <__gethex+0x3c4>
 800a2f6:	f04f 0b01 	mov.w	fp, #1
 800a2fa:	e7d0      	b.n	800a29e <__gethex+0x2fe>
 800a2fc:	f04f 0801 	mov.w	r8, #1
 800a300:	e7e2      	b.n	800a2c8 <__gethex+0x328>
 800a302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a304:	f1c3 0301 	rsb	r3, r3, #1
 800a308:	930f      	str	r3, [sp, #60]	; 0x3c
 800a30a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d0ef      	beq.n	800a2f0 <__gethex+0x350>
 800a310:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a314:	f104 0214 	add.w	r2, r4, #20
 800a318:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a322:	2300      	movs	r3, #0
 800a324:	4694      	mov	ip, r2
 800a326:	f852 1b04 	ldr.w	r1, [r2], #4
 800a32a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800a32e:	d01e      	beq.n	800a36e <__gethex+0x3ce>
 800a330:	3101      	adds	r1, #1
 800a332:	f8cc 1000 	str.w	r1, [ip]
 800a336:	f1b8 0f02 	cmp.w	r8, #2
 800a33a:	f104 0214 	add.w	r2, r4, #20
 800a33e:	d13d      	bne.n	800a3bc <__gethex+0x41c>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	3b01      	subs	r3, #1
 800a344:	42ab      	cmp	r3, r5
 800a346:	d10b      	bne.n	800a360 <__gethex+0x3c0>
 800a348:	1169      	asrs	r1, r5, #5
 800a34a:	2301      	movs	r3, #1
 800a34c:	f005 051f 	and.w	r5, r5, #31
 800a350:	fa03 f505 	lsl.w	r5, r3, r5
 800a354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a358:	421d      	tst	r5, r3
 800a35a:	bf18      	it	ne
 800a35c:	f04f 0801 	movne.w	r8, #1
 800a360:	f048 0820 	orr.w	r8, r8, #32
 800a364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a366:	601c      	str	r4, [r3, #0]
 800a368:	9b02      	ldr	r3, [sp, #8]
 800a36a:	601e      	str	r6, [r3, #0]
 800a36c:	e6a2      	b.n	800a0b4 <__gethex+0x114>
 800a36e:	4290      	cmp	r0, r2
 800a370:	f842 3c04 	str.w	r3, [r2, #-4]
 800a374:	d8d6      	bhi.n	800a324 <__gethex+0x384>
 800a376:	68a2      	ldr	r2, [r4, #8]
 800a378:	4593      	cmp	fp, r2
 800a37a:	db17      	blt.n	800a3ac <__gethex+0x40c>
 800a37c:	6861      	ldr	r1, [r4, #4]
 800a37e:	4648      	mov	r0, r9
 800a380:	3101      	adds	r1, #1
 800a382:	f7fe f857 	bl	8008434 <_Balloc>
 800a386:	4682      	mov	sl, r0
 800a388:	b918      	cbnz	r0, 800a392 <__gethex+0x3f2>
 800a38a:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <__gethex+0x458>)
 800a38c:	4602      	mov	r2, r0
 800a38e:	2184      	movs	r1, #132	; 0x84
 800a390:	e6b3      	b.n	800a0fa <__gethex+0x15a>
 800a392:	6922      	ldr	r2, [r4, #16]
 800a394:	3202      	adds	r2, #2
 800a396:	f104 010c 	add.w	r1, r4, #12
 800a39a:	0092      	lsls	r2, r2, #2
 800a39c:	300c      	adds	r0, #12
 800a39e:	f7ff fd4b 	bl	8009e38 <memcpy>
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	4648      	mov	r0, r9
 800a3a6:	f7fe f885 	bl	80084b4 <_Bfree>
 800a3aa:	4654      	mov	r4, sl
 800a3ac:	6922      	ldr	r2, [r4, #16]
 800a3ae:	1c51      	adds	r1, r2, #1
 800a3b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a3b4:	6121      	str	r1, [r4, #16]
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	6151      	str	r1, [r2, #20]
 800a3ba:	e7bc      	b.n	800a336 <__gethex+0x396>
 800a3bc:	6921      	ldr	r1, [r4, #16]
 800a3be:	4559      	cmp	r1, fp
 800a3c0:	dd0b      	ble.n	800a3da <__gethex+0x43a>
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f7ff fd83 	bl	8009ed0 <rshift>
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	3601      	adds	r6, #1
 800a3ce:	42b3      	cmp	r3, r6
 800a3d0:	f6ff aedb 	blt.w	800a18a <__gethex+0x1ea>
 800a3d4:	f04f 0801 	mov.w	r8, #1
 800a3d8:	e7c2      	b.n	800a360 <__gethex+0x3c0>
 800a3da:	f015 051f 	ands.w	r5, r5, #31
 800a3de:	d0f9      	beq.n	800a3d4 <__gethex+0x434>
 800a3e0:	9b01      	ldr	r3, [sp, #4]
 800a3e2:	441a      	add	r2, r3
 800a3e4:	f1c5 0520 	rsb	r5, r5, #32
 800a3e8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a3ec:	f7fe f914 	bl	8008618 <__hi0bits>
 800a3f0:	42a8      	cmp	r0, r5
 800a3f2:	dbe6      	blt.n	800a3c2 <__gethex+0x422>
 800a3f4:	e7ee      	b.n	800a3d4 <__gethex+0x434>
 800a3f6:	bf00      	nop
 800a3f8:	0800ae16 	.word	0x0800ae16

0800a3fc <L_shift>:
 800a3fc:	f1c2 0208 	rsb	r2, r2, #8
 800a400:	0092      	lsls	r2, r2, #2
 800a402:	b570      	push	{r4, r5, r6, lr}
 800a404:	f1c2 0620 	rsb	r6, r2, #32
 800a408:	6843      	ldr	r3, [r0, #4]
 800a40a:	6804      	ldr	r4, [r0, #0]
 800a40c:	fa03 f506 	lsl.w	r5, r3, r6
 800a410:	432c      	orrs	r4, r5
 800a412:	40d3      	lsrs	r3, r2
 800a414:	6004      	str	r4, [r0, #0]
 800a416:	f840 3f04 	str.w	r3, [r0, #4]!
 800a41a:	4288      	cmp	r0, r1
 800a41c:	d3f4      	bcc.n	800a408 <L_shift+0xc>
 800a41e:	bd70      	pop	{r4, r5, r6, pc}

0800a420 <__match>:
 800a420:	b530      	push	{r4, r5, lr}
 800a422:	6803      	ldr	r3, [r0, #0]
 800a424:	3301      	adds	r3, #1
 800a426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a42a:	b914      	cbnz	r4, 800a432 <__match+0x12>
 800a42c:	6003      	str	r3, [r0, #0]
 800a42e:	2001      	movs	r0, #1
 800a430:	bd30      	pop	{r4, r5, pc}
 800a432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a436:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a43a:	2d19      	cmp	r5, #25
 800a43c:	bf98      	it	ls
 800a43e:	3220      	addls	r2, #32
 800a440:	42a2      	cmp	r2, r4
 800a442:	d0f0      	beq.n	800a426 <__match+0x6>
 800a444:	2000      	movs	r0, #0
 800a446:	e7f3      	b.n	800a430 <__match+0x10>

0800a448 <__hexnan>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	680b      	ldr	r3, [r1, #0]
 800a44e:	6801      	ldr	r1, [r0, #0]
 800a450:	115e      	asrs	r6, r3, #5
 800a452:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a456:	f013 031f 	ands.w	r3, r3, #31
 800a45a:	b087      	sub	sp, #28
 800a45c:	bf18      	it	ne
 800a45e:	3604      	addne	r6, #4
 800a460:	2500      	movs	r5, #0
 800a462:	1f37      	subs	r7, r6, #4
 800a464:	4682      	mov	sl, r0
 800a466:	4690      	mov	r8, r2
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a46e:	46b9      	mov	r9, r7
 800a470:	463c      	mov	r4, r7
 800a472:	9502      	str	r5, [sp, #8]
 800a474:	46ab      	mov	fp, r5
 800a476:	784a      	ldrb	r2, [r1, #1]
 800a478:	1c4b      	adds	r3, r1, #1
 800a47a:	9303      	str	r3, [sp, #12]
 800a47c:	b342      	cbz	r2, 800a4d0 <__hexnan+0x88>
 800a47e:	4610      	mov	r0, r2
 800a480:	9105      	str	r1, [sp, #20]
 800a482:	9204      	str	r2, [sp, #16]
 800a484:	f7ff fd76 	bl	8009f74 <__hexdig_fun>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d14f      	bne.n	800a52c <__hexnan+0xe4>
 800a48c:	9a04      	ldr	r2, [sp, #16]
 800a48e:	9905      	ldr	r1, [sp, #20]
 800a490:	2a20      	cmp	r2, #32
 800a492:	d818      	bhi.n	800a4c6 <__hexnan+0x7e>
 800a494:	9b02      	ldr	r3, [sp, #8]
 800a496:	459b      	cmp	fp, r3
 800a498:	dd13      	ble.n	800a4c2 <__hexnan+0x7a>
 800a49a:	454c      	cmp	r4, r9
 800a49c:	d206      	bcs.n	800a4ac <__hexnan+0x64>
 800a49e:	2d07      	cmp	r5, #7
 800a4a0:	dc04      	bgt.n	800a4ac <__hexnan+0x64>
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f7ff ffa8 	bl	800a3fc <L_shift>
 800a4ac:	4544      	cmp	r4, r8
 800a4ae:	d950      	bls.n	800a552 <__hexnan+0x10a>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a4b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4ba:	f8cd b008 	str.w	fp, [sp, #8]
 800a4be:	464c      	mov	r4, r9
 800a4c0:	461d      	mov	r5, r3
 800a4c2:	9903      	ldr	r1, [sp, #12]
 800a4c4:	e7d7      	b.n	800a476 <__hexnan+0x2e>
 800a4c6:	2a29      	cmp	r2, #41	; 0x29
 800a4c8:	d155      	bne.n	800a576 <__hexnan+0x12e>
 800a4ca:	3102      	adds	r1, #2
 800a4cc:	f8ca 1000 	str.w	r1, [sl]
 800a4d0:	f1bb 0f00 	cmp.w	fp, #0
 800a4d4:	d04f      	beq.n	800a576 <__hexnan+0x12e>
 800a4d6:	454c      	cmp	r4, r9
 800a4d8:	d206      	bcs.n	800a4e8 <__hexnan+0xa0>
 800a4da:	2d07      	cmp	r5, #7
 800a4dc:	dc04      	bgt.n	800a4e8 <__hexnan+0xa0>
 800a4de:	462a      	mov	r2, r5
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f7ff ff8a 	bl	800a3fc <L_shift>
 800a4e8:	4544      	cmp	r4, r8
 800a4ea:	d934      	bls.n	800a556 <__hexnan+0x10e>
 800a4ec:	f1a8 0204 	sub.w	r2, r8, #4
 800a4f0:	4623      	mov	r3, r4
 800a4f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4fa:	429f      	cmp	r7, r3
 800a4fc:	d2f9      	bcs.n	800a4f2 <__hexnan+0xaa>
 800a4fe:	1b3b      	subs	r3, r7, r4
 800a500:	f023 0303 	bic.w	r3, r3, #3
 800a504:	3304      	adds	r3, #4
 800a506:	3e03      	subs	r6, #3
 800a508:	3401      	adds	r4, #1
 800a50a:	42a6      	cmp	r6, r4
 800a50c:	bf38      	it	cc
 800a50e:	2304      	movcc	r3, #4
 800a510:	4443      	add	r3, r8
 800a512:	2200      	movs	r2, #0
 800a514:	f843 2b04 	str.w	r2, [r3], #4
 800a518:	429f      	cmp	r7, r3
 800a51a:	d2fb      	bcs.n	800a514 <__hexnan+0xcc>
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	b91b      	cbnz	r3, 800a528 <__hexnan+0xe0>
 800a520:	4547      	cmp	r7, r8
 800a522:	d126      	bne.n	800a572 <__hexnan+0x12a>
 800a524:	2301      	movs	r3, #1
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	2005      	movs	r0, #5
 800a52a:	e025      	b.n	800a578 <__hexnan+0x130>
 800a52c:	3501      	adds	r5, #1
 800a52e:	2d08      	cmp	r5, #8
 800a530:	f10b 0b01 	add.w	fp, fp, #1
 800a534:	dd06      	ble.n	800a544 <__hexnan+0xfc>
 800a536:	4544      	cmp	r4, r8
 800a538:	d9c3      	bls.n	800a4c2 <__hexnan+0x7a>
 800a53a:	2300      	movs	r3, #0
 800a53c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a540:	2501      	movs	r5, #1
 800a542:	3c04      	subs	r4, #4
 800a544:	6822      	ldr	r2, [r4, #0]
 800a546:	f000 000f 	and.w	r0, r0, #15
 800a54a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a54e:	6020      	str	r0, [r4, #0]
 800a550:	e7b7      	b.n	800a4c2 <__hexnan+0x7a>
 800a552:	2508      	movs	r5, #8
 800a554:	e7b5      	b.n	800a4c2 <__hexnan+0x7a>
 800a556:	9b01      	ldr	r3, [sp, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0df      	beq.n	800a51c <__hexnan+0xd4>
 800a55c:	f1c3 0320 	rsb	r3, r3, #32
 800a560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a564:	40da      	lsrs	r2, r3
 800a566:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a56a:	4013      	ands	r3, r2
 800a56c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a570:	e7d4      	b.n	800a51c <__hexnan+0xd4>
 800a572:	3f04      	subs	r7, #4
 800a574:	e7d2      	b.n	800a51c <__hexnan+0xd4>
 800a576:	2004      	movs	r0, #4
 800a578:	b007      	add	sp, #28
 800a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a57e <__ascii_mbtowc>:
 800a57e:	b082      	sub	sp, #8
 800a580:	b901      	cbnz	r1, 800a584 <__ascii_mbtowc+0x6>
 800a582:	a901      	add	r1, sp, #4
 800a584:	b142      	cbz	r2, 800a598 <__ascii_mbtowc+0x1a>
 800a586:	b14b      	cbz	r3, 800a59c <__ascii_mbtowc+0x1e>
 800a588:	7813      	ldrb	r3, [r2, #0]
 800a58a:	600b      	str	r3, [r1, #0]
 800a58c:	7812      	ldrb	r2, [r2, #0]
 800a58e:	1e10      	subs	r0, r2, #0
 800a590:	bf18      	it	ne
 800a592:	2001      	movne	r0, #1
 800a594:	b002      	add	sp, #8
 800a596:	4770      	bx	lr
 800a598:	4610      	mov	r0, r2
 800a59a:	e7fb      	b.n	800a594 <__ascii_mbtowc+0x16>
 800a59c:	f06f 0001 	mvn.w	r0, #1
 800a5a0:	e7f8      	b.n	800a594 <__ascii_mbtowc+0x16>

0800a5a2 <_realloc_r>:
 800a5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a6:	4680      	mov	r8, r0
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	460e      	mov	r6, r1
 800a5ac:	b921      	cbnz	r1, 800a5b8 <_realloc_r+0x16>
 800a5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	f7fd beb2 	b.w	800831c <_malloc_r>
 800a5b8:	b92a      	cbnz	r2, 800a5c6 <_realloc_r+0x24>
 800a5ba:	f7fd fe3b 	bl	8008234 <_free_r>
 800a5be:	4625      	mov	r5, r4
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c6:	f000 f842 	bl	800a64e <_malloc_usable_size_r>
 800a5ca:	4284      	cmp	r4, r0
 800a5cc:	4607      	mov	r7, r0
 800a5ce:	d802      	bhi.n	800a5d6 <_realloc_r+0x34>
 800a5d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5d4:	d812      	bhi.n	800a5fc <_realloc_r+0x5a>
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	4640      	mov	r0, r8
 800a5da:	f7fd fe9f 	bl	800831c <_malloc_r>
 800a5de:	4605      	mov	r5, r0
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d0ed      	beq.n	800a5c0 <_realloc_r+0x1e>
 800a5e4:	42bc      	cmp	r4, r7
 800a5e6:	4622      	mov	r2, r4
 800a5e8:	4631      	mov	r1, r6
 800a5ea:	bf28      	it	cs
 800a5ec:	463a      	movcs	r2, r7
 800a5ee:	f7ff fc23 	bl	8009e38 <memcpy>
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	4640      	mov	r0, r8
 800a5f6:	f7fd fe1d 	bl	8008234 <_free_r>
 800a5fa:	e7e1      	b.n	800a5c0 <_realloc_r+0x1e>
 800a5fc:	4635      	mov	r5, r6
 800a5fe:	e7df      	b.n	800a5c0 <_realloc_r+0x1e>

0800a600 <__ascii_wctomb>:
 800a600:	b149      	cbz	r1, 800a616 <__ascii_wctomb+0x16>
 800a602:	2aff      	cmp	r2, #255	; 0xff
 800a604:	bf85      	ittet	hi
 800a606:	238a      	movhi	r3, #138	; 0x8a
 800a608:	6003      	strhi	r3, [r0, #0]
 800a60a:	700a      	strbls	r2, [r1, #0]
 800a60c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a610:	bf98      	it	ls
 800a612:	2001      	movls	r0, #1
 800a614:	4770      	bx	lr
 800a616:	4608      	mov	r0, r1
 800a618:	4770      	bx	lr
	...

0800a61c <fiprintf>:
 800a61c:	b40e      	push	{r1, r2, r3}
 800a61e:	b503      	push	{r0, r1, lr}
 800a620:	4601      	mov	r1, r0
 800a622:	ab03      	add	r3, sp, #12
 800a624:	4805      	ldr	r0, [pc, #20]	; (800a63c <fiprintf+0x20>)
 800a626:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62a:	6800      	ldr	r0, [r0, #0]
 800a62c:	9301      	str	r3, [sp, #4]
 800a62e:	f000 f83f 	bl	800a6b0 <_vfiprintf_r>
 800a632:	b002      	add	sp, #8
 800a634:	f85d eb04 	ldr.w	lr, [sp], #4
 800a638:	b003      	add	sp, #12
 800a63a:	4770      	bx	lr
 800a63c:	20000078 	.word	0x20000078

0800a640 <abort>:
 800a640:	b508      	push	{r3, lr}
 800a642:	2006      	movs	r0, #6
 800a644:	f000 fa0c 	bl	800aa60 <raise>
 800a648:	2001      	movs	r0, #1
 800a64a:	f7f7 fb0f 	bl	8001c6c <_exit>

0800a64e <_malloc_usable_size_r>:
 800a64e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a652:	1f18      	subs	r0, r3, #4
 800a654:	2b00      	cmp	r3, #0
 800a656:	bfbc      	itt	lt
 800a658:	580b      	ldrlt	r3, [r1, r0]
 800a65a:	18c0      	addlt	r0, r0, r3
 800a65c:	4770      	bx	lr

0800a65e <__sfputc_r>:
 800a65e:	6893      	ldr	r3, [r2, #8]
 800a660:	3b01      	subs	r3, #1
 800a662:	2b00      	cmp	r3, #0
 800a664:	b410      	push	{r4}
 800a666:	6093      	str	r3, [r2, #8]
 800a668:	da08      	bge.n	800a67c <__sfputc_r+0x1e>
 800a66a:	6994      	ldr	r4, [r2, #24]
 800a66c:	42a3      	cmp	r3, r4
 800a66e:	db01      	blt.n	800a674 <__sfputc_r+0x16>
 800a670:	290a      	cmp	r1, #10
 800a672:	d103      	bne.n	800a67c <__sfputc_r+0x1e>
 800a674:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a678:	f000 b934 	b.w	800a8e4 <__swbuf_r>
 800a67c:	6813      	ldr	r3, [r2, #0]
 800a67e:	1c58      	adds	r0, r3, #1
 800a680:	6010      	str	r0, [r2, #0]
 800a682:	7019      	strb	r1, [r3, #0]
 800a684:	4608      	mov	r0, r1
 800a686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <__sfputs_r>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	4606      	mov	r6, r0
 800a690:	460f      	mov	r7, r1
 800a692:	4614      	mov	r4, r2
 800a694:	18d5      	adds	r5, r2, r3
 800a696:	42ac      	cmp	r4, r5
 800a698:	d101      	bne.n	800a69e <__sfputs_r+0x12>
 800a69a:	2000      	movs	r0, #0
 800a69c:	e007      	b.n	800a6ae <__sfputs_r+0x22>
 800a69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a2:	463a      	mov	r2, r7
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff ffda 	bl	800a65e <__sfputc_r>
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	d1f3      	bne.n	800a696 <__sfputs_r+0xa>
 800a6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6b0 <_vfiprintf_r>:
 800a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	460d      	mov	r5, r1
 800a6b6:	b09d      	sub	sp, #116	; 0x74
 800a6b8:	4614      	mov	r4, r2
 800a6ba:	4698      	mov	r8, r3
 800a6bc:	4606      	mov	r6, r0
 800a6be:	b118      	cbz	r0, 800a6c8 <_vfiprintf_r+0x18>
 800a6c0:	6a03      	ldr	r3, [r0, #32]
 800a6c2:	b90b      	cbnz	r3, 800a6c8 <_vfiprintf_r+0x18>
 800a6c4:	f7fc fe1a 	bl	80072fc <__sinit>
 800a6c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ca:	07d9      	lsls	r1, r3, #31
 800a6cc:	d405      	bmi.n	800a6da <_vfiprintf_r+0x2a>
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	059a      	lsls	r2, r3, #22
 800a6d2:	d402      	bmi.n	800a6da <_vfiprintf_r+0x2a>
 800a6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6d6:	f7fc ff28 	bl	800752a <__retarget_lock_acquire_recursive>
 800a6da:	89ab      	ldrh	r3, [r5, #12]
 800a6dc:	071b      	lsls	r3, r3, #28
 800a6de:	d501      	bpl.n	800a6e4 <_vfiprintf_r+0x34>
 800a6e0:	692b      	ldr	r3, [r5, #16]
 800a6e2:	b99b      	cbnz	r3, 800a70c <_vfiprintf_r+0x5c>
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f000 f93a 	bl	800a960 <__swsetup_r>
 800a6ec:	b170      	cbz	r0, 800a70c <_vfiprintf_r+0x5c>
 800a6ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f0:	07dc      	lsls	r4, r3, #31
 800a6f2:	d504      	bpl.n	800a6fe <_vfiprintf_r+0x4e>
 800a6f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6f8:	b01d      	add	sp, #116	; 0x74
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	0598      	lsls	r0, r3, #22
 800a702:	d4f7      	bmi.n	800a6f4 <_vfiprintf_r+0x44>
 800a704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a706:	f7fc ff11 	bl	800752c <__retarget_lock_release_recursive>
 800a70a:	e7f3      	b.n	800a6f4 <_vfiprintf_r+0x44>
 800a70c:	2300      	movs	r3, #0
 800a70e:	9309      	str	r3, [sp, #36]	; 0x24
 800a710:	2320      	movs	r3, #32
 800a712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a716:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71a:	2330      	movs	r3, #48	; 0x30
 800a71c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a8d0 <_vfiprintf_r+0x220>
 800a720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a724:	f04f 0901 	mov.w	r9, #1
 800a728:	4623      	mov	r3, r4
 800a72a:	469a      	mov	sl, r3
 800a72c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a730:	b10a      	cbz	r2, 800a736 <_vfiprintf_r+0x86>
 800a732:	2a25      	cmp	r2, #37	; 0x25
 800a734:	d1f9      	bne.n	800a72a <_vfiprintf_r+0x7a>
 800a736:	ebba 0b04 	subs.w	fp, sl, r4
 800a73a:	d00b      	beq.n	800a754 <_vfiprintf_r+0xa4>
 800a73c:	465b      	mov	r3, fp
 800a73e:	4622      	mov	r2, r4
 800a740:	4629      	mov	r1, r5
 800a742:	4630      	mov	r0, r6
 800a744:	f7ff ffa2 	bl	800a68c <__sfputs_r>
 800a748:	3001      	adds	r0, #1
 800a74a:	f000 80a9 	beq.w	800a8a0 <_vfiprintf_r+0x1f0>
 800a74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a750:	445a      	add	r2, fp
 800a752:	9209      	str	r2, [sp, #36]	; 0x24
 800a754:	f89a 3000 	ldrb.w	r3, [sl]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 80a1 	beq.w	800a8a0 <_vfiprintf_r+0x1f0>
 800a75e:	2300      	movs	r3, #0
 800a760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a768:	f10a 0a01 	add.w	sl, sl, #1
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a774:	931a      	str	r3, [sp, #104]	; 0x68
 800a776:	4654      	mov	r4, sl
 800a778:	2205      	movs	r2, #5
 800a77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77e:	4854      	ldr	r0, [pc, #336]	; (800a8d0 <_vfiprintf_r+0x220>)
 800a780:	f7f5 fd26 	bl	80001d0 <memchr>
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	b9d8      	cbnz	r0, 800a7c0 <_vfiprintf_r+0x110>
 800a788:	06d1      	lsls	r1, r2, #27
 800a78a:	bf44      	itt	mi
 800a78c:	2320      	movmi	r3, #32
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a792:	0713      	lsls	r3, r2, #28
 800a794:	bf44      	itt	mi
 800a796:	232b      	movmi	r3, #43	; 0x2b
 800a798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a79c:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a2:	d015      	beq.n	800a7d0 <_vfiprintf_r+0x120>
 800a7a4:	9a07      	ldr	r2, [sp, #28]
 800a7a6:	4654      	mov	r4, sl
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f04f 0c0a 	mov.w	ip, #10
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b4:	3b30      	subs	r3, #48	; 0x30
 800a7b6:	2b09      	cmp	r3, #9
 800a7b8:	d94d      	bls.n	800a856 <_vfiprintf_r+0x1a6>
 800a7ba:	b1b0      	cbz	r0, 800a7ea <_vfiprintf_r+0x13a>
 800a7bc:	9207      	str	r2, [sp, #28]
 800a7be:	e014      	b.n	800a7ea <_vfiprintf_r+0x13a>
 800a7c0:	eba0 0308 	sub.w	r3, r0, r8
 800a7c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	46a2      	mov	sl, r4
 800a7ce:	e7d2      	b.n	800a776 <_vfiprintf_r+0xc6>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	1d19      	adds	r1, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9103      	str	r1, [sp, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfbb      	ittet	lt
 800a7dc:	425b      	neglt	r3, r3
 800a7de:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e2:	9307      	strge	r3, [sp, #28]
 800a7e4:	9307      	strlt	r3, [sp, #28]
 800a7e6:	bfb8      	it	lt
 800a7e8:	9204      	strlt	r2, [sp, #16]
 800a7ea:	7823      	ldrb	r3, [r4, #0]
 800a7ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ee:	d10c      	bne.n	800a80a <_vfiprintf_r+0x15a>
 800a7f0:	7863      	ldrb	r3, [r4, #1]
 800a7f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f4:	d134      	bne.n	800a860 <_vfiprintf_r+0x1b0>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	1d1a      	adds	r2, r3, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	9203      	str	r2, [sp, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfb8      	it	lt
 800a802:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a806:	3402      	adds	r4, #2
 800a808:	9305      	str	r3, [sp, #20]
 800a80a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a8e0 <_vfiprintf_r+0x230>
 800a80e:	7821      	ldrb	r1, [r4, #0]
 800a810:	2203      	movs	r2, #3
 800a812:	4650      	mov	r0, sl
 800a814:	f7f5 fcdc 	bl	80001d0 <memchr>
 800a818:	b138      	cbz	r0, 800a82a <_vfiprintf_r+0x17a>
 800a81a:	9b04      	ldr	r3, [sp, #16]
 800a81c:	eba0 000a 	sub.w	r0, r0, sl
 800a820:	2240      	movs	r2, #64	; 0x40
 800a822:	4082      	lsls	r2, r0
 800a824:	4313      	orrs	r3, r2
 800a826:	3401      	adds	r4, #1
 800a828:	9304      	str	r3, [sp, #16]
 800a82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a82e:	4829      	ldr	r0, [pc, #164]	; (800a8d4 <_vfiprintf_r+0x224>)
 800a830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a834:	2206      	movs	r2, #6
 800a836:	f7f5 fccb 	bl	80001d0 <memchr>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d03f      	beq.n	800a8be <_vfiprintf_r+0x20e>
 800a83e:	4b26      	ldr	r3, [pc, #152]	; (800a8d8 <_vfiprintf_r+0x228>)
 800a840:	bb1b      	cbnz	r3, 800a88a <_vfiprintf_r+0x1da>
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	3307      	adds	r3, #7
 800a846:	f023 0307 	bic.w	r3, r3, #7
 800a84a:	3308      	adds	r3, #8
 800a84c:	9303      	str	r3, [sp, #12]
 800a84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a850:	443b      	add	r3, r7
 800a852:	9309      	str	r3, [sp, #36]	; 0x24
 800a854:	e768      	b.n	800a728 <_vfiprintf_r+0x78>
 800a856:	fb0c 3202 	mla	r2, ip, r2, r3
 800a85a:	460c      	mov	r4, r1
 800a85c:	2001      	movs	r0, #1
 800a85e:	e7a6      	b.n	800a7ae <_vfiprintf_r+0xfe>
 800a860:	2300      	movs	r3, #0
 800a862:	3401      	adds	r4, #1
 800a864:	9305      	str	r3, [sp, #20]
 800a866:	4619      	mov	r1, r3
 800a868:	f04f 0c0a 	mov.w	ip, #10
 800a86c:	4620      	mov	r0, r4
 800a86e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a872:	3a30      	subs	r2, #48	; 0x30
 800a874:	2a09      	cmp	r2, #9
 800a876:	d903      	bls.n	800a880 <_vfiprintf_r+0x1d0>
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0c6      	beq.n	800a80a <_vfiprintf_r+0x15a>
 800a87c:	9105      	str	r1, [sp, #20]
 800a87e:	e7c4      	b.n	800a80a <_vfiprintf_r+0x15a>
 800a880:	fb0c 2101 	mla	r1, ip, r1, r2
 800a884:	4604      	mov	r4, r0
 800a886:	2301      	movs	r3, #1
 800a888:	e7f0      	b.n	800a86c <_vfiprintf_r+0x1bc>
 800a88a:	ab03      	add	r3, sp, #12
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	462a      	mov	r2, r5
 800a890:	4b12      	ldr	r3, [pc, #72]	; (800a8dc <_vfiprintf_r+0x22c>)
 800a892:	a904      	add	r1, sp, #16
 800a894:	4630      	mov	r0, r6
 800a896:	f7fb fecf 	bl	8006638 <_printf_float>
 800a89a:	4607      	mov	r7, r0
 800a89c:	1c78      	adds	r0, r7, #1
 800a89e:	d1d6      	bne.n	800a84e <_vfiprintf_r+0x19e>
 800a8a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a2:	07d9      	lsls	r1, r3, #31
 800a8a4:	d405      	bmi.n	800a8b2 <_vfiprintf_r+0x202>
 800a8a6:	89ab      	ldrh	r3, [r5, #12]
 800a8a8:	059a      	lsls	r2, r3, #22
 800a8aa:	d402      	bmi.n	800a8b2 <_vfiprintf_r+0x202>
 800a8ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ae:	f7fc fe3d 	bl	800752c <__retarget_lock_release_recursive>
 800a8b2:	89ab      	ldrh	r3, [r5, #12]
 800a8b4:	065b      	lsls	r3, r3, #25
 800a8b6:	f53f af1d 	bmi.w	800a6f4 <_vfiprintf_r+0x44>
 800a8ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8bc:	e71c      	b.n	800a6f8 <_vfiprintf_r+0x48>
 800a8be:	ab03      	add	r3, sp, #12
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <_vfiprintf_r+0x22c>)
 800a8c6:	a904      	add	r1, sp, #16
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f7fc f959 	bl	8006b80 <_printf_i>
 800a8ce:	e7e4      	b.n	800a89a <_vfiprintf_r+0x1ea>
 800a8d0:	0800afd0 	.word	0x0800afd0
 800a8d4:	0800afda 	.word	0x0800afda
 800a8d8:	08006639 	.word	0x08006639
 800a8dc:	0800a68d 	.word	0x0800a68d
 800a8e0:	0800afd6 	.word	0x0800afd6

0800a8e4 <__swbuf_r>:
 800a8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e6:	460e      	mov	r6, r1
 800a8e8:	4614      	mov	r4, r2
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	b118      	cbz	r0, 800a8f6 <__swbuf_r+0x12>
 800a8ee:	6a03      	ldr	r3, [r0, #32]
 800a8f0:	b90b      	cbnz	r3, 800a8f6 <__swbuf_r+0x12>
 800a8f2:	f7fc fd03 	bl	80072fc <__sinit>
 800a8f6:	69a3      	ldr	r3, [r4, #24]
 800a8f8:	60a3      	str	r3, [r4, #8]
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	071a      	lsls	r2, r3, #28
 800a8fe:	d525      	bpl.n	800a94c <__swbuf_r+0x68>
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	b31b      	cbz	r3, 800a94c <__swbuf_r+0x68>
 800a904:	6823      	ldr	r3, [r4, #0]
 800a906:	6922      	ldr	r2, [r4, #16]
 800a908:	1a98      	subs	r0, r3, r2
 800a90a:	6963      	ldr	r3, [r4, #20]
 800a90c:	b2f6      	uxtb	r6, r6
 800a90e:	4283      	cmp	r3, r0
 800a910:	4637      	mov	r7, r6
 800a912:	dc04      	bgt.n	800a91e <__swbuf_r+0x3a>
 800a914:	4621      	mov	r1, r4
 800a916:	4628      	mov	r0, r5
 800a918:	f7ff fa2a 	bl	8009d70 <_fflush_r>
 800a91c:	b9e0      	cbnz	r0, 800a958 <__swbuf_r+0x74>
 800a91e:	68a3      	ldr	r3, [r4, #8]
 800a920:	3b01      	subs	r3, #1
 800a922:	60a3      	str	r3, [r4, #8]
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	6022      	str	r2, [r4, #0]
 800a92a:	701e      	strb	r6, [r3, #0]
 800a92c:	6962      	ldr	r2, [r4, #20]
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	429a      	cmp	r2, r3
 800a932:	d004      	beq.n	800a93e <__swbuf_r+0x5a>
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	07db      	lsls	r3, r3, #31
 800a938:	d506      	bpl.n	800a948 <__swbuf_r+0x64>
 800a93a:	2e0a      	cmp	r6, #10
 800a93c:	d104      	bne.n	800a948 <__swbuf_r+0x64>
 800a93e:	4621      	mov	r1, r4
 800a940:	4628      	mov	r0, r5
 800a942:	f7ff fa15 	bl	8009d70 <_fflush_r>
 800a946:	b938      	cbnz	r0, 800a958 <__swbuf_r+0x74>
 800a948:	4638      	mov	r0, r7
 800a94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a94c:	4621      	mov	r1, r4
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 f806 	bl	800a960 <__swsetup_r>
 800a954:	2800      	cmp	r0, #0
 800a956:	d0d5      	beq.n	800a904 <__swbuf_r+0x20>
 800a958:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a95c:	e7f4      	b.n	800a948 <__swbuf_r+0x64>
	...

0800a960 <__swsetup_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4b2a      	ldr	r3, [pc, #168]	; (800aa0c <__swsetup_r+0xac>)
 800a964:	4605      	mov	r5, r0
 800a966:	6818      	ldr	r0, [r3, #0]
 800a968:	460c      	mov	r4, r1
 800a96a:	b118      	cbz	r0, 800a974 <__swsetup_r+0x14>
 800a96c:	6a03      	ldr	r3, [r0, #32]
 800a96e:	b90b      	cbnz	r3, 800a974 <__swsetup_r+0x14>
 800a970:	f7fc fcc4 	bl	80072fc <__sinit>
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a97a:	0718      	lsls	r0, r3, #28
 800a97c:	d422      	bmi.n	800a9c4 <__swsetup_r+0x64>
 800a97e:	06d9      	lsls	r1, r3, #27
 800a980:	d407      	bmi.n	800a992 <__swsetup_r+0x32>
 800a982:	2309      	movs	r3, #9
 800a984:	602b      	str	r3, [r5, #0]
 800a986:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a990:	e034      	b.n	800a9fc <__swsetup_r+0x9c>
 800a992:	0758      	lsls	r0, r3, #29
 800a994:	d512      	bpl.n	800a9bc <__swsetup_r+0x5c>
 800a996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a998:	b141      	cbz	r1, 800a9ac <__swsetup_r+0x4c>
 800a99a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a99e:	4299      	cmp	r1, r3
 800a9a0:	d002      	beq.n	800a9a8 <__swsetup_r+0x48>
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f7fd fc46 	bl	8008234 <_free_r>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6363      	str	r3, [r4, #52]	; 0x34
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9b2:	81a3      	strh	r3, [r4, #12]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	6063      	str	r3, [r4, #4]
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	6023      	str	r3, [r4, #0]
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f043 0308 	orr.w	r3, r3, #8
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	6923      	ldr	r3, [r4, #16]
 800a9c6:	b94b      	cbnz	r3, 800a9dc <__swsetup_r+0x7c>
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9d2:	d003      	beq.n	800a9dc <__swsetup_r+0x7c>
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f000 f884 	bl	800aae4 <__smakebuf_r>
 800a9dc:	89a0      	ldrh	r0, [r4, #12]
 800a9de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9e2:	f010 0301 	ands.w	r3, r0, #1
 800a9e6:	d00a      	beq.n	800a9fe <__swsetup_r+0x9e>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60a3      	str	r3, [r4, #8]
 800a9ec:	6963      	ldr	r3, [r4, #20]
 800a9ee:	425b      	negs	r3, r3
 800a9f0:	61a3      	str	r3, [r4, #24]
 800a9f2:	6923      	ldr	r3, [r4, #16]
 800a9f4:	b943      	cbnz	r3, 800aa08 <__swsetup_r+0xa8>
 800a9f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9fa:	d1c4      	bne.n	800a986 <__swsetup_r+0x26>
 800a9fc:	bd38      	pop	{r3, r4, r5, pc}
 800a9fe:	0781      	lsls	r1, r0, #30
 800aa00:	bf58      	it	pl
 800aa02:	6963      	ldrpl	r3, [r4, #20]
 800aa04:	60a3      	str	r3, [r4, #8]
 800aa06:	e7f4      	b.n	800a9f2 <__swsetup_r+0x92>
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e7f7      	b.n	800a9fc <__swsetup_r+0x9c>
 800aa0c:	20000078 	.word	0x20000078

0800aa10 <_raise_r>:
 800aa10:	291f      	cmp	r1, #31
 800aa12:	b538      	push	{r3, r4, r5, lr}
 800aa14:	4604      	mov	r4, r0
 800aa16:	460d      	mov	r5, r1
 800aa18:	d904      	bls.n	800aa24 <_raise_r+0x14>
 800aa1a:	2316      	movs	r3, #22
 800aa1c:	6003      	str	r3, [r0, #0]
 800aa1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aa26:	b112      	cbz	r2, 800aa2e <_raise_r+0x1e>
 800aa28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa2c:	b94b      	cbnz	r3, 800aa42 <_raise_r+0x32>
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 f830 	bl	800aa94 <_getpid_r>
 800aa34:	462a      	mov	r2, r5
 800aa36:	4601      	mov	r1, r0
 800aa38:	4620      	mov	r0, r4
 800aa3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa3e:	f000 b817 	b.w	800aa70 <_kill_r>
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d00a      	beq.n	800aa5c <_raise_r+0x4c>
 800aa46:	1c59      	adds	r1, r3, #1
 800aa48:	d103      	bne.n	800aa52 <_raise_r+0x42>
 800aa4a:	2316      	movs	r3, #22
 800aa4c:	6003      	str	r3, [r0, #0]
 800aa4e:	2001      	movs	r0, #1
 800aa50:	e7e7      	b.n	800aa22 <_raise_r+0x12>
 800aa52:	2400      	movs	r4, #0
 800aa54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa58:	4628      	mov	r0, r5
 800aa5a:	4798      	blx	r3
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	e7e0      	b.n	800aa22 <_raise_r+0x12>

0800aa60 <raise>:
 800aa60:	4b02      	ldr	r3, [pc, #8]	; (800aa6c <raise+0xc>)
 800aa62:	4601      	mov	r1, r0
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	f7ff bfd3 	b.w	800aa10 <_raise_r>
 800aa6a:	bf00      	nop
 800aa6c:	20000078 	.word	0x20000078

0800aa70 <_kill_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	; (800aa90 <_kill_r+0x20>)
 800aa74:	2300      	movs	r3, #0
 800aa76:	4604      	mov	r4, r0
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	f7f7 f8e5 	bl	8001c4c <_kill>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	d102      	bne.n	800aa8c <_kill_r+0x1c>
 800aa86:	682b      	ldr	r3, [r5, #0]
 800aa88:	b103      	cbz	r3, 800aa8c <_kill_r+0x1c>
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	bf00      	nop
 800aa90:	200005c0 	.word	0x200005c0

0800aa94 <_getpid_r>:
 800aa94:	f7f7 b8d2 	b.w	8001c3c <_getpid>

0800aa98 <__swhatbuf_r>:
 800aa98:	b570      	push	{r4, r5, r6, lr}
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa0:	2900      	cmp	r1, #0
 800aaa2:	b096      	sub	sp, #88	; 0x58
 800aaa4:	4615      	mov	r5, r2
 800aaa6:	461e      	mov	r6, r3
 800aaa8:	da0d      	bge.n	800aac6 <__swhatbuf_r+0x2e>
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aab0:	f04f 0100 	mov.w	r1, #0
 800aab4:	bf0c      	ite	eq
 800aab6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aaba:	2340      	movne	r3, #64	; 0x40
 800aabc:	2000      	movs	r0, #0
 800aabe:	6031      	str	r1, [r6, #0]
 800aac0:	602b      	str	r3, [r5, #0]
 800aac2:	b016      	add	sp, #88	; 0x58
 800aac4:	bd70      	pop	{r4, r5, r6, pc}
 800aac6:	466a      	mov	r2, sp
 800aac8:	f000 f848 	bl	800ab5c <_fstat_r>
 800aacc:	2800      	cmp	r0, #0
 800aace:	dbec      	blt.n	800aaaa <__swhatbuf_r+0x12>
 800aad0:	9901      	ldr	r1, [sp, #4]
 800aad2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aad6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aada:	4259      	negs	r1, r3
 800aadc:	4159      	adcs	r1, r3
 800aade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aae2:	e7eb      	b.n	800aabc <__swhatbuf_r+0x24>

0800aae4 <__smakebuf_r>:
 800aae4:	898b      	ldrh	r3, [r1, #12]
 800aae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aae8:	079d      	lsls	r5, r3, #30
 800aaea:	4606      	mov	r6, r0
 800aaec:	460c      	mov	r4, r1
 800aaee:	d507      	bpl.n	800ab00 <__smakebuf_r+0x1c>
 800aaf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	6123      	str	r3, [r4, #16]
 800aaf8:	2301      	movs	r3, #1
 800aafa:	6163      	str	r3, [r4, #20]
 800aafc:	b002      	add	sp, #8
 800aafe:	bd70      	pop	{r4, r5, r6, pc}
 800ab00:	ab01      	add	r3, sp, #4
 800ab02:	466a      	mov	r2, sp
 800ab04:	f7ff ffc8 	bl	800aa98 <__swhatbuf_r>
 800ab08:	9900      	ldr	r1, [sp, #0]
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f7fd fc05 	bl	800831c <_malloc_r>
 800ab12:	b948      	cbnz	r0, 800ab28 <__smakebuf_r+0x44>
 800ab14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab18:	059a      	lsls	r2, r3, #22
 800ab1a:	d4ef      	bmi.n	800aafc <__smakebuf_r+0x18>
 800ab1c:	f023 0303 	bic.w	r3, r3, #3
 800ab20:	f043 0302 	orr.w	r3, r3, #2
 800ab24:	81a3      	strh	r3, [r4, #12]
 800ab26:	e7e3      	b.n	800aaf0 <__smakebuf_r+0xc>
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	6020      	str	r0, [r4, #0]
 800ab2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	9b00      	ldr	r3, [sp, #0]
 800ab34:	6163      	str	r3, [r4, #20]
 800ab36:	9b01      	ldr	r3, [sp, #4]
 800ab38:	6120      	str	r0, [r4, #16]
 800ab3a:	b15b      	cbz	r3, 800ab54 <__smakebuf_r+0x70>
 800ab3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab40:	4630      	mov	r0, r6
 800ab42:	f000 f81d 	bl	800ab80 <_isatty_r>
 800ab46:	b128      	cbz	r0, 800ab54 <__smakebuf_r+0x70>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	f023 0303 	bic.w	r3, r3, #3
 800ab4e:	f043 0301 	orr.w	r3, r3, #1
 800ab52:	81a3      	strh	r3, [r4, #12]
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	431d      	orrs	r5, r3
 800ab58:	81a5      	strh	r5, [r4, #12]
 800ab5a:	e7cf      	b.n	800aafc <__smakebuf_r+0x18>

0800ab5c <_fstat_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d07      	ldr	r5, [pc, #28]	; (800ab7c <_fstat_r+0x20>)
 800ab60:	2300      	movs	r3, #0
 800ab62:	4604      	mov	r4, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	4611      	mov	r1, r2
 800ab68:	602b      	str	r3, [r5, #0]
 800ab6a:	f7f7 f8ce 	bl	8001d0a <_fstat>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	d102      	bne.n	800ab78 <_fstat_r+0x1c>
 800ab72:	682b      	ldr	r3, [r5, #0]
 800ab74:	b103      	cbz	r3, 800ab78 <_fstat_r+0x1c>
 800ab76:	6023      	str	r3, [r4, #0]
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	bf00      	nop
 800ab7c:	200005c0 	.word	0x200005c0

0800ab80 <_isatty_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d06      	ldr	r5, [pc, #24]	; (800ab9c <_isatty_r+0x1c>)
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	4608      	mov	r0, r1
 800ab8a:	602b      	str	r3, [r5, #0]
 800ab8c:	f7f7 f8cd 	bl	8001d2a <_isatty>
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	d102      	bne.n	800ab9a <_isatty_r+0x1a>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	b103      	cbz	r3, 800ab9a <_isatty_r+0x1a>
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	200005c0 	.word	0x200005c0

0800aba0 <_init>:
 800aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba2:	bf00      	nop
 800aba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba6:	bc08      	pop	{r3}
 800aba8:	469e      	mov	lr, r3
 800abaa:	4770      	bx	lr

0800abac <_fini>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	bf00      	nop
 800abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb2:	bc08      	pop	{r3}
 800abb4:	469e      	mov	lr, r3
 800abb6:	4770      	bx	lr
