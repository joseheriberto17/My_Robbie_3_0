
My_Robbie_3_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007160  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a0  080074a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a8  080074a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080074b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000005c8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000153b1  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cbc  00000000  00000000  00035494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001430  00000000  00000000  00038150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fe9  00000000  00000000  00039580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023176  00000000  00000000  0003a569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a72d  00000000  00000000  0005d6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7add  00000000  00000000  00077e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005bd4  00000000  00000000  0014f8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001554c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072d8 	.word	0x080072d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080072d8 	.word	0x080072d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f001 fb10 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f84c 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 fce0 	bl	8000f4c <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 fcb6 	bl	8000efc <MX_DMA_Init>
  MX_RTC_Init();
 8000590:	f000 f9ce 	bl	8000930 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000594:	f000 fc5e 	bl	8000e54 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000598:	f000 f8a2 	bl	80006e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800059c:	f000 fa24 	bl	80009e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005a0:	f000 fa7a 	bl	8000a98 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005a4:	f000 fc2c 	bl	8000e00 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005a8:	f000 fc7e 	bl	8000ea8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80005ac:	f000 f9e6 	bl	800097c <MX_SPI2_Init>
  MX_TIM3_Init();
 80005b0:	f000 fac6 	bl	8000b40 <MX_TIM3_Init>
  MX_FATFS_Init();
 80005b4:	f006 f896 	bl	80066e4 <MX_FATFS_Init>
  MX_I2C2_Init();
 80005b8:	f000 f98c 	bl	80008d4 <MX_I2C2_Init>
  MX_TIM8_Init();
 80005bc:	f000 fb9c 	bl	8000cf8 <MX_TIM8_Init>
  MX_TIM4_Init();
 80005c0:	f000 fb40 	bl	8000c44 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(STATUS_LED_RED_GPIO_Port, STATUS_LED_RED_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x8c>)
 80005cc:	f002 fc6e 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AMOT2_GPIO_Port, AMOT2_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <main+0x90>)
 80005d6:	f002 fc69 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BMOT2_GPIO_Port, BMOT2_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <main+0x94>)
 80005e2:	f002 fc63 	bl	8002eac <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80005e6:	2100      	movs	r1, #0
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <main+0x98>)
 80005ea:	f003 fd71 	bl	80040d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80005ee:	2104      	movs	r1, #4
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <main+0x98>)
 80005f2:	f003 fd6d 	bl	80040d0 <HAL_TIM_PWM_Start>

  printWelcomeMessage(&huart3);
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <main+0x9c>)
 80005f8:	f000 fdbe 	bl	8001178 <printWelcomeMessage>
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)&MSG_Rx,3);
 80005fc:	2203      	movs	r2, #3
 80005fe:	4907      	ldr	r1, [pc, #28]	; (800061c <main+0xa0>)
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <main+0x9c>)
 8000602:	f004 fee7 	bl	80053d4 <HAL_UART_Receive_DMA>
  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x8a>
 8000608:	40020800 	.word	0x40020800
 800060c:	40020c00 	.word	0x40020c00
 8000610:	40020400 	.word	0x40020400
 8000614:	20000230 	.word	0x20000230
 8000618:	20000390 	.word	0x20000390
 800061c:	20000494 	.word	0x20000494

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 f9ce 	bl	80069d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <SystemClock_Config+0xb8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <SystemClock_Config+0xbc>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemClock_Config+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800067c:	230a      	movs	r3, #10
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fd81 	bl	800319c <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a0:	f000 fd9e 	bl	80011e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 ffe4 	bl	800368c <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ca:	f000 fd89 	bl	80011e0 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f2:	4b75      	ldr	r3, [pc, #468]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 80006f4:	4a75      	ldr	r2, [pc, #468]	; (80008cc <MX_ADC1_Init+0x1ec>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006f8:	4b73      	ldr	r3, [pc, #460]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fe:	4b72      	ldr	r3, [pc, #456]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000704:	4b70      	ldr	r3, [pc, #448]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000706:	2201      	movs	r2, #1
 8000708:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800070a:	4b6f      	ldr	r3, [pc, #444]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 800070c:	2201      	movs	r2, #1
 800070e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b6d      	ldr	r3, [pc, #436]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000718:	4b6b      	ldr	r3, [pc, #428]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071e:	4b6a      	ldr	r3, [pc, #424]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000720:	4a6b      	ldr	r2, [pc, #428]	; (80008d0 <MX_ADC1_Init+0x1f0>)
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000724:	4b68      	ldr	r3, [pc, #416]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 800072a:	4b67      	ldr	r3, [pc, #412]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 800072c:	220d      	movs	r2, #13
 800072e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000730:	4b65      	ldr	r3, [pc, #404]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000738:	4b63      	ldr	r3, [pc, #396]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 800073a:	2201      	movs	r2, #1
 800073c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073e:	4862      	ldr	r0, [pc, #392]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000740:	f001 faa2 	bl	8001c88 <HAL_ADC_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 fd49 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000756:	2301      	movs	r3, #1
 8000758:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	485a      	ldr	r0, [pc, #360]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000760:	f001 fad6 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800076a:	f000 fd39 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800076e:	2301      	movs	r3, #1
 8000770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4853      	ldr	r0, [pc, #332]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 800077c:	f001 fac8 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000786:	f000 fd2b 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800078a:	2305      	movs	r3, #5
 800078c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800078e:	2303      	movs	r3, #3
 8000790:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	484c      	ldr	r0, [pc, #304]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000798:	f001 faba 	bl	8001d10 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80007a2:	f000 fd1d 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007a6:	2306      	movs	r3, #6
 80007a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007aa:	2304      	movs	r3, #4
 80007ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4845      	ldr	r0, [pc, #276]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 80007b4:	f001 faac 	bl	8001d10 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80007be:	f000 fd0f 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007c2:	2307      	movs	r3, #7
 80007c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80007c6:	2305      	movs	r3, #5
 80007c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	483e      	ldr	r0, [pc, #248]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 80007d0:	f001 fa9e 	bl	8001d10 <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80007da:	f000 fd01 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007de:	2308      	movs	r3, #8
 80007e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80007e2:	2306      	movs	r3, #6
 80007e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4837      	ldr	r0, [pc, #220]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 80007ec:	f001 fa90 	bl	8001d10 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80007f6:	f000 fcf3 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007fa:	2309      	movs	r3, #9
 80007fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80007fe:	2307      	movs	r3, #7
 8000800:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4830      	ldr	r0, [pc, #192]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000808:	f001 fa82 	bl	8001d10 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000812:	f000 fce5 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000816:	230a      	movs	r3, #10
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800081a:	2308      	movs	r3, #8
 800081c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4829      	ldr	r0, [pc, #164]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000824:	f001 fa74 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800082e:	f000 fcd7 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000832:	230b      	movs	r3, #11
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000836:	2309      	movs	r3, #9
 8000838:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4822      	ldr	r0, [pc, #136]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000840:	f001 fa66 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800084a:	f000 fcc9 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800084e:	230c      	movs	r3, #12
 8000850:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000852:	230a      	movs	r3, #10
 8000854:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	481b      	ldr	r0, [pc, #108]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 800085c:	f001 fa58 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000866:	f000 fcbb 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800086a:	230d      	movs	r3, #13
 800086c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800086e:	230b      	movs	r3, #11
 8000870:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000878:	f001 fa4a 	bl	8001d10 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 8000882:	f000 fcad 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000886:	230e      	movs	r3, #14
 8000888:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800088a:	230c      	movs	r3, #12
 800088c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 8000894:	f001 fa3c 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 800089e:	f000 fc9f 	bl	80011e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008a2:	230f      	movs	r3, #15
 80008a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80008a6:	230d      	movs	r3, #13
 80008a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_ADC1_Init+0x1e8>)
 80008b0:	f001 fa2e 	bl	8001d10 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 80008ba:	f000 fc91 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	40012000 	.word	0x40012000
 80008d0:	0f000001 	.word	0x0f000001

080008d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C2_Init+0x50>)
 80008da:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_I2C2_Init+0x54>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C2_Init+0x50>)
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <MX_I2C2_Init+0x58>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C2_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_I2C2_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_I2C2_Init+0x50>)
 80008f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_I2C2_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_I2C2_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_I2C2_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_I2C2_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_I2C2_Init+0x50>)
 8000912:	f002 faff 	bl	8002f14 <HAL_I2C_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800091c:	f000 fc60 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000d4 	.word	0x200000d4
 8000928:	40005800 	.word	0x40005800
 800092c:	000186a0 	.word	0x000186a0

08000930 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_RTC_Init+0x44>)
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <MX_RTC_Init+0x48>)
 8000938:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_RTC_Init+0x44>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_RTC_Init+0x44>)
 8000942:	227f      	movs	r2, #127	; 0x7f
 8000944:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_RTC_Init+0x44>)
 8000948:	22ff      	movs	r2, #255	; 0xff
 800094a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_RTC_Init+0x44>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_RTC_Init+0x44>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_RTC_Init+0x44>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_RTC_Init+0x44>)
 8000960:	f003 f994 	bl	8003c8c <HAL_RTC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800096a:	f000 fc39 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000128 	.word	0x20000128
 8000978:	40002800 	.word	0x40002800

0800097c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SPI2_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_SPI2_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SPI2_Init+0x64>)
 8000988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SPI2_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_SPI2_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI2_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009b0:	2210      	movs	r2, #16
 80009b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009c8:	220a      	movs	r2, #10
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_SPI2_Init+0x64>)
 80009ce:	f003 fa57 	bl	8003e80 <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 fc02 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000148 	.word	0x20000148
 80009e4:	40003800 	.word	0x40003800

080009e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2224      	movs	r2, #36	; 0x24
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 ffea 	bl	80069d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_TIM1_Init+0xa8>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_TIM1_Init+0xac>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_TIM1_Init+0xa8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_TIM1_Init+0xa8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_TIM1_Init+0xa8>)
 8000a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_TIM1_Init+0xa8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_TIM1_Init+0xa8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_TIM1_Init+0xa8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_TIM1_Init+0xa8>)
 8000a5c:	f003 fc00 	bl	8004260 <HAL_TIM_Encoder_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a66:	f000 fbbb 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	; (8000a90 <MX_TIM1_Init+0xa8>)
 8000a78:	f004 fa6c 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a82:	f000 fbad 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	; 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200001a0 	.word	0x200001a0
 8000a94:	40010000 	.word	0x40010000

08000a98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2224      	movs	r2, #36	; 0x24
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f005 ff92 	bl	80069d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ace:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000af4:	2301      	movs	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4619      	mov	r1, r3
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000b08:	f003 fbaa 	bl	8004260 <HAL_TIM_Encoder_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b12:	f000 fb65 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <MX_TIM2_Init+0xa4>)
 8000b24:	f004 fa16 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b2e:	f000 fb57 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	3730      	adds	r7, #48	; 0x30
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200001e8 	.word	0x200001e8

08000b40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	; 0x38
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	f107 0320 	add.w	r3, r7, #32
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000b72:	4a33      	ldr	r2, [pc, #204]	; (8000c40 <MX_TIM3_Init+0x100>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000b76:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000b78:	220f      	movs	r2, #15
 8000b7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b96:	4829      	ldr	r0, [pc, #164]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000b98:	f003 f9fb 	bl	8003f92 <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ba2:	f000 fb1d 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4822      	ldr	r0, [pc, #136]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000bb4:	f003 fdc4 	bl	8004740 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bbe:	f000 fb0f 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bc2:	481e      	ldr	r0, [pc, #120]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000bc4:	f003 fa34 	bl	8004030 <HAL_TIM_PWM_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bce:	f000 fb07 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4619      	mov	r1, r3
 8000be0:	4816      	ldr	r0, [pc, #88]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000be2:	f004 f9b7 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bec:	f000 faf8 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf0:	2360      	movs	r3, #96	; 0x60
 8000bf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000c08:	f003 fcd8 	bl	80045bc <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c12:	f000 fae5 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2204      	movs	r2, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000c1e:	f003 fccd 	bl	80045bc <HAL_TIM_PWM_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c28:	f000 fada 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MX_TIM3_Init+0xfc>)
 8000c2e:	f000 fd39 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8000c32:	bf00      	nop
 8000c34:	3738      	adds	r7, #56	; 0x38
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000230 	.word	0x20000230
 8000c40:	40000400 	.word	0x40000400

08000c44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000c68:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <MX_TIM4_Init+0xb0>)
 8000c6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c8c:	4818      	ldr	r0, [pc, #96]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000c8e:	f003 f9cf 	bl	8004030 <HAL_TIM_PWM_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000c98:	f000 faa2 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000cac:	f004 f952 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000cb6:	f000 fa93 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	; 0x60
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	220c      	movs	r2, #12
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000cd2:	f003 fc73 	bl	80045bc <HAL_TIM_PWM_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000cdc:	f000 fa80 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <MX_TIM4_Init+0xac>)
 8000ce2:	f000 fcdf 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000278 	.word	0x20000278
 8000cf4:	40000800 	.word	0x40000800

08000cf8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b092      	sub	sp, #72	; 0x48
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]
 8000d1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2220      	movs	r2, #32
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f005 fe54 	bl	80069d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d28:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <MX_TIM8_Init+0x104>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5333;
 8000d3a:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000d3c:	f241 42d5 	movw	r2, #5333	; 0x14d5
 8000d40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d42:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d54:	4828      	ldr	r0, [pc, #160]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000d56:	f003 f96b 	bl	8004030 <HAL_TIM_PWM_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000d60:	f000 fa3e 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d70:	4619      	mov	r1, r3
 8000d72:	4821      	ldr	r0, [pc, #132]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000d74:	f004 f8ee 	bl	8004f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000d7e:	f000 fa2f 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d82:	2360      	movs	r3, #96	; 0x60
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	2204      	movs	r2, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4814      	ldr	r0, [pc, #80]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000da8:	f003 fc08 	bl	80045bc <HAL_TIM_PWM_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000db2:	f000 fa15 	bl	80011e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000dda:	f004 f937 	bl	800504c <HAL_TIMEx_ConfigBreakDeadTime>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000de4:	f000 f9fc 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MX_TIM8_Init+0x100>)
 8000dea:	f000 fc5b 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8000dee:	bf00      	nop
 8000df0:	3748      	adds	r7, #72	; 0x48
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200002c0 	.word	0x200002c0
 8000dfc:	40010400 	.word	0x40010400

08000e00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <MX_USART1_UART_Init+0x50>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e38:	f004 f96e 	bl	8005118 <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e42:	f000 f9cd 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000308 	.word	0x20000308
 8000e50:	40011000 	.word	0x40011000

08000e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_USART2_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f004 f944 	bl	8005118 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f000 f9a3 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000034c 	.word	0x2000034c
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART3_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ee0:	f004 f91a 	bl	8005118 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f000 f979 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000390 	.word	0x20000390
 8000ef8:	40004800 	.word	0x40004800

08000efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_DMA_Init+0x4c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <MX_DMA_Init+0x4c>)
 8000f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_DMA_Init+0x4c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200c      	movs	r0, #12
 8000f24:	f001 f9ed 	bl	8002302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f28:	200c      	movs	r0, #12
 8000f2a:	f001 fa06 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	200e      	movs	r0, #14
 8000f34:	f001 f9e5 	bl	8002302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f38:	200e      	movs	r0, #14
 8000f3a:	f001 f9fe 	bl	800233a <HAL_NVIC_EnableIRQ>

}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b61      	ldr	r3, [pc, #388]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a60      	ldr	r2, [pc, #384]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a59      	ldr	r2, [pc, #356]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b53      	ldr	r3, [pc, #332]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a52      	ldr	r2, [pc, #328]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b50      	ldr	r3, [pc, #320]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b49      	ldr	r3, [pc, #292]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b45      	ldr	r3, [pc, #276]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a44      	ldr	r2, [pc, #272]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b42      	ldr	r3, [pc, #264]	; (80010ec <MX_GPIO_Init+0x1a0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|SD_CS_Pin|STATUS_LED_RED_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 5105 	mov.w	r1, #8512	; 0x2140
 8000ff4:	483e      	ldr	r0, [pc, #248]	; (80010f0 <MX_GPIO_Init+0x1a4>)
 8000ff6:	f001 ff59 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIGHTS_Pin|CE_RF_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f641 0110 	movw	r1, #6160	; 0x1810
 8001000:	483c      	ldr	r0, [pc, #240]	; (80010f4 <MX_GPIO_Init+0x1a8>)
 8001002:	f001 ff53 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_SENS_Pin|BMOT2_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800100c:	483a      	ldr	r0, [pc, #232]	; (80010f8 <MX_GPIO_Init+0x1ac>)
 800100e:	f001 ff4d 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMOT2_GPIO_Port, AMOT2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2104      	movs	r1, #4
 8001016:	4839      	ldr	r0, [pc, #228]	; (80010fc <MX_GPIO_Init+0x1b0>)
 8001018:	f001 ff48 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 SD_CS_Pin STATUS_LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|SD_CS_Pin|STATUS_LED_RED_Pin;
 800101c:	f44f 5305 	mov.w	r3, #8512	; 0x2140
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	482e      	ldr	r0, [pc, #184]	; (80010f0 <MX_GPIO_Init+0x1a4>)
 8001036:	f001 fd9d 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin CE_RF_Pin */
  GPIO_InitStruct.Pin = LIGHTS_Pin|CE_RF_Pin;
 800103a:	f44f 6301 	mov.w	r3, #2064	; 0x810
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4828      	ldr	r0, [pc, #160]	; (80010f4 <MX_GPIO_Init+0x1a8>)
 8001054:	f001 fd8e 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001058:	2304      	movs	r3, #4
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4823      	ldr	r0, [pc, #140]	; (80010f8 <MX_GPIO_Init+0x1ac>)
 800106c:	f001 fd82 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_SENS_Pin BMOT2_Pin */
  GPIO_InitStruct.Pin = EN_SENS_Pin|BMOT2_Pin;
 8001070:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	481b      	ldr	r0, [pc, #108]	; (80010f8 <MX_GPIO_Init+0x1ac>)
 800108a:	f001 fd73 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin;
 800108e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT1_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4813      	ldr	r0, [pc, #76]	; (80010f0 <MX_GPIO_Init+0x1a4>)
 80010a4:	f001 fd66 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_RF_Pin */
  GPIO_InitStruct.Pin = CS_RF_Pin;
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010ae:	2311      	movs	r3, #17
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_GPIO_Init+0x1a8>)
 80010c2:	f001 fd57 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMOT2_Pin */
  GPIO_InitStruct.Pin = AMOT2_Pin;
 80010c6:	2304      	movs	r3, #4
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AMOT2_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_GPIO_Init+0x1b0>)
 80010de:	f001 fd49 	bl	8002b74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020c00 	.word	0x40020c00

08001100 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	uint16_t Duty = atoi(MSG_Rx);
 8001108:	4815      	ldr	r0, [pc, #84]	; (8001160 <HAL_UART_RxCpltCallback+0x60>)
 800110a:	f005 fbb0 	bl	800686e <atoi>
 800110e:	4603      	mov	r3, r0
 8001110:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_TogglePin(STATUS_LED_RED_GPIO_Port, STATUS_LED_RED_Pin);
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	4813      	ldr	r0, [pc, #76]	; (8001164 <HAL_UART_RxCpltCallback+0x64>)
 8001118:	f001 fee1 	bl	8002ede <HAL_GPIO_TogglePin>

	//devolucion de valor de duty
	sprintf(MSG_Tx,"\r\n%d",(int) Duty);
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	461a      	mov	r2, r3
 8001120:	4911      	ldr	r1, [pc, #68]	; (8001168 <HAL_UART_RxCpltCallback+0x68>)
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <HAL_UART_RxCpltCallback+0x6c>)
 8001124:	f005 fc34 	bl	8006990 <siprintf>
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&MSG_Tx,strlen(MSG_Tx));
 8001128:	4810      	ldr	r0, [pc, #64]	; (800116c <HAL_UART_RxCpltCallback+0x6c>)
 800112a:	f7ff f851 	bl	80001d0 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	b29b      	uxth	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	490d      	ldr	r1, [pc, #52]	; (800116c <HAL_UART_RxCpltCallback+0x6c>)
 8001136:	480e      	ldr	r0, [pc, #56]	; (8001170 <HAL_UART_RxCpltCallback+0x70>)
 8001138:	f004 f8ce 	bl	80052d8 <HAL_UART_Transmit_DMA>

	if (Duty >= 0 && Duty <=__HAL_TIM_GET_AUTORELOAD(&htim3) ) {
 800113c:	89fa      	ldrh	r2, [r7, #14]
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_UART_RxCpltCallback+0x74>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	429a      	cmp	r2, r3
 8001146:	d807      	bhi.n	8001158 <HAL_UART_RxCpltCallback+0x58>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,Duty);
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_UART_RxCpltCallback+0x74>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	89fa      	ldrh	r2, [r7, #14]
 800114e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,Duty);
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_UART_RxCpltCallback+0x74>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	89fa      	ldrh	r2, [r7, #14]
 8001156:	639a      	str	r2, [r3, #56]	; 0x38
	}

}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000494 	.word	0x20000494
 8001164:	40020800 	.word	0x40020800
 8001168:	080072f0 	.word	0x080072f0
 800116c:	200004b4 	.word	0x200004b4
 8001170:	20000390 	.word	0x20000390
 8001174:	20000230 	.word	0x20000230

08001178 <printWelcomeMessage>:
void printWelcomeMessage(UART_HandleTypeDef *huart) {
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	char *strings[] = {"\033[0;0H",
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <printWelcomeMessage+0x64>)
 8001182:	f107 0408 	add.w	r4, r7, #8
 8001186:	461d      	mov	r5, r3
 8001188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	6023      	str	r3, [r4, #0]
			"\033[2J",
			"Bienvenidos al stm32:\r\n",
			"1) Valor del PWM:",
			PROMT};

	for (uint8_t i = 0; i < 5; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	77fb      	strb	r3, [r7, #31]
 8001194:	e019      	b.n	80011ca <printWelcomeMessage+0x52>
		HAL_UART_Transmit(huart, (uint8_t*)strings[i], strlen(strings[i]),1000);
 8001196:	7ffb      	ldrb	r3, [r7, #31]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	3320      	adds	r3, #32
 800119c:	443b      	add	r3, r7
 800119e:	f853 4c18 	ldr.w	r4, [r3, #-24]
 80011a2:	7ffb      	ldrb	r3, [r7, #31]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	3320      	adds	r3, #32
 80011a8:	443b      	add	r3, r7
 80011aa:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f80e 	bl	80001d0 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	4621      	mov	r1, r4
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f003 fff7 	bl	80051b2 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 5; i++) {
 80011c4:	7ffb      	ldrb	r3, [r7, #31]
 80011c6:	3301      	adds	r3, #1
 80011c8:	77fb      	strb	r3, [r7, #31]
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d9e2      	bls.n	8001196 <printWelcomeMessage+0x1e>
	}
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}
 80011da:	bf00      	nop
 80011dc:	08007338 	.word	0x08007338

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>
	...

080011ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <HAL_MspInit+0x4c>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x4c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x4c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a31      	ldr	r2, [pc, #196]	; (8001320 <HAL_ADC_MspInit+0xe4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d15b      	bne.n	8001316 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a28      	ldr	r2, [pc, #160]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a21      	ldr	r2, [pc, #132]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_ADC_MspInit+0xe8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin|S11_Pin
 80012ce:	233f      	movs	r3, #63	; 0x3f
 80012d0:	61fb      	str	r3, [r7, #28]
                          |S4_Pin|S9_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d2:	2303      	movs	r3, #3
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4811      	ldr	r0, [pc, #68]	; (8001328 <HAL_ADC_MspInit+0xec>)
 80012e2:	f001 fc47 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|S10_Pin|S7_Pin
 80012e6:	23e3      	movs	r3, #227	; 0xe3
 80012e8:	61fb      	str	r3, [r7, #28]
                          |S8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <HAL_ADC_MspInit+0xf0>)
 80012fa:	f001 fc3b 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S5_Pin|S6_Pin;
 80012fe:	2303      	movs	r3, #3
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <HAL_ADC_MspInit+0xf4>)
 8001312:	f001 fc2f 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3730      	adds	r7, #48	; 0x30
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40012000 	.word	0x40012000
 8001324:	40023800 	.word	0x40023800
 8001328:	40020800 	.word	0x40020800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400

08001334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_I2C_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12c      	bne.n	80013b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_I2C_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_I2C_MspInit+0x88>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_I2C_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001372:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001378:	2312      	movs	r3, #18
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001384:	2304      	movs	r3, #4
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <HAL_I2C_MspInit+0x8c>)
 8001390:	f001 fbf0 	bl	8002b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_I2C_MspInit+0x88>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_I2C_MspInit+0x88>)
 800139e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_I2C_MspInit+0x88>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40005800 	.word	0x40005800
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020400 	.word	0x40020400

080013c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_RTC_MspInit+0x4c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d111      	bne.n	8001408 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013e4:	2302      	movs	r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ec:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fb68 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80013fe:	f7ff feef 	bl	80011e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_RTC_MspInit+0x50>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40002800 	.word	0x40002800
 8001414:	42470e3c 	.word	0x42470e3c

08001418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <HAL_SPI_MspInit+0x84>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12c      	bne.n	8001494 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001472:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001484:	2305      	movs	r3, #5
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_SPI_MspInit+0x8c>)
 8001490:	f001 fb70 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40003800 	.word	0x40003800
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020400 	.word	0x40020400

080014a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a46      	ldr	r2, [pc, #280]	; (80015e0 <HAL_TIM_Encoder_MspInit+0x138>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d135      	bne.n	8001536 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a44      	ldr	r2, [pc, #272]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = C1_1_Pin|C2_1_Pin;
 8001502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4832      	ldr	r0, [pc, #200]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x140>)
 8001520:	f001 fb28 	bl	8002b74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	201b      	movs	r0, #27
 800152a:	f000 feea 	bl	8002302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800152e:	201b      	movs	r0, #27
 8001530:	f000 ff03 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001534:	e04f      	b.n	80015d6 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153e:	d14a      	bne.n	80015d6 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6413      	str	r3, [r2, #64]	; 0x40
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015a6:	2301      	movs	r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <HAL_TIM_Encoder_MspInit+0x140>)
 80015b2:	f001 fadf 	bl	8002b74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015b6:	2308      	movs	r3, #8
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <HAL_TIM_Encoder_MspInit+0x144>)
 80015d2:	f001 facf 	bl	8002b74 <HAL_GPIO_Init>
}
 80015d6:	bf00      	nop
 80015d8:	3730      	adds	r7, #48	; 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40010000 	.word	0x40010000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400

080015f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_TIM_Base_MspInit+0x3c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10d      	bne.n	800161e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_TIM_Base_MspInit+0x40>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_TIM_Base_MspInit+0x40>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_TIM_Base_MspInit+0x40>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40000400 	.word	0x40000400
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <HAL_TIM_PWM_MspInit+0x64>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10e      	bne.n	8001664 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_TIM_PWM_MspInit+0x68>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <HAL_TIM_PWM_MspInit+0x68>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_TIM_PWM_MspInit+0x68>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001662:	e012      	b.n	800168a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_TIM_PWM_MspInit+0x6c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10d      	bne.n	800168a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_TIM_PWM_MspInit+0x68>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_TIM_PWM_MspInit+0x68>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_TIM_PWM_MspInit+0x68>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40000800 	.word	0x40000800
 800169c:	40023800 	.word	0x40023800
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a36      	ldr	r2, [pc, #216]	; (800179c <HAL_TIM_MspPostInit+0xf8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d11e      	bne.n	8001704 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_TIM_MspPostInit+0xfc>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a34      	ldr	r2, [pc, #208]	; (80017a0 <HAL_TIM_MspPostInit+0xfc>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_TIM_MspPostInit+0xfc>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = AMOT1_Pin|BMOT1_Pin;
 80016e2:	2330      	movs	r3, #48	; 0x30
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f2:	2302      	movs	r3, #2
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4829      	ldr	r0, [pc, #164]	; (80017a4 <HAL_TIM_MspPostInit+0x100>)
 80016fe:	f001 fa39 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001702:	e047      	b.n	8001794 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <HAL_TIM_MspPostInit+0x104>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d11f      	bne.n	800174e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_TIM_MspPostInit+0xfc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_TIM_MspPostInit+0xfc>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_TIM_MspPostInit+0xfc>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 800172a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800173c:	2302      	movs	r3, #2
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_TIM_MspPostInit+0x100>)
 8001748:	f001 fa14 	bl	8002b74 <HAL_GPIO_Init>
}
 800174c:	e022      	b.n	8001794 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM8)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HAL_TIM_MspPostInit+0x108>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d11d      	bne.n	8001794 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_TIM_MspPostInit+0xfc>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_TIM_MspPostInit+0xfc>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6313      	str	r3, [r2, #48]	; 0x30
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_TIM_MspPostInit+0xfc>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001784:	2303      	movs	r3, #3
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <HAL_TIM_MspPostInit+0x10c>)
 8001790:	f001 f9f0 	bl	8002b74 <HAL_GPIO_Init>
}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40000400 	.word	0x40000400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40000800 	.word	0x40000800
 80017ac:	40010400 	.word	0x40010400
 80017b0:	40020800 	.word	0x40020800

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08e      	sub	sp, #56	; 0x38
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a82      	ldr	r2, [pc, #520]	; (80019dc <HAL_UART_MspInit+0x228>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d134      	bne.n	8001840 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
 80017da:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a80      	ldr	r2, [pc, #512]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80017e0:	f043 0310 	orr.w	r3, r3, #16
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b7e      	ldr	r3, [pc, #504]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	623b      	str	r3, [r7, #32]
 80017f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b77      	ldr	r3, [pc, #476]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23c0      	movs	r3, #192	; 0xc0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800181e:	2307      	movs	r3, #7
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	486e      	ldr	r0, [pc, #440]	; (80019e4 <HAL_UART_MspInit+0x230>)
 800182a:	f001 f9a3 	bl	8002b74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2025      	movs	r0, #37	; 0x25
 8001834:	f000 fd65 	bl	8002302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001838:	2025      	movs	r0, #37	; 0x25
 800183a:	f000 fd7e 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800183e:	e0c9      	b.n	80019d4 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a68      	ldr	r2, [pc, #416]	; (80019e8 <HAL_UART_MspInit+0x234>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12c      	bne.n	80018a4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a5c      	ldr	r2, [pc, #368]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001882:	230c      	movs	r3, #12
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001892:	2307      	movs	r3, #7
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	4853      	ldr	r0, [pc, #332]	; (80019ec <HAL_UART_MspInit+0x238>)
 800189e:	f001 f969 	bl	8002b74 <HAL_GPIO_Init>
}
 80018a2:	e097      	b.n	80019d4 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_UART_MspInit+0x23c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	f040 8092 	bne.w	80019d4 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	4b4a      	ldr	r3, [pc, #296]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80018ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018be:	6413      	str	r3, [r2, #64]	; 0x40
 80018c0:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4a42      	ldr	r2, [pc, #264]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6313      	str	r3, [r2, #48]	; 0x30
 80018dc:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <HAL_UART_MspInit+0x22c>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018fa:	2307      	movs	r3, #7
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	4619      	mov	r1, r3
 8001904:	483b      	ldr	r0, [pc, #236]	; (80019f4 <HAL_UART_MspInit+0x240>)
 8001906:	f001 f935 	bl	8002b74 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_UART_MspInit+0x244>)
 800190c:	4a3b      	ldr	r2, [pc, #236]	; (80019fc <HAL_UART_MspInit+0x248>)
 800190e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <HAL_UART_MspInit+0x244>)
 8001912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001916:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001918:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <HAL_UART_MspInit+0x244>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_UART_MspInit+0x244>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_UART_MspInit+0x244>)
 8001926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <HAL_UART_MspInit+0x244>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_UART_MspInit+0x244>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_UART_MspInit+0x244>)
 800193a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_UART_MspInit+0x244>)
 8001942:	2200      	movs	r2, #0
 8001944:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_UART_MspInit+0x244>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800194c:	482a      	ldr	r0, [pc, #168]	; (80019f8 <HAL_UART_MspInit+0x244>)
 800194e:	f000 fd0f 	bl	8002370 <HAL_DMA_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8001958:	f7ff fc42 	bl	80011e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a26      	ldr	r2, [pc, #152]	; (80019f8 <HAL_UART_MspInit+0x244>)
 8001960:	639a      	str	r2, [r3, #56]	; 0x38
 8001962:	4a25      	ldr	r2, [pc, #148]	; (80019f8 <HAL_UART_MspInit+0x244>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 800196a:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <HAL_UART_MspInit+0x250>)
 800196c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 8001970:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001974:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 8001984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001988:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019a8:	4815      	ldr	r0, [pc, #84]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 80019aa:	f000 fce1 	bl	8002370 <HAL_DMA_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_UART_MspInit+0x204>
      Error_Handler();
 80019b4:	f7ff fc14 	bl	80011e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_UART_MspInit+0x24c>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2027      	movs	r0, #39	; 0x27
 80019ca:	f000 fc9a 	bl	8002302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019ce:	2027      	movs	r0, #39	; 0x27
 80019d0:	f000 fcb3 	bl	800233a <HAL_NVIC_EnableIRQ>
}
 80019d4:	bf00      	nop
 80019d6:	3738      	adds	r7, #56	; 0x38
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40011000 	.word	0x40011000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40004400 	.word	0x40004400
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40004800 	.word	0x40004800
 80019f4:	40020800 	.word	0x40020800
 80019f8:	200003d4 	.word	0x200003d4
 80019fc:	40026028 	.word	0x40026028
 8001a00:	20000434 	.word	0x20000434
 8001a04:	40026058 	.word	0x40026058

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 f8f8 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <DMA1_Stream1_IRQHandler+0x10>)
 8001a62:	f000 fe1d 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200003d4 	.word	0x200003d4

08001a70 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <DMA1_Stream3_IRQHandler+0x10>)
 8001a76:	f000 fe13 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000434 	.word	0x20000434

08001a84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <TIM1_CC_IRQHandler+0x10>)
 8001a8a:	f002 fc8f 	bl	80043ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200001a0 	.word	0x200001a0

08001a98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <USART1_IRQHandler+0x10>)
 8001a9e:	f003 fcc9 	bl	8005434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000308 	.word	0x20000308

08001aac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <USART3_IRQHandler+0x10>)
 8001ab2:	f003 fcbf 	bl	8005434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000390 	.word	0x20000390

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af0:	f004 ff76 	bl	80069e0 <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20020000 	.word	0x20020000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	200004d4 	.word	0x200004d4
 8001b28:	20000638 	.word	0x20000638

08001b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b56:	490e      	ldr	r1, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b58:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b6c:	4c0b      	ldr	r4, [pc, #44]	; (8001b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7a:	f7ff ffd7 	bl	8001b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f004 ff35 	bl	80069ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b82:	f7fe fcfb 	bl	800057c <main>
  bx  lr    
 8001b86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b94:	080074b0 	.word	0x080074b0
  ldr r2, =_sbss
 8001b98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b9c:	20000638 	.word	0x20000638

08001ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <HAL_Init+0x40>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_Init+0x40>)
 8001bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_Init+0x40>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 fb8d 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 f808 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd8:	f7ff fb08 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fba5 	bl	8002356 <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c24:	f000 fb6d 	bl	8002302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	200004d8 	.word	0x200004d8

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200004d8 	.word	0x200004d8

08001c88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e033      	b.n	8001d06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fac8 	bl	800123c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d118      	bne.n	8001cf8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cce:	f023 0302 	bic.w	r3, r3, #2
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f93a 	bl	8001f54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1c>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e105      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x228>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b09      	cmp	r3, #9
 8001d3a:	d925      	bls.n	8001d88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68d9      	ldr	r1, [r3, #12]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b1e      	subs	r3, #30
 8001d52:	2207      	movs	r2, #7
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	400a      	ands	r2, r1
 8001d60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68d9      	ldr	r1, [r3, #12]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	4603      	mov	r3, r0
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4403      	add	r3, r0
 8001d7a:	3b1e      	subs	r3, #30
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	e022      	b.n	8001dce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6919      	ldr	r1, [r3, #16]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	400a      	ands	r2, r1
 8001daa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6919      	ldr	r1, [r3, #16]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4403      	add	r3, r0
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d824      	bhi.n	8001e20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	3b05      	subs	r3, #5
 8001de8:	221f      	movs	r2, #31
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b05      	subs	r3, #5
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e1e:	e04c      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	d824      	bhi.n	8001e72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	3b23      	subs	r3, #35	; 0x23
 8001e3a:	221f      	movs	r2, #31
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43da      	mvns	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	400a      	ands	r2, r1
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b23      	subs	r3, #35	; 0x23
 8001e64:	fa00 f203 	lsl.w	r2, r0, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e70:	e023      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	3b41      	subs	r3, #65	; 0x41
 8001e84:	221f      	movs	r2, #31
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	400a      	ands	r2, r1
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b41      	subs	r3, #65	; 0x41
 8001eae:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_ADC_ConfigChannel+0x234>)
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <HAL_ADC_ConfigChannel+0x238>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d109      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1cc>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_ADC_ConfigChannel+0x238>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d123      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x21e>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d003      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0x1e6>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b11      	cmp	r3, #17
 8001ef4:	d11b      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d111      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_ADC_ConfigChannel+0x23c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_ADC_ConfigChannel+0x240>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9a      	lsrs	r2, r3, #18
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40012300 	.word	0x40012300
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	431bde83 	.word	0x431bde83

08001f54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5c:	4b79      	ldr	r3, [pc, #484]	; (8002144 <ADC_Init+0x1f0>)
 8001f5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	021a      	lsls	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	4a58      	ldr	r2, [pc, #352]	; (8002148 <ADC_Init+0x1f4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d022      	beq.n	8002032 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ffa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6899      	ldr	r1, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800201c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	e00f      	b.n	8002052 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002040:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002050:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0202 	bic.w	r2, r2, #2
 8002060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7e1b      	ldrb	r3, [r3, #24]
 800206c:	005a      	lsls	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800208e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800209e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	3b01      	subs	r3, #1
 80020ac:	035a      	lsls	r2, r3, #13
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	e007      	b.n	80020c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	051a      	lsls	r2, r3, #20
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800210a:	025a      	lsls	r2, r3, #9
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	029a      	lsls	r2, r3, #10
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40012300 	.word	0x40012300
 8002148:	0f000001 	.word	0x0f000001

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	; (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	; (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
         );
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022cc:	f7ff ff8e 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff29 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff3e 	bl	8002194 <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff8e 	bl	8002240 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5d 	bl	80021ec <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff31 	bl	80021b0 <__NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffa2 	bl	80022a8 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff fc78 	bl	8001c70 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e099      	b.n	80024c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ac:	e00f      	b.n	80023ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ae:	f7ff fc5f 	bl	8001c70 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d908      	bls.n	80023ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2203      	movs	r2, #3
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e078      	b.n	80024c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e8      	bne.n	80023ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <HAL_DMA_Init+0x158>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	2b04      	cmp	r3, #4
 8002426:	d107      	bne.n	8002438 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	4313      	orrs	r3, r2
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f023 0307 	bic.w	r3, r3, #7
 800244e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b04      	cmp	r3, #4
 8002460:	d117      	bne.n	8002492 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00e      	beq.n	8002492 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fb01 	bl	8002a7c <DMA_CheckFifoParam>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800248e:	2301      	movs	r3, #1
 8002490:	e016      	b.n	80024c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fab8 	bl	8002a10 <DMA_CalcBaseAndBitshift>
 80024a0:	4603      	mov	r3, r0
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	223f      	movs	r2, #63	; 0x3f
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	f010803f 	.word	0xf010803f

080024cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_DMA_Start_IT+0x26>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e040      	b.n	8002574 <HAL_DMA_Start_IT+0xa8>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d12f      	bne.n	8002566 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fa4a 	bl	80029b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	223f      	movs	r2, #63	; 0x3f
 8002526:	409a      	lsls	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0216 	orr.w	r2, r2, #22
 800253a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0208 	orr.w	r2, r2, #8
 8002552:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e005      	b.n	8002572 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800256e:	2302      	movs	r3, #2
 8002570:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002572:	7dfb      	ldrb	r3, [r7, #23]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800258a:	f7ff fb71 	bl	8001c70 <HAL_GetTick>
 800258e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d008      	beq.n	80025ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e052      	b.n	8002654 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0216 	bic.w	r2, r2, #22
 80025bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d103      	bne.n	80025de <HAL_DMA_Abort+0x62>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0208 	bic.w	r2, r2, #8
 80025ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025fe:	e013      	b.n	8002628 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002600:	f7ff fb36 	bl	8001c70 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b05      	cmp	r3, #5
 800260c:	d90c      	bls.n	8002628 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2203      	movs	r2, #3
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e015      	b.n	8002654 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e4      	bne.n	8002600 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	223f      	movs	r2, #63	; 0x3f
 800263c:	409a      	lsls	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d004      	beq.n	800267a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e00c      	b.n	8002694 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2205      	movs	r2, #5
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026ac:	4b8e      	ldr	r3, [pc, #568]	; (80028e8 <HAL_DMA_IRQHandler+0x248>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a8e      	ldr	r2, [pc, #568]	; (80028ec <HAL_DMA_IRQHandler+0x24c>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0a9b      	lsrs	r3, r3, #10
 80026b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	2208      	movs	r2, #8
 80026cc:	409a      	lsls	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d01a      	beq.n	800270c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0204 	bic.w	r2, r2, #4
 80026f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	2208      	movs	r2, #8
 80026fa:	409a      	lsls	r2, r3
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	2201      	movs	r2, #1
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d012      	beq.n	8002742 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	2201      	movs	r2, #1
 8002730:	409a      	lsls	r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f043 0202 	orr.w	r2, r3, #2
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	2204      	movs	r2, #4
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d012      	beq.n	8002778 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00b      	beq.n	8002778 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	2204      	movs	r2, #4
 8002766:	409a      	lsls	r2, r3
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	f043 0204 	orr.w	r2, r3, #4
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	2210      	movs	r2, #16
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d043      	beq.n	8002810 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d03c      	beq.n	8002810 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	2210      	movs	r2, #16
 800279c:	409a      	lsls	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d018      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d024      	beq.n	8002810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
 80027ce:	e01f      	b.n	8002810 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01b      	beq.n	8002810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
 80027e0:	e016      	b.n	8002810 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0208 	bic.w	r2, r2, #8
 80027fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	2220      	movs	r2, #32
 8002816:	409a      	lsls	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 808f 	beq.w	8002940 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8087 	beq.w	8002940 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	2220      	movs	r2, #32
 8002838:	409a      	lsls	r2, r3
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b05      	cmp	r3, #5
 8002848:	d136      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0216 	bic.w	r2, r2, #22
 8002858:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002868:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d103      	bne.n	800287a <HAL_DMA_IRQHandler+0x1da>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0208 	bic.w	r2, r2, #8
 8002888:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	223f      	movs	r2, #63	; 0x3f
 8002890:	409a      	lsls	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d07e      	beq.n	80029ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
        }
        return;
 80028b6:	e079      	b.n	80029ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01d      	beq.n	8002902 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10d      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d031      	beq.n	8002940 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
 80028e4:	e02c      	b.n	8002940 <HAL_DMA_IRQHandler+0x2a0>
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000
 80028ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d023      	beq.n	8002940 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
 8002900:	e01e      	b.n	8002940 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10f      	bne.n	8002930 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0210 	bic.w	r2, r2, #16
 800291e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	2b00      	cmp	r3, #0
 8002946:	d032      	beq.n	80029ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d022      	beq.n	800299a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2205      	movs	r2, #5
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3301      	adds	r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	d307      	bcc.n	8002988 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f2      	bne.n	800296c <HAL_DMA_IRQHandler+0x2cc>
 8002986:	e000      	b.n	800298a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002988:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
 80029aa:	e000      	b.n	80029ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80029ac:	bf00      	nop
    }
  }
}
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d108      	bne.n	80029f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029f2:	e007      	b.n	8002a04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	60da      	str	r2, [r3, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	3b10      	subs	r3, #16
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <DMA_CalcBaseAndBitshift+0x64>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a2a:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <DMA_CalcBaseAndBitshift+0x68>)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4413      	add	r3, r2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d909      	bls.n	8002a52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a46:	f023 0303 	bic.w	r3, r3, #3
 8002a4a:	1d1a      	adds	r2, r3, #4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a50:	e007      	b.n	8002a62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	aaaaaaab 	.word	0xaaaaaaab
 8002a78:	08007364 	.word	0x08007364

08002a7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11f      	bne.n	8002ad6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d856      	bhi.n	8002b4a <DMA_CheckFifoParam+0xce>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <DMA_CheckFifoParam+0x28>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ab5 	.word	0x08002ab5
 8002aa8:	08002ac7 	.word	0x08002ac7
 8002aac:	08002ab5 	.word	0x08002ab5
 8002ab0:	08002b4b 	.word	0x08002b4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d046      	beq.n	8002b4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac4:	e043      	b.n	8002b4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ace:	d140      	bne.n	8002b52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad4:	e03d      	b.n	8002b52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ade:	d121      	bne.n	8002b24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d837      	bhi.n	8002b56 <DMA_CheckFifoParam+0xda>
 8002ae6:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <DMA_CheckFifoParam+0x70>)
 8002ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aec:	08002afd 	.word	0x08002afd
 8002af0:	08002b03 	.word	0x08002b03
 8002af4:	08002afd 	.word	0x08002afd
 8002af8:	08002b15 	.word	0x08002b15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      break;
 8002b00:	e030      	b.n	8002b64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d025      	beq.n	8002b5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b12:	e022      	b.n	8002b5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b1c:	d11f      	bne.n	8002b5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b22:	e01c      	b.n	8002b5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d903      	bls.n	8002b32 <DMA_CheckFifoParam+0xb6>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d003      	beq.n	8002b38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b30:	e018      	b.n	8002b64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
      break;
 8002b36:	e015      	b.n	8002b64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      break;
 8002b48:	e00b      	b.n	8002b62 <DMA_CheckFifoParam+0xe6>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e00a      	b.n	8002b64 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e008      	b.n	8002b64 <DMA_CheckFifoParam+0xe8>
      break;
 8002b52:	bf00      	nop
 8002b54:	e006      	b.n	8002b64 <DMA_CheckFifoParam+0xe8>
      break;
 8002b56:	bf00      	nop
 8002b58:	e004      	b.n	8002b64 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e002      	b.n	8002b64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b5e:	bf00      	nop
 8002b60:	e000      	b.n	8002b64 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
    }
  } 
  
  return status; 
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop

08002b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e16b      	b.n	8002e68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b90:	2201      	movs	r2, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	f040 815a 	bne.w	8002e62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d005      	beq.n	8002bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d130      	bne.n	8002c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 0201 	and.w	r2, r3, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d017      	beq.n	8002c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d123      	bne.n	8002cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	08da      	lsrs	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3208      	adds	r2, #8
 8002c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	08da      	lsrs	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	69b9      	ldr	r1, [r7, #24]
 8002cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80b4 	beq.w	8002e62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b60      	ldr	r3, [pc, #384]	; (8002e80 <HAL_GPIO_Init+0x30c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a5f      	ldr	r2, [pc, #380]	; (8002e80 <HAL_GPIO_Init+0x30c>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <HAL_GPIO_Init+0x30c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d16:	4a5b      	ldr	r2, [pc, #364]	; (8002e84 <HAL_GPIO_Init+0x310>)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_GPIO_Init+0x314>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d02b      	beq.n	8002d9a <HAL_GPIO_Init+0x226>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a51      	ldr	r2, [pc, #324]	; (8002e8c <HAL_GPIO_Init+0x318>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d025      	beq.n	8002d96 <HAL_GPIO_Init+0x222>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <HAL_GPIO_Init+0x31c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01f      	beq.n	8002d92 <HAL_GPIO_Init+0x21e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4f      	ldr	r2, [pc, #316]	; (8002e94 <HAL_GPIO_Init+0x320>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d019      	beq.n	8002d8e <HAL_GPIO_Init+0x21a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4e      	ldr	r2, [pc, #312]	; (8002e98 <HAL_GPIO_Init+0x324>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_GPIO_Init+0x216>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4d      	ldr	r2, [pc, #308]	; (8002e9c <HAL_GPIO_Init+0x328>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00d      	beq.n	8002d86 <HAL_GPIO_Init+0x212>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4c      	ldr	r2, [pc, #304]	; (8002ea0 <HAL_GPIO_Init+0x32c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <HAL_GPIO_Init+0x20e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4b      	ldr	r2, [pc, #300]	; (8002ea4 <HAL_GPIO_Init+0x330>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_GPIO_Init+0x20a>
 8002d7a:	2307      	movs	r3, #7
 8002d7c:	e00e      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d7e:	2308      	movs	r3, #8
 8002d80:	e00c      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d82:	2306      	movs	r3, #6
 8002d84:	e00a      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d86:	2305      	movs	r3, #5
 8002d88:	e008      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e004      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e002      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	f002 0203 	and.w	r2, r2, #3
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	4093      	lsls	r3, r2
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dac:	4935      	ldr	r1, [pc, #212]	; (8002e84 <HAL_GPIO_Init+0x310>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dde:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de4:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e08:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	f67f ae90 	bls.w	8002b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40021400 	.word	0x40021400
 8002ea0:	40021800 	.word	0x40021800
 8002ea4:	40021c00 	.word	0x40021c00
 8002ea8:	40013c00 	.word	0x40013c00

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec8:	e003      	b.n	8002ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	041a      	lsls	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	400b      	ands	r3, r1
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e12b      	b.n	800317e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe f9fa 	bl	8001334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	; 0x24
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f78:	f000 fd7e 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <HAL_I2C_Init+0x274>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d807      	bhi.n	8002f98 <HAL_I2C_Init+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a80      	ldr	r2, [pc, #512]	; (800318c <HAL_I2C_Init+0x278>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf94      	ite	ls
 8002f90:	2301      	movls	r3, #1
 8002f92:	2300      	movhi	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e006      	b.n	8002fa6 <HAL_I2C_Init+0x92>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a7d      	ldr	r2, [pc, #500]	; (8003190 <HAL_I2C_Init+0x27c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bf94      	ite	ls
 8002fa0:	2301      	movls	r3, #1
 8002fa2:	2300      	movhi	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0e7      	b.n	800317e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a78      	ldr	r2, [pc, #480]	; (8003194 <HAL_I2C_Init+0x280>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a6a      	ldr	r2, [pc, #424]	; (8003188 <HAL_I2C_Init+0x274>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d802      	bhi.n	8002fe8 <HAL_I2C_Init+0xd4>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	e009      	b.n	8002ffc <HAL_I2C_Init+0xe8>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	4a69      	ldr	r2, [pc, #420]	; (8003198 <HAL_I2C_Init+0x284>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	430b      	orrs	r3, r1
 8003002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800300e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	495c      	ldr	r1, [pc, #368]	; (8003188 <HAL_I2C_Init+0x274>)
 8003018:	428b      	cmp	r3, r1
 800301a:	d819      	bhi.n	8003050 <HAL_I2C_Init+0x13c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e59      	subs	r1, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fbb1 f3f3 	udiv	r3, r1, r3
 800302a:	1c59      	adds	r1, r3, #1
 800302c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003030:	400b      	ands	r3, r1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_I2C_Init+0x138>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e59      	subs	r1, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fbb1 f3f3 	udiv	r3, r1, r3
 8003044:	3301      	adds	r3, #1
 8003046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304a:	e051      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 800304c:	2304      	movs	r3, #4
 800304e:	e04f      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d111      	bne.n	800307c <HAL_I2C_Init+0x168>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1e58      	subs	r0, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e012      	b.n	80030a2 <HAL_I2C_Init+0x18e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e58      	subs	r0, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	0099      	lsls	r1, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Init+0x196>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e022      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10e      	bne.n	80030d0 <HAL_I2C_Init+0x1bc>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e58      	subs	r0, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	440b      	add	r3, r1
 80030c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ce:	e00f      	b.n	80030f0 <HAL_I2C_Init+0x1dc>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	0099      	lsls	r1, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	6809      	ldr	r1, [r1, #0]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800311e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6911      	ldr	r1, [r2, #16]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68d2      	ldr	r2, [r2, #12]
 800312a:	4311      	orrs	r1, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	430b      	orrs	r3, r1
 8003132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	000186a0 	.word	0x000186a0
 800318c:	001e847f 	.word	0x001e847f
 8003190:	003d08ff 	.word	0x003d08ff
 8003194:	431bde83 	.word	0x431bde83
 8003198:	10624dd3 	.word	0x10624dd3

0800319c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e267      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d075      	beq.n	80032a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d00c      	beq.n	80031e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c6:	4b85      	ldr	r3, [pc, #532]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d112      	bne.n	80031f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4b82      	ldr	r3, [pc, #520]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031de:	d10b      	bne.n	80031f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	4b7e      	ldr	r3, [pc, #504]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d05b      	beq.n	80032a4 <HAL_RCC_OscConfig+0x108>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d157      	bne.n	80032a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e242      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d106      	bne.n	8003210 <HAL_RCC_OscConfig+0x74>
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a75      	ldr	r2, [pc, #468]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e01d      	b.n	800324c <HAL_RCC_OscConfig+0xb0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x98>
 800321a:	4b70      	ldr	r3, [pc, #448]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6f      	ldr	r2, [pc, #444]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b6d      	ldr	r3, [pc, #436]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6c      	ldr	r2, [pc, #432]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0xb0>
 8003234:	4b69      	ldr	r3, [pc, #420]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a68      	ldr	r2, [pc, #416]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe fd0c 	bl	8001c70 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe fd08 	bl	8001c70 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e207      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b5b      	ldr	r3, [pc, #364]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0xc0>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fcf8 	bl	8001c70 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fcf4 	bl	8001c70 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1f3      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	4b51      	ldr	r3, [pc, #324]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0xe8>
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d063      	beq.n	800337a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b2:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d11c      	bne.n	8003304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ca:	4b44      	ldr	r3, [pc, #272]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_RCC_OscConfig+0x152>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e1c7      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4937      	ldr	r1, [pc, #220]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	e03a      	b.n	800337a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330c:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <HAL_RCC_OscConfig+0x244>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fe fcad 	bl	8001c70 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331a:	f7fe fca9 	bl	8001c70 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e1a8      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4925      	ldr	r1, [pc, #148]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	e015      	b.n	800337a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_RCC_OscConfig+0x244>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe fc8c 	bl	8001c70 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335c:	f7fe fc88 	bl	8001c70 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e187      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d036      	beq.n	80033f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d016      	beq.n	80033bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <HAL_RCC_OscConfig+0x248>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe fc6c 	bl	8001c70 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe fc68 	bl	8001c70 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e167      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_OscConfig+0x240>)
 80033b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x200>
 80033ba:	e01b      	b.n	80033f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_RCC_OscConfig+0x248>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c2:	f7fe fc55 	bl	8001c70 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	e00e      	b.n	80033e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ca:	f7fe fc51 	bl	8001c70 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d907      	bls.n	80033e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e150      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
 80033dc:	40023800 	.word	0x40023800
 80033e0:	42470000 	.word	0x42470000
 80033e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	4b88      	ldr	r3, [pc, #544]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80033ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ea      	bne.n	80033ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8097 	beq.w	8003530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003406:	4b81      	ldr	r3, [pc, #516]	; (800360c <HAL_RCC_OscConfig+0x470>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b7d      	ldr	r3, [pc, #500]	; (800360c <HAL_RCC_OscConfig+0x470>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a7c      	ldr	r2, [pc, #496]	; (800360c <HAL_RCC_OscConfig+0x470>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b7a      	ldr	r3, [pc, #488]	; (800360c <HAL_RCC_OscConfig+0x470>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b77      	ldr	r3, [pc, #476]	; (8003610 <HAL_RCC_OscConfig+0x474>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d118      	bne.n	8003470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343e:	4b74      	ldr	r3, [pc, #464]	; (8003610 <HAL_RCC_OscConfig+0x474>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a73      	ldr	r2, [pc, #460]	; (8003610 <HAL_RCC_OscConfig+0x474>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344a:	f7fe fc11 	bl	8001c70 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003452:	f7fe fc0d 	bl	8001c70 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e10c      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <HAL_RCC_OscConfig+0x474>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d106      	bne.n	8003486 <HAL_RCC_OscConfig+0x2ea>
 8003478:	4b64      	ldr	r3, [pc, #400]	; (800360c <HAL_RCC_OscConfig+0x470>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4a63      	ldr	r2, [pc, #396]	; (800360c <HAL_RCC_OscConfig+0x470>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6713      	str	r3, [r2, #112]	; 0x70
 8003484:	e01c      	b.n	80034c0 <HAL_RCC_OscConfig+0x324>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b05      	cmp	r3, #5
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x30c>
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_RCC_OscConfig+0x470>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a5e      	ldr	r2, [pc, #376]	; (800360c <HAL_RCC_OscConfig+0x470>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_RCC_OscConfig+0x470>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a5b      	ldr	r2, [pc, #364]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0x324>
 80034a8:	4b58      	ldr	r3, [pc, #352]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	4a57      	ldr	r2, [pc, #348]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6713      	str	r3, [r2, #112]	; 0x70
 80034b4:	4b55      	ldr	r3, [pc, #340]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a54      	ldr	r2, [pc, #336]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80034ba:	f023 0304 	bic.w	r3, r3, #4
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe fbd2 	bl	8001c70 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fe fbce 	bl	8001c70 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0cb      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	4b49      	ldr	r3, [pc, #292]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ee      	beq.n	80034d0 <HAL_RCC_OscConfig+0x334>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f4:	f7fe fbbc 	bl	8001c70 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fe fbb8 	bl	8001c70 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0b5      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	4b3e      	ldr	r3, [pc, #248]	; (800360c <HAL_RCC_OscConfig+0x470>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ee      	bne.n	80034fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b39      	ldr	r3, [pc, #228]	; (800360c <HAL_RCC_OscConfig+0x470>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4a38      	ldr	r2, [pc, #224]	; (800360c <HAL_RCC_OscConfig+0x470>)
 800352a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a1 	beq.w	800367c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800353a:	4b34      	ldr	r3, [pc, #208]	; (800360c <HAL_RCC_OscConfig+0x470>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b08      	cmp	r3, #8
 8003544:	d05c      	beq.n	8003600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d141      	bne.n	80035d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_RCC_OscConfig+0x478>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fe fb8c 	bl	8001c70 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe fb88 	bl	8001c70 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e087      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	4b27      	ldr	r3, [pc, #156]	; (800360c <HAL_RCC_OscConfig+0x470>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69da      	ldr	r2, [r3, #28]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	019b      	lsls	r3, r3, #6
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	3b01      	subs	r3, #1
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	061b      	lsls	r3, r3, #24
 800359e:	491b      	ldr	r1, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCC_OscConfig+0x478>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fe fb61 	bl	8001c70 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fe fb5d 	bl	8001c70 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e05c      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x416>
 80035d0:	e054      	b.n	800367c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_RCC_OscConfig+0x478>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fb4a 	bl	8001c70 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe fb46 	bl	8001c70 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e045      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_RCC_OscConfig+0x470>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x444>
 80035fe:	e03d      	b.n	800367c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e038      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
 800360c:	40023800 	.word	0x40023800
 8003610:	40007000 	.word	0x40007000
 8003614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x4ec>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d028      	beq.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d121      	bne.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d11a      	bne.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003648:	4013      	ands	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800364e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003650:	4293      	cmp	r3, r2
 8003652:	d111      	bne.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	3b01      	subs	r3, #1
 8003662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0cc      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d90c      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b65      	ldr	r3, [pc, #404]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0b8      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a58      	ldr	r2, [pc, #352]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b50      	ldr	r3, [pc, #320]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	494d      	ldr	r1, [pc, #308]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d044      	beq.n	80037ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b47      	ldr	r3, [pc, #284]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d119      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d003      	beq.n	800374a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	2b03      	cmp	r3, #3
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e067      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b37      	ldr	r3, [pc, #220]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4934      	ldr	r1, [pc, #208]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	4313      	orrs	r3, r2
 800377a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377c:	f7fe fa78 	bl	8001c70 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fe fa74 	bl	8001c70 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e04f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 020c 	and.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1eb      	bne.n	8003784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ac:	4b25      	ldr	r3, [pc, #148]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d20c      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e032      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4916      	ldr	r1, [pc, #88]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	490e      	ldr	r1, [pc, #56]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003812:	f000 f821 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003816:	4602      	mov	r2, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	490a      	ldr	r1, [pc, #40]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	5ccb      	ldrb	r3, [r1, r3]
 8003826:	fa22 f303 	lsr.w	r3, r2, r3
 800382a:	4a09      	ldr	r2, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe f9d8 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023c00 	.word	0x40023c00
 8003848:	40023800 	.word	0x40023800
 800384c:	0800734c 	.word	0x0800734c
 8003850:	20000000 	.word	0x20000000
 8003854:	20000004 	.word	0x20000004

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800385c:	b094      	sub	sp, #80	; 0x50
 800385e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
 8003864:	2300      	movs	r3, #0
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003868:	2300      	movs	r3, #0
 800386a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003870:	4b79      	ldr	r3, [pc, #484]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b08      	cmp	r3, #8
 800387a:	d00d      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x40>
 800387c:	2b08      	cmp	r3, #8
 800387e:	f200 80e1 	bhi.w	8003a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x34>
 8003886:	2b04      	cmp	r3, #4
 8003888:	d003      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x3a>
 800388a:	e0db      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b73      	ldr	r3, [pc, #460]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003890:	e0db      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003892:	4b72      	ldr	r3, [pc, #456]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003896:	e0d8      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003898:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a2:	4b6d      	ldr	r3, [pc, #436]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d063      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ae:	4b6a      	ldr	r3, [pc, #424]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	2200      	movs	r2, #0
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
 80038c2:	2300      	movs	r3, #0
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
 80038c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038ca:	4622      	mov	r2, r4
 80038cc:	462b      	mov	r3, r5
 80038ce:	f04f 0000 	mov.w	r0, #0
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	0159      	lsls	r1, r3, #5
 80038d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038dc:	0150      	lsls	r0, r2, #5
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4621      	mov	r1, r4
 80038e4:	1a51      	subs	r1, r2, r1
 80038e6:	6139      	str	r1, [r7, #16]
 80038e8:	4629      	mov	r1, r5
 80038ea:	eb63 0301 	sbc.w	r3, r3, r1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038fc:	4659      	mov	r1, fp
 80038fe:	018b      	lsls	r3, r1, #6
 8003900:	4651      	mov	r1, sl
 8003902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003906:	4651      	mov	r1, sl
 8003908:	018a      	lsls	r2, r1, #6
 800390a:	4651      	mov	r1, sl
 800390c:	ebb2 0801 	subs.w	r8, r2, r1
 8003910:	4659      	mov	r1, fp
 8003912:	eb63 0901 	sbc.w	r9, r3, r1
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392a:	4690      	mov	r8, r2
 800392c:	4699      	mov	r9, r3
 800392e:	4623      	mov	r3, r4
 8003930:	eb18 0303 	adds.w	r3, r8, r3
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	462b      	mov	r3, r5
 8003938:	eb49 0303 	adc.w	r3, r9, r3
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800394a:	4629      	mov	r1, r5
 800394c:	028b      	lsls	r3, r1, #10
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003954:	4621      	mov	r1, r4
 8003956:	028a      	lsls	r2, r1, #10
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800395e:	2200      	movs	r2, #0
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
 8003962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003968:	f7fc fc8a 	bl	8000280 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003974:	e058      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003976:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	2200      	movs	r2, #0
 800397e:	4618      	mov	r0, r3
 8003980:	4611      	mov	r1, r2
 8003982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003986:	623b      	str	r3, [r7, #32]
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
 800398c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003990:	4642      	mov	r2, r8
 8003992:	464b      	mov	r3, r9
 8003994:	f04f 0000 	mov.w	r0, #0
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	0159      	lsls	r1, r3, #5
 800399e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a2:	0150      	lsls	r0, r2, #5
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4641      	mov	r1, r8
 80039aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ae:	4649      	mov	r1, r9
 80039b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039c8:	ebb2 040a 	subs.w	r4, r2, sl
 80039cc:	eb63 050b 	sbc.w	r5, r3, fp
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	00eb      	lsls	r3, r5, #3
 80039da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039de:	00e2      	lsls	r2, r4, #3
 80039e0:	4614      	mov	r4, r2
 80039e2:	461d      	mov	r5, r3
 80039e4:	4643      	mov	r3, r8
 80039e6:	18e3      	adds	r3, r4, r3
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	464b      	mov	r3, r9
 80039ec:	eb45 0303 	adc.w	r3, r5, r3
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039fe:	4629      	mov	r1, r5
 8003a00:	028b      	lsls	r3, r1, #10
 8003a02:	4621      	mov	r1, r4
 8003a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a08:	4621      	mov	r1, r4
 8003a0a:	028a      	lsls	r2, r1, #10
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a12:	2200      	movs	r2, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	61fa      	str	r2, [r7, #28]
 8003a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a1c:	f7fc fc30 	bl	8000280 <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4613      	mov	r3, r2
 8003a26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	3301      	adds	r3, #1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3750      	adds	r7, #80	; 0x50
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	00f42400 	.word	0x00f42400

08003a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a7c:	f7ff fff0 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	0a9b      	lsrs	r3, r3, #10
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	0800735c 	.word	0x0800735c

08003aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa4:	f7ff ffdc 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0b5b      	lsrs	r3, r3, #13
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	0800735c 	.word	0x0800735c

08003ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d035      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003af0:	4b62      	ldr	r3, [pc, #392]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003af6:	f7fe f8bb 	bl	8001c70 <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003afe:	f7fe f8b7 	bl	8001c70 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0b0      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b10:	4b5b      	ldr	r3, [pc, #364]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	019a      	lsls	r2, r3, #6
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	071b      	lsls	r3, r3, #28
 8003b28:	4955      	ldr	r1, [pc, #340]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b30:	4b52      	ldr	r3, [pc, #328]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b36:	f7fe f89b 	bl	8001c70 <HAL_GetTick>
 8003b3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b3e:	f7fe f897 	bl	8001c70 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e090      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b50:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8083 	beq.w	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b44      	ldr	r3, [pc, #272]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a43      	ldr	r2, [pc, #268]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b86:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a3e      	ldr	r2, [pc, #248]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b92:	f7fe f86d 	bl	8001c70 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b9a:	f7fe f869 	bl	8001c70 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e062      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bac:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bb8:	4b31      	ldr	r3, [pc, #196]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d02f      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d028      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd6:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003be6:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bec:	4a24      	ldr	r2, [pc, #144]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d114      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe f837 	bl	8001c70 <HAL_GetTick>
 8003c02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fe f833 	bl	8001c70 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e02a      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ee      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c34:	d10d      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4a:	490d      	ldr	r1, [pc, #52]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	608b      	str	r3, [r1, #8]
 8003c50:	e005      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c58:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c5c:	6093      	str	r3, [r2, #8]
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6a:	4905      	ldr	r1, [pc, #20]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	42470068 	.word	0x42470068
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40007000 	.word	0x40007000
 8003c88:	42470e40 	.word	0x42470e40

08003c8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e066      	b.n	8003d70 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7f5b      	ldrb	r3, [r3, #29]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fd fb86 	bl	80013c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	22ca      	movs	r2, #202	; 0xca
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2253      	movs	r2, #83	; 0x53
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f87a 	bl	8003dc8 <RTC_EnterInitMode>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d12c      	bne.n	8003d38 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6899      	ldr	r1, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	68d2      	ldr	r2, [r2, #12]
 8003d18:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6919      	ldr	r1, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	041a      	lsls	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f881 	bl	8003e36 <RTC_ExitInitMode>
 8003d34:	4603      	mov	r3, r0
 8003d36:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d113      	bne.n	8003d66 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	22ff      	movs	r2, #255	; 0xff
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d92:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d94:	f7fd ff6c 	bl	8001c70 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d9a:	e009      	b.n	8003db0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d9c:	f7fd ff68 	bl	8001c70 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003daa:	d901      	bls.n	8003db0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e007      	b.n	8003dc0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ee      	beq.n	8003d9c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d122      	bne.n	8003e2c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003df4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003df6:	f7fd ff3b 	bl	8001c70 <HAL_GetTick>
 8003dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003dfc:	e00c      	b.n	8003e18 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dfe:	f7fd ff37 	bl	8001c70 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e0c:	d904      	bls.n	8003e18 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2204      	movs	r2, #4
 8003e12:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <RTC_EnterInitMode+0x64>
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d1e8      	bne.n	8003dfe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e50:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff89 	bl	8003d78 <HAL_RTC_WaitForSynchro>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07b      	b.n	8003f8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d009      	beq.n	8003eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
 8003eaa:	e005      	b.n	8003eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd faa0 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	ea42 0103 	orr.w	r1, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0104 	and.w	r1, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f003 0210 	and.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e041      	b.n	8004028 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fd fb19 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f000 fcaf 	bl	8004934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e041      	b.n	80040c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd faec 	bl	8001634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 fc60 	bl	8004934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <HAL_TIM_PWM_Start+0x24>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e022      	b.n	800413a <HAL_TIM_PWM_Start+0x6a>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d109      	bne.n	800410e <HAL_TIM_PWM_Start+0x3e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	bf14      	ite	ne
 8004106:	2301      	movne	r3, #1
 8004108:	2300      	moveq	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	e015      	b.n	800413a <HAL_TIM_PWM_Start+0x6a>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d109      	bne.n	8004128 <HAL_TIM_PWM_Start+0x58>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	e008      	b.n	800413a <HAL_TIM_PWM_Start+0x6a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e07c      	b.n	800423c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start+0x82>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004150:	e013      	b.n	800417a <HAL_TIM_PWM_Start+0xaa>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0x92>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004160:	e00b      	b.n	800417a <HAL_TIM_PWM_Start+0xaa>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0xa2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004170:	e003      	b.n	800417a <HAL_TIM_PWM_Start+0xaa>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2201      	movs	r2, #1
 8004180:	6839      	ldr	r1, [r7, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fec0 	bl	8004f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <HAL_TIM_PWM_Start+0x174>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_TIM_PWM_Start+0xcc>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2c      	ldr	r2, [pc, #176]	; (8004248 <HAL_TIM_PWM_Start+0x178>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_PWM_Start+0xd0>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_TIM_PWM_Start+0xd2>
 80041a0:	2300      	movs	r3, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a22      	ldr	r2, [pc, #136]	; (8004244 <HAL_TIM_PWM_Start+0x174>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d01d      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1f      	ldr	r2, [pc, #124]	; (800424c <HAL_TIM_PWM_Start+0x17c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <HAL_TIM_PWM_Start+0x180>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <HAL_TIM_PWM_Start+0x184>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a16      	ldr	r2, [pc, #88]	; (8004248 <HAL_TIM_PWM_Start+0x178>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_TIM_PWM_Start+0x188>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIM_PWM_Start+0x136>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <HAL_TIM_PWM_Start+0x18c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d111      	bne.n	800422a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b06      	cmp	r3, #6
 8004216:	d010      	beq.n	800423a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004228:	e007      	b.n	800423a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40010000 	.word	0x40010000
 8004248:	40010400 	.word	0x40010400
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40014000 	.word	0x40014000
 800425c:	40001800 	.word	0x40001800

08004260 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e097      	b.n	80043a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fd f90d 	bl	80014a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a4:	f023 0307 	bic.w	r3, r3, #7
 80042a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f000 fb3d 	bl	8004934 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	4313      	orrs	r3, r2
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004300:	f023 030c 	bic.w	r3, r3, #12
 8004304:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800430c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004310:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	4313      	orrs	r3, r2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	011a      	lsls	r2, r3, #4
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	031b      	lsls	r3, r3, #12
 8004330:	4313      	orrs	r3, r2
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	4313      	orrs	r3, r2
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0202 	mvn.w	r2, #2
 80043d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa81 	bl	80048f6 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa73 	bl	80048e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fa84 	bl	800490a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b04      	cmp	r3, #4
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0204 	mvn.w	r2, #4
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa57 	bl	80048f6 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa49 	bl	80048e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa5a 	bl	800490a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b08      	cmp	r3, #8
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0208 	mvn.w	r2, #8
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa2d 	bl	80048f6 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa1f 	bl	80048e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fa30 	bl	800490a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0210 	mvn.w	r2, #16
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2208      	movs	r2, #8
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa03 	bl	80048f6 <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f9f5 	bl	80048e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fa06 	bl	800490a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0201 	mvn.w	r2, #1
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9cf 	bl	80048ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d10e      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d107      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fdd4 	bl	8005104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d10e      	bne.n	8004588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d107      	bne.n	8004588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9cb 	bl	800491e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b20      	cmp	r3, #32
 8004594:	d10e      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d107      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0220 	mvn.w	r2, #32
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fd9e 	bl	80050f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e0ae      	b.n	8004738 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	f200 809f 	bhi.w	8004728 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004625 	.word	0x08004625
 80045f4:	08004729 	.word	0x08004729
 80045f8:	08004729 	.word	0x08004729
 80045fc:	08004729 	.word	0x08004729
 8004600:	08004665 	.word	0x08004665
 8004604:	08004729 	.word	0x08004729
 8004608:	08004729 	.word	0x08004729
 800460c:	08004729 	.word	0x08004729
 8004610:	080046a7 	.word	0x080046a7
 8004614:	08004729 	.word	0x08004729
 8004618:	08004729 	.word	0x08004729
 800461c:	08004729 	.word	0x08004729
 8004620:	080046e7 	.word	0x080046e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fa22 	bl	8004a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0208 	orr.w	r2, r2, #8
 800463e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0204 	bic.w	r2, r2, #4
 800464e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6999      	ldr	r1, [r3, #24]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	619a      	str	r2, [r3, #24]
      break;
 8004662:	e064      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fa72 	bl	8004b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6999      	ldr	r1, [r3, #24]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	619a      	str	r2, [r3, #24]
      break;
 80046a4:	e043      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fac7 	bl	8004c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0208 	orr.w	r2, r2, #8
 80046c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0204 	bic.w	r2, r2, #4
 80046d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69d9      	ldr	r1, [r3, #28]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	61da      	str	r2, [r3, #28]
      break;
 80046e4:	e023      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fb1b 	bl	8004d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69da      	ldr	r2, [r3, #28]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69d9      	ldr	r1, [r3, #28]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	021a      	lsls	r2, r3, #8
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	61da      	str	r2, [r3, #28]
      break;
 8004726:	e002      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	75fb      	strb	r3, [r7, #23]
      break;
 800472c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004736:	7dfb      	ldrb	r3, [r7, #23]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIM_ConfigClockSource+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e0b4      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x186>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800477a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004794:	d03e      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0xd4>
 8004796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479a:	f200 8087 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a2:	f000 8086 	beq.w	80048b2 <HAL_TIM_ConfigClockSource+0x172>
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047aa:	d87f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b70      	cmp	r3, #112	; 0x70
 80047ae:	d01a      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xa6>
 80047b0:	2b70      	cmp	r3, #112	; 0x70
 80047b2:	d87b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b60      	cmp	r3, #96	; 0x60
 80047b6:	d050      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x11a>
 80047b8:	2b60      	cmp	r3, #96	; 0x60
 80047ba:	d877      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b50      	cmp	r3, #80	; 0x50
 80047be:	d03c      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xfa>
 80047c0:	2b50      	cmp	r3, #80	; 0x50
 80047c2:	d873      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d058      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x13a>
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d86f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b30      	cmp	r3, #48	; 0x30
 80047ce:	d064      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047d0:	2b30      	cmp	r3, #48	; 0x30
 80047d2:	d86b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d060      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d867      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05c      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d05a      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047e4:	e062      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6899      	ldr	r1, [r3, #8]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f000 fb67 	bl	8004ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	609a      	str	r2, [r3, #8]
      break;
 8004812:	e04f      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6899      	ldr	r1, [r3, #8]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f000 fb50 	bl	8004ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004836:	609a      	str	r2, [r3, #8]
      break;
 8004838:	e03c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 fac4 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2150      	movs	r1, #80	; 0x50
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb1d 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004858:	e02c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	461a      	mov	r2, r3
 8004868:	f000 fae3 	bl	8004e32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2160      	movs	r1, #96	; 0x60
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fb0d 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004878:	e01c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	461a      	mov	r2, r3
 8004888:	f000 faa4 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2140      	movs	r1, #64	; 0x40
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fafd 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 8004898:	e00c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 faf4 	bl	8004e92 <TIM_ITRx_SetConfig>
      break;
 80048aa:	e003      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a40      	ldr	r2, [pc, #256]	; (8004a48 <TIM_Base_SetConfig+0x114>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004952:	d00f      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3d      	ldr	r2, [pc, #244]	; (8004a4c <TIM_Base_SetConfig+0x118>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00b      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3c      	ldr	r2, [pc, #240]	; (8004a50 <TIM_Base_SetConfig+0x11c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d007      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3b      	ldr	r2, [pc, #236]	; (8004a54 <TIM_Base_SetConfig+0x120>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a3a      	ldr	r2, [pc, #232]	; (8004a58 <TIM_Base_SetConfig+0x124>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d108      	bne.n	8004986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <TIM_Base_SetConfig+0x114>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02b      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004994:	d027      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2c      	ldr	r2, [pc, #176]	; (8004a4c <TIM_Base_SetConfig+0x118>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d023      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2b      	ldr	r2, [pc, #172]	; (8004a50 <TIM_Base_SetConfig+0x11c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01f      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <TIM_Base_SetConfig+0x120>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01b      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a29      	ldr	r2, [pc, #164]	; (8004a58 <TIM_Base_SetConfig+0x124>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d017      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <TIM_Base_SetConfig+0x128>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <TIM_Base_SetConfig+0x12c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00f      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <TIM_Base_SetConfig+0x130>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00b      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <TIM_Base_SetConfig+0x134>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d007      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <TIM_Base_SetConfig+0x138>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <TIM_Base_SetConfig+0x13c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d108      	bne.n	80049f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <TIM_Base_SetConfig+0x114>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_Base_SetConfig+0xf8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a0c      	ldr	r2, [pc, #48]	; (8004a58 <TIM_Base_SetConfig+0x124>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d103      	bne.n	8004a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	615a      	str	r2, [r3, #20]
}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800
 8004a68:	40001800 	.word	0x40001800
 8004a6c:	40001c00 	.word	0x40001c00
 8004a70:	40002000 	.word	0x40002000

08004a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f023 0201 	bic.w	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0303 	bic.w	r3, r3, #3
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f023 0302 	bic.w	r3, r3, #2
 8004abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a20      	ldr	r2, [pc, #128]	; (8004b4c <TIM_OC1_SetConfig+0xd8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC1_SetConfig+0x64>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a1f      	ldr	r2, [pc, #124]	; (8004b50 <TIM_OC1_SetConfig+0xdc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d10c      	bne.n	8004af2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0308 	bic.w	r3, r3, #8
 8004ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f023 0304 	bic.w	r3, r3, #4
 8004af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <TIM_OC1_SetConfig+0xd8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_OC1_SetConfig+0x8e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <TIM_OC1_SetConfig+0xdc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d111      	bne.n	8004b26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	621a      	str	r2, [r3, #32]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40010400 	.word	0x40010400

08004b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0320 	bic.w	r3, r3, #32
 8004b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a22      	ldr	r2, [pc, #136]	; (8004c38 <TIM_OC2_SetConfig+0xe4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC2_SetConfig+0x68>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <TIM_OC2_SetConfig+0xe8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d10d      	bne.n	8004bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <TIM_OC2_SetConfig+0xe4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_OC2_SetConfig+0x94>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a16      	ldr	r2, [pc, #88]	; (8004c3c <TIM_OC2_SetConfig+0xe8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d113      	bne.n	8004c10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40010400 	.word	0x40010400

08004c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a21      	ldr	r2, [pc, #132]	; (8004d20 <TIM_OC3_SetConfig+0xe0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d003      	beq.n	8004ca6 <TIM_OC3_SetConfig+0x66>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <TIM_OC3_SetConfig+0xe4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d10d      	bne.n	8004cc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <TIM_OC3_SetConfig+0xe0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_OC3_SetConfig+0x92>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <TIM_OC3_SetConfig+0xe4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d113      	bne.n	8004cfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	621a      	str	r2, [r3, #32]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40010400 	.word	0x40010400

08004d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	031b      	lsls	r3, r3, #12
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <TIM_OC4_SetConfig+0xa4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC4_SetConfig+0x68>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <TIM_OC4_SetConfig+0xa8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d109      	bne.n	8004da4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	019b      	lsls	r3, r3, #6
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f023 030a 	bic.w	r3, r3, #10
 8004e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b087      	sub	sp, #28
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0210 	bic.w	r2, r3, #16
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	031b      	lsls	r3, r3, #12
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f043 0307 	orr.w	r3, r3, #7
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	609a      	str	r2, [r3, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	021a      	lsls	r2, r3, #8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	609a      	str	r2, [r3, #8]
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1a      	ldr	r2, [r3, #32]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e05a      	b.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a21      	ldr	r2, [pc, #132]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d022      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb8:	d01d      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d018      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1a      	ldr	r2, [pc, #104]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a18      	ldr	r2, [pc, #96]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a17      	ldr	r2, [pc, #92]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d004      	beq.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a15      	ldr	r2, [pc, #84]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10c      	bne.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4313      	orrs	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40010400 	.word	0x40010400
 8005044:	40014000 	.word	0x40014000
 8005048:	40001800 	.word	0x40001800

0800504c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005064:	2302      	movs	r3, #2
 8005066:	e03d      	b.n	80050e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e03f      	b.n	80051aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fc fb38 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	; 0x24
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800515a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f001 f84d 	bl	80061fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b08a      	sub	sp, #40	; 0x28
 80051b6:	af02      	add	r7, sp, #8
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d17c      	bne.n	80052cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_UART_Transmit+0x2c>
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e075      	b.n	80052ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_UART_Transmit+0x3e>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e06e      	b.n	80052ce <HAL_UART_Transmit+0x11c>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2221      	movs	r2, #33	; 0x21
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005206:	f7fc fd33 	bl	8001c70 <HAL_GetTick>
 800520a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	88fa      	ldrh	r2, [r7, #6]
 8005216:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005220:	d108      	bne.n	8005234 <HAL_UART_Transmit+0x82>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d104      	bne.n	8005234 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	e003      	b.n	800523c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005244:	e02a      	b.n	800529c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2200      	movs	r2, #0
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fd04 	bl	8005c5e <UART_WaitOnFlagUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e036      	b.n	80052ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005274:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	3302      	adds	r3, #2
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	e007      	b.n	800528e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	781a      	ldrb	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1cf      	bne.n	8005246 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2140      	movs	r1, #64	; 0x40
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fcd4 	bl	8005c5e <UART_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e006      	b.n	80052ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e000      	b.n	80052ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
  }
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	; 0x30
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d165      	bne.n	80053be <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_UART_Transmit_DMA+0x26>
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e05e      	b.n	80053c0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_UART_Transmit_DMA+0x38>
 800530c:	2302      	movs	r3, #2
 800530e:	e057      	b.n	80053c0 <HAL_UART_Transmit_DMA+0xe8>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	88fa      	ldrh	r2, [r7, #6]
 8005322:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	88fa      	ldrh	r2, [r7, #6]
 8005328:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2221      	movs	r2, #33	; 0x21
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <HAL_UART_Transmit_DMA+0xf0>)
 800533e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005344:	4a21      	ldr	r2, [pc, #132]	; (80053cc <HAL_UART_Transmit_DMA+0xf4>)
 8005346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534c:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <HAL_UART_Transmit_DMA+0xf8>)
 800534e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	2200      	movs	r2, #0
 8005356:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005358:	f107 0308 	add.w	r3, r7, #8
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	6819      	ldr	r1, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3304      	adds	r3, #4
 800536c:	461a      	mov	r2, r3
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	f7fd f8ac 	bl	80024cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800537c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3314      	adds	r3, #20
 800538c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	617b      	str	r3, [r7, #20]
   return(result);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3314      	adds	r3, #20
 80053a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a6:	627a      	str	r2, [r7, #36]	; 0x24
 80053a8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6a39      	ldr	r1, [r7, #32]
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e5      	bne.n	8005386 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e000      	b.n	80053c0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
  }
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3730      	adds	r7, #48	; 0x30
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	080059b9 	.word	0x080059b9
 80053cc:	08005a53 	.word	0x08005a53
 80053d0:	08005bcb 	.word	0x08005bcb

080053d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	4613      	mov	r3, r2
 80053e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d11d      	bne.n	800542a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_UART_Receive_DMA+0x26>
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e016      	b.n	800542c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_UART_Receive_DMA+0x38>
 8005408:	2302      	movs	r3, #2
 800540a:	e00f      	b.n	800542c <HAL_UART_Receive_DMA+0x58>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	461a      	mov	r2, r3
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fc8b 	bl	8005d3c <UART_Start_Receive_DMA>
 8005426:	4603      	mov	r3, r0
 8005428:	e000      	b.n	800542c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
  }
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b0ba      	sub	sp, #232	; 0xe8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_UART_IRQHandler+0x66>
 8005486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fdf7 	bl	8006086 <UART_Receive_IT>
      return;
 8005498:	e256      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800549a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80de 	beq.w	8005660 <HAL_UART_IRQHandler+0x22c>
 80054a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80d1 	beq.w	8005660 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <HAL_UART_IRQHandler+0xae>
 80054ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_UART_IRQHandler+0xd2>
 80054ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f043 0202 	orr.w	r2, r3, #2
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_UART_IRQHandler+0xf6>
 8005512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f043 0204 	orr.w	r2, r3, #4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d011      	beq.n	800555a <HAL_UART_IRQHandler+0x126>
 8005536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d105      	bne.n	800554e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f043 0208 	orr.w	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 81ed 	beq.w	800593e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_UART_IRQHandler+0x14e>
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fd82 	bl	8006086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	bf0c      	ite	eq
 8005590:	2301      	moveq	r3, #1
 8005592:	2300      	movne	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <HAL_UART_IRQHandler+0x17a>
 80055a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d04f      	beq.n	800564e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fc8a 	bl	8005ec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055be:	2b40      	cmp	r3, #64	; 0x40
 80055c0:	d141      	bne.n	8005646 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3314      	adds	r3, #20
 80055ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005606:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1d9      	bne.n	80055c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	2b00      	cmp	r3, #0
 8005614:	d013      	beq.n	800563e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	4a7d      	ldr	r2, [pc, #500]	; (8005810 <HAL_UART_IRQHandler+0x3dc>)
 800561c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	4618      	mov	r0, r3
 8005624:	f7fd f81a 	bl	800265c <HAL_DMA_Abort_IT>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005638:	4610      	mov	r0, r2
 800563a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800563c:	e00e      	b.n	800565c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9a4 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	e00a      	b.n	800565c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f9a0 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	e006      	b.n	800565c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f99c 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800565a:	e170      	b.n	800593e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	bf00      	nop
    return;
 800565e:	e16e      	b.n	800593e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	2b01      	cmp	r3, #1
 8005666:	f040 814a 	bne.w	80058fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800566a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8143 	beq.w	80058fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 813c 	beq.w	80058fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	2b40      	cmp	r3, #64	; 0x40
 80056a8:	f040 80b4 	bne.w	8005814 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8140 	beq.w	8005942 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ca:	429a      	cmp	r2, r3
 80056cc:	f080 8139 	bcs.w	8005942 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e2:	f000 8088 	beq.w	80057f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	330c      	adds	r3, #12
 80056ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800571e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800572a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1d9      	bne.n	80056e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3314      	adds	r3, #20
 8005738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3314      	adds	r3, #20
 8005752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005756:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800575a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800575e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e1      	bne.n	8005732 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800577e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005792:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005794:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e3      	bne.n	800576e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c6:	f023 0310 	bic.w	r3, r3, #16
 80057ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80057da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e3      	bne.n	80057b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fc fec3 	bl	800257c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	4619      	mov	r1, r3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8ca 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800580c:	e099      	b.n	8005942 <HAL_UART_IRQHandler+0x50e>
 800580e:	bf00      	nop
 8005810:	08005f8f 	.word	0x08005f8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581c:	b29b      	uxth	r3, r3
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 808b 	beq.w	8005946 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8086 	beq.w	8005946 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005850:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800585e:	647a      	str	r2, [r7, #68]	; 0x44
 8005860:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800586c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e3      	bne.n	800583a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	623b      	str	r3, [r7, #32]
   return(result);
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3314      	adds	r3, #20
 8005892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005896:	633a      	str	r2, [r7, #48]	; 0x30
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800589c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e3      	bne.n	8005872 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0310 	bic.w	r3, r3, #16
 80058ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058dc:	61fa      	str	r2, [r7, #28]
 80058de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69b9      	ldr	r1, [r7, #24]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e3      	bne.n	80058b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f852 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058fc:	e023      	b.n	8005946 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <HAL_UART_IRQHandler+0x4ea>
 800590a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb4d 	bl	8005fb6 <UART_Transmit_IT>
    return;
 800591c:	e014      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <HAL_UART_IRQHandler+0x514>
 800592a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fb8d 	bl	8006056 <UART_EndTransmit_IT>
    return;
 800593c:	e004      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
    return;
 800593e:	bf00      	nop
 8005940:	e002      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
      return;
 8005942:	bf00      	nop
 8005944:	e000      	b.n	8005948 <HAL_UART_IRQHandler+0x514>
      return;
 8005946:	bf00      	nop
  }
}
 8005948:	37e8      	adds	r7, #232	; 0xe8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop

08005950 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b090      	sub	sp, #64	; 0x40
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d137      	bne.n	8005a44 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80059d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d6:	2200      	movs	r2, #0
 80059d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3314      	adds	r3, #20
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	623b      	str	r3, [r7, #32]
   return(result);
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80059f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3314      	adds	r3, #20
 80059f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059fa:	633a      	str	r2, [r7, #48]	; 0x30
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e5      	bne.n	80059da <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
 8005a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a2e:	61fa      	str	r2, [r7, #28]
 8005a30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	69b9      	ldr	r1, [r7, #24]
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e5      	bne.n	8005a0e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a42:	e002      	b.n	8005a4a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005a44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a46:	f7ff ff83 	bl	8005950 <HAL_UART_TxCpltCallback>
}
 8005a4a:	bf00      	nop
 8005a4c:	3740      	adds	r7, #64	; 0x40
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff ff7f 	bl	8005964 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b09c      	sub	sp, #112	; 0x70
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d172      	bne.n	8005b70 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ab0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ab2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ab6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e5      	bne.n	8005a90 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3314      	adds	r3, #20
 8005aca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	667b      	str	r3, [r7, #100]	; 0x64
 8005adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3314      	adds	r3, #20
 8005ae2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ae4:	647a      	str	r2, [r7, #68]	; 0x44
 8005ae6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e5      	bne.n	8005ac4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3314      	adds	r3, #20
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	623b      	str	r3, [r7, #32]
   return(result);
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3314      	adds	r3, #20
 8005b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b18:	633a      	str	r2, [r7, #48]	; 0x30
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e5      	bne.n	8005af8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d119      	bne.n	8005b70 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b5c:	61fa      	str	r2, [r7, #28]
 8005b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	69b9      	ldr	r1, [r7, #24]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	617b      	str	r3, [r7, #20]
   return(result);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d106      	bne.n	8005b86 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b80:	f7ff ff0e 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b84:	e002      	b.n	8005b8c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005b86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b88:	f7fb faba 	bl	8001100 <HAL_UART_RxCpltCallback>
}
 8005b8c:	bf00      	nop
 8005b8e:	3770      	adds	r7, #112	; 0x70
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d108      	bne.n	8005bbc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7ff fef3 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bba:	e002      	b.n	8005bc2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff fedb 	bl	8005978 <HAL_UART_RxHalfCpltCallback>
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	bf0c      	ite	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	2300      	movne	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b21      	cmp	r3, #33	; 0x21
 8005bfc:	d108      	bne.n	8005c10 <UART_DMAError+0x46>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005c0a:	68b8      	ldr	r0, [r7, #8]
 8005c0c:	f000 f934 	bl	8005e78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b22      	cmp	r3, #34	; 0x22
 8005c30:	d108      	bne.n	8005c44 <UART_DMAError+0x7a>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005c3e:	68b8      	ldr	r0, [r7, #8]
 8005c40:	f000 f942 	bl	8005ec8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	f043 0210 	orr.w	r2, r3, #16
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c50:	68b8      	ldr	r0, [r7, #8]
 8005c52:	f7ff fe9b 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b090      	sub	sp, #64	; 0x40
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6e:	e050      	b.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c76:	d04c      	beq.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x30>
 8005c7e:	f7fb fff7 	bl	8001c70 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d241      	bcs.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cae:	637a      	str	r2, [r7, #52]	; 0x34
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e5      	bne.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3314      	adds	r3, #20
 8005cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f023 0301 	bic.w	r3, r3, #1
 8005cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3314      	adds	r3, #20
 8005ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ce2:	623a      	str	r2, [r7, #32]
 8005ce4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	69f9      	ldr	r1, [r7, #28]
 8005ce8:	6a3a      	ldr	r2, [r7, #32]
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e00f      	b.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d09f      	beq.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3740      	adds	r7, #64	; 0x40
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b098      	sub	sp, #96	; 0x60
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	88fa      	ldrh	r2, [r7, #6]
 8005d54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2222      	movs	r2, #34	; 0x22
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	4a40      	ldr	r2, [pc, #256]	; (8005e6c <UART_Start_Receive_DMA+0x130>)
 8005d6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	4a3f      	ldr	r2, [pc, #252]	; (8005e70 <UART_Start_Receive_DMA+0x134>)
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	4a3e      	ldr	r2, [pc, #248]	; (8005e74 <UART_Start_Receive_DMA+0x138>)
 8005d7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	2200      	movs	r2, #0
 8005d82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005d84:	f107 0308 	add.w	r3, r7, #8
 8005d88:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	f7fc fb96 	bl	80024cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d019      	beq.n	8005dfa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ddc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005de6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005de8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005dec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e5      	bne.n	8005dc6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3314      	adds	r3, #20
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	657b      	str	r3, [r7, #84]	; 0x54
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e1a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e44:	653b      	str	r3, [r7, #80]	; 0x50
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6a39      	ldr	r1, [r7, #32]
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e5      	bne.n	8005e2e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3760      	adds	r7, #96	; 0x60
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	08005a6f 	.word	0x08005a6f
 8005e70:	08005b95 	.word	0x08005b95
 8005e74:	08005bcb 	.word	0x08005bcb

08005e78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b089      	sub	sp, #36	; 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e96:	61fb      	str	r3, [r7, #28]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	61ba      	str	r2, [r7, #24]
 8005ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6979      	ldr	r1, [r7, #20]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	613b      	str	r3, [r7, #16]
   return(result);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e5      	bne.n	8005e80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005ebc:	bf00      	nop
 8005ebe:	3724      	adds	r7, #36	; 0x24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b095      	sub	sp, #84	; 0x54
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	330c      	adds	r3, #12
 8005eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ef0:	643a      	str	r2, [r7, #64]	; 0x40
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e5      	bne.n	8005ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3314      	adds	r3, #20
 8005f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f023 0301 	bic.w	r3, r3, #1
 8005f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3314      	adds	r3, #20
 8005f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e5      	bne.n	8005f04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d119      	bne.n	8005f74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	330c      	adds	r3, #12
 8005f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f023 0310 	bic.w	r3, r3, #16
 8005f56:	647b      	str	r3, [r7, #68]	; 0x44
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f60:	61ba      	str	r2, [r7, #24]
 8005f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6979      	ldr	r1, [r7, #20]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e5      	bne.n	8005f40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f82:	bf00      	nop
 8005f84:	3754      	adds	r7, #84	; 0x54
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fcef 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b21      	cmp	r3, #33	; 0x21
 8005fc8:	d13e      	bne.n	8006048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd2:	d114      	bne.n	8005ffe <UART_Transmit_IT+0x48>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d110      	bne.n	8005ffe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	1c9a      	adds	r2, r3, #2
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	621a      	str	r2, [r3, #32]
 8005ffc:	e008      	b.n	8006010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6211      	str	r1, [r2, #32]
 8006008:	781a      	ldrb	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29b      	uxth	r3, r3
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4619      	mov	r1, r3
 800601e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10f      	bne.n	8006044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800606c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff fc6a 	bl	8005950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b08c      	sub	sp, #48	; 0x30
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b22      	cmp	r3, #34	; 0x22
 8006098:	f040 80ab 	bne.w	80061f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a4:	d117      	bne.n	80060d6 <UART_Receive_IT+0x50>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d113      	bne.n	80060d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ce:	1c9a      	adds	r2, r3, #2
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28
 80060d4:	e026      	b.n	8006124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e8:	d007      	beq.n	80060fa <UART_Receive_IT+0x74>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <UART_Receive_IT+0x82>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e008      	b.n	800611a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006114:	b2da      	uxtb	r2, r3
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29b      	uxth	r3, r3
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4619      	mov	r1, r3
 8006132:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006134:	2b00      	cmp	r3, #0
 8006136:	d15a      	bne.n	80061ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0220 	bic.w	r2, r2, #32
 8006146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	2b01      	cmp	r3, #1
 8006176:	d135      	bne.n	80061e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	613b      	str	r3, [r7, #16]
   return(result);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f023 0310 	bic.w	r3, r3, #16
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619e:	623a      	str	r2, [r7, #32]
 80061a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	69f9      	ldr	r1, [r7, #28]
 80061a4:	6a3a      	ldr	r2, [r7, #32]
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e5      	bne.n	800617e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d10a      	bne.n	80061d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fbdf 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
 80061e2:	e002      	b.n	80061ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fa ff8b 	bl	8001100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e002      	b.n	80061f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e000      	b.n	80061f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
  }
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3730      	adds	r7, #48	; 0x30
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006200:	b0c0      	sub	sp, #256	; 0x100
 8006202:	af00      	add	r7, sp, #0
 8006204:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	68d9      	ldr	r1, [r3, #12]
 800621a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	ea40 0301 	orr.w	r3, r0, r1
 8006224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	431a      	orrs	r2, r3
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	431a      	orrs	r2, r3
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006254:	f021 010c 	bic.w	r1, r1, #12
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006262:	430b      	orrs	r3, r1
 8006264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006276:	6999      	ldr	r1, [r3, #24]
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	ea40 0301 	orr.w	r3, r0, r1
 8006282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b8f      	ldr	r3, [pc, #572]	; (80064c8 <UART_SetConfig+0x2cc>)
 800628c:	429a      	cmp	r2, r3
 800628e:	d005      	beq.n	800629c <UART_SetConfig+0xa0>
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b8d      	ldr	r3, [pc, #564]	; (80064cc <UART_SetConfig+0x2d0>)
 8006298:	429a      	cmp	r2, r3
 800629a:	d104      	bne.n	80062a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800629c:	f7fd fc00 	bl	8003aa0 <HAL_RCC_GetPCLK2Freq>
 80062a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062a4:	e003      	b.n	80062ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062a6:	f7fd fbe7 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 80062aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b8:	f040 810c 	bne.w	80064d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062ce:	4622      	mov	r2, r4
 80062d0:	462b      	mov	r3, r5
 80062d2:	1891      	adds	r1, r2, r2
 80062d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80062d6:	415b      	adcs	r3, r3
 80062d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062de:	4621      	mov	r1, r4
 80062e0:	eb12 0801 	adds.w	r8, r2, r1
 80062e4:	4629      	mov	r1, r5
 80062e6:	eb43 0901 	adc.w	r9, r3, r1
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062fe:	4690      	mov	r8, r2
 8006300:	4699      	mov	r9, r3
 8006302:	4623      	mov	r3, r4
 8006304:	eb18 0303 	adds.w	r3, r8, r3
 8006308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800630c:	462b      	mov	r3, r5
 800630e:	eb49 0303 	adc.w	r3, r9, r3
 8006312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006322:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800632a:	460b      	mov	r3, r1
 800632c:	18db      	adds	r3, r3, r3
 800632e:	653b      	str	r3, [r7, #80]	; 0x50
 8006330:	4613      	mov	r3, r2
 8006332:	eb42 0303 	adc.w	r3, r2, r3
 8006336:	657b      	str	r3, [r7, #84]	; 0x54
 8006338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800633c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006340:	f7f9 ff9e 	bl	8000280 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4b61      	ldr	r3, [pc, #388]	; (80064d0 <UART_SetConfig+0x2d4>)
 800634a:	fba3 2302 	umull	r2, r3, r3, r2
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	011c      	lsls	r4, r3, #4
 8006352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006356:	2200      	movs	r2, #0
 8006358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800635c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006364:	4642      	mov	r2, r8
 8006366:	464b      	mov	r3, r9
 8006368:	1891      	adds	r1, r2, r2
 800636a:	64b9      	str	r1, [r7, #72]	; 0x48
 800636c:	415b      	adcs	r3, r3
 800636e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006374:	4641      	mov	r1, r8
 8006376:	eb12 0a01 	adds.w	sl, r2, r1
 800637a:	4649      	mov	r1, r9
 800637c:	eb43 0b01 	adc.w	fp, r3, r1
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800638c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006394:	4692      	mov	sl, r2
 8006396:	469b      	mov	fp, r3
 8006398:	4643      	mov	r3, r8
 800639a:	eb1a 0303 	adds.w	r3, sl, r3
 800639e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063a2:	464b      	mov	r3, r9
 80063a4:	eb4b 0303 	adc.w	r3, fp, r3
 80063a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063c0:	460b      	mov	r3, r1
 80063c2:	18db      	adds	r3, r3, r3
 80063c4:	643b      	str	r3, [r7, #64]	; 0x40
 80063c6:	4613      	mov	r3, r2
 80063c8:	eb42 0303 	adc.w	r3, r2, r3
 80063cc:	647b      	str	r3, [r7, #68]	; 0x44
 80063ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063d6:	f7f9 ff53 	bl	8000280 <__aeabi_uldivmod>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	4b3b      	ldr	r3, [pc, #236]	; (80064d0 <UART_SetConfig+0x2d4>)
 80063e2:	fba3 2301 	umull	r2, r3, r3, r1
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	2264      	movs	r2, #100	; 0x64
 80063ea:	fb02 f303 	mul.w	r3, r2, r3
 80063ee:	1acb      	subs	r3, r1, r3
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063f6:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <UART_SetConfig+0x2d4>)
 80063f8:	fba3 2302 	umull	r2, r3, r3, r2
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006404:	441c      	add	r4, r3
 8006406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800640a:	2200      	movs	r2, #0
 800640c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006410:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	1891      	adds	r1, r2, r2
 800641e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006420:	415b      	adcs	r3, r3
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006428:	4641      	mov	r1, r8
 800642a:	1851      	adds	r1, r2, r1
 800642c:	6339      	str	r1, [r7, #48]	; 0x30
 800642e:	4649      	mov	r1, r9
 8006430:	414b      	adcs	r3, r1
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006440:	4659      	mov	r1, fp
 8006442:	00cb      	lsls	r3, r1, #3
 8006444:	4651      	mov	r1, sl
 8006446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644a:	4651      	mov	r1, sl
 800644c:	00ca      	lsls	r2, r1, #3
 800644e:	4610      	mov	r0, r2
 8006450:	4619      	mov	r1, r3
 8006452:	4603      	mov	r3, r0
 8006454:	4642      	mov	r2, r8
 8006456:	189b      	adds	r3, r3, r2
 8006458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800645c:	464b      	mov	r3, r9
 800645e:	460a      	mov	r2, r1
 8006460:	eb42 0303 	adc.w	r3, r2, r3
 8006464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006474:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800647c:	460b      	mov	r3, r1
 800647e:	18db      	adds	r3, r3, r3
 8006480:	62bb      	str	r3, [r7, #40]	; 0x28
 8006482:	4613      	mov	r3, r2
 8006484:	eb42 0303 	adc.w	r3, r2, r3
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800648e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006492:	f7f9 fef5 	bl	8000280 <__aeabi_uldivmod>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <UART_SetConfig+0x2d4>)
 800649c:	fba3 1302 	umull	r1, r3, r3, r2
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	2164      	movs	r1, #100	; 0x64
 80064a4:	fb01 f303 	mul.w	r3, r1, r3
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	3332      	adds	r3, #50	; 0x32
 80064ae:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <UART_SetConfig+0x2d4>)
 80064b0:	fba2 2303 	umull	r2, r3, r2, r3
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	f003 0207 	and.w	r2, r3, #7
 80064ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4422      	add	r2, r4
 80064c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064c4:	e106      	b.n	80066d4 <UART_SetConfig+0x4d8>
 80064c6:	bf00      	nop
 80064c8:	40011000 	.word	0x40011000
 80064cc:	40011400 	.word	0x40011400
 80064d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064e6:	4642      	mov	r2, r8
 80064e8:	464b      	mov	r3, r9
 80064ea:	1891      	adds	r1, r2, r2
 80064ec:	6239      	str	r1, [r7, #32]
 80064ee:	415b      	adcs	r3, r3
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
 80064f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064f6:	4641      	mov	r1, r8
 80064f8:	1854      	adds	r4, r2, r1
 80064fa:	4649      	mov	r1, r9
 80064fc:	eb43 0501 	adc.w	r5, r3, r1
 8006500:	f04f 0200 	mov.w	r2, #0
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	00eb      	lsls	r3, r5, #3
 800650a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800650e:	00e2      	lsls	r2, r4, #3
 8006510:	4614      	mov	r4, r2
 8006512:	461d      	mov	r5, r3
 8006514:	4643      	mov	r3, r8
 8006516:	18e3      	adds	r3, r4, r3
 8006518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800651c:	464b      	mov	r3, r9
 800651e:	eb45 0303 	adc.w	r3, r5, r3
 8006522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006542:	4629      	mov	r1, r5
 8006544:	008b      	lsls	r3, r1, #2
 8006546:	4621      	mov	r1, r4
 8006548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654c:	4621      	mov	r1, r4
 800654e:	008a      	lsls	r2, r1, #2
 8006550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006554:	f7f9 fe94 	bl	8000280 <__aeabi_uldivmod>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4b60      	ldr	r3, [pc, #384]	; (80066e0 <UART_SetConfig+0x4e4>)
 800655e:	fba3 2302 	umull	r2, r3, r3, r2
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	011c      	lsls	r4, r3, #4
 8006566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800656a:	2200      	movs	r2, #0
 800656c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	1891      	adds	r1, r2, r2
 800657e:	61b9      	str	r1, [r7, #24]
 8006580:	415b      	adcs	r3, r3
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006588:	4641      	mov	r1, r8
 800658a:	1851      	adds	r1, r2, r1
 800658c:	6139      	str	r1, [r7, #16]
 800658e:	4649      	mov	r1, r9
 8006590:	414b      	adcs	r3, r1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	f04f 0300 	mov.w	r3, #0
 800659c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065a0:	4659      	mov	r1, fp
 80065a2:	00cb      	lsls	r3, r1, #3
 80065a4:	4651      	mov	r1, sl
 80065a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065aa:	4651      	mov	r1, sl
 80065ac:	00ca      	lsls	r2, r1, #3
 80065ae:	4610      	mov	r0, r2
 80065b0:	4619      	mov	r1, r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	4642      	mov	r2, r8
 80065b6:	189b      	adds	r3, r3, r2
 80065b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065bc:	464b      	mov	r3, r9
 80065be:	460a      	mov	r2, r1
 80065c0:	eb42 0303 	adc.w	r3, r2, r3
 80065c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80065d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065e0:	4649      	mov	r1, r9
 80065e2:	008b      	lsls	r3, r1, #2
 80065e4:	4641      	mov	r1, r8
 80065e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ea:	4641      	mov	r1, r8
 80065ec:	008a      	lsls	r2, r1, #2
 80065ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065f2:	f7f9 fe45 	bl	8000280 <__aeabi_uldivmod>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4611      	mov	r1, r2
 80065fc:	4b38      	ldr	r3, [pc, #224]	; (80066e0 <UART_SetConfig+0x4e4>)
 80065fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	2264      	movs	r2, #100	; 0x64
 8006606:	fb02 f303 	mul.w	r3, r2, r3
 800660a:	1acb      	subs	r3, r1, r3
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	3332      	adds	r3, #50	; 0x32
 8006610:	4a33      	ldr	r2, [pc, #204]	; (80066e0 <UART_SetConfig+0x4e4>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800661c:	441c      	add	r4, r3
 800661e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006622:	2200      	movs	r2, #0
 8006624:	673b      	str	r3, [r7, #112]	; 0x70
 8006626:	677a      	str	r2, [r7, #116]	; 0x74
 8006628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	1891      	adds	r1, r2, r2
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	415b      	adcs	r3, r3
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800663c:	4641      	mov	r1, r8
 800663e:	1851      	adds	r1, r2, r1
 8006640:	6039      	str	r1, [r7, #0]
 8006642:	4649      	mov	r1, r9
 8006644:	414b      	adcs	r3, r1
 8006646:	607b      	str	r3, [r7, #4]
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006654:	4659      	mov	r1, fp
 8006656:	00cb      	lsls	r3, r1, #3
 8006658:	4651      	mov	r1, sl
 800665a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800665e:	4651      	mov	r1, sl
 8006660:	00ca      	lsls	r2, r1, #3
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	4603      	mov	r3, r0
 8006668:	4642      	mov	r2, r8
 800666a:	189b      	adds	r3, r3, r2
 800666c:	66bb      	str	r3, [r7, #104]	; 0x68
 800666e:	464b      	mov	r3, r9
 8006670:	460a      	mov	r2, r1
 8006672:	eb42 0303 	adc.w	r3, r2, r3
 8006676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	663b      	str	r3, [r7, #96]	; 0x60
 8006682:	667a      	str	r2, [r7, #100]	; 0x64
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006690:	4649      	mov	r1, r9
 8006692:	008b      	lsls	r3, r1, #2
 8006694:	4641      	mov	r1, r8
 8006696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800669a:	4641      	mov	r1, r8
 800669c:	008a      	lsls	r2, r1, #2
 800669e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066a2:	f7f9 fded 	bl	8000280 <__aeabi_uldivmod>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <UART_SetConfig+0x4e4>)
 80066ac:	fba3 1302 	umull	r1, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	2164      	movs	r1, #100	; 0x64
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	3332      	adds	r3, #50	; 0x32
 80066be:	4a08      	ldr	r2, [pc, #32]	; (80066e0 <UART_SetConfig+0x4e4>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 020f 	and.w	r2, r3, #15
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4422      	add	r2, r4
 80066d2:	609a      	str	r2, [r3, #8]
}
 80066d4:	bf00      	nop
 80066d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066da:	46bd      	mov	sp, r7
 80066dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066e0:	51eb851f 	.word	0x51eb851f

080066e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80066e8:	4904      	ldr	r1, [pc, #16]	; (80066fc <MX_FATFS_Init+0x18>)
 80066ea:	4805      	ldr	r0, [pc, #20]	; (8006700 <MX_FATFS_Init+0x1c>)
 80066ec:	f000 f8b0 	bl	8006850 <FATFS_LinkDriver>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <MX_FATFS_Init+0x20>)
 80066f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80066f8:	bf00      	nop
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	200004e0 	.word	0x200004e0
 8006700:	2000000c 	.word	0x2000000c
 8006704:	200004dc 	.word	0x200004dc

08006708 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006712:	4b06      	ldr	r3, [pc, #24]	; (800672c <USER_initialize+0x24>)
 8006714:	2201      	movs	r2, #1
 8006716:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <USER_initialize+0x24>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000009 	.word	0x20000009

08006730 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <USER_status+0x24>)
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006740:	4b04      	ldr	r3, [pc, #16]	; (8006754 <USER_status+0x24>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20000009 	.word	0x20000009

08006758 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006768:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006786:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	603a      	str	r2, [r7, #0]
 800679e:	71fb      	strb	r3, [r7, #7]
 80067a0:	460b      	mov	r3, r1
 80067a2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
    return res;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80067c6:	2301      	movs	r3, #1
 80067c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80067ce:	4b1f      	ldr	r3, [pc, #124]	; (800684c <FATFS_LinkDriverEx+0x94>)
 80067d0:	7a5b      	ldrb	r3, [r3, #9]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d131      	bne.n	800683c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80067d8:	4b1c      	ldr	r3, [pc, #112]	; (800684c <FATFS_LinkDriverEx+0x94>)
 80067da:	7a5b      	ldrb	r3, [r3, #9]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	4b1a      	ldr	r3, [pc, #104]	; (800684c <FATFS_LinkDriverEx+0x94>)
 80067e2:	2100      	movs	r1, #0
 80067e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80067e6:	4b19      	ldr	r3, [pc, #100]	; (800684c <FATFS_LinkDriverEx+0x94>)
 80067e8:	7a5b      	ldrb	r3, [r3, #9]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	4a17      	ldr	r2, [pc, #92]	; (800684c <FATFS_LinkDriverEx+0x94>)
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80067f6:	4b15      	ldr	r3, [pc, #84]	; (800684c <FATFS_LinkDriverEx+0x94>)
 80067f8:	7a5b      	ldrb	r3, [r3, #9]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	4b13      	ldr	r3, [pc, #76]	; (800684c <FATFS_LinkDriverEx+0x94>)
 8006800:	4413      	add	r3, r2
 8006802:	79fa      	ldrb	r2, [r7, #7]
 8006804:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006806:	4b11      	ldr	r3, [pc, #68]	; (800684c <FATFS_LinkDriverEx+0x94>)
 8006808:	7a5b      	ldrb	r3, [r3, #9]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	b2d1      	uxtb	r1, r2
 8006810:	4a0e      	ldr	r2, [pc, #56]	; (800684c <FATFS_LinkDriverEx+0x94>)
 8006812:	7251      	strb	r1, [r2, #9]
 8006814:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006816:	7dbb      	ldrb	r3, [r7, #22]
 8006818:	3330      	adds	r3, #48	; 0x30
 800681a:	b2da      	uxtb	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	3301      	adds	r3, #1
 8006824:	223a      	movs	r2, #58	; 0x3a
 8006826:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3302      	adds	r3, #2
 800682c:	222f      	movs	r2, #47	; 0x2f
 800682e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	3303      	adds	r3, #3
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800683c:	7dfb      	ldrb	r3, [r7, #23]
}
 800683e:	4618      	mov	r0, r3
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	200004e4 	.word	0x200004e4

08006850 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800685a:	2200      	movs	r2, #0
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff ffaa 	bl	80067b8 <FATFS_LinkDriverEx>
 8006864:	4603      	mov	r3, r0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <atoi>:
 800686e:	220a      	movs	r2, #10
 8006870:	2100      	movs	r1, #0
 8006872:	f000 b883 	b.w	800697c <strtol>
	...

08006878 <_strtol_l.constprop.0>:
 8006878:	2b01      	cmp	r3, #1
 800687a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687e:	d001      	beq.n	8006884 <_strtol_l.constprop.0+0xc>
 8006880:	2b24      	cmp	r3, #36	; 0x24
 8006882:	d906      	bls.n	8006892 <_strtol_l.constprop.0+0x1a>
 8006884:	f000 f8ac 	bl	80069e0 <__errno>
 8006888:	2316      	movs	r3, #22
 800688a:	6003      	str	r3, [r0, #0]
 800688c:	2000      	movs	r0, #0
 800688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006892:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006978 <_strtol_l.constprop.0+0x100>
 8006896:	460d      	mov	r5, r1
 8006898:	462e      	mov	r6, r5
 800689a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800689e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80068a2:	f017 0708 	ands.w	r7, r7, #8
 80068a6:	d1f7      	bne.n	8006898 <_strtol_l.constprop.0+0x20>
 80068a8:	2c2d      	cmp	r4, #45	; 0x2d
 80068aa:	d132      	bne.n	8006912 <_strtol_l.constprop.0+0x9a>
 80068ac:	782c      	ldrb	r4, [r5, #0]
 80068ae:	2701      	movs	r7, #1
 80068b0:	1cb5      	adds	r5, r6, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d05b      	beq.n	800696e <_strtol_l.constprop.0+0xf6>
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d109      	bne.n	80068ce <_strtol_l.constprop.0+0x56>
 80068ba:	2c30      	cmp	r4, #48	; 0x30
 80068bc:	d107      	bne.n	80068ce <_strtol_l.constprop.0+0x56>
 80068be:	782c      	ldrb	r4, [r5, #0]
 80068c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80068c4:	2c58      	cmp	r4, #88	; 0x58
 80068c6:	d14d      	bne.n	8006964 <_strtol_l.constprop.0+0xec>
 80068c8:	786c      	ldrb	r4, [r5, #1]
 80068ca:	2310      	movs	r3, #16
 80068cc:	3502      	adds	r5, #2
 80068ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80068d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80068d6:	f04f 0e00 	mov.w	lr, #0
 80068da:	fbb8 f9f3 	udiv	r9, r8, r3
 80068de:	4676      	mov	r6, lr
 80068e0:	fb03 8a19 	mls	sl, r3, r9, r8
 80068e4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80068e8:	f1bc 0f09 	cmp.w	ip, #9
 80068ec:	d816      	bhi.n	800691c <_strtol_l.constprop.0+0xa4>
 80068ee:	4664      	mov	r4, ip
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	dd24      	ble.n	800693e <_strtol_l.constprop.0+0xc6>
 80068f4:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80068f8:	d008      	beq.n	800690c <_strtol_l.constprop.0+0x94>
 80068fa:	45b1      	cmp	r9, r6
 80068fc:	d31c      	bcc.n	8006938 <_strtol_l.constprop.0+0xc0>
 80068fe:	d101      	bne.n	8006904 <_strtol_l.constprop.0+0x8c>
 8006900:	45a2      	cmp	sl, r4
 8006902:	db19      	blt.n	8006938 <_strtol_l.constprop.0+0xc0>
 8006904:	fb06 4603 	mla	r6, r6, r3, r4
 8006908:	f04f 0e01 	mov.w	lr, #1
 800690c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006910:	e7e8      	b.n	80068e4 <_strtol_l.constprop.0+0x6c>
 8006912:	2c2b      	cmp	r4, #43	; 0x2b
 8006914:	bf04      	itt	eq
 8006916:	782c      	ldrbeq	r4, [r5, #0]
 8006918:	1cb5      	addeq	r5, r6, #2
 800691a:	e7ca      	b.n	80068b2 <_strtol_l.constprop.0+0x3a>
 800691c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006920:	f1bc 0f19 	cmp.w	ip, #25
 8006924:	d801      	bhi.n	800692a <_strtol_l.constprop.0+0xb2>
 8006926:	3c37      	subs	r4, #55	; 0x37
 8006928:	e7e2      	b.n	80068f0 <_strtol_l.constprop.0+0x78>
 800692a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800692e:	f1bc 0f19 	cmp.w	ip, #25
 8006932:	d804      	bhi.n	800693e <_strtol_l.constprop.0+0xc6>
 8006934:	3c57      	subs	r4, #87	; 0x57
 8006936:	e7db      	b.n	80068f0 <_strtol_l.constprop.0+0x78>
 8006938:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800693c:	e7e6      	b.n	800690c <_strtol_l.constprop.0+0x94>
 800693e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006942:	d105      	bne.n	8006950 <_strtol_l.constprop.0+0xd8>
 8006944:	2322      	movs	r3, #34	; 0x22
 8006946:	6003      	str	r3, [r0, #0]
 8006948:	4646      	mov	r6, r8
 800694a:	b942      	cbnz	r2, 800695e <_strtol_l.constprop.0+0xe6>
 800694c:	4630      	mov	r0, r6
 800694e:	e79e      	b.n	800688e <_strtol_l.constprop.0+0x16>
 8006950:	b107      	cbz	r7, 8006954 <_strtol_l.constprop.0+0xdc>
 8006952:	4276      	negs	r6, r6
 8006954:	2a00      	cmp	r2, #0
 8006956:	d0f9      	beq.n	800694c <_strtol_l.constprop.0+0xd4>
 8006958:	f1be 0f00 	cmp.w	lr, #0
 800695c:	d000      	beq.n	8006960 <_strtol_l.constprop.0+0xe8>
 800695e:	1e69      	subs	r1, r5, #1
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	e7f3      	b.n	800694c <_strtol_l.constprop.0+0xd4>
 8006964:	2430      	movs	r4, #48	; 0x30
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1b1      	bne.n	80068ce <_strtol_l.constprop.0+0x56>
 800696a:	2308      	movs	r3, #8
 800696c:	e7af      	b.n	80068ce <_strtol_l.constprop.0+0x56>
 800696e:	2c30      	cmp	r4, #48	; 0x30
 8006970:	d0a5      	beq.n	80068be <_strtol_l.constprop.0+0x46>
 8006972:	230a      	movs	r3, #10
 8006974:	e7ab      	b.n	80068ce <_strtol_l.constprop.0+0x56>
 8006976:	bf00      	nop
 8006978:	0800736d 	.word	0x0800736d

0800697c <strtol>:
 800697c:	4613      	mov	r3, r2
 800697e:	460a      	mov	r2, r1
 8006980:	4601      	mov	r1, r0
 8006982:	4802      	ldr	r0, [pc, #8]	; (800698c <strtol+0x10>)
 8006984:	6800      	ldr	r0, [r0, #0]
 8006986:	f7ff bf77 	b.w	8006878 <_strtol_l.constprop.0>
 800698a:	bf00      	nop
 800698c:	2000006c 	.word	0x2000006c

08006990 <siprintf>:
 8006990:	b40e      	push	{r1, r2, r3}
 8006992:	b500      	push	{lr}
 8006994:	b09c      	sub	sp, #112	; 0x70
 8006996:	ab1d      	add	r3, sp, #116	; 0x74
 8006998:	9002      	str	r0, [sp, #8]
 800699a:	9006      	str	r0, [sp, #24]
 800699c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069a0:	4809      	ldr	r0, [pc, #36]	; (80069c8 <siprintf+0x38>)
 80069a2:	9107      	str	r1, [sp, #28]
 80069a4:	9104      	str	r1, [sp, #16]
 80069a6:	4909      	ldr	r1, [pc, #36]	; (80069cc <siprintf+0x3c>)
 80069a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ac:	9105      	str	r1, [sp, #20]
 80069ae:	6800      	ldr	r0, [r0, #0]
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	a902      	add	r1, sp, #8
 80069b4:	f000 f992 	bl	8006cdc <_svfiprintf_r>
 80069b8:	9b02      	ldr	r3, [sp, #8]
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	b01c      	add	sp, #112	; 0x70
 80069c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c4:	b003      	add	sp, #12
 80069c6:	4770      	bx	lr
 80069c8:	2000006c 	.word	0x2000006c
 80069cc:	ffff0208 	.word	0xffff0208

080069d0 <memset>:
 80069d0:	4402      	add	r2, r0
 80069d2:	4603      	mov	r3, r0
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d100      	bne.n	80069da <memset+0xa>
 80069d8:	4770      	bx	lr
 80069da:	f803 1b01 	strb.w	r1, [r3], #1
 80069de:	e7f9      	b.n	80069d4 <memset+0x4>

080069e0 <__errno>:
 80069e0:	4b01      	ldr	r3, [pc, #4]	; (80069e8 <__errno+0x8>)
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	2000006c 	.word	0x2000006c

080069ec <__libc_init_array>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4d0d      	ldr	r5, [pc, #52]	; (8006a24 <__libc_init_array+0x38>)
 80069f0:	4c0d      	ldr	r4, [pc, #52]	; (8006a28 <__libc_init_array+0x3c>)
 80069f2:	1b64      	subs	r4, r4, r5
 80069f4:	10a4      	asrs	r4, r4, #2
 80069f6:	2600      	movs	r6, #0
 80069f8:	42a6      	cmp	r6, r4
 80069fa:	d109      	bne.n	8006a10 <__libc_init_array+0x24>
 80069fc:	4d0b      	ldr	r5, [pc, #44]	; (8006a2c <__libc_init_array+0x40>)
 80069fe:	4c0c      	ldr	r4, [pc, #48]	; (8006a30 <__libc_init_array+0x44>)
 8006a00:	f000 fc6a 	bl	80072d8 <_init>
 8006a04:	1b64      	subs	r4, r4, r5
 8006a06:	10a4      	asrs	r4, r4, #2
 8006a08:	2600      	movs	r6, #0
 8006a0a:	42a6      	cmp	r6, r4
 8006a0c:	d105      	bne.n	8006a1a <__libc_init_array+0x2e>
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a14:	4798      	blx	r3
 8006a16:	3601      	adds	r6, #1
 8006a18:	e7ee      	b.n	80069f8 <__libc_init_array+0xc>
 8006a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1e:	4798      	blx	r3
 8006a20:	3601      	adds	r6, #1
 8006a22:	e7f2      	b.n	8006a0a <__libc_init_array+0x1e>
 8006a24:	080074a8 	.word	0x080074a8
 8006a28:	080074a8 	.word	0x080074a8
 8006a2c:	080074a8 	.word	0x080074a8
 8006a30:	080074ac 	.word	0x080074ac

08006a34 <__retarget_lock_acquire_recursive>:
 8006a34:	4770      	bx	lr

08006a36 <__retarget_lock_release_recursive>:
 8006a36:	4770      	bx	lr

08006a38 <_free_r>:
 8006a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a3a:	2900      	cmp	r1, #0
 8006a3c:	d044      	beq.n	8006ac8 <_free_r+0x90>
 8006a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a42:	9001      	str	r0, [sp, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f1a1 0404 	sub.w	r4, r1, #4
 8006a4a:	bfb8      	it	lt
 8006a4c:	18e4      	addlt	r4, r4, r3
 8006a4e:	f000 f8df 	bl	8006c10 <__malloc_lock>
 8006a52:	4a1e      	ldr	r2, [pc, #120]	; (8006acc <_free_r+0x94>)
 8006a54:	9801      	ldr	r0, [sp, #4]
 8006a56:	6813      	ldr	r3, [r2, #0]
 8006a58:	b933      	cbnz	r3, 8006a68 <_free_r+0x30>
 8006a5a:	6063      	str	r3, [r4, #4]
 8006a5c:	6014      	str	r4, [r2, #0]
 8006a5e:	b003      	add	sp, #12
 8006a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a64:	f000 b8da 	b.w	8006c1c <__malloc_unlock>
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d908      	bls.n	8006a7e <_free_r+0x46>
 8006a6c:	6825      	ldr	r5, [r4, #0]
 8006a6e:	1961      	adds	r1, r4, r5
 8006a70:	428b      	cmp	r3, r1
 8006a72:	bf01      	itttt	eq
 8006a74:	6819      	ldreq	r1, [r3, #0]
 8006a76:	685b      	ldreq	r3, [r3, #4]
 8006a78:	1949      	addeq	r1, r1, r5
 8006a7a:	6021      	streq	r1, [r4, #0]
 8006a7c:	e7ed      	b.n	8006a5a <_free_r+0x22>
 8006a7e:	461a      	mov	r2, r3
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	b10b      	cbz	r3, 8006a88 <_free_r+0x50>
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d9fa      	bls.n	8006a7e <_free_r+0x46>
 8006a88:	6811      	ldr	r1, [r2, #0]
 8006a8a:	1855      	adds	r5, r2, r1
 8006a8c:	42a5      	cmp	r5, r4
 8006a8e:	d10b      	bne.n	8006aa8 <_free_r+0x70>
 8006a90:	6824      	ldr	r4, [r4, #0]
 8006a92:	4421      	add	r1, r4
 8006a94:	1854      	adds	r4, r2, r1
 8006a96:	42a3      	cmp	r3, r4
 8006a98:	6011      	str	r1, [r2, #0]
 8006a9a:	d1e0      	bne.n	8006a5e <_free_r+0x26>
 8006a9c:	681c      	ldr	r4, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	6053      	str	r3, [r2, #4]
 8006aa2:	440c      	add	r4, r1
 8006aa4:	6014      	str	r4, [r2, #0]
 8006aa6:	e7da      	b.n	8006a5e <_free_r+0x26>
 8006aa8:	d902      	bls.n	8006ab0 <_free_r+0x78>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	6003      	str	r3, [r0, #0]
 8006aae:	e7d6      	b.n	8006a5e <_free_r+0x26>
 8006ab0:	6825      	ldr	r5, [r4, #0]
 8006ab2:	1961      	adds	r1, r4, r5
 8006ab4:	428b      	cmp	r3, r1
 8006ab6:	bf04      	itt	eq
 8006ab8:	6819      	ldreq	r1, [r3, #0]
 8006aba:	685b      	ldreq	r3, [r3, #4]
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	bf04      	itt	eq
 8006ac0:	1949      	addeq	r1, r1, r5
 8006ac2:	6021      	streq	r1, [r4, #0]
 8006ac4:	6054      	str	r4, [r2, #4]
 8006ac6:	e7ca      	b.n	8006a5e <_free_r+0x26>
 8006ac8:	b003      	add	sp, #12
 8006aca:	bd30      	pop	{r4, r5, pc}
 8006acc:	20000630 	.word	0x20000630

08006ad0 <sbrk_aligned>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4e0e      	ldr	r6, [pc, #56]	; (8006b0c <sbrk_aligned+0x3c>)
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	6831      	ldr	r1, [r6, #0]
 8006ad8:	4605      	mov	r5, r0
 8006ada:	b911      	cbnz	r1, 8006ae2 <sbrk_aligned+0x12>
 8006adc:	f000 fba6 	bl	800722c <_sbrk_r>
 8006ae0:	6030      	str	r0, [r6, #0]
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f000 fba1 	bl	800722c <_sbrk_r>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	d00a      	beq.n	8006b04 <sbrk_aligned+0x34>
 8006aee:	1cc4      	adds	r4, r0, #3
 8006af0:	f024 0403 	bic.w	r4, r4, #3
 8006af4:	42a0      	cmp	r0, r4
 8006af6:	d007      	beq.n	8006b08 <sbrk_aligned+0x38>
 8006af8:	1a21      	subs	r1, r4, r0
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 fb96 	bl	800722c <_sbrk_r>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d101      	bne.n	8006b08 <sbrk_aligned+0x38>
 8006b04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b08:	4620      	mov	r0, r4
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	20000634 	.word	0x20000634

08006b10 <_malloc_r>:
 8006b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b14:	1ccd      	adds	r5, r1, #3
 8006b16:	f025 0503 	bic.w	r5, r5, #3
 8006b1a:	3508      	adds	r5, #8
 8006b1c:	2d0c      	cmp	r5, #12
 8006b1e:	bf38      	it	cc
 8006b20:	250c      	movcc	r5, #12
 8006b22:	2d00      	cmp	r5, #0
 8006b24:	4607      	mov	r7, r0
 8006b26:	db01      	blt.n	8006b2c <_malloc_r+0x1c>
 8006b28:	42a9      	cmp	r1, r5
 8006b2a:	d905      	bls.n	8006b38 <_malloc_r+0x28>
 8006b2c:	230c      	movs	r3, #12
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	2600      	movs	r6, #0
 8006b32:	4630      	mov	r0, r6
 8006b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c0c <_malloc_r+0xfc>
 8006b3c:	f000 f868 	bl	8006c10 <__malloc_lock>
 8006b40:	f8d8 3000 	ldr.w	r3, [r8]
 8006b44:	461c      	mov	r4, r3
 8006b46:	bb5c      	cbnz	r4, 8006ba0 <_malloc_r+0x90>
 8006b48:	4629      	mov	r1, r5
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	f7ff ffc0 	bl	8006ad0 <sbrk_aligned>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	4604      	mov	r4, r0
 8006b54:	d155      	bne.n	8006c02 <_malloc_r+0xf2>
 8006b56:	f8d8 4000 	ldr.w	r4, [r8]
 8006b5a:	4626      	mov	r6, r4
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	d145      	bne.n	8006bec <_malloc_r+0xdc>
 8006b60:	2c00      	cmp	r4, #0
 8006b62:	d048      	beq.n	8006bf6 <_malloc_r+0xe6>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	4631      	mov	r1, r6
 8006b68:	4638      	mov	r0, r7
 8006b6a:	eb04 0903 	add.w	r9, r4, r3
 8006b6e:	f000 fb5d 	bl	800722c <_sbrk_r>
 8006b72:	4581      	cmp	r9, r0
 8006b74:	d13f      	bne.n	8006bf6 <_malloc_r+0xe6>
 8006b76:	6821      	ldr	r1, [r4, #0]
 8006b78:	1a6d      	subs	r5, r5, r1
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	f7ff ffa7 	bl	8006ad0 <sbrk_aligned>
 8006b82:	3001      	adds	r0, #1
 8006b84:	d037      	beq.n	8006bf6 <_malloc_r+0xe6>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	442b      	add	r3, r5
 8006b8a:	6023      	str	r3, [r4, #0]
 8006b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d038      	beq.n	8006c06 <_malloc_r+0xf6>
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	42a2      	cmp	r2, r4
 8006b98:	d12b      	bne.n	8006bf2 <_malloc_r+0xe2>
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	e00f      	b.n	8006bc0 <_malloc_r+0xb0>
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	1b52      	subs	r2, r2, r5
 8006ba4:	d41f      	bmi.n	8006be6 <_malloc_r+0xd6>
 8006ba6:	2a0b      	cmp	r2, #11
 8006ba8:	d917      	bls.n	8006bda <_malloc_r+0xca>
 8006baa:	1961      	adds	r1, r4, r5
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	6025      	str	r5, [r4, #0]
 8006bb0:	bf18      	it	ne
 8006bb2:	6059      	strne	r1, [r3, #4]
 8006bb4:	6863      	ldr	r3, [r4, #4]
 8006bb6:	bf08      	it	eq
 8006bb8:	f8c8 1000 	streq.w	r1, [r8]
 8006bbc:	5162      	str	r2, [r4, r5]
 8006bbe:	604b      	str	r3, [r1, #4]
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f104 060b 	add.w	r6, r4, #11
 8006bc6:	f000 f829 	bl	8006c1c <__malloc_unlock>
 8006bca:	f026 0607 	bic.w	r6, r6, #7
 8006bce:	1d23      	adds	r3, r4, #4
 8006bd0:	1af2      	subs	r2, r6, r3
 8006bd2:	d0ae      	beq.n	8006b32 <_malloc_r+0x22>
 8006bd4:	1b9b      	subs	r3, r3, r6
 8006bd6:	50a3      	str	r3, [r4, r2]
 8006bd8:	e7ab      	b.n	8006b32 <_malloc_r+0x22>
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	6862      	ldr	r2, [r4, #4]
 8006bde:	d1dd      	bne.n	8006b9c <_malloc_r+0x8c>
 8006be0:	f8c8 2000 	str.w	r2, [r8]
 8006be4:	e7ec      	b.n	8006bc0 <_malloc_r+0xb0>
 8006be6:	4623      	mov	r3, r4
 8006be8:	6864      	ldr	r4, [r4, #4]
 8006bea:	e7ac      	b.n	8006b46 <_malloc_r+0x36>
 8006bec:	4634      	mov	r4, r6
 8006bee:	6876      	ldr	r6, [r6, #4]
 8006bf0:	e7b4      	b.n	8006b5c <_malloc_r+0x4c>
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	e7cc      	b.n	8006b90 <_malloc_r+0x80>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f000 f80e 	bl	8006c1c <__malloc_unlock>
 8006c00:	e797      	b.n	8006b32 <_malloc_r+0x22>
 8006c02:	6025      	str	r5, [r4, #0]
 8006c04:	e7dc      	b.n	8006bc0 <_malloc_r+0xb0>
 8006c06:	605b      	str	r3, [r3, #4]
 8006c08:	deff      	udf	#255	; 0xff
 8006c0a:	bf00      	nop
 8006c0c:	20000630 	.word	0x20000630

08006c10 <__malloc_lock>:
 8006c10:	4801      	ldr	r0, [pc, #4]	; (8006c18 <__malloc_lock+0x8>)
 8006c12:	f7ff bf0f 	b.w	8006a34 <__retarget_lock_acquire_recursive>
 8006c16:	bf00      	nop
 8006c18:	2000062c 	.word	0x2000062c

08006c1c <__malloc_unlock>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	; (8006c24 <__malloc_unlock+0x8>)
 8006c1e:	f7ff bf0a 	b.w	8006a36 <__retarget_lock_release_recursive>
 8006c22:	bf00      	nop
 8006c24:	2000062c 	.word	0x2000062c

08006c28 <__ssputs_r>:
 8006c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2c:	688e      	ldr	r6, [r1, #8]
 8006c2e:	461f      	mov	r7, r3
 8006c30:	42be      	cmp	r6, r7
 8006c32:	680b      	ldr	r3, [r1, #0]
 8006c34:	4682      	mov	sl, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	4690      	mov	r8, r2
 8006c3a:	d82c      	bhi.n	8006c96 <__ssputs_r+0x6e>
 8006c3c:	898a      	ldrh	r2, [r1, #12]
 8006c3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c42:	d026      	beq.n	8006c92 <__ssputs_r+0x6a>
 8006c44:	6965      	ldr	r5, [r4, #20]
 8006c46:	6909      	ldr	r1, [r1, #16]
 8006c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c4c:	eba3 0901 	sub.w	r9, r3, r1
 8006c50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c54:	1c7b      	adds	r3, r7, #1
 8006c56:	444b      	add	r3, r9
 8006c58:	106d      	asrs	r5, r5, #1
 8006c5a:	429d      	cmp	r5, r3
 8006c5c:	bf38      	it	cc
 8006c5e:	461d      	movcc	r5, r3
 8006c60:	0553      	lsls	r3, r2, #21
 8006c62:	d527      	bpl.n	8006cb4 <__ssputs_r+0x8c>
 8006c64:	4629      	mov	r1, r5
 8006c66:	f7ff ff53 	bl	8006b10 <_malloc_r>
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	b360      	cbz	r0, 8006cc8 <__ssputs_r+0xa0>
 8006c6e:	6921      	ldr	r1, [r4, #16]
 8006c70:	464a      	mov	r2, r9
 8006c72:	f000 faeb 	bl	800724c <memcpy>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c80:	81a3      	strh	r3, [r4, #12]
 8006c82:	6126      	str	r6, [r4, #16]
 8006c84:	6165      	str	r5, [r4, #20]
 8006c86:	444e      	add	r6, r9
 8006c88:	eba5 0509 	sub.w	r5, r5, r9
 8006c8c:	6026      	str	r6, [r4, #0]
 8006c8e:	60a5      	str	r5, [r4, #8]
 8006c90:	463e      	mov	r6, r7
 8006c92:	42be      	cmp	r6, r7
 8006c94:	d900      	bls.n	8006c98 <__ssputs_r+0x70>
 8006c96:	463e      	mov	r6, r7
 8006c98:	6820      	ldr	r0, [r4, #0]
 8006c9a:	4632      	mov	r2, r6
 8006c9c:	4641      	mov	r1, r8
 8006c9e:	f000 faab 	bl	80071f8 <memmove>
 8006ca2:	68a3      	ldr	r3, [r4, #8]
 8006ca4:	1b9b      	subs	r3, r3, r6
 8006ca6:	60a3      	str	r3, [r4, #8]
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	4433      	add	r3, r6
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb4:	462a      	mov	r2, r5
 8006cb6:	f000 fad7 	bl	8007268 <_realloc_r>
 8006cba:	4606      	mov	r6, r0
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d1e0      	bne.n	8006c82 <__ssputs_r+0x5a>
 8006cc0:	6921      	ldr	r1, [r4, #16]
 8006cc2:	4650      	mov	r0, sl
 8006cc4:	f7ff feb8 	bl	8006a38 <_free_r>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	f8ca 3000 	str.w	r3, [sl]
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cd4:	81a3      	strh	r3, [r4, #12]
 8006cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cda:	e7e9      	b.n	8006cb0 <__ssputs_r+0x88>

08006cdc <_svfiprintf_r>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	4698      	mov	r8, r3
 8006ce2:	898b      	ldrh	r3, [r1, #12]
 8006ce4:	061b      	lsls	r3, r3, #24
 8006ce6:	b09d      	sub	sp, #116	; 0x74
 8006ce8:	4607      	mov	r7, r0
 8006cea:	460d      	mov	r5, r1
 8006cec:	4614      	mov	r4, r2
 8006cee:	d50e      	bpl.n	8006d0e <_svfiprintf_r+0x32>
 8006cf0:	690b      	ldr	r3, [r1, #16]
 8006cf2:	b963      	cbnz	r3, 8006d0e <_svfiprintf_r+0x32>
 8006cf4:	2140      	movs	r1, #64	; 0x40
 8006cf6:	f7ff ff0b 	bl	8006b10 <_malloc_r>
 8006cfa:	6028      	str	r0, [r5, #0]
 8006cfc:	6128      	str	r0, [r5, #16]
 8006cfe:	b920      	cbnz	r0, 8006d0a <_svfiprintf_r+0x2e>
 8006d00:	230c      	movs	r3, #12
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d08:	e0d0      	b.n	8006eac <_svfiprintf_r+0x1d0>
 8006d0a:	2340      	movs	r3, #64	; 0x40
 8006d0c:	616b      	str	r3, [r5, #20]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9309      	str	r3, [sp, #36]	; 0x24
 8006d12:	2320      	movs	r3, #32
 8006d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d1c:	2330      	movs	r3, #48	; 0x30
 8006d1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006ec4 <_svfiprintf_r+0x1e8>
 8006d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d26:	f04f 0901 	mov.w	r9, #1
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	469a      	mov	sl, r3
 8006d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d32:	b10a      	cbz	r2, 8006d38 <_svfiprintf_r+0x5c>
 8006d34:	2a25      	cmp	r2, #37	; 0x25
 8006d36:	d1f9      	bne.n	8006d2c <_svfiprintf_r+0x50>
 8006d38:	ebba 0b04 	subs.w	fp, sl, r4
 8006d3c:	d00b      	beq.n	8006d56 <_svfiprintf_r+0x7a>
 8006d3e:	465b      	mov	r3, fp
 8006d40:	4622      	mov	r2, r4
 8006d42:	4629      	mov	r1, r5
 8006d44:	4638      	mov	r0, r7
 8006d46:	f7ff ff6f 	bl	8006c28 <__ssputs_r>
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f000 80a9 	beq.w	8006ea2 <_svfiprintf_r+0x1c6>
 8006d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d52:	445a      	add	r2, fp
 8006d54:	9209      	str	r2, [sp, #36]	; 0x24
 8006d56:	f89a 3000 	ldrb.w	r3, [sl]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80a1 	beq.w	8006ea2 <_svfiprintf_r+0x1c6>
 8006d60:	2300      	movs	r3, #0
 8006d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d6a:	f10a 0a01 	add.w	sl, sl, #1
 8006d6e:	9304      	str	r3, [sp, #16]
 8006d70:	9307      	str	r3, [sp, #28]
 8006d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d76:	931a      	str	r3, [sp, #104]	; 0x68
 8006d78:	4654      	mov	r4, sl
 8006d7a:	2205      	movs	r2, #5
 8006d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d80:	4850      	ldr	r0, [pc, #320]	; (8006ec4 <_svfiprintf_r+0x1e8>)
 8006d82:	f7f9 fa2d 	bl	80001e0 <memchr>
 8006d86:	9a04      	ldr	r2, [sp, #16]
 8006d88:	b9d8      	cbnz	r0, 8006dc2 <_svfiprintf_r+0xe6>
 8006d8a:	06d0      	lsls	r0, r2, #27
 8006d8c:	bf44      	itt	mi
 8006d8e:	2320      	movmi	r3, #32
 8006d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d94:	0711      	lsls	r1, r2, #28
 8006d96:	bf44      	itt	mi
 8006d98:	232b      	movmi	r3, #43	; 0x2b
 8006d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006da2:	2b2a      	cmp	r3, #42	; 0x2a
 8006da4:	d015      	beq.n	8006dd2 <_svfiprintf_r+0xf6>
 8006da6:	9a07      	ldr	r2, [sp, #28]
 8006da8:	4654      	mov	r4, sl
 8006daa:	2000      	movs	r0, #0
 8006dac:	f04f 0c0a 	mov.w	ip, #10
 8006db0:	4621      	mov	r1, r4
 8006db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006db6:	3b30      	subs	r3, #48	; 0x30
 8006db8:	2b09      	cmp	r3, #9
 8006dba:	d94d      	bls.n	8006e58 <_svfiprintf_r+0x17c>
 8006dbc:	b1b0      	cbz	r0, 8006dec <_svfiprintf_r+0x110>
 8006dbe:	9207      	str	r2, [sp, #28]
 8006dc0:	e014      	b.n	8006dec <_svfiprintf_r+0x110>
 8006dc2:	eba0 0308 	sub.w	r3, r0, r8
 8006dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	46a2      	mov	sl, r4
 8006dd0:	e7d2      	b.n	8006d78 <_svfiprintf_r+0x9c>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	1d19      	adds	r1, r3, #4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	9103      	str	r1, [sp, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	bfbb      	ittet	lt
 8006dde:	425b      	neglt	r3, r3
 8006de0:	f042 0202 	orrlt.w	r2, r2, #2
 8006de4:	9307      	strge	r3, [sp, #28]
 8006de6:	9307      	strlt	r3, [sp, #28]
 8006de8:	bfb8      	it	lt
 8006dea:	9204      	strlt	r2, [sp, #16]
 8006dec:	7823      	ldrb	r3, [r4, #0]
 8006dee:	2b2e      	cmp	r3, #46	; 0x2e
 8006df0:	d10c      	bne.n	8006e0c <_svfiprintf_r+0x130>
 8006df2:	7863      	ldrb	r3, [r4, #1]
 8006df4:	2b2a      	cmp	r3, #42	; 0x2a
 8006df6:	d134      	bne.n	8006e62 <_svfiprintf_r+0x186>
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	1d1a      	adds	r2, r3, #4
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	9203      	str	r2, [sp, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bfb8      	it	lt
 8006e04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e08:	3402      	adds	r4, #2
 8006e0a:	9305      	str	r3, [sp, #20]
 8006e0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006ed4 <_svfiprintf_r+0x1f8>
 8006e10:	7821      	ldrb	r1, [r4, #0]
 8006e12:	2203      	movs	r2, #3
 8006e14:	4650      	mov	r0, sl
 8006e16:	f7f9 f9e3 	bl	80001e0 <memchr>
 8006e1a:	b138      	cbz	r0, 8006e2c <_svfiprintf_r+0x150>
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	eba0 000a 	sub.w	r0, r0, sl
 8006e22:	2240      	movs	r2, #64	; 0x40
 8006e24:	4082      	lsls	r2, r0
 8006e26:	4313      	orrs	r3, r2
 8006e28:	3401      	adds	r4, #1
 8006e2a:	9304      	str	r3, [sp, #16]
 8006e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e30:	4825      	ldr	r0, [pc, #148]	; (8006ec8 <_svfiprintf_r+0x1ec>)
 8006e32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e36:	2206      	movs	r2, #6
 8006e38:	f7f9 f9d2 	bl	80001e0 <memchr>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d038      	beq.n	8006eb2 <_svfiprintf_r+0x1d6>
 8006e40:	4b22      	ldr	r3, [pc, #136]	; (8006ecc <_svfiprintf_r+0x1f0>)
 8006e42:	bb1b      	cbnz	r3, 8006e8c <_svfiprintf_r+0x1b0>
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	3307      	adds	r3, #7
 8006e48:	f023 0307 	bic.w	r3, r3, #7
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	9303      	str	r3, [sp, #12]
 8006e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e52:	4433      	add	r3, r6
 8006e54:	9309      	str	r3, [sp, #36]	; 0x24
 8006e56:	e768      	b.n	8006d2a <_svfiprintf_r+0x4e>
 8006e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	2001      	movs	r0, #1
 8006e60:	e7a6      	b.n	8006db0 <_svfiprintf_r+0xd4>
 8006e62:	2300      	movs	r3, #0
 8006e64:	3401      	adds	r4, #1
 8006e66:	9305      	str	r3, [sp, #20]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	f04f 0c0a 	mov.w	ip, #10
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e74:	3a30      	subs	r2, #48	; 0x30
 8006e76:	2a09      	cmp	r2, #9
 8006e78:	d903      	bls.n	8006e82 <_svfiprintf_r+0x1a6>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0c6      	beq.n	8006e0c <_svfiprintf_r+0x130>
 8006e7e:	9105      	str	r1, [sp, #20]
 8006e80:	e7c4      	b.n	8006e0c <_svfiprintf_r+0x130>
 8006e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e86:	4604      	mov	r4, r0
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e7f0      	b.n	8006e6e <_svfiprintf_r+0x192>
 8006e8c:	ab03      	add	r3, sp, #12
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	462a      	mov	r2, r5
 8006e92:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <_svfiprintf_r+0x1f4>)
 8006e94:	a904      	add	r1, sp, #16
 8006e96:	4638      	mov	r0, r7
 8006e98:	f3af 8000 	nop.w
 8006e9c:	1c42      	adds	r2, r0, #1
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	d1d6      	bne.n	8006e50 <_svfiprintf_r+0x174>
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	065b      	lsls	r3, r3, #25
 8006ea6:	f53f af2d 	bmi.w	8006d04 <_svfiprintf_r+0x28>
 8006eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eac:	b01d      	add	sp, #116	; 0x74
 8006eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb2:	ab03      	add	r3, sp, #12
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <_svfiprintf_r+0x1f4>)
 8006eba:	a904      	add	r1, sp, #16
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	f000 f879 	bl	8006fb4 <_printf_i>
 8006ec2:	e7eb      	b.n	8006e9c <_svfiprintf_r+0x1c0>
 8006ec4:	0800746d 	.word	0x0800746d
 8006ec8:	08007477 	.word	0x08007477
 8006ecc:	00000000 	.word	0x00000000
 8006ed0:	08006c29 	.word	0x08006c29
 8006ed4:	08007473 	.word	0x08007473

08006ed8 <_printf_common>:
 8006ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	4616      	mov	r6, r2
 8006ede:	4699      	mov	r9, r3
 8006ee0:	688a      	ldr	r2, [r1, #8]
 8006ee2:	690b      	ldr	r3, [r1, #16]
 8006ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bfb8      	it	lt
 8006eec:	4613      	movlt	r3, r2
 8006eee:	6033      	str	r3, [r6, #0]
 8006ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	b10a      	cbz	r2, 8006efe <_printf_common+0x26>
 8006efa:	3301      	adds	r3, #1
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	0699      	lsls	r1, r3, #26
 8006f02:	bf42      	ittt	mi
 8006f04:	6833      	ldrmi	r3, [r6, #0]
 8006f06:	3302      	addmi	r3, #2
 8006f08:	6033      	strmi	r3, [r6, #0]
 8006f0a:	6825      	ldr	r5, [r4, #0]
 8006f0c:	f015 0506 	ands.w	r5, r5, #6
 8006f10:	d106      	bne.n	8006f20 <_printf_common+0x48>
 8006f12:	f104 0a19 	add.w	sl, r4, #25
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	6832      	ldr	r2, [r6, #0]
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dc26      	bgt.n	8006f6e <_printf_common+0x96>
 8006f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f24:	1e13      	subs	r3, r2, #0
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	bf18      	it	ne
 8006f2a:	2301      	movne	r3, #1
 8006f2c:	0692      	lsls	r2, r2, #26
 8006f2e:	d42b      	bmi.n	8006f88 <_printf_common+0xb0>
 8006f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f34:	4649      	mov	r1, r9
 8006f36:	4638      	mov	r0, r7
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d01e      	beq.n	8006f7c <_printf_common+0xa4>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	6922      	ldr	r2, [r4, #16]
 8006f42:	f003 0306 	and.w	r3, r3, #6
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	bf02      	ittt	eq
 8006f4a:	68e5      	ldreq	r5, [r4, #12]
 8006f4c:	6833      	ldreq	r3, [r6, #0]
 8006f4e:	1aed      	subeq	r5, r5, r3
 8006f50:	68a3      	ldr	r3, [r4, #8]
 8006f52:	bf0c      	ite	eq
 8006f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f58:	2500      	movne	r5, #0
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	bfc4      	itt	gt
 8006f5e:	1a9b      	subgt	r3, r3, r2
 8006f60:	18ed      	addgt	r5, r5, r3
 8006f62:	2600      	movs	r6, #0
 8006f64:	341a      	adds	r4, #26
 8006f66:	42b5      	cmp	r5, r6
 8006f68:	d11a      	bne.n	8006fa0 <_printf_common+0xc8>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e008      	b.n	8006f80 <_printf_common+0xa8>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4652      	mov	r2, sl
 8006f72:	4649      	mov	r1, r9
 8006f74:	4638      	mov	r0, r7
 8006f76:	47c0      	blx	r8
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d103      	bne.n	8006f84 <_printf_common+0xac>
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f84:	3501      	adds	r5, #1
 8006f86:	e7c6      	b.n	8006f16 <_printf_common+0x3e>
 8006f88:	18e1      	adds	r1, r4, r3
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	2030      	movs	r0, #48	; 0x30
 8006f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f92:	4422      	add	r2, r4
 8006f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f9c:	3302      	adds	r3, #2
 8006f9e:	e7c7      	b.n	8006f30 <_printf_common+0x58>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	47c0      	blx	r8
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0e6      	beq.n	8006f7c <_printf_common+0xa4>
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7d9      	b.n	8006f66 <_printf_common+0x8e>
	...

08006fb4 <_printf_i>:
 8006fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	7e0f      	ldrb	r7, [r1, #24]
 8006fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fbc:	2f78      	cmp	r7, #120	; 0x78
 8006fbe:	4691      	mov	r9, r2
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	469a      	mov	sl, r3
 8006fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fca:	d807      	bhi.n	8006fdc <_printf_i+0x28>
 8006fcc:	2f62      	cmp	r7, #98	; 0x62
 8006fce:	d80a      	bhi.n	8006fe6 <_printf_i+0x32>
 8006fd0:	2f00      	cmp	r7, #0
 8006fd2:	f000 80d4 	beq.w	800717e <_printf_i+0x1ca>
 8006fd6:	2f58      	cmp	r7, #88	; 0x58
 8006fd8:	f000 80c0 	beq.w	800715c <_printf_i+0x1a8>
 8006fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fe4:	e03a      	b.n	800705c <_printf_i+0xa8>
 8006fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fea:	2b15      	cmp	r3, #21
 8006fec:	d8f6      	bhi.n	8006fdc <_printf_i+0x28>
 8006fee:	a101      	add	r1, pc, #4	; (adr r1, 8006ff4 <_printf_i+0x40>)
 8006ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ff4:	0800704d 	.word	0x0800704d
 8006ff8:	08007061 	.word	0x08007061
 8006ffc:	08006fdd 	.word	0x08006fdd
 8007000:	08006fdd 	.word	0x08006fdd
 8007004:	08006fdd 	.word	0x08006fdd
 8007008:	08006fdd 	.word	0x08006fdd
 800700c:	08007061 	.word	0x08007061
 8007010:	08006fdd 	.word	0x08006fdd
 8007014:	08006fdd 	.word	0x08006fdd
 8007018:	08006fdd 	.word	0x08006fdd
 800701c:	08006fdd 	.word	0x08006fdd
 8007020:	08007165 	.word	0x08007165
 8007024:	0800708d 	.word	0x0800708d
 8007028:	0800711f 	.word	0x0800711f
 800702c:	08006fdd 	.word	0x08006fdd
 8007030:	08006fdd 	.word	0x08006fdd
 8007034:	08007187 	.word	0x08007187
 8007038:	08006fdd 	.word	0x08006fdd
 800703c:	0800708d 	.word	0x0800708d
 8007040:	08006fdd 	.word	0x08006fdd
 8007044:	08006fdd 	.word	0x08006fdd
 8007048:	08007127 	.word	0x08007127
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	1d1a      	adds	r2, r3, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	602a      	str	r2, [r5, #0]
 8007054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800705c:	2301      	movs	r3, #1
 800705e:	e09f      	b.n	80071a0 <_printf_i+0x1ec>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	0607      	lsls	r7, r0, #24
 8007066:	f103 0104 	add.w	r1, r3, #4
 800706a:	6029      	str	r1, [r5, #0]
 800706c:	d501      	bpl.n	8007072 <_printf_i+0xbe>
 800706e:	681e      	ldr	r6, [r3, #0]
 8007070:	e003      	b.n	800707a <_printf_i+0xc6>
 8007072:	0646      	lsls	r6, r0, #25
 8007074:	d5fb      	bpl.n	800706e <_printf_i+0xba>
 8007076:	f9b3 6000 	ldrsh.w	r6, [r3]
 800707a:	2e00      	cmp	r6, #0
 800707c:	da03      	bge.n	8007086 <_printf_i+0xd2>
 800707e:	232d      	movs	r3, #45	; 0x2d
 8007080:	4276      	negs	r6, r6
 8007082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007086:	485a      	ldr	r0, [pc, #360]	; (80071f0 <_printf_i+0x23c>)
 8007088:	230a      	movs	r3, #10
 800708a:	e012      	b.n	80070b2 <_printf_i+0xfe>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	1d19      	adds	r1, r3, #4
 8007092:	6029      	str	r1, [r5, #0]
 8007094:	0605      	lsls	r5, r0, #24
 8007096:	d501      	bpl.n	800709c <_printf_i+0xe8>
 8007098:	681e      	ldr	r6, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0xee>
 800709c:	0641      	lsls	r1, r0, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0xe4>
 80070a0:	881e      	ldrh	r6, [r3, #0]
 80070a2:	4853      	ldr	r0, [pc, #332]	; (80071f0 <_printf_i+0x23c>)
 80070a4:	2f6f      	cmp	r7, #111	; 0x6f
 80070a6:	bf0c      	ite	eq
 80070a8:	2308      	moveq	r3, #8
 80070aa:	230a      	movne	r3, #10
 80070ac:	2100      	movs	r1, #0
 80070ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070b2:	6865      	ldr	r5, [r4, #4]
 80070b4:	60a5      	str	r5, [r4, #8]
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	bfa2      	ittt	ge
 80070ba:	6821      	ldrge	r1, [r4, #0]
 80070bc:	f021 0104 	bicge.w	r1, r1, #4
 80070c0:	6021      	strge	r1, [r4, #0]
 80070c2:	b90e      	cbnz	r6, 80070c8 <_printf_i+0x114>
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	d04b      	beq.n	8007160 <_printf_i+0x1ac>
 80070c8:	4615      	mov	r5, r2
 80070ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80070ce:	fb03 6711 	mls	r7, r3, r1, r6
 80070d2:	5dc7      	ldrb	r7, [r0, r7]
 80070d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070d8:	4637      	mov	r7, r6
 80070da:	42bb      	cmp	r3, r7
 80070dc:	460e      	mov	r6, r1
 80070de:	d9f4      	bls.n	80070ca <_printf_i+0x116>
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d10b      	bne.n	80070fc <_printf_i+0x148>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	07de      	lsls	r6, r3, #31
 80070e8:	d508      	bpl.n	80070fc <_printf_i+0x148>
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	6861      	ldr	r1, [r4, #4]
 80070ee:	4299      	cmp	r1, r3
 80070f0:	bfde      	ittt	le
 80070f2:	2330      	movle	r3, #48	; 0x30
 80070f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80070fc:	1b52      	subs	r2, r2, r5
 80070fe:	6122      	str	r2, [r4, #16]
 8007100:	f8cd a000 	str.w	sl, [sp]
 8007104:	464b      	mov	r3, r9
 8007106:	aa03      	add	r2, sp, #12
 8007108:	4621      	mov	r1, r4
 800710a:	4640      	mov	r0, r8
 800710c:	f7ff fee4 	bl	8006ed8 <_printf_common>
 8007110:	3001      	adds	r0, #1
 8007112:	d14a      	bne.n	80071aa <_printf_i+0x1f6>
 8007114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007118:	b004      	add	sp, #16
 800711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	f043 0320 	orr.w	r3, r3, #32
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	4833      	ldr	r0, [pc, #204]	; (80071f4 <_printf_i+0x240>)
 8007128:	2778      	movs	r7, #120	; 0x78
 800712a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	6829      	ldr	r1, [r5, #0]
 8007132:	061f      	lsls	r7, r3, #24
 8007134:	f851 6b04 	ldr.w	r6, [r1], #4
 8007138:	d402      	bmi.n	8007140 <_printf_i+0x18c>
 800713a:	065f      	lsls	r7, r3, #25
 800713c:	bf48      	it	mi
 800713e:	b2b6      	uxthmi	r6, r6
 8007140:	07df      	lsls	r7, r3, #31
 8007142:	bf48      	it	mi
 8007144:	f043 0320 	orrmi.w	r3, r3, #32
 8007148:	6029      	str	r1, [r5, #0]
 800714a:	bf48      	it	mi
 800714c:	6023      	strmi	r3, [r4, #0]
 800714e:	b91e      	cbnz	r6, 8007158 <_printf_i+0x1a4>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	f023 0320 	bic.w	r3, r3, #32
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	2310      	movs	r3, #16
 800715a:	e7a7      	b.n	80070ac <_printf_i+0xf8>
 800715c:	4824      	ldr	r0, [pc, #144]	; (80071f0 <_printf_i+0x23c>)
 800715e:	e7e4      	b.n	800712a <_printf_i+0x176>
 8007160:	4615      	mov	r5, r2
 8007162:	e7bd      	b.n	80070e0 <_printf_i+0x12c>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	6826      	ldr	r6, [r4, #0]
 8007168:	6961      	ldr	r1, [r4, #20]
 800716a:	1d18      	adds	r0, r3, #4
 800716c:	6028      	str	r0, [r5, #0]
 800716e:	0635      	lsls	r5, r6, #24
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	d501      	bpl.n	8007178 <_printf_i+0x1c4>
 8007174:	6019      	str	r1, [r3, #0]
 8007176:	e002      	b.n	800717e <_printf_i+0x1ca>
 8007178:	0670      	lsls	r0, r6, #25
 800717a:	d5fb      	bpl.n	8007174 <_printf_i+0x1c0>
 800717c:	8019      	strh	r1, [r3, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	4615      	mov	r5, r2
 8007184:	e7bc      	b.n	8007100 <_printf_i+0x14c>
 8007186:	682b      	ldr	r3, [r5, #0]
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	602a      	str	r2, [r5, #0]
 800718c:	681d      	ldr	r5, [r3, #0]
 800718e:	6862      	ldr	r2, [r4, #4]
 8007190:	2100      	movs	r1, #0
 8007192:	4628      	mov	r0, r5
 8007194:	f7f9 f824 	bl	80001e0 <memchr>
 8007198:	b108      	cbz	r0, 800719e <_printf_i+0x1ea>
 800719a:	1b40      	subs	r0, r0, r5
 800719c:	6060      	str	r0, [r4, #4]
 800719e:	6863      	ldr	r3, [r4, #4]
 80071a0:	6123      	str	r3, [r4, #16]
 80071a2:	2300      	movs	r3, #0
 80071a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a8:	e7aa      	b.n	8007100 <_printf_i+0x14c>
 80071aa:	6923      	ldr	r3, [r4, #16]
 80071ac:	462a      	mov	r2, r5
 80071ae:	4649      	mov	r1, r9
 80071b0:	4640      	mov	r0, r8
 80071b2:	47d0      	blx	sl
 80071b4:	3001      	adds	r0, #1
 80071b6:	d0ad      	beq.n	8007114 <_printf_i+0x160>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	079b      	lsls	r3, r3, #30
 80071bc:	d413      	bmi.n	80071e6 <_printf_i+0x232>
 80071be:	68e0      	ldr	r0, [r4, #12]
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	4298      	cmp	r0, r3
 80071c4:	bfb8      	it	lt
 80071c6:	4618      	movlt	r0, r3
 80071c8:	e7a6      	b.n	8007118 <_printf_i+0x164>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4632      	mov	r2, r6
 80071ce:	4649      	mov	r1, r9
 80071d0:	4640      	mov	r0, r8
 80071d2:	47d0      	blx	sl
 80071d4:	3001      	adds	r0, #1
 80071d6:	d09d      	beq.n	8007114 <_printf_i+0x160>
 80071d8:	3501      	adds	r5, #1
 80071da:	68e3      	ldr	r3, [r4, #12]
 80071dc:	9903      	ldr	r1, [sp, #12]
 80071de:	1a5b      	subs	r3, r3, r1
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dcf2      	bgt.n	80071ca <_printf_i+0x216>
 80071e4:	e7eb      	b.n	80071be <_printf_i+0x20a>
 80071e6:	2500      	movs	r5, #0
 80071e8:	f104 0619 	add.w	r6, r4, #25
 80071ec:	e7f5      	b.n	80071da <_printf_i+0x226>
 80071ee:	bf00      	nop
 80071f0:	0800747e 	.word	0x0800747e
 80071f4:	0800748f 	.word	0x0800748f

080071f8 <memmove>:
 80071f8:	4288      	cmp	r0, r1
 80071fa:	b510      	push	{r4, lr}
 80071fc:	eb01 0402 	add.w	r4, r1, r2
 8007200:	d902      	bls.n	8007208 <memmove+0x10>
 8007202:	4284      	cmp	r4, r0
 8007204:	4623      	mov	r3, r4
 8007206:	d807      	bhi.n	8007218 <memmove+0x20>
 8007208:	1e43      	subs	r3, r0, #1
 800720a:	42a1      	cmp	r1, r4
 800720c:	d008      	beq.n	8007220 <memmove+0x28>
 800720e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007216:	e7f8      	b.n	800720a <memmove+0x12>
 8007218:	4402      	add	r2, r0
 800721a:	4601      	mov	r1, r0
 800721c:	428a      	cmp	r2, r1
 800721e:	d100      	bne.n	8007222 <memmove+0x2a>
 8007220:	bd10      	pop	{r4, pc}
 8007222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800722a:	e7f7      	b.n	800721c <memmove+0x24>

0800722c <_sbrk_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4d06      	ldr	r5, [pc, #24]	; (8007248 <_sbrk_r+0x1c>)
 8007230:	2300      	movs	r3, #0
 8007232:	4604      	mov	r4, r0
 8007234:	4608      	mov	r0, r1
 8007236:	602b      	str	r3, [r5, #0]
 8007238:	f7fa fc42 	bl	8001ac0 <_sbrk>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d102      	bne.n	8007246 <_sbrk_r+0x1a>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	b103      	cbz	r3, 8007246 <_sbrk_r+0x1a>
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	20000628 	.word	0x20000628

0800724c <memcpy>:
 800724c:	440a      	add	r2, r1
 800724e:	4291      	cmp	r1, r2
 8007250:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007254:	d100      	bne.n	8007258 <memcpy+0xc>
 8007256:	4770      	bx	lr
 8007258:	b510      	push	{r4, lr}
 800725a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800725e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007262:	4291      	cmp	r1, r2
 8007264:	d1f9      	bne.n	800725a <memcpy+0xe>
 8007266:	bd10      	pop	{r4, pc}

08007268 <_realloc_r>:
 8007268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726c:	4680      	mov	r8, r0
 800726e:	4614      	mov	r4, r2
 8007270:	460e      	mov	r6, r1
 8007272:	b921      	cbnz	r1, 800727e <_realloc_r+0x16>
 8007274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007278:	4611      	mov	r1, r2
 800727a:	f7ff bc49 	b.w	8006b10 <_malloc_r>
 800727e:	b92a      	cbnz	r2, 800728c <_realloc_r+0x24>
 8007280:	f7ff fbda 	bl	8006a38 <_free_r>
 8007284:	4625      	mov	r5, r4
 8007286:	4628      	mov	r0, r5
 8007288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800728c:	f000 f81b 	bl	80072c6 <_malloc_usable_size_r>
 8007290:	4284      	cmp	r4, r0
 8007292:	4607      	mov	r7, r0
 8007294:	d802      	bhi.n	800729c <_realloc_r+0x34>
 8007296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800729a:	d812      	bhi.n	80072c2 <_realloc_r+0x5a>
 800729c:	4621      	mov	r1, r4
 800729e:	4640      	mov	r0, r8
 80072a0:	f7ff fc36 	bl	8006b10 <_malloc_r>
 80072a4:	4605      	mov	r5, r0
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d0ed      	beq.n	8007286 <_realloc_r+0x1e>
 80072aa:	42bc      	cmp	r4, r7
 80072ac:	4622      	mov	r2, r4
 80072ae:	4631      	mov	r1, r6
 80072b0:	bf28      	it	cs
 80072b2:	463a      	movcs	r2, r7
 80072b4:	f7ff ffca 	bl	800724c <memcpy>
 80072b8:	4631      	mov	r1, r6
 80072ba:	4640      	mov	r0, r8
 80072bc:	f7ff fbbc 	bl	8006a38 <_free_r>
 80072c0:	e7e1      	b.n	8007286 <_realloc_r+0x1e>
 80072c2:	4635      	mov	r5, r6
 80072c4:	e7df      	b.n	8007286 <_realloc_r+0x1e>

080072c6 <_malloc_usable_size_r>:
 80072c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ca:	1f18      	subs	r0, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	bfbc      	itt	lt
 80072d0:	580b      	ldrlt	r3, [r1, r0]
 80072d2:	18c0      	addlt	r0, r0, r3
 80072d4:	4770      	bx	lr
	...

080072d8 <_init>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	bf00      	nop
 80072dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072de:	bc08      	pop	{r3}
 80072e0:	469e      	mov	lr, r3
 80072e2:	4770      	bx	lr

080072e4 <_fini>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr
